name: Merge commits to next branch

on:
  schedule:
    - cron: "0 */2 * * 1-5" # Cron timezone is in UTC

env:
  TARGET_BRANCH: next
  SOURCE_BRANCH: main
  USERNAME: msfluid-bot
  EMAIL: banana-bot@outlook.com

jobs:
  check-pr:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'microsoft'
    steps:
      - run: npm install @octokit/core
      - name: Check PR exists using octokit
        uses: actions/github-script@7a5c598405937d486b0331594b5da2b14db670da # pin@v6
        id: check-pr-exists
        with:
          token: ${{ secrets.BOT_MAIN_NEXT_WORKFLOW_PAT }}
          script: |
            const path = require('path');
            const func = require(path.resolve('./.github/gitApi.ts'));
            return func.prExists(`${{ secrets.GITHUB_TOKEN }}`);
    outputs:
      EXISTS: ${{ steps.check-pr-exists.outputs.result }}
  dequeue:
    runs-on: ubuntu-latest
    needs: [ check-pr ]
    if: needs.check-pr.outputs.EXISTS == 'false'
    steps:
      - run: npm install @azure/storage-queue
      - uses: actions/github-script@7a5c598405937d486b0331594b5da2b14db670da # pin@v6
        id: dequeue-message
        with:
          script: |
            const path = require('path');
            const func = require(path.resolve('./.github/queueApi.ts'));
            return func.dequeue(`${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}`, `${{ secrets.AZURE_QUEUE_NAME }}`);
    outputs:
      LABEL: ${{ fromJSON(steps.dequeue-message.outputs.result).label }}
      AUTHOR: ${{ fromJSON(steps.dequeue-message.outputs.result).author }}
      SHA: ${{ fromJSON(steps.dequeue-message.outputs.result).sha }}
  create-branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: write
      checks: write
      issues: write
      pull-requests: write
      statuses: write
    needs: [ dequeue ]
    if: (needs.dequeue.result) == 'success'
    steps:
      - name: Git checkout
        if: ${{needs.dequeue.outputs.LABEL}} == 'queued'
        uses: actions/checkout@7884fcad6b5d53d10323aee724dc68d8b9096a2e # pin@v2
        with:
          token: ${{ secrets.BOT_MAIN_NEXT_WORKFLOW_PAT }}
          fetch-depth: '0'
      - name: Create branch
        if: ${{needs.dequeue.outputs.LABEL}} == 'queued'
        run: |
          git config user.name $USERNAME
          git config user.email $EMAIL
          git fetch origin
          git checkout $SOURCE_BRANCH
          git checkout -b main-next-${{needs.dequeue.outputs.SHA}}
          git fetch --all
          git reset --hard ${{needs.dequeue.outputs.SHA}}
          git push --set-upstream origin main-next-${{needs.dequeue.outputs.SHA}}
  pull-request:
    runs-on: ubuntu-latest
    concurrency:
      group: group-pr
      cancel-in-progress: false
    needs: [ create-branch, dequeue ]
    if: needs.create-branch.result == 'success'
    steps:
      - run: npm install @octokit/core
      - name: Create PR using octokit
        uses: actions/github-script@7a5c598405937d486b0331594b5da2b14db670da # pin@v6
        with:
          token: ${{ secrets.BOT_MAIN_NEXT_WORKFLOW_PAT }}
          script: |
            const path = require('path');
            const func = require(path.resolve('./.github/gitApi.ts'));
            return func.createPR(`${{ secrets.GITHUB_TOKEN }}`, `sha`, $SOURCE_BRANCH, $TARGET_BRANCH, author, reviewers);
  remove-from-queue:
    runs-on: ubuntu-latest
    concurrency:
      group: group-pr
      cancel-in-progress: false
    needs: [ pull-request ]
    if: needs.pull-request.result == 'success'
    steps:
      - uses: actions/checkout@7884fcad6b5d53d10323aee724dc68d8b9096a2e # pin@v2
      - uses: actions/setup-node@1f8c6b94b26d0feae1e387ca63ccbdc44d27b561 # pin@v2
        with:
          node-version: 14
      - run: npm ci
      - run: npm install @azure/storage-queue
      - uses: actions/github-script@7a5c598405937d486b0331594b5da2b14db670da # pin@v6
        with:
          script: |
            const path = require('path');
            const func = require(path.resolve('./.github/queueApi.ts'));
            return func.removeQueue(`${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}`, `${{ secrets.AZURE_QUEUE_NAME }}`);
