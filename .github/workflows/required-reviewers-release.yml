# required-reviewers-release.yml
# Checks if a release branch PR is approved by a member of FluidFramework-ReleaseApprovers. PRs targeting non-release
# branches are skipped, and

name: Required release approval
on:
  pull_request:
    types:
      # This is triggered when the PR is opened. This is not strictly needed since the PR approval state is really
      # what's evaluated. However, running the job on PR open causes an immediate failure which will make it clearer to
      # the PR author what they need to do to unblock the merge.
      - opened

      # This is triggered when the base branch changes; handles the case where you open a PR against one branch
      # then change the base branch to a release branch.
      - edited

      # This is triggered when the PR branch has new commits pushed to it.
      - synchronize
    branches:
      - release/client/**
      - release/server/**
      - test/release/**

  # This workflow needs to run on review changes because it evaluates the review state.
  pull_request_review:
    types:
      - submitted
      - dismissed

permissions:
  pull-requests: read

jobs:
  check_branch:
    name: Check target branch
    runs-on: ubuntu-latest
    outputs:
      # This output will be set to true if the target branch is a release branch; false otherwise.
      is_release_branch: ${{ steps.is-release-branch.outputs.is_release_branch || steps.not-release-branch.outputs.is_release_branch }}
    steps:
      - name: Target is a release branch
        id: is-release-branch
        if: |
          startsWith(github.event.pull_request.base.ref, 'release/client/') ||
          startsWith(github.event.pull_request.base.ref, 'release/server/') ||
          startsWith(github.event.pull_request.base.ref, 'test/release/')
        run: |
          echo "is_release_branch=true" >> $GITHUB_OUTPUT
          echo ":ship: Release branch detected" >> $GITHUB_STEP_SUMMARY
      - name: Target is not a release branch
        id: not-release-branch
        if: |
          !(startsWith(github.event.pull_request.base.ref, 'release/client/') ||
          startsWith(github.event.pull_request.base.ref, 'release/server/') ||
          startsWith(github.event.pull_request.base.ref, 'test/release/'))
        run: |
          echo "is_release_branch=false" >> $GITHUB_OUTPUT
          echo ":no_entry_sign: No release branch detected" >> $GITHUB_STEP_SUMMARY

  not_release_branch:
    name: Check approval requirements
    needs: check_branch
    runs-on: ubuntu-latest
    steps:
      - name: Approval is required
        if: needs.check_branch.outputs.is_release_branch == 'true'
        run: |
          echo ":vertical_traffic_light: Approval is required" >> $GITHUB_STEP_SUMMARY
      - name: No special approval requirements
        if: needs.check_branch.outputs.is_release_branch != 'true'
        run: |
          echo ":white_check_mark: No special approval required!" >> $GITHUB_STEP_SUMMARY

  check_approval:
    name: Approved by required reviewers
    needs: [check_branch, not_release_branch]
    if: needs.check_branch.outputs.is_release_branch == 'true'
    runs-on: ubuntu-latest
    steps:
      # release notes: https://github.com/actions/checkout/releases/tag/v4.1.7
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # ratchet:actions/checkout@v4
        with:
          persist-credentials: false
          submodules: false
          # The pull_request_review event's default ref is the source branch - the one from the PR author. We don't want
          # to build build-tools from that branch, though, because doing so would be a security risk. So instead, we
          # check out the repo at the base ref.
          ref: ${{ github.event.pull_request.base.ref }}

      # install and configure node, pnpm and the changeset tools
      # release notes: https://github.com/pnpm/action-setup/releases/tag/v4.0.0
      - uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # ratchet:pnpm/action-setup@v4

      # release notes: https://github.com/actions/setup-node/releases/tag/v4.0.3
      - uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # ratchet:actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: "pnpm"
          cache-dependency-path: pnpm-lock.yaml

      - name: Install Fluid build tools
        continue-on-error: true
        run: |
          cd build-tools
          pnpm install --frozen-lockfile
          pnpm run build:compile
          # We want flub available to call, so we run npm link in the build-cli package, which creates shims that are avilable on the PATH
          # Use npm link instead of pnpm link because it handles bins better
          cd packages/build-cli
          npm link

      - name: Check build-tools installation
        run: |
          # Info for debugging
          which flub
          flub --help
          flub commands

      - name: Check PR approval
        env:
          # The standard token doesn't have org:read permissions, and that scope can't be added using permissions in
          # the workflow.
          GITHUB_TOKEN: ${{ secrets.ORGANIZATION_READ_PAT }}
        run: |
          # This command will fail with an error if the PR is not approved, which
          # will in turn cause the CI job to fail.
          flub check prApproval \
            --pr ${{ github.event.pull_request.number }} \
            --repo ${{ github.repository }} \
            --team FluidFramework-ReleaseApprovers
