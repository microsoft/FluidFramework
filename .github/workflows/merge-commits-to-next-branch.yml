name: Merge commits to next branch

on:
  push:
    branch: [ main ]

env:
  TARGET_BRANCH: test_next
  SOURCE_BRANCH: main

jobs:
  dequeue:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - run: npm ci
      - run: npm install @azure/storage-queue
      - uses: actions/github-script@v6
        id: deque-message
        with:
          script: |
            const { QueueClient, QueueServiceClient } = require('@azure/storage-queue')
            const connectionString = `${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}`;
            const queueName = `${{ secrets.AZURE_QUEUE_NAME }}`;
            const queueServiceClient = QueueServiceClient.fromConnectionString(connectionString);
            const queueClient = queueServiceClient.getQueueClient(queueName);
            var receivedMessages = await queueClient.receiveMessages();
            const message = receivedMessages.receivedMessageItems[0];
            const firstMessage = JSON.parse(message.messageText);
            return firstMessage;
    outputs:
      LABEL: ${{ fromJSON(steps.deque-message.outputs.result).label }}
      AUTHOR: ${{ fromJSON(steps.deque-message.outputs.result).author }}
      SHA: ${{ fromJSON(steps.deque-message.outputs.result).sha }}
  create-branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    needs: [ dequeue ]
    if: (needs.dequeue.result) == 'success'
    steps:
      - run:
          echo ${{needs.dequeue.outputs.LABEL}}
      - name: Git checkout
        if: ${{needs.dequeue.outputs.LABEL}} == 'queued'
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
          fetch-depth: '0'
      - name: Create branch
        id: create
        if: ${{needs.dequeue.outputs.LABEL}} == 'queued'
        run: |
          git config user.name "Automation Bot"
          git config user.email "<>"
          git fetch origin
          git checkout $TARGET
          git checkout -b main-next-${{needs.dequeue.outputs.SHA}}
          git fetch --all
          git merge ${{needs.dequeue.outputs.SHA}} --no-ff
          git push --set-upstream origin main-next-${{needs.dequeue.outputs.SHA}}
  createPullRequest:
    runs-on: ubuntu-latest
    needs: [ create-branch, dequeue ]
    if: needs.create-branch.result == 'success'
    steps:
      - run: npm install @octokit/core
      - name: Create PR using octokit
        uses: actions/github-script@v6
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
          script: | # add assignee to PR
            const { Octokit } = require("@octokit/core");
            const token = `${{ secrets.GITHUB_TOKEN }}`;
            const sha = 'main-next-${{needs.dequeue.outputs.SHA}}';
            const octokit = new Octokit({ auth: token })
            const newPr = await octokit.request('POST /repos/{owner}/{repo}/pulls', {
              owner: 'sonalivdeshpande',
              repo: 'FluidFramework',
              title: 'Main Next Integrate',
              body: 'This commit is queued for getting merged with the next branch. Please make sure to resolve any conflicts/CI failures seen on this PR. Thank you!',
              head: sha,
              base: 'next'
            });
  remove-from-queue:
    runs-on: ubuntu-latest
    needs: [ createPullRequest, dequeue ]
    if: ( needs.createPullRequest.result == 'success' )
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - run: npm ci
      - run: npm install @azure/storage-queue
      - uses: actions/github-script@v6
        with:
          script: |
            const { QueueClient, QueueServiceClient } = require('@azure/storage-queue')
            const connectionString = `${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}`;
            const queueServiceClient = QueueServiceClient.fromConnectionString(connectionString);
            const queueName = `${{ secrets.AZURE_QUEUE_NAME }}`;
            const queueClient = queueServiceClient.getQueueClient(queueName);
            const receivedMessages = await queueClient.receiveMessages();
            var message = receivedMessages.receivedMessageItems[0];
            console.log("message: ", message);
            await queueClient.deleteMessage(message.messageId, message.popReceipt);
