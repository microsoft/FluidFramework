name: Merge commits to next branch

on:
  schedule:
    - cron: "0 */2 * * *"

env:
  COMMIT_INFO: commit-info

jobs:
  dequeue:
    runs-on: ubuntu-latest
    steps:
      - name: Install Azure Storage
        run: npm i -g @azure/storage-queue
      - name: Check queue first item
        uses: actions/github-script@v6
        with:
          script: |
              const { QueueClient, QueueServiceClient } = require("@azure/storage-queue");
              const connectionString = `${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}`;
              const queueName = `${{ secrets.AZURE_QUEUE_NAME }}`;
              const queueServiceClient = QueueServiceClient.fromConnectionString(connectionString);
              const queueClient = queueServiceClient.getQueueClient(queueName);
              var receivedMessages = await queueClient.receiveMessages();
              const message = receivedMessages.receivedMessageItems[0];
              $COMMIT_INFO = JSON.parse(message.messageText);
  create-branch:
    runs-on: ubuntu-latest
    if: ( $COMMIT_INFO.label == 'queued' )
    steps:
      - name: Create branch
        uses: actions/github-script@v6
        with:
          script: |
            git fetch origin
            git checkout test_next
            git checkout -b main-next-$COMMIT_INFO.sha
            git merge $COMMIT_INFO.sha --no-ff
  create-bug:
    runs-on: ubuntu-latest
    needs: [ create-branch ]
    if: ( $COMMIT_INFO.label == 'queued' && needs.create-branch.result == 'failure' )
    steps:
      - name: Import Octokit
        run: npm i -g octokit 
      - name: Create Issue 
        uses: actions/github-script@v6
        with:
          script: |
            const octokit = new Octokit({
              auth: '${{ secrets.GITHUB_TOKEN }}'
            })
            await octokit.request('POST /repos/{owner}/{repo}/issues', {
              owner: 'microsoft',
              repo: 'FluidFramework',
              title: '[Main:Next] Merge Conflicts exists for $COMMIT_INFO.sha',
              body: 'There are merge conflicts while integrating $COMMIT_INFO.sha. You can perform the following steps: 
                1. git checkout next
                2. git checkout -b my_new_branch
                3. git cherry-pick $COMMIT_INFO.sha.
                Later, resolve the merge conflicts and open a pull request against the next branch. Thank you!',
              assignees: [ $COMMIT_INFO.author ],
              milestone: 1,
              labels: [ 'bug', 'high-priority', 'main-next-integration' ]
  createPullRequest:
    runs-on: ubuntu-latest
    needs: [ create-branch ]
    if: ( $COMMIT_INFO.label == 'queued' && needs.create-branch.result == 'success' )
    steps:
      - name: Create Pull Request
        uses: actions/github-script@v6
        with:
          script: |
            const { repo, owner } = context.repo;
            const newPr = await github.rest.pulls.create({
              title: '[Main:Next] Integrate $COMMIT_INFO.sha',
              $COMMIT_INFO.author,
              repo,
              head: 'main-next-$COMMIT_INFO.sha',
              base: 'test_next',
              body: [
                'This PR is auto-generated by',
                '[actions/github-script](https://github.com/actions/github-script).'
              ].join('\n')
            });
            github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: newPr.data.number,
              labels: ['merge-with-next', 'automated pr']
            });
  update-commit-status:
    runs-on: ubuntu-latest
    needs: [createPullRequest]
    if: ( needs.createPullRequest.result == 'success' )
    steps:
      - name: Install Azure Queue
        run: npm i -g @azure/storage-queue
      - name: Update Queue label
        uses: actions/github-script@v6
        with:
          script: |
            const { QueueClient, QueueServiceClient } = require("@azure/storage-queue");
            const connectionString = `${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}`;
            const queueServiceClient = QueueServiceClient.fromConnectionString(connectionString);
            const queueName = `${{ secrets.AZURE_QUEUE_NAME }}`;
            const queueClient = queueServiceClient.getQueueClient(queueName);
            var receivedMessages = await queueClient.receiveMessages();
            const firstMessage = receivedMessages.receivedMessageItems[0];
            await queueClient.updateMessage(
                firstMessage.sha,
                firstMessage.assignee,
                'in-progress');
  remove-from-queue:
    runs-on: ubuntu-latest
    needs: [createPullRequest]
    if: ( needs.createPullRequest.result == 'success' ) && (needs.createPullRequest.result.action == 'closed' || needs.createPullRequest.result.merged == 'true' )
    steps:
      - name: Install Azure Queue
        run: npm i -g @azure/storage-queue
      - name: Remove from Queue
        uses: actions/github-script@v6
        with:
          script: |
            const { QueueClient, QueueServiceClient } = require("@azure/storage-queue");
            const connectionString = `${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}`;
            const queueServiceClient = QueueServiceClient.fromConnectionString(connectionString);
            const queueName = `${{ secrets.AZURE_QUEUE_NAME }}`;
            const queueClient = queueServiceClient.getQueueClient(queueName);
            receivedMessages = await queueClient.receiveMessages();
            var message = receivedMessages.receivedMessageItems[0];
            await queueClient.deleteMessage(message.messageId, message.popReceipt);
