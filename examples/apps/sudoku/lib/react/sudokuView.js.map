{"version":3,"file":"sudokuView.js","sourceRoot":"","sources":["../../src/react/sudokuView.tsx"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ISharedMap } from \"@fluidframework/map\";\nimport React from \"react\";\nimport { Coordinate, CoordinateString } from \"../helpers/coordinate\";\nimport { loadPuzzle, PUZZLE_INDEXES } from \"../helpers/puzzles\";\nimport { CellState, SudokuCell } from \"../helpers/sudokuCell\";\n\n/**\n * Props for the SudokuView React component.\n */\nexport interface ISudokuViewProps {\n    puzzle: ISharedMap;\n    clientId: string;\n    clientPresence?: ISharedMap;\n    setPresence?(cellCoord: CoordinateString, reset: boolean): void;\n}\n\n/**\n * Renders a Sudoku grid and UI for resetting/loading puzzles and changing the theme.\n * @param props - Props for the component\n */\nexport function SudokuView(props: ISudokuViewProps): JSX.Element {\n    const [theme, setTheme] = React.useState(\"default\");\n    const handleResetButton = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        props.puzzle.forEach((value: SudokuCell, key: CoordinateString) => {\n            if (!value.fixed && value.value !== 0) {\n                value.value = 0;\n                props.puzzle.set(key, value);\n            }\n        });\n    };\n\n    const loadPuzzle1 = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        loadPuzzle(0, props.puzzle);\n    };\n\n    const loadPuzzle2 = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        loadPuzzle(1, props.puzzle);\n    };\n\n    return (\n        <div className={`sudoku ${theme}`}>\n            <div className=\"sudoku-wrapper\">\n                <SimpleTable {...props} />\n                <div className=\"sudoku-buttons\">\n                    <span className=\"sudoku-theme-select\">\n                        <label htmlFor=\"theme-select\">Theme: </label>\n                        <select\n                            value={theme}\n                            onChange={onThemeChange}\n                            id=\"theme-select\"\n                            name=\"theme\">\n                            <option aria-selected={theme === \"default\"} value=\"default\">\n                                Default Theme{\" \"}\n                            </option>\n                            <option aria-selected={theme === \"dark-theme\"} value=\"dark-theme\">\n                                Dark Theme\n                            </option>\n                        </select>\n                    </span>\n\n                    <span className=\"sudoku-reset\">\n                        <button onClick={handleResetButton}>Reset</button>\n                    </span>\n\n                    <span className=\"sudoku-load\">\n                        Load:\n                        <button onClick={loadPuzzle1}>Puzzle 1</button>\n                        <button onClick={loadPuzzle2}>Puzzle 2</button>\n                    </span>\n                </div>\n            </div>\n        </div>\n    );\n\n    function onThemeChange(e: any) {\n        setTheme(e.target.value);\n    }\n}\n\nfunction SimpleTable(props: ISudokuViewProps) {\n    const coordinateDataAttributeName = \"cellcoordinate\";\n\n    const getCellInputElement = (coord: CoordinateString): HTMLInputElement =>\n        document.getElementById(`${props.clientId}-${coord}`) as HTMLInputElement;\n\n    const handleInputFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n        const coord = e.target.dataset[coordinateDataAttributeName];\n        if (props.setPresence) {\n            if (coord !== undefined) {\n                props.setPresence(coord, false);\n            }\n        }\n    };\n\n    const handleInputBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n        const coord = e.target.dataset[coordinateDataAttributeName];\n        if (props.setPresence) {\n            if (coord !== undefined) {\n                props.setPresence(coord, true);\n            }\n        }\n    };\n\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        let keyString = e.key;\n        let coord = e.currentTarget.dataset[coordinateDataAttributeName] as string;\n        coord = coord === undefined ? \"\" : coord;\n        const cell = props.puzzle.get<SudokuCell>(coord);\n\n        switch (keyString) {\n            case \"Backspace\":\n            case \"Delete\":\n            case \"Del\":\n            case \"0\":\n                keyString = \"0\";\n            // Intentional fall-through\n            case \"1\":\n            case \"2\":\n            case \"3\":\n            case \"4\":\n            case \"5\":\n            case \"6\":\n            case \"7\":\n            case \"8\":\n            case \"9\":\n                if (cell.fixed) {\n                    return;\n                }\n                numericInput(keyString, coord);\n                return;\n            default:\n                moveCell(keyString, coord);\n                return;\n        }\n    };\n\n    const numericInput = (keyString: string, coord: string) => {\n        let valueToSet = Number(keyString);\n        valueToSet = Number.isNaN(valueToSet) ? 0 : valueToSet;\n        if (valueToSet >= 10 || valueToSet < 0) {\n            return;\n        }\n\n        if (coord !== undefined) {\n            const cellInputElement = getCellInputElement(coord);\n            cellInputElement.value = keyString;\n\n            const toSet = props.puzzle.get<SudokuCell>(coord);\n            if (toSet.fixed) {\n                return;\n            }\n            toSet.value = valueToSet;\n            toSet.isCorrect = valueToSet === toSet.correctValue;\n            props.puzzle.set(coord, toSet);\n        }\n    };\n\n    const moveCell = (keyString: string, coordIn: string) => {\n        const coord = coordIn;\n        let newCoord = coordIn;\n        switch (keyString) {\n            case \"ArrowDown\":\n            case \"s\":\n                newCoord = Coordinate.moveDown(coord);\n                break;\n            case \"ArrowUp\":\n            case \"w\":\n                newCoord = Coordinate.moveUp(coord);\n                break;\n            case \"ArrowLeft\":\n            case \"a\":\n                newCoord = Coordinate.moveLeft(coord);\n                break;\n            case \"ArrowRight\":\n            case \"d\":\n                newCoord = Coordinate.moveRight(coord);\n                break;\n            default:\n                newCoord = coord;\n        }\n\n        const newCell = getCellInputElement(newCoord);\n        newCell.focus();\n    };\n\n    const renderGridRows = () => {\n        const rows = PUZZLE_INDEXES.map(row => {\n            const columns = PUZZLE_INDEXES.map(col => {\n                const coord = Coordinate.asString(row, col);\n                const currentCell = props.puzzle.get<SudokuCell>(coord);\n                const state = SudokuCell.getState(currentCell);\n                let inputClasses: string;\n                switch (state) {\n                    case CellState.correct:\n                        inputClasses = `sudoku-input correct`;\n                        break;\n                    case CellState.wrong:\n                        inputClasses = `sudoku-input wrong`;\n                        break;\n                    default:\n                        inputClasses = `sudoku-input`;\n                }\n\n                if (props.clientPresence) {\n                    const cellOwner = props.clientPresence.get<string>(coord);\n                    if (cellOwner && cellOwner !== props.clientId) {\n                        inputClasses += \" presence\";\n                    }\n                }\n                // Const disabled = currentCell.fixed === true;\n                return (\n                    <td className=\"sudoku-cell\" key={coord} style={getCellBorderStyles(coord)}>\n                        <input\n                            id={`${props.clientId}-${coord}`}\n                            className={inputClasses}\n                            type=\"text\"\n                            readOnly={true}\n                            onFocus={handleInputFocus}\n                            onBlur={handleInputBlur}\n                            onKeyDown={handleKeyDown}\n                            value={SudokuCell.getDisplayString(currentCell)}\n                            max={1}\n                            // Disabled={disabled}\n                            data-cellcoordinate={coord}\n                        />\n                    </td>\n                );\n            });\n            return <tr key={row.toString()}>{columns}</tr>;\n        });\n        return rows;\n    };\n\n    return (\n        <table style={{ border: \"none\" }}>\n            <tbody>{renderGridRows()}</tbody>\n        </table>\n    );\n}\n\n/**\n * Returns CSS border properties to use when rendering a cell. This helps give the grid that authentic Sudoku look.\n */\nfunction getCellBorderStyles(coord: CoordinateString): React.CSSProperties {\n    const borderStyle = \"solid medium\";\n    const styles: React.CSSProperties = {\n        borderTop: \"none\",\n        borderBottom: \"none\",\n        borderLeft: \"none\",\n        borderRight: \"none\",\n        borderColor: \"var(--neutralPrimaryAlt)\",\n    };\n    const [row, col] = Coordinate.asArrayNumbers(coord);\n\n    switch (row) {\n        case 0:\n        case 3:\n        case 6:\n            styles.borderTop = borderStyle;\n            styles.paddingTop = 4;\n            break;\n        case 2:\n        case 5:\n        case 8:\n            styles.borderBottom = borderStyle;\n            styles.paddingBottom = 4;\n            break;\n        default: // Nothing\n    }\n\n    switch (col) {\n        case 0:\n        case 3:\n        case 6:\n            styles.borderLeft = borderStyle;\n            styles.paddingLeft = 4;\n            break;\n        case 2:\n        case 5:\n        case 8:\n            styles.borderRight = borderStyle;\n            styles.paddingRight = 4;\n            break;\n        default: // Nothing\n    }\n    return styles;\n}\n"]}