{"version":3,"file":"coordinate.js","sourceRoot":"","sources":["../../src/helpers/coordinate.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAQH,kEAAkE;AAClE,MAAM,OAAO,UAAU;IAMnB;;;;OAIG;IACI,MAAM,CAAC,OAAO,CAAC,KAAuB;QACzC,MAAM,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QAChC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,cAAc,CAAC,KAAuB;QAChD,OAAO,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACjD,CAAC;IAEM,MAAM,CAAC,MAAM,CAAC,KAAuB;QACxC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QACvD,MAAM,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;QACzC,OAAO,UAAU,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAC/C,CAAC;IAEM,MAAM,CAAC,QAAQ,CAAC,KAAuB;QAC1C,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QACvD,MAAM,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;QACzC,OAAO,UAAU,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAC/C,CAAC;IAEM,MAAM,CAAC,QAAQ,CAAC,KAAuB;QAC1C,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QACvD,MAAM,SAAS,GAAG,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;QAClD,OAAO,UAAU,CAAC,QAAQ,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;IAC/C,CAAC;IAEM,MAAM,CAAC,SAAS,CAAC,KAAuB;QAC3C,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QACvD,MAAM,SAAS,GAAG,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;QAClD,OAAO,UAAU,CAAC,QAAQ,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;IAC/C,CAAC;;AA9CD;;GAEG;AACW,mBAAQ,GAAG,CAAC,GAAW,EAAE,MAAc,EAAoB,EAAE,CAAC,GAAG,GAAG,IAAI,MAAM,EAAE,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * This type wrapper around string is useful within this codebase to differentiate functions that are expecting strings\n * in a particular format - a CoordinateString - vs those that expect \"any old string.\"\n */\nexport type CoordinateString = string;\n\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nexport class Coordinate {\n    /**\n     * Given two numbers, returns a 2-dimensional coordinate string.\n     */\n    public static asString = (row: number, column: number): CoordinateString => `${row},${column}`;\n\n    /**\n     * Returns a 2-item array of individual coordinates as strings.\n     *\n     * @param coord - A coordinate string in the form returned by `Coordinate.asString()`.\n     */\n    public static asArray(coord: CoordinateString): string[] {\n        const arr = coord.split(\",\", 2);\n        return [arr[0], arr[1]];\n    }\n\n    /**\n     * Returns a 2-item array of individual coordinates as numbers.\n     *\n     * @param coord - A coordinate string in the form returned by `Coordinate.asString()`.\n     */\n    public static asArrayNumbers(coord: CoordinateString): number[] {\n        return Coordinate.asArray(coord).map(Number);\n    }\n\n    public static moveUp(coord: CoordinateString): CoordinateString {\n        const [row, column] = Coordinate.asArrayNumbers(coord);\n        const newRow = row - 1 < 0 ? 0 : row - 1;\n        return Coordinate.asString(newRow, column);\n    }\n\n    public static moveDown(coord: CoordinateString): CoordinateString {\n        const [row, column] = Coordinate.asArrayNumbers(coord);\n        const newRow = row + 1 < 0 ? 0 : row + 1;\n        return Coordinate.asString(newRow, column);\n    }\n\n    public static moveLeft(coord: CoordinateString): CoordinateString {\n        const [row, column] = Coordinate.asArrayNumbers(coord);\n        const newColumn = column - 1 < 0 ? 0 : column - 1;\n        return Coordinate.asString(row, newColumn);\n    }\n\n    public static moveRight(coord: CoordinateString): CoordinateString {\n        const [row, column] = Coordinate.asArrayNumbers(coord);\n        const newColumn = column + 1 > 9 ? 0 : column + 1;\n        return Coordinate.asString(row, newColumn);\n    }\n}\n"]}