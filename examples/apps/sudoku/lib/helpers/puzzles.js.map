{"version":3,"file":"puzzles.js","sourceRoot":"","sources":["../../src/helpers/puzzles.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ISharedMap } from \"@fluidframework/map\";\nimport sudoku from \"sudokus\";\nimport { Coordinate } from \"./coordinate\";\nimport { SudokuCell } from \"./sudokuCell\";\n\n/**\n * An array of numbers 0-9 for convenient looping when building Sudoku grids.\n */\nexport const PUZZLE_INDEXES = Array.from(Array(9).keys());\n\nexport const PUZZLES = [\n    [\n        [0, 0, 2, 0, 6, 8, 0, 9, 7],\n        [4, 0, 6, 3, 0, 9, 0, 0, 0],\n        [0, 0, 0, 2, 0, 0, 0, 3, 5],\n        [0, 0, 7, 0, 0, 0, 0, 5, 8],\n        [6, 0, 8, 0, 0, 0, 7, 0, 4],\n        [5, 2, 0, 0, 0, 0, 9, 0, 0],\n        [1, 9, 0, 0, 0, 3, 0, 0, 0],\n        [0, 0, 0, 7, 0, 4, 8, 0, 9],\n        [8, 7, 0, 1, 9, 0, 3, 0, 0],\n    ],\n    [\n        [0, 0, 0, 2, 9, 0, 1, 0, 0],\n        [6, 0, 0, 5, 0, 1, 0, 7, 0],\n        [0, 0, 0, 0, 0, 0, 0, 3, 4],\n        [0, 0, 0, 0, 0, 0, 9, 4, 0],\n        [4, 5, 0, 3, 0, 0, 0, 6, 2],\n        [2, 0, 9, 0, 0, 4, 3, 1, 0],\n        [0, 2, 0, 0, 0, 0, 4, 9, 0],\n        [0, 0, 6, 0, 0, 8, 0, 0, 0],\n        [0, 4, 3, 0, 2, 0, 0, 8, 7],\n    ],\n];\n\n/**\n * Loads a puzzle into an ISharedMap.\n *\n * @param index - The index of the puzzle to load.\n * @param puzzleMap - The shared map that stores puzzle data.\n * @returns The solved puzzle as a 2-dimensional array.\n */\nexport function loadPuzzle(index: number, puzzleMap: ISharedMap): number[][] {\n    const puzzleInput = PUZZLES[index];\n    const solution = sudoku.solve(puzzleInput);\n\n    for (const row of PUZZLE_INDEXES) {\n        for (const col of PUZZLE_INDEXES) {\n            const key = Coordinate.asString(row, col);\n            const cell = new SudokuCell(puzzleInput[row][col], solution[row][col], key);\n            puzzleMap.set(key, cell);\n        }\n    }\n    return solution;\n}\n"]}