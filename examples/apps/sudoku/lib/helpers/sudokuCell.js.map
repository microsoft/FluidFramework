{"version":3,"file":"sudokuCell.js","sourceRoot":"","sources":["../../src/helpers/sudokuCell.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAKH,MAAM,CAAN,IAAY,SAKX;AALD,WAAY,SAAS;IACjB,4BAAe,CAAA;IACf,4BAAe,CAAA;IACf,4BAAe,CAAA;IACf,gCAAmB,CAAA;AACvB,CAAC,EALW,SAAS,KAAT,SAAS,QAKpB;AAED;;;;GAIG;AACH,MAAM,OAAO,UAAU;IAWnB;;;;;;;OAOG;IACH,YACW,KAAa,EACJ,YAAoB,EACpB,UAA4B;QAFrC,UAAK,GAAL,KAAK,CAAQ;QACJ,iBAAY,GAAZ,YAAY,CAAQ;QACpB,eAAU,GAAV,UAAU,CAAkB;QAhBhD;;WAEG;QACI,cAAS,GAAG,KAAK,CAAC;QAerB,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;YAC9B,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;SAClB;QACD,IAAI,CAAC,KAAK,GAAG,KAAK,KAAK,CAAC,CAAC;QACzB,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC;IAEM,QAAQ;QACX,OAAO,eAAe,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;IACjD,CAAC;IAED,iHAAiH;IACjH,gFAAgF;IAEhF;;OAEG;IACI,MAAM,CAAC,YAAY,CAAC,IAAgB;QACvC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,YAAY,CAAC;QAChE,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,gBAAgB,CAAC,IAAgB;QAC3C,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,EAAE;YAChC,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;SAChC;QACD,OAAO,EAAE,CAAC;IACd,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,QAAQ,CAAC,IAAgB;QACnC,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,EAAE;YAClB,OAAO,SAAS,CAAC,KAAK,CAAC;SAC1B;QAED,IAAI,IAAI,CAAC,KAAK,EAAE;YACZ,OAAO,SAAS,CAAC,KAAK,CAAC;SAC1B;QAED,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,OAAO,SAAS,CAAC,OAAO,CAAC;SAC5B;QAED,OAAO,SAAS,CAAC,KAAK,CAAC;IAC3B,CAAC;CACJ","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport sudoku from \"sudokus\";\nimport { CoordinateString } from \"./coordinate\";\n\nexport enum CellState {\n    empty = \"empty\",\n    fixed = \"fixed\",\n    wrong = \"wrong\",\n    correct = \"correct\",\n}\n\n/**\n * The SudokuCell class is used to store data about a cell in the Sudoku grid. The class is intended to be\n * JSON-serialized, so static get/set methods are provided for common data manipulation needs rather than functions on a\n * class instance.\n */\nexport class SudokuCell implements sudoku.Cell {\n    /**\n     * True if the cell is one of the starting \"clues\" in the Sudoku; false otherwise.\n     */\n    public readonly fixed: boolean;\n\n    /**\n     * True if the value in the cell is correct; false otherwise.\n     */\n    public isCorrect = false;\n\n    /**\n     * Creates a new SudokuCell instance.\n     *\n     * @param value - The value of the cell to initialize. Can be any single digit 0-9. 0 indicates an empty cell.\n     * Invalid values will be treated as 0.\n     * @param correctValue - The correct (solved) value of the cell.\n     * @param coordinate - The coordinate of the cell in the grid.\n     */\n    public constructor(\n        public value: number,\n        public readonly correctValue: number,\n        public readonly coordinate: CoordinateString\n    ) {\n        if (!Number.isSafeInteger(value)) {\n            this.value = 0;\n        }\n        this.fixed = value !== 0;\n        SudokuCell.setIsCorrect(this);\n    }\n\n    public toString(): string {\n        return `SudokuCell: ${JSON.stringify(this)}`;\n    }\n\n    // The following are static methods since TypeScript properties are functions and functions aren't JSONed, and we\n    // need to be manipulate the plain JavaScript objects after they've been JSONed.\n\n    /**\n     * Sets the isCorrect property on the cell and returns the cell.\n     */\n    public static setIsCorrect(cell: SudokuCell): SudokuCell {\n        cell.isCorrect = cell.fixed || cell.value === cell.correctValue;\n        return cell;\n    }\n\n    /**\n     * Returns a string representation of the cell's value suitable for display.\n     */\n    public static getDisplayString(cell: SudokuCell): string {\n        if (cell.fixed || cell.value !== 0) {\n            return cell.value.toString();\n        }\n        return \"\";\n    }\n\n    /**\n     * Returns the appropriate CellState for the cell. This state can be used to render the cell differently.\n     */\n    public static getState(cell: SudokuCell): CellState {\n        if (cell.value === 0) {\n            return CellState.empty;\n        }\n\n        if (cell.fixed) {\n            return CellState.fixed;\n        }\n\n        if (cell.isCorrect) {\n            return CellState.correct;\n        }\n\n        return CellState.wrong;\n    }\n}\n"]}