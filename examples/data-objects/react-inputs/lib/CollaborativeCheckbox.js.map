{"version":3,"file":"CollaborativeCheckbox.js","sourceRoot":"","sources":["../src/CollaborativeCheckbox.tsx"],"names":[],"mappings":"AAKA,OAAO,KAAK,MAAM,OAAO,CAAC;AAmB1B;;GAEG;AACH,MAAM,OAAO,qBACT,SAAQ,KAAK,CAAC,SAAmE;IACjF,YAAY,KAAkC;QAC1C,KAAK,CAAC,KAAK,CAAC,CAAC;QAEb,IAAI,CAAC,KAAK,GAAG;YACT,OAAO,EAAE,IAAI,CAAC,SAAS,EAAE;SAC5B,CAAC;QAEF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC;IAEM,iBAAiB;QACpB,iDAAiD;QACjD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,cAAc,EAAE,GAAG,EAAE;YACpC,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YACjC,IAAI,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,MAAM;QACT,OAAO,CACH,+BACI,IAAI,EAAC,UAAU,EACf,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,EAC/B,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,kBACT,IAAI,CAAC,KAAK,CAAC,OAAO,EAChC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,EACnB,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,EAC3B,QAAQ,EAAE,IAAI,CAAC,cAAc,GAAI,CACxC,CAAC;IACN,CAAC;IAEO,cAAc,CAAC,CAAsC;QACzD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC1C,CAAC;IAEO,SAAS;;QACb,aAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,mCAAI,KAAK,CAAC;IAC1C,CAAC;CACJ","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { SharedCell } from \"@fluidframework/cell\";\nimport React from \"react\";\n\nexport interface ICollaborativeCheckboxProps {\n    /**\n     * The SharedCell that will store the checkbox value.\n     */\n    data: SharedCell<boolean>;\n    /**\n     * The value for the \"name\" property of the checkbox input\n     */\n    id: string;\n    className?: string;\n    style?: React.CSSProperties;\n}\n\nexport interface ICollaborativeCheckboxState {\n    checked: boolean;\n}\n\n/**\n * Given a SharedCell will produce a collaborative checkbox.\n */\nexport class CollaborativeCheckbox\n    extends React.Component<ICollaborativeCheckboxProps, ICollaborativeCheckboxState> {\n    constructor(props: ICollaborativeCheckboxProps) {\n        super(props);\n\n        this.state = {\n            checked: this.isChecked(),\n        };\n\n        this.updateCheckbox = this.updateCheckbox.bind(this);\n        this.isChecked = this.isChecked.bind(this);\n    }\n\n    public componentDidMount() {\n        // Register a callback for when the value changes\n        this.props.data.on(\"valueChanged\", () => {\n            const checked = this.isChecked();\n            this.setState({ checked });\n        });\n    }\n\n    public render() {\n        return (\n            <input\n                type=\"checkbox\"\n                className={this.props.className}\n                style={this.props.style}\n                aria-checked={this.state.checked}\n                name={this.props.id}\n                checked={this.state.checked}\n                onChange={this.updateCheckbox} />\n        );\n    }\n\n    private updateCheckbox(e: React.ChangeEvent<HTMLInputElement>) {\n        this.props.data.set(e.target.checked);\n    }\n\n    private isChecked(): boolean {\n        return this.props.data.get() ?? false;\n    }\n}\n"]}