{"version":3,"file":"CollaborativeInput.js","sourceRoot":"","sources":["../src/CollaborativeInput.tsx"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { SharedString } from \"@fluidframework/sequence\";\nimport React from \"react\";\n\nexport interface ICollaborativeInputProps {\n    /**\n     * The SharedString that will store the input value.\n     */\n    sharedString: SharedString;\n    /**\n     * Whether spellCheck should be enabled.  Defaults to true.\n     */\n    spellCheck?: boolean;\n    className?: string;\n    style?: React.CSSProperties;\n    onInput?: (sharedString: SharedString) => void\n}\n\nexport interface ICollaborativeInputState {\n    selectionEnd: number;\n    selectionStart: number;\n}\n\n/**\n * Given a SharedString will produce a collaborative input element.\n */\nexport class CollaborativeInput\n    extends React.Component<ICollaborativeInputProps, ICollaborativeInputState> {\n    private readonly inputElementRef: React.RefObject<HTMLInputElement>;\n\n    constructor(props: ICollaborativeInputProps) {\n        super(props);\n\n        this.inputElementRef = React.createRef<HTMLInputElement>();\n\n        this.state = {\n            selectionEnd: 0,\n            selectionStart: 0,\n        };\n\n        this.handleInput = this.handleInput.bind(this);\n        this.updateSelection = this.updateSelection.bind(this);\n    }\n\n    public componentDidMount() {\n        // Sets an event listener so we can update our state as the value changes\n        this.props.sharedString.on(\"op\", (op, local) => {\n            if (!local) {\n                this.updateInputFromSharedString();\n            }\n        });\n        this.updateInputFromSharedString();\n    }\n\n    public componentDidUpdate(prevProps: ICollaborativeInputProps) {\n        // If the component gets a new sharedString props it needs to re-fetch the sharedString text\n        if (prevProps.sharedString !== this.props.sharedString) {\n            this.updateInputFromSharedString();\n        }\n    }\n\n    public render() {\n        return (\n            // There are a lot of different ways content can be inserted into a input box\n            // and not all of them trigger a onBeforeInput event. To ensure we are grabbing\n            // the correct selection before we modify the shared string we need to make sure\n            // this.updateSelection is being called for multiple cases.\n            <input\n                className={this.props.className}\n                style={this.props.style}\n                spellCheck={this.props.spellCheck ? this.props.spellCheck : true}\n                ref={this.inputElementRef}\n                onBeforeInput={this.updateSelection}\n                onKeyDown={this.updateSelection}\n                onClick={this.updateSelection}\n                onContextMenu={this.updateSelection}\n                onInput={this.handleInput} />\n        );\n    }\n\n    private updateInputFromSharedString() {\n        const text = this.props.sharedString.getText();\n        if (this.inputElementRef.current && this.inputElementRef.current.value !== text) {\n            this.inputElementRef.current.value = text;\n        }\n    }\n\n    private handleInput(ev: React.FormEvent<HTMLInputElement>) {\n        // We need to set the value here to keep the input responsive to the user\n        const newText = ev.currentTarget.value;\n\n        // Get the new caret position and use that to get the text that was inserted\n        const newPosition = ev.currentTarget.selectionStart ? ev.currentTarget.selectionStart : 0;\n        const isTextInserted = newPosition - this.state.selectionStart > 0;\n        if (isTextInserted) {\n            const insertedText = newText.substring(this.state.selectionStart, newPosition);\n            const changeRangeLength = this.state.selectionEnd - this.state.selectionStart;\n            if (changeRangeLength === 0) {\n                this.props.sharedString.insertText(this.state.selectionStart, insertedText);\n            } else {\n                this.props.sharedString.replaceText(this.state.selectionStart, this.state.selectionEnd, insertedText);\n            }\n        } else {\n            this.props.sharedString.removeText(newPosition, this.state.selectionEnd);\n        }\n        this.props.onInput?.(this.props.sharedString);\n    }\n\n    /**\n     * Update the current caret selection.\n     * We need to do this before we do any handleInput action or we will have lost our\n     * cursor position and not be able to accurately update the shared string.\n     */\n    private updateSelection() {\n        if (!this.inputElementRef.current) {\n            return;\n        }\n\n        const selectionEnd = this.inputElementRef.current.selectionEnd ? this.inputElementRef.current.selectionEnd : 0;\n        // eslint-disable-next-line max-len\n        const selectionStart = this.inputElementRef.current.selectionStart ? this.inputElementRef.current.selectionStart : 0;\n        this.setState({ selectionEnd, selectionStart });\n    }\n}\n"]}