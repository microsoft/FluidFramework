{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.tsx"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,EAAE,UAAU,EAAE,iBAAiB,EAAE,MAAM,0BAA0B,CAAC;AACzE,OAAO,EAAE,qBAAqB,EAAE,MAAM,8BAA8B,CAAC;AAErE,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AAExD,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,QAAQ,MAAM,WAAW,CAAC;AAGjC;;GAEG;AACH,MAAM,OAAO,iBAAkB,SAAQ,UAAU;IAAjD;;QACqB,YAAO,GAAG,SAAS,CAAC;IA8CzC,CAAC;IA1CG,IAAW,cAAc,KAAK,OAAO,IAAI,CAAC,CAAC,CAAC;IAErC,MAAM,KAAK,aAAa,KAAK,OAAO,uCAAuC,CAAC,CAAC,CAAC;IAW9E,MAAM,CAAC,UAAU,KAAK,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IAEzC,KAAK,CAAC,qBAAqB;QACjC,2EAA2E;QAC3E,MAAM,IAAI,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC/C,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAC7C,CAAC;IAES,KAAK,CAAC,cAAc;QAC1B,2EAA2E;QAC3E,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAA6B,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC;IACpF,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,GAAgB;QAC1B,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;YACzB,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;SACrE;QAED,QAAQ,CAAC,MAAM,CACX,6BAAK,SAAS,EAAC,WAAW;YACtB,oBAAC,qBAAqB,IAAC,YAAY,EAAE,IAAI,CAAC,IAAI,GAAI,CAChD,EACN,GAAG,CACN,CAAC;QACF,OAAO,GAAG,CAAC;IACf,CAAC;;AArCuB,yBAAO,GAAG,IAAI,iBAAiB,CACnD,iBAAiB,CAAC,aAAa,EAC/B,iBAAiB,EACjB;IACI,YAAY,CAAC,UAAU,EAAE;CAC5B,EACD,EAAE,CACL,CAAC;AAiCN,iGAAiG;AACjG,MAAM,CAAC,MAAM,WAAW,GAAG,iBAAiB,CAAC,UAAU,EAAE,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { DataObject, DataObjectFactory } from \"@fluidframework/aqueduct\";\nimport { CollaborativeTextArea } from \"@fluidframework/react-inputs\";\nimport { IFluidHTMLView } from \"@fluidframework/view-interfaces\";\nimport { SharedString } from \"@fluidframework/sequence\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { IFluidHandle } from \"@fluidframework/core-interfaces\";\n\n/**\n * CollaborativeText uses the React CollaborativeTextArea to load a collaborative HTML <textarea>\n */\nexport class CollaborativeText extends DataObject implements IFluidHTMLView {\n    private readonly textKey = \"textKey\";\n\n    private text: SharedString | undefined;\n\n    public get IFluidHTMLView() { return this; }\n\n    public static get ComponentName() { return \"@fluid-example/collaborative-textarea\"; }\n\n    private static readonly factory = new DataObjectFactory(\n        CollaborativeText.ComponentName,\n        CollaborativeText,\n        [\n            SharedString.getFactory(),\n        ],\n        {},\n    );\n\n    public static getFactory() { return this.factory; }\n\n    protected async initializingFirstTime() {\n        // Create the SharedString and store the handle in our root SharedDirectory\n        const text = SharedString.create(this.runtime);\n        this.root.set(this.textKey, text.handle);\n    }\n\n    protected async hasInitialized() {\n        // Store the text if we are loading the first time or loading from existing\n        this.text = await this.root.get<IFluidHandle<SharedString>>(this.textKey).get();\n    }\n\n    /**\n     * Renders a new view into the provided div\n     */\n    public render(div: HTMLElement) {\n        if (this.text === undefined) {\n            throw new Error(\"The SharedString was not initialized correctly\");\n        }\n\n        ReactDOM.render(\n            <div className=\"text-area\">\n                <CollaborativeTextArea sharedString={this.text} />\n            </div>,\n            div,\n        );\n        return div;\n    }\n}\n\n// Export the CollaborativeText factory as fluidExport for the dynamic component loading scenario\nexport const fluidExport = CollaborativeText.getFactory();\n"]}