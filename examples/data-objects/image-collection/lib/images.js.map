{"version":3,"file":"images.js","sourceRoot":"","sources":["../src/images.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\n /* eslint-disable @typescript-eslint/no-non-null-assertion */\n\nimport {\n    IFluidObject,\n    IFluidHandleContext,\n    IFluidLoadable,\n    IFluidRouter,\n    IRequest,\n    IResponse,\n} from \"@fluidframework/core-interfaces\";\nimport { FluidObjectHandle } from \"@fluidframework/datastore\";\nimport { IFluidObjectCollection } from \"@fluid-example/fluid-object-interfaces\";\nimport { ISharedDirectory, SharedDirectory } from \"@fluidframework/map\";\nimport { IFluidDataStoreContext, IFluidDataStoreFactory } from \"@fluidframework/runtime-definitions\";\nimport { LazyLoadedDataObject, LazyLoadedDataObjectFactory } from \"@fluidframework/data-object-base\";\nimport { IFluidHTMLOptions, IFluidHTMLView } from \"@fluidframework/view-interfaces\";\nimport * as ClientUI from \"@fluid-example/client-ui-lib\";\n\nexport class ImageComponent implements\n    IFluidLoadable, IFluidHTMLView, IFluidRouter, ClientUI.controls.IViewLayout {\n    public get IFluidLoadable() { return this; }\n    public get IFluidHTMLView() { return this; }\n    public get IFluidRouter() { return this; }\n    public get IViewLayout() { return this; }\n\n    // Video def has a preferred aspect ratio\n    public aspectRatio?: number;\n    public minimumWidthBlock?: number;\n    public minimumHeightInline?: number;\n    public readonly canInline = true;\n    public readonly preferInline = false;\n    public handle: FluidObjectHandle;\n\n    constructor(public imageUrl: string, path: string, context: IFluidHandleContext) {\n        this.handle = new FluidObjectHandle(this, path, context);\n    }\n\n    public render(elm: HTMLElement, options?: IFluidHTMLOptions): void {\n        const img = document.createElement(\"img\");\n        img.src = this.imageUrl;\n        elm.appendChild(img);\n    }\n\n    public async request(request: IRequest): Promise<IResponse> {\n        return {\n            mimeType: \"fluid/object\",\n            status: 200,\n            value: this,\n        };\n    }\n}\n\nexport class ImageCollection extends LazyLoadedDataObject<ISharedDirectory> implements\n    IFluidLoadable, IFluidRouter, IFluidObjectCollection {\n    private static readonly factory = new LazyLoadedDataObjectFactory(\n        \"@fluid-example/image-collection\",\n        ImageCollection,\n        SharedDirectory.getFactory(),\n    );\n\n    public static getFactory(): IFluidDataStoreFactory { return ImageCollection.factory; }\n\n    public static async create(parentContext: IFluidDataStoreContext, props?: any) {\n        return ImageCollection.factory.create(parentContext, props);\n    }\n\n    public create() { this.initialize(); }\n    public async load() { this.initialize(); }\n\n    public get IFluidLoadable() { return this; }\n    public get IFluidObjectCollection() { return this; }\n    public get IFluidRouter() { return this; }\n\n    private readonly images = new Map<string, ImageComponent>();\n\n    public createCollectionItem(): ImageComponent {\n        const id = `image-${Date.now()}`;\n        this.root.set(id, \"https://media.giphy.com/media/13V60VgE2ED7oc/giphy.gif\");\n        // Relying on valueChanged event to create the bar is error prone\n        return this.images.get(id)!;\n    }\n\n    public removeCollectionItem(instance: IFluidObject): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    public getProgress(): string[] {\n        return Array.from(this.root.keys()).map((key) => `/${key}`);\n    }\n\n    public async request(request: IRequest): Promise<IResponse> {\n        // TODO the request is not stripping / off the URL\n        const trimmed = request.url\n            .substr(1)\n            .substr(0, !request.url.includes(\"/\", 1) ? request.url.length : request.url.indexOf(\"/\"));\n\n        if (!trimmed) {\n            return {\n                mimeType: \"fluid/object\",\n                status: 200,\n                value: this,\n            };\n        }\n\n        // TODO we need a way to return an observable for a request route (if asked for) to notice updates\n        // or at least to request a value >= a sequence number\n        await this.root.wait(trimmed);\n\n        return this.images.get(trimmed)!.request({ url: trimmed.substr(1 + trimmed.length) });\n    }\n\n    private initialize() {\n        for (const key of this.root.keys()) {\n            this.images.set(\n                key,\n                new ImageComponent(\n                    this.root.get(key)!,\n                    key,\n                    this.runtime.objectsRoutingContext));\n        }\n\n        this.root.on(\"valueChanged\", (changed) => {\n            if (!this.images.has(changed.key)) {\n                const player = new ImageComponent(\n                    this.root.get(changed.key)!,\n                    changed.key,\n                    this.runtime.objectsRoutingContext);\n                this.images.set(changed.key, player);\n            }\n        });\n    }\n}\n\nexport const fluidExport: IFluidDataStoreFactory = ImageCollection.getFactory();\n"]}