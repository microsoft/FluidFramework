{"version":3,"file":"progressBars.js","sourceRoot":"","sources":["../src/progressBars.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { EventEmitter } from \"events\";\nimport { defaultFluidObjectRequestHandler } from \"@fluidframework/aqueduct\";\nimport {\n    IFluidObject,\n    IFluidHandleContext,\n    IFluidLoadable,\n    IFluidRouter,\n    IRequest,\n    IResponse,\n} from \"@fluidframework/core-interfaces\";\nimport { FluidObjectHandle, mixinRequestHandler } from \"@fluidframework/datastore\";\nimport { IFluidObjectCollection } from \"@fluid-example/fluid-object-interfaces\";\nimport { ISharedMap, SharedMap } from \"@fluidframework/map\";\nimport { IFluidDataStoreRuntime } from \"@fluidframework/datastore-definitions\";\nimport { IFluidDataStoreContext, IFluidDataStoreFactory } from \"@fluidframework/runtime-definitions\";\nimport { IFluidHTMLView } from \"@fluidframework/view-interfaces\";\n\n// eslint-disable-next-line import/no-internal-modules,import/no-unassigned-import\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass ProgressBarView implements IFluidHTMLView {\n    public parent: HTMLElement;\n    private barElem: HTMLDivElement;\n\n    constructor(private readonly bar: ProgressBar) {\n        this.bar.on(\"updateValue\", this.sizeBarElemToProgress);\n    }\n\n    public get IFluidHTMLView() { return this; }\n\n    public remove() {\n        this.bar.off(\"updateValue\", this.sizeBarElemToProgress);\n    }\n\n    public render(parent: HTMLElement) {\n        if (parent) {\n            const div = document.createElement(\"div\");\n            div.classList.add(\"progress\");\n            // eslint-disable-next-line max-len\n            div.innerHTML = `<div class=\"progress-bar progress-bar-striped active\" role=\"progressbar\" aria-valuenow=\"75\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 75%\"></div>`;\n\n            const urlDiv = document.createElement(\"div\");\n            urlDiv.innerText = this.bar.handle.absolutePath;\n\n            const downButton = document.createElement(\"button\");\n            downButton.innerText = \"down\";\n            downButton.onclick = () => {\n                this.bar.changeValue(this.bar.value - 1);\n            };\n\n            const upButton = document.createElement(\"button\");\n            upButton.innerText = \"up\";\n            upButton.onclick = () => {\n                // Should be a counter\n                this.bar.changeValue(this.bar.value + 1);\n            };\n\n            parent.appendChild(div);\n            parent.appendChild(urlDiv);\n            parent.appendChild(downButton);\n            parent.appendChild(upButton);\n\n            this.barElem = div.firstElementChild as HTMLDivElement;\n            this.sizeBarElemToProgress();\n            this.parent = parent;\n        }\n    }\n\n    private readonly sizeBarElemToProgress = () => {\n        this.barElem.style.width = `${this.bar.value}%`;\n    };\n}\n\n// The \"model\" side of a progress bar\nexport class ProgressBar extends EventEmitter implements\n    IFluidLoadable,\n    IFluidHTMLView,\n    IFluidRouter {\n    public handle: FluidObjectHandle;\n\n    constructor(\n        public value: number,\n        private readonly keyId: string,\n        context: IFluidHandleContext,\n        private readonly collection: ProgressCollection,\n    ) {\n        super();\n        this.handle = new FluidObjectHandle(this, keyId, context);\n    }\n\n    public get IFluidLoadable() { return this; }\n    public get IFluidHTMLView() { return this; }\n    public get IFluidRouter() { return this; }\n\n    public render(elm: HTMLElement) {\n        const view = new ProgressBarView(this);\n        view.render(elm);\n    }\n\n    public changeValue(newValue: number) {\n        this.collection.changeValue(this.keyId, newValue);\n    }\n\n    public update(value: number) {\n        this.value = value;\n        this.emit(\"updateValue\");\n    }\n\n    public async request(request: IRequest): Promise<IResponse> {\n        return defaultFluidObjectRequestHandler(this, request);\n    }\n}\n\nexport class ProgressCollection\n    extends EventEmitter\n    implements IFluidLoadable, IFluidRouter, IFluidObjectCollection {\n    public static async load(runtime: IFluidDataStoreRuntime, context: IFluidDataStoreContext) {\n        const collection = new ProgressCollection(runtime, context);\n        await collection.initialize();\n\n        return collection;\n    }\n\n    public get IFluidLoadable() { return this; }\n    public get IFluidRouter() { return this; }\n    public get IFluidObjectCollection() { return this; }\n\n    public handle: FluidObjectHandle;\n\n    private readonly progressBars = new Map<string, ProgressBar>();\n    private root: ISharedMap;\n\n    constructor(private readonly runtime: IFluidDataStoreRuntime, context: IFluidDataStoreContext) {\n        super();\n\n        this.handle = new FluidObjectHandle(this, \"\", this.runtime.objectsRoutingContext);\n    }\n\n    public changeValue(key: string, newValue: number) {\n        this.root.set(key, newValue);\n    }\n\n    public createCollectionItem(): ProgressBar {\n        const id = `progress-${Date.now()}`;\n        this.root.set(id, 50);\n        // Relying on valueChanged event to create the bar is error prone\n        return this.progressBars.get(id);\n    }\n\n    public removeCollectionItem(instance: IFluidObject): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    public getProgress(): string[] {\n        return Array.from(this.root.keys()).map((key) => `/${key}`);\n    }\n\n    public async request(request: IRequest): Promise<IResponse> {\n        // TODO the request is not stripping / off the URL\n        const trimmed = request.url\n            .substr(1)\n            .substr(0, !request.url.includes(\"/\", 1) ? request.url.length : request.url.indexOf(\"/\"));\n\n        if (!trimmed) {\n            return {\n                mimeType: \"fluid/object\",\n                status: 200,\n                value: this,\n            };\n        }\n\n        // TODO we need a way to return an observable for a request route (if asked for) to notice updates\n        // or at least to request a value >= a sequence number\n        await this.root.wait(trimmed);\n\n        return this.progressBars.get(trimmed).request({ url: trimmed.substr(1 + trimmed.length) });\n    }\n\n    private async initialize() {\n        if (!this.runtime.existing) {\n            this.root = SharedMap.create(this.runtime, \"root\");\n            this.root.bindToContext();\n        } else {\n            this.root = await this.runtime.getChannel(\"root\") as ISharedMap;\n        }\n\n        for (const key of this.root.keys()) {\n            this.progressBars.set(\n                key,\n                new ProgressBar(\n                    this.root.get(key),\n                    key,\n                    this.runtime.objectsRoutingContext,\n                    this));\n        }\n\n        this.root.on(\"valueChanged\", (changed, local) => {\n            if (this.progressBars.has(changed.key)) {\n                this.progressBars.get(changed.key).update(this.root.get(changed.key));\n            } else {\n                this.progressBars.set(\n                    changed.key,\n                    new ProgressBar(\n                        this.root.get(changed.key),\n                        changed.key,\n                        this.runtime.objectsRoutingContext,\n                        this));\n                this.emit(\"progressAdded\", `/${changed.key}`);\n            }\n        });\n    }\n}\n\nclass ProgressBarsFactory implements IFluidDataStoreFactory {\n    public static readonly type = \"@fluid-example/progress-bars\";\n    public readonly type = ProgressBarsFactory.type;\n\n    public get IFluidDataStoreFactory() { return this; }\n\n    public async instantiateDataStore(context: IFluidDataStoreContext) {\n        const runtimeClass = mixinRequestHandler(\n            async (request: IRequest) => {\n                const router = await routerP;\n                return router.request(request);\n            });\n\n        const runtime = new runtimeClass(context, new Map([\n            SharedMap.getFactory(),\n        ].map((factory) => [factory.type, factory])));\n        const routerP = ProgressCollection.load(runtime, context);\n\n        return runtime;\n    }\n}\n\nexport const fluidExport = new ProgressBarsFactory();\n"]}