{"version":3,"file":"getContainer.js","sourceRoot":"","sources":["../src/getContainer.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAMH,OAAO,EAAa,MAAM,EAAE,MAAM,kCAAkC,CAAC;AAMrE,MAAM,CAAC,KAAK,UAAU,YAAY,CAC9B,UAAkB,EAClB,SAAkB,EAClB,OAAiB,EACjB,WAAyB,EACzB,sBAA+C,EAC/C,uBAAwC;IAExC,MAAM,MAAM,GAAG,EAAE,WAAW,EAAE,uBAAuB,EAAE,CAAC;IACxD,MAAM,UAAU,GAAG,EAAE,IAAI,EAAE,KAAK,IAAI,EAAE,CAAC,MAAM,EAAE,CAAC;IAEhD,MAAM,MAAM,GAAG,IAAI,MAAM,CAAE;QACvB,WAAW;QACX,sBAAsB;QACtB,UAAU;KACb,CAAC,CAAC;IAEH,IAAI,SAAoB,CAAC;IAEzB,IAAI,SAAS,EAAE;QACX,6GAA6G;QAC7G,4GAA4G;QAC5G,YAAY;QACZ,SAAS,GAAG,MAAM,MAAM,CAAC,uBAAuB,CAAC,EAAE,OAAO,EAAE,oBAAoB,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC;QAChG,MAAM,SAAS,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;KAC/C;SAAM;QACH,yDAAyD;QACzD,SAAS,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC1C,4GAA4G;QAC5G,gFAAgF;QAChF,yEAAyE;QACzE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE;YACrB,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;SACjE;KACJ;IACD,OAAO,SAAS,CAAC;AACrB,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { IRequest } from \"@fluidframework/core-interfaces\";\nimport {\n    IRuntimeFactory,\n} from \"@fluidframework/container-definitions\";\nimport { Container, Loader } from \"@fluidframework/container-loader\";\nimport {\n    IDocumentServiceFactory,\n    IUrlResolver,\n} from \"@fluidframework/driver-definitions\";\n\nexport async function getContainer(\n    documentId: string,\n    createNew: boolean,\n    request: IRequest,\n    urlResolver: IUrlResolver,\n    documentServiceFactory: IDocumentServiceFactory,\n    containerRuntimeFactory: IRuntimeFactory,\n): Promise<Container> {\n    const module = { fluidExport: containerRuntimeFactory };\n    const codeLoader = { load: async () => module };\n\n    const loader = new Loader ({\n        urlResolver,\n        documentServiceFactory,\n        codeLoader,\n    });\n\n    let container: Container;\n\n    if (createNew) {\n        // We're not actually using the code proposal (our code loader always loads the same module regardless of the\n        // proposal), but the Container will only give us a NullRuntime if there's no proposal.  So we'll use a fake\n        // proposal.\n        container = await loader.createDetachedContainer({ package: \"no-dynamic-package\", config: {} });\n        await container.attach({ url: documentId });\n    } else {\n        // Request must be appropriate and parseable by resolver.\n        container = await loader.resolve(request);\n        // If we didn't create the container properly, then it won't function correctly.  So we'll throw if we got a\n        // new container here, where we expect this to be loading an existing container.\n        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n        if (!container.existing) {\n            throw new Error(\"Attempted to load a non-existing container\");\n        }\n    }\n    return container;\n}\n"]}