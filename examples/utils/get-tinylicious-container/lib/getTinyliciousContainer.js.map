{"version":3,"file":"getTinyliciousContainer.js","sourceRoot":"","sources":["../src/getTinyliciousContainer.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAMH,OAAO,EAAE,mCAAmC,EAAE,MAAM,sCAAsC,CAAC;AAC3F,OAAO,EAAE,gCAAgC,EAAE,8BAA8B,EAAE,MAAM,oCAAoC,CAAC;AACtH,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAE9C;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,uBAAuB,CACzC,UAAkB,EAClB,uBAAwC,EACxC,SAAkB;IAElB,MAAM,aAAa,GAAG,IAAI,gCAAgC,EAAE,CAAC;IAC7D,MAAM,sBAAsB,GAAG,IAAI,mCAAmC,CAAC,aAAa,CAAC,CAAC;IAEtF,MAAM,WAAW,GAAG,IAAI,8BAA8B,EAAE,CAAC;IAEzD,OAAO,YAAY,CACf,UAAU,EACV,SAAS,EACT,EAAE,GAAG,EAAE,UAAU,EAAE,EACnB,WAAW,EACX,sBAAsB,EACtB,uBAAuB,CAC1B,CAAC;AACN,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    IContainer,\n    IRuntimeFactory,\n} from \"@fluidframework/container-definitions\";\nimport { RouterliciousDocumentServiceFactory } from \"@fluidframework/routerlicious-driver\";\nimport { InsecureTinyliciousTokenProvider, InsecureTinyliciousUrlResolver } from \"@fluidframework/tinylicious-driver\";\nimport { getContainer } from \"./getContainer\";\n\n/**\n * Connect to the Tinylicious service and retrieve a Container with the given ID running the given code.\n * @param documentId - The document id to retrieve or create\n * @param containerRuntimeFactory - The container factory to be loaded in the container\n */\nexport async function getTinyliciousContainer(\n    documentId: string,\n    containerRuntimeFactory: IRuntimeFactory,\n    createNew: boolean,\n): Promise<IContainer> {\n    const tokenProvider = new InsecureTinyliciousTokenProvider();\n    const documentServiceFactory = new RouterliciousDocumentServiceFactory(tokenProvider);\n\n    const urlResolver = new InsecureTinyliciousUrlResolver();\n\n    return getContainer(\n        documentId,\n        createNew,\n        { url: documentId },\n        urlResolver,\n        documentServiceFactory,\n        containerRuntimeFactory,\n    );\n}\n"]}