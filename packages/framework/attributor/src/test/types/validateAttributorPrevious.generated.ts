/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-validator in @fluidframework/build-tools.
 */
import * as old from "@fluidframework/attributor-previous";
import * as current from "../../index";

type TypeOnly<T> = {
    [P in keyof T]: TypeOnly<T[P]>;
};

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_Attributor": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_Attributor():
    TypeOnly<old.Attributor>;
declare function use_current_ClassDeclaration_Attributor(
    use: TypeOnly<current.Attributor>);
use_current_ClassDeclaration_Attributor(
    get_old_ClassDeclaration_Attributor());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_Attributor": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_Attributor():
    TypeOnly<current.Attributor>;
declare function use_old_ClassDeclaration_Attributor(
    use: TypeOnly<old.Attributor>);
use_old_ClassDeclaration_Attributor(
    get_current_ClassDeclaration_Attributor());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IAttributor": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IAttributor():
    TypeOnly<old.IAttributor>;
declare function use_current_InterfaceDeclaration_IAttributor(
    use: TypeOnly<current.IAttributor>);
use_current_InterfaceDeclaration_IAttributor(
    get_old_InterfaceDeclaration_IAttributor());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IAttributor": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IAttributor():
    TypeOnly<current.IAttributor>;
declare function use_old_InterfaceDeclaration_IAttributor(
    use: TypeOnly<old.IAttributor>);
use_old_InterfaceDeclaration_IAttributor(
    get_current_InterfaceDeclaration_IAttributor());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IProvideRuntimeAttributor": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IProvideRuntimeAttributor():
    TypeOnly<old.IProvideRuntimeAttributor>;
declare function use_current_InterfaceDeclaration_IProvideRuntimeAttributor(
    use: TypeOnly<current.IProvideRuntimeAttributor>);
use_current_InterfaceDeclaration_IProvideRuntimeAttributor(
    get_old_InterfaceDeclaration_IProvideRuntimeAttributor());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IProvideRuntimeAttributor": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IProvideRuntimeAttributor():
    TypeOnly<current.IProvideRuntimeAttributor>;
declare function use_old_InterfaceDeclaration_IProvideRuntimeAttributor(
    use: TypeOnly<old.IProvideRuntimeAttributor>);
use_old_InterfaceDeclaration_IProvideRuntimeAttributor(
    get_current_InterfaceDeclaration_IProvideRuntimeAttributor());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_IRuntimeAttributor": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_IRuntimeAttributor():
    TypeOnly<typeof old.IRuntimeAttributor>;
declare function use_current_VariableDeclaration_IRuntimeAttributor(
    use: TypeOnly<typeof current.IRuntimeAttributor>);
use_current_VariableDeclaration_IRuntimeAttributor(
    get_old_VariableDeclaration_IRuntimeAttributor());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_IRuntimeAttributor": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_IRuntimeAttributor():
    TypeOnly<typeof current.IRuntimeAttributor>;
declare function use_old_VariableDeclaration_IRuntimeAttributor(
    use: TypeOnly<typeof old.IRuntimeAttributor>);
use_old_VariableDeclaration_IRuntimeAttributor(
    get_current_VariableDeclaration_IRuntimeAttributor());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IRuntimeAttributor": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IRuntimeAttributor():
    TypeOnly<old.IRuntimeAttributor>;
declare function use_current_InterfaceDeclaration_IRuntimeAttributor(
    use: TypeOnly<current.IRuntimeAttributor>);
use_current_InterfaceDeclaration_IRuntimeAttributor(
    get_old_InterfaceDeclaration_IRuntimeAttributor());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IRuntimeAttributor": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IRuntimeAttributor():
    TypeOnly<current.IRuntimeAttributor>;
declare function use_old_InterfaceDeclaration_IRuntimeAttributor(
    use: TypeOnly<old.IRuntimeAttributor>);
use_old_InterfaceDeclaration_IRuntimeAttributor(
    get_current_InterfaceDeclaration_IRuntimeAttributor());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_OpStreamAttributor": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_OpStreamAttributor():
    TypeOnly<old.OpStreamAttributor>;
declare function use_current_ClassDeclaration_OpStreamAttributor(
    use: TypeOnly<current.OpStreamAttributor>);
use_current_ClassDeclaration_OpStreamAttributor(
    get_old_ClassDeclaration_OpStreamAttributor());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_OpStreamAttributor": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_OpStreamAttributor():
    TypeOnly<current.OpStreamAttributor>;
declare function use_old_ClassDeclaration_OpStreamAttributor(
    use: TypeOnly<old.OpStreamAttributor>);
use_old_ClassDeclaration_OpStreamAttributor(
    get_current_ClassDeclaration_OpStreamAttributor());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_createRuntimeAttributor": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_createRuntimeAttributor():
    TypeOnly<typeof old.createRuntimeAttributor>;
declare function use_current_FunctionDeclaration_createRuntimeAttributor(
    use: TypeOnly<typeof current.createRuntimeAttributor>);
use_current_FunctionDeclaration_createRuntimeAttributor(
    get_old_FunctionDeclaration_createRuntimeAttributor());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_createRuntimeAttributor": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_createRuntimeAttributor():
    TypeOnly<typeof current.createRuntimeAttributor>;
declare function use_old_FunctionDeclaration_createRuntimeAttributor(
    use: TypeOnly<typeof old.createRuntimeAttributor>);
use_old_FunctionDeclaration_createRuntimeAttributor(
    get_current_FunctionDeclaration_createRuntimeAttributor());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_enableOnNewFileKey": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_enableOnNewFileKey():
    TypeOnly<typeof old.enableOnNewFileKey>;
declare function use_current_VariableDeclaration_enableOnNewFileKey(
    use: TypeOnly<typeof current.enableOnNewFileKey>);
use_current_VariableDeclaration_enableOnNewFileKey(
    get_old_VariableDeclaration_enableOnNewFileKey());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_enableOnNewFileKey": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_enableOnNewFileKey():
    TypeOnly<typeof current.enableOnNewFileKey>;
declare function use_old_VariableDeclaration_enableOnNewFileKey(
    use: TypeOnly<typeof old.enableOnNewFileKey>);
use_old_VariableDeclaration_enableOnNewFileKey(
    get_current_VariableDeclaration_enableOnNewFileKey());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_mixinAttributor": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_mixinAttributor():
    TypeOnly<typeof old.mixinAttributor>;
declare function use_current_VariableDeclaration_mixinAttributor(
    use: TypeOnly<typeof current.mixinAttributor>);
use_current_VariableDeclaration_mixinAttributor(
    get_old_VariableDeclaration_mixinAttributor());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_mixinAttributor": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_mixinAttributor():
    TypeOnly<typeof current.mixinAttributor>;
declare function use_old_VariableDeclaration_mixinAttributor(
    use: TypeOnly<typeof old.mixinAttributor>);
use_old_VariableDeclaration_mixinAttributor(
    get_current_VariableDeclaration_mixinAttributor());
