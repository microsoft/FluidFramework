/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

import type { IContainerExperimental } from "@fluidframework/container-loader/internal";
import { assert } from "@fluidframework/core-utils/internal";
import type { IFluidContainer } from "@fluidframework/fluid-static";
import { isInternalFluidContainer } from "@fluidframework/fluid-static/internal";
import type { IContainerRuntimeBase } from "@fluidframework/runtime-definitions/internal";

import type { IEphemeralRuntime } from "./internalTypes.js";
import type { Presence } from "./presence.js";
import type { PresenceExtensionInterface } from "./presenceManager.js";
import { createPresenceManager } from "./presenceManager.js";

import type {
	ContainerExtensionStore,
	IContainerExtension,
	IExtensionMessage,
	IExtensionRuntime,
} from "@fluidframework/presence/internal/container-definitions/internal";

function isContainerExtensionStore(
	manager: ContainerExtensionStore | IContainerRuntimeBase | IContainerExperimental,
): manager is ContainerExtensionStore {
	return (manager as ContainerExtensionStore).acquireExtension !== undefined;
}

/**
 * Common Presence manager for a container
 */
class ContainerPresenceManager implements IContainerExtension<never> {
	public readonly interface: Presence;
	public readonly extension = this;
	private readonly manager: PresenceExtensionInterface;

	public constructor(runtime: IExtensionRuntime) {
		// TODO create the appropriate ephemeral runtime (map address must be in submitSignal, etc.)
		this.interface = this.manager = createPresenceManager(
			runtime as unknown as IEphemeralRuntime,
		);
	}

	public onNewContext(): void {
		// No-op
	}

	public static readonly extensionId = "dis:bb89f4c0-80fd-4f0c-8469-4f2848ee7f4a";

	public processSignal(address: string, message: IExtensionMessage, local: boolean): void {
		this.manager.processSignal(address, message, local);
	}
}

/**
 * Acquire an Presence from a Fluid Container
 * @param fluidContainer - Fluid Container to acquire the map from
 * @returns the Presence
 *
 * @alpha
 */
export function getPresence(fluidContainer: IFluidContainer): Presence {
	assert(
		isInternalFluidContainer(fluidContainer),
		0xa2f /* IFluidContainer was not recognized. Only Containers generated by the Fluid Framework are supported. */,
	);
	const innerContainer = fluidContainer.container;

	assert(
		isContainerExtensionStore(innerContainer),
		0xa39 /* Container does not support extensions. Use getPresenceViaDataObject. */,
	);

	const presence = innerContainer.acquireExtension(
		ContainerPresenceManager.extensionId,
		ContainerPresenceManager,
	);
	return presence;
}
