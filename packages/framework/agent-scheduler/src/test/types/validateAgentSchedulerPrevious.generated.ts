/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type * as old from "@fluidframework/agent-scheduler-previous/internal";
import type { TypeOnly, MinimalType, FullType } from "@fluidframework/build-tools";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_AgentSchedulerFactory": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_AgentSchedulerFactory():
    TypeOnly<old.AgentSchedulerFactory>;
declare function use_current_ClassDeclaration_AgentSchedulerFactory(
    use: TypeOnly<current.AgentSchedulerFactory>): void;
use_current_ClassDeclaration_AgentSchedulerFactory(
    get_old_ClassDeclaration_AgentSchedulerFactory());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_AgentSchedulerFactory": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_AgentSchedulerFactory():
    TypeOnly<current.AgentSchedulerFactory>;
declare function use_old_ClassDeclaration_AgentSchedulerFactory(
    use: TypeOnly<old.AgentSchedulerFactory>): void;
use_old_ClassDeclaration_AgentSchedulerFactory(
    get_current_ClassDeclaration_AgentSchedulerFactory());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_IAgentScheduler": {"forwardCompat": false}
 */
declare function get_old_VariableDeclaration_IAgentScheduler():
    TypeOnly<typeof old.IAgentScheduler>;
declare function use_current_VariableDeclaration_IAgentScheduler(
    use: TypeOnly<typeof current.IAgentScheduler>): void;
use_current_VariableDeclaration_IAgentScheduler(
    get_old_VariableDeclaration_IAgentScheduler());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_IAgentScheduler": {"backCompat": false}
 */
declare function get_current_VariableDeclaration_IAgentScheduler():
    TypeOnly<typeof current.IAgentScheduler>;
declare function use_old_VariableDeclaration_IAgentScheduler(
    use: TypeOnly<typeof old.IAgentScheduler>): void;
use_old_VariableDeclaration_IAgentScheduler(
    get_current_VariableDeclaration_IAgentScheduler());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IAgentScheduler": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IAgentScheduler():
    TypeOnly<old.IAgentScheduler>;
declare function use_current_InterfaceDeclaration_IAgentScheduler(
    use: TypeOnly<current.IAgentScheduler>): void;
use_current_InterfaceDeclaration_IAgentScheduler(
    get_old_InterfaceDeclaration_IAgentScheduler());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IAgentScheduler": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IAgentScheduler():
    TypeOnly<current.IAgentScheduler>;
declare function use_old_InterfaceDeclaration_IAgentScheduler(
    use: TypeOnly<old.IAgentScheduler>): void;
use_old_InterfaceDeclaration_IAgentScheduler(
    get_current_InterfaceDeclaration_IAgentScheduler());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IAgentSchedulerEvents": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IAgentSchedulerEvents():
    TypeOnly<old.IAgentSchedulerEvents>;
declare function use_current_InterfaceDeclaration_IAgentSchedulerEvents(
    use: TypeOnly<current.IAgentSchedulerEvents>): void;
use_current_InterfaceDeclaration_IAgentSchedulerEvents(
    get_old_InterfaceDeclaration_IAgentSchedulerEvents());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IAgentSchedulerEvents": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IAgentSchedulerEvents():
    TypeOnly<current.IAgentSchedulerEvents>;
declare function use_old_InterfaceDeclaration_IAgentSchedulerEvents(
    use: TypeOnly<old.IAgentSchedulerEvents>): void;
use_old_InterfaceDeclaration_IAgentSchedulerEvents(
    get_current_InterfaceDeclaration_IAgentSchedulerEvents());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IProvideAgentScheduler": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IProvideAgentScheduler():
    TypeOnly<old.IProvideAgentScheduler>;
declare function use_current_InterfaceDeclaration_IProvideAgentScheduler(
    use: TypeOnly<current.IProvideAgentScheduler>): void;
use_current_InterfaceDeclaration_IProvideAgentScheduler(
    get_old_InterfaceDeclaration_IProvideAgentScheduler());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IProvideAgentScheduler": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IProvideAgentScheduler():
    TypeOnly<current.IProvideAgentScheduler>;
declare function use_old_InterfaceDeclaration_IProvideAgentScheduler(
    use: TypeOnly<old.IProvideAgentScheduler>): void;
use_old_InterfaceDeclaration_IProvideAgentScheduler(
    get_current_InterfaceDeclaration_IProvideAgentScheduler());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ITaskSubscriptionEvents": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_ITaskSubscriptionEvents():
    TypeOnly<old.ITaskSubscriptionEvents>;
declare function use_current_InterfaceDeclaration_ITaskSubscriptionEvents(
    use: TypeOnly<current.ITaskSubscriptionEvents>): void;
use_current_InterfaceDeclaration_ITaskSubscriptionEvents(
    get_old_InterfaceDeclaration_ITaskSubscriptionEvents());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ITaskSubscriptionEvents": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_ITaskSubscriptionEvents():
    TypeOnly<current.ITaskSubscriptionEvents>;
declare function use_old_InterfaceDeclaration_ITaskSubscriptionEvents(
    use: TypeOnly<old.ITaskSubscriptionEvents>): void;
use_old_InterfaceDeclaration_ITaskSubscriptionEvents(
    get_current_InterfaceDeclaration_ITaskSubscriptionEvents());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_TaskSubscription": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_TaskSubscription():
    TypeOnly<old.TaskSubscription>;
declare function use_current_ClassDeclaration_TaskSubscription(
    use: TypeOnly<current.TaskSubscription>): void;
use_current_ClassDeclaration_TaskSubscription(
    get_old_ClassDeclaration_TaskSubscription());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_TaskSubscription": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_TaskSubscription():
    TypeOnly<current.TaskSubscription>;
declare function use_old_ClassDeclaration_TaskSubscription(
    use: TypeOnly<old.TaskSubscription>): void;
use_old_ClassDeclaration_TaskSubscription(
    get_current_ClassDeclaration_TaskSubscription());
