/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type * as old from "@fluidframework/agent-scheduler-previous/internal";
import type { TypeOnly, MinimalType, FullType, requireAssignableTo } from "@fluidframework/build-tools";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current | requireAssignableTo<true, true>;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_AgentSchedulerFactory": {"forwardCompat": false}
 */
declare type old_as_current_for_ClassDeclaration_AgentSchedulerFactory = requireAssignableTo<TypeOnly<old.AgentSchedulerFactory>, TypeOnly<current.AgentSchedulerFactory>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_AgentSchedulerFactory": {"backCompat": false}
 */
declare type current_as_old_for_ClassDeclaration_AgentSchedulerFactory = requireAssignableTo<TypeOnly<current.AgentSchedulerFactory>, TypeOnly<old.AgentSchedulerFactory>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_IAgentScheduler": {"forwardCompat": false}
 */
declare type old_as_current_for_VariableDeclaration_IAgentScheduler = requireAssignableTo<TypeOnly<typeof old.IAgentScheduler>, TypeOnly<typeof current.IAgentScheduler>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_IAgentScheduler": {"backCompat": false}
 */
declare type current_as_old_for_VariableDeclaration_IAgentScheduler = requireAssignableTo<TypeOnly<typeof current.IAgentScheduler>, TypeOnly<typeof old.IAgentScheduler>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IAgentScheduler": {"forwardCompat": false}
 */
declare type old_as_current_for_InterfaceDeclaration_IAgentScheduler = requireAssignableTo<TypeOnly<old.IAgentScheduler>, TypeOnly<current.IAgentScheduler>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IAgentScheduler": {"backCompat": false}
 */
declare type current_as_old_for_InterfaceDeclaration_IAgentScheduler = requireAssignableTo<TypeOnly<current.IAgentScheduler>, TypeOnly<old.IAgentScheduler>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IAgentSchedulerEvents": {"forwardCompat": false}
 */
declare type old_as_current_for_InterfaceDeclaration_IAgentSchedulerEvents = requireAssignableTo<TypeOnly<old.IAgentSchedulerEvents>, TypeOnly<current.IAgentSchedulerEvents>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IAgentSchedulerEvents": {"backCompat": false}
 */
declare type current_as_old_for_InterfaceDeclaration_IAgentSchedulerEvents = requireAssignableTo<TypeOnly<current.IAgentSchedulerEvents>, TypeOnly<old.IAgentSchedulerEvents>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IProvideAgentScheduler": {"forwardCompat": false}
 */
declare type old_as_current_for_InterfaceDeclaration_IProvideAgentScheduler = requireAssignableTo<TypeOnly<old.IProvideAgentScheduler>, TypeOnly<current.IProvideAgentScheduler>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IProvideAgentScheduler": {"backCompat": false}
 */
declare type current_as_old_for_InterfaceDeclaration_IProvideAgentScheduler = requireAssignableTo<TypeOnly<current.IProvideAgentScheduler>, TypeOnly<old.IProvideAgentScheduler>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ITaskSubscriptionEvents": {"forwardCompat": false}
 */
declare type old_as_current_for_InterfaceDeclaration_ITaskSubscriptionEvents = requireAssignableTo<TypeOnly<old.ITaskSubscriptionEvents>, TypeOnly<current.ITaskSubscriptionEvents>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ITaskSubscriptionEvents": {"backCompat": false}
 */
declare type current_as_old_for_InterfaceDeclaration_ITaskSubscriptionEvents = requireAssignableTo<TypeOnly<current.ITaskSubscriptionEvents>, TypeOnly<old.ITaskSubscriptionEvents>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_TaskSubscription": {"forwardCompat": false}
 */
declare type old_as_current_for_ClassDeclaration_TaskSubscription = requireAssignableTo<TypeOnly<old.TaskSubscription>, TypeOnly<current.TaskSubscription>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_TaskSubscription": {"backCompat": false}
 */
declare type current_as_old_for_ClassDeclaration_TaskSubscription = requireAssignableTo<TypeOnly<current.TaskSubscription>, TypeOnly<old.TaskSubscription>>
