/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType, requireAssignableTo } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/dds-interceptions-previous";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current | requireAssignableTo<true, true>;

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Function_createDirectoryWithInterception": {"backCompat": false}
 */
declare type current_as_old_for_Function_createDirectoryWithInterception = requireAssignableTo<TypeOnly<typeof current.createDirectoryWithInterception>, TypeOnly<typeof old.createDirectoryWithInterception>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Function_createSharedMapWithInterception": {"backCompat": false}
 */
declare type current_as_old_for_Function_createSharedMapWithInterception = requireAssignableTo<TypeOnly<typeof current.createSharedMapWithInterception>, TypeOnly<typeof old.createSharedMapWithInterception>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Function_createSharedStringWithInterception": {"backCompat": false}
 */
declare type current_as_old_for_Function_createSharedStringWithInterception = requireAssignableTo<TypeOnly<typeof current.createSharedStringWithInterception>, TypeOnly<typeof old.createSharedStringWithInterception>>
