/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-test-generator in @fluidframework/build-tools.
 */
import type * as old from "@fluidframework/app-insights-logger-previous";
import type * as current from "../../index";


// See 'build-tools/src/type-test-generator/compatibility.ts' for more information.
type TypeOnly<T> = T extends number
	? number
	: T extends string
	? string
	: T extends boolean | bigint | symbol
	? T
	: {
			[P in keyof T]: TypeOnly<T[P]>;
	  };

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_FluidAppInsightsLoggerConfig": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_FluidAppInsightsLoggerConfig():
    TypeOnly<old.FluidAppInsightsLoggerConfig>;
declare function use_current_InterfaceDeclaration_FluidAppInsightsLoggerConfig(
    use: TypeOnly<current.FluidAppInsightsLoggerConfig>): void;
use_current_InterfaceDeclaration_FluidAppInsightsLoggerConfig(
    get_old_InterfaceDeclaration_FluidAppInsightsLoggerConfig());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_FluidAppInsightsLoggerConfig": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_FluidAppInsightsLoggerConfig():
    TypeOnly<current.FluidAppInsightsLoggerConfig>;
declare function use_old_InterfaceDeclaration_FluidAppInsightsLoggerConfig(
    use: TypeOnly<old.FluidAppInsightsLoggerConfig>): void;
use_old_InterfaceDeclaration_FluidAppInsightsLoggerConfig(
    get_current_InterfaceDeclaration_FluidAppInsightsLoggerConfig());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_CategoryFilter": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_CategoryFilter():
    TypeOnly<old.CategoryFilter>;
declare function use_current_InterfaceDeclaration_CategoryFilter(
    use: TypeOnly<current.CategoryFilter>): void;
use_current_InterfaceDeclaration_CategoryFilter(
    get_old_InterfaceDeclaration_CategoryFilter());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_CategoryFilter": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_CategoryFilter():
    TypeOnly<current.CategoryFilter>;
declare function use_old_InterfaceDeclaration_CategoryFilter(
    use: TypeOnly<old.CategoryFilter>): void;
use_old_InterfaceDeclaration_CategoryFilter(
    get_current_InterfaceDeclaration_CategoryFilter());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_NamespaceFilter": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_NamespaceFilter():
    TypeOnly<old.NamespaceFilter>;
declare function use_current_InterfaceDeclaration_NamespaceFilter(
    use: TypeOnly<current.NamespaceFilter>): void;
use_current_InterfaceDeclaration_NamespaceFilter(
    get_old_InterfaceDeclaration_NamespaceFilter());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_NamespaceFilter": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_NamespaceFilter():
    TypeOnly<current.NamespaceFilter>;
declare function use_old_InterfaceDeclaration_NamespaceFilter(
    use: TypeOnly<old.NamespaceFilter>): void;
use_old_InterfaceDeclaration_NamespaceFilter(
    get_current_InterfaceDeclaration_NamespaceFilter());
