/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-validator in @fluidframework/build-tools.
 */
import * as old from "@fluid-experimental/oldest-client-observer-previous";
import * as current from "../../index";

type TypeOnly<T> = {
    [P in keyof T]: TypeOnly<T[P]>;
};

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IOldestClientObservable": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IOldestClientObservable():
    TypeOnly<old.IOldestClientObservable>;
declare function use_current_InterfaceDeclaration_IOldestClientObservable(
    use: TypeOnly<current.IOldestClientObservable>);
use_current_InterfaceDeclaration_IOldestClientObservable(
    get_old_InterfaceDeclaration_IOldestClientObservable());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IOldestClientObservable": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IOldestClientObservable():
    TypeOnly<current.IOldestClientObservable>;
declare function use_old_InterfaceDeclaration_IOldestClientObservable(
    use: TypeOnly<old.IOldestClientObservable>);
use_old_InterfaceDeclaration_IOldestClientObservable(
    get_current_InterfaceDeclaration_IOldestClientObservable());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IOldestClientObservableEvents": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IOldestClientObservableEvents():
    TypeOnly<old.IOldestClientObservableEvents>;
declare function use_current_InterfaceDeclaration_IOldestClientObservableEvents(
    use: TypeOnly<current.IOldestClientObservableEvents>);
use_current_InterfaceDeclaration_IOldestClientObservableEvents(
    get_old_InterfaceDeclaration_IOldestClientObservableEvents());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IOldestClientObservableEvents": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IOldestClientObservableEvents():
    TypeOnly<current.IOldestClientObservableEvents>;
declare function use_old_InterfaceDeclaration_IOldestClientObservableEvents(
    use: TypeOnly<old.IOldestClientObservableEvents>);
use_old_InterfaceDeclaration_IOldestClientObservableEvents(
    get_current_InterfaceDeclaration_IOldestClientObservableEvents());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IOldestClientObserver": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IOldestClientObserver():
    TypeOnly<old.IOldestClientObserver>;
declare function use_current_InterfaceDeclaration_IOldestClientObserver(
    use: TypeOnly<current.IOldestClientObserver>);
use_current_InterfaceDeclaration_IOldestClientObserver(
    get_old_InterfaceDeclaration_IOldestClientObserver());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IOldestClientObserver": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IOldestClientObserver():
    TypeOnly<current.IOldestClientObserver>;
declare function use_old_InterfaceDeclaration_IOldestClientObserver(
    use: TypeOnly<old.IOldestClientObserver>);
use_old_InterfaceDeclaration_IOldestClientObserver(
    get_current_InterfaceDeclaration_IOldestClientObserver());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IOldestClientObserverEvents": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IOldestClientObserverEvents():
    TypeOnly<old.IOldestClientObserverEvents>;
declare function use_current_InterfaceDeclaration_IOldestClientObserverEvents(
    use: TypeOnly<current.IOldestClientObserverEvents>);
use_current_InterfaceDeclaration_IOldestClientObserverEvents(
    get_old_InterfaceDeclaration_IOldestClientObserverEvents());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IOldestClientObserverEvents": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IOldestClientObserverEvents():
    TypeOnly<current.IOldestClientObserverEvents>;
declare function use_old_InterfaceDeclaration_IOldestClientObserverEvents(
    use: TypeOnly<old.IOldestClientObserverEvents>);
use_old_InterfaceDeclaration_IOldestClientObserverEvents(
    get_current_InterfaceDeclaration_IOldestClientObserverEvents());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_OldestClientObserver": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_OldestClientObserver():
    TypeOnly<old.OldestClientObserver>;
declare function use_current_ClassDeclaration_OldestClientObserver(
    use: TypeOnly<current.OldestClientObserver>);
use_current_ClassDeclaration_OldestClientObserver(
    get_old_ClassDeclaration_OldestClientObserver());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_OldestClientObserver": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_OldestClientObserver():
    TypeOnly<current.OldestClientObserver>;
declare function use_old_ClassDeclaration_OldestClientObserver(
    use: TypeOnly<old.OldestClientObserver>);
use_old_ClassDeclaration_OldestClientObserver(
    get_current_ClassDeclaration_OldestClientObserver());
