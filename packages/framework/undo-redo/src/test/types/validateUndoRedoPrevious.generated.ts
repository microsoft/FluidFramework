/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType, requireAssignableTo } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/undo-redo-previous/internal";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current | requireAssignableTo<true, true>;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_SharedMapRevertible": {"forwardCompat": false}
 */
declare type old_as_current_for_Class_SharedMapRevertible = requireAssignableTo<TypeOnly<old.SharedMapRevertible>, TypeOnly<current.SharedMapRevertible>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_SharedMapRevertible": {"backCompat": false}
 */
declare type current_as_old_for_Class_SharedMapRevertible = requireAssignableTo<TypeOnly<current.SharedMapRevertible>, TypeOnly<old.SharedMapRevertible>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_SharedMapUndoRedoHandler": {"forwardCompat": false}
 */
declare type old_as_current_for_Class_SharedMapUndoRedoHandler = requireAssignableTo<TypeOnly<old.SharedMapUndoRedoHandler>, TypeOnly<current.SharedMapUndoRedoHandler>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_SharedMapUndoRedoHandler": {"backCompat": false}
 */
declare type current_as_old_for_Class_SharedMapUndoRedoHandler = requireAssignableTo<TypeOnly<current.SharedMapUndoRedoHandler>, TypeOnly<old.SharedMapUndoRedoHandler>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_SharedSegmentSequenceRevertible": {"forwardCompat": false}
 */
declare type old_as_current_for_Class_SharedSegmentSequenceRevertible = requireAssignableTo<TypeOnly<old.SharedSegmentSequenceRevertible>, TypeOnly<current.SharedSegmentSequenceRevertible>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_SharedSegmentSequenceRevertible": {"backCompat": false}
 */
declare type current_as_old_for_Class_SharedSegmentSequenceRevertible = requireAssignableTo<TypeOnly<current.SharedSegmentSequenceRevertible>, TypeOnly<old.SharedSegmentSequenceRevertible>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_SharedSegmentSequenceUndoRedoHandler": {"forwardCompat": false}
 */
declare type old_as_current_for_Class_SharedSegmentSequenceUndoRedoHandler = requireAssignableTo<TypeOnly<old.SharedSegmentSequenceUndoRedoHandler>, TypeOnly<current.SharedSegmentSequenceUndoRedoHandler>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_SharedSegmentSequenceUndoRedoHandler": {"backCompat": false}
 */
declare type current_as_old_for_Class_SharedSegmentSequenceUndoRedoHandler = requireAssignableTo<TypeOnly<current.SharedSegmentSequenceUndoRedoHandler>, TypeOnly<old.SharedSegmentSequenceUndoRedoHandler>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_UndoRedoStackManager": {"forwardCompat": false}
 */
declare type old_as_current_for_Class_UndoRedoStackManager = requireAssignableTo<TypeOnly<old.UndoRedoStackManager>, TypeOnly<current.UndoRedoStackManager>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_UndoRedoStackManager": {"backCompat": false}
 */
declare type current_as_old_for_Class_UndoRedoStackManager = requireAssignableTo<TypeOnly<current.UndoRedoStackManager>, TypeOnly<old.UndoRedoStackManager>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_SharedMapRevertible": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_SharedMapRevertible = requireAssignableTo<TypeOnly<typeof current.SharedMapRevertible>, TypeOnly<typeof old.SharedMapRevertible>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_SharedMapUndoRedoHandler": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_SharedMapUndoRedoHandler = requireAssignableTo<TypeOnly<typeof current.SharedMapUndoRedoHandler>, TypeOnly<typeof old.SharedMapUndoRedoHandler>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_SharedSegmentSequenceRevertible": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_SharedSegmentSequenceRevertible = requireAssignableTo<TypeOnly<typeof current.SharedSegmentSequenceRevertible>, TypeOnly<typeof old.SharedSegmentSequenceRevertible>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_SharedSegmentSequenceUndoRedoHandler": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_SharedSegmentSequenceUndoRedoHandler = requireAssignableTo<TypeOnly<typeof current.SharedSegmentSequenceUndoRedoHandler>, TypeOnly<typeof old.SharedSegmentSequenceUndoRedoHandler>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_UndoRedoStackManager": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_UndoRedoStackManager = requireAssignableTo<TypeOnly<typeof current.UndoRedoStackManager>, TypeOnly<typeof old.UndoRedoStackManager>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IRevertible": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IRevertible = requireAssignableTo<TypeOnly<old.IRevertible>, TypeOnly<current.IRevertible>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IRevertible": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IRevertible = requireAssignableTo<TypeOnly<current.IRevertible>, TypeOnly<old.IRevertible>>
