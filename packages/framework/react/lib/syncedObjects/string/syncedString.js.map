{"version":3,"file":"syncedString.js","sourceRoot":"","sources":["../../../src/syncedObjects/string/syncedString.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AAExD,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AAGpD;;;;;;;;GAQG;AACH,MAAM,UAAU,qBAAqB,CACjC,gBAAkC,EAClC,aAAqB,EACrB,YAAoB;IAEpB,gBAAgB,CAAC,SAAS,CAAqB,aAAa,EAAE;QAC1D,aAAa;QACb,WAAW,EAAE,IAAI,GAAG,CAAC;YACjB;gBACI,OAAO,EAAE;oBACL,IAAI,EAAE,YAAY,CAAC,IAAI;oBACvB,OAAO,EAAE,OAAO;oBAChB,kBAAkB,EAAE,CAAC,OAAO,EAAE,EAAE;wBAC5B,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;wBACzC,GAAG,CAAC,UAAU,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;wBAChC,OAAO,GAAG,CAAC;oBACf,CAAC;iBACJ;aACJ;SACJ,CAAQ;QACT,gBAAgB,EAAE,EAAE;KACvB,CAAC,CAAC;AACP,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,eAAe,CAC3B,gBAAkC,EAClC,aAAqB;IAErB,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,aAAa,CACnC;QACI,gBAAgB;QAChB,aAAa;KAChB,EAAE,EAAE,CACR,CAAC;IACF,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;AACnC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { SharedString } from \"@fluidframework/sequence\";\nimport { SyncedDataObject } from \"../..\";\nimport { useStateFluid } from \"../../useStateFluid\";\nimport { ISyncedStringState } from \"./interface\";\n\n/**\n * Function to set the config for a synced string on a syncedDataObject's SharedMap synced state. This\n * will initialize and provide a SharedString for the view to use. This SharedString provided is automatically\n * bound to the state update of the functional view useSyncedString is called in. It can also easily be placed\n * in a CollaborativeInput within a React view.\n * @param syncedDataObject - The Fluid data object on which the synced state config is being set\n * @param syncedStateId - The ID of the view state that this config schema is being set for\n * @param defaultValue - The default string that the SharedString will be initialized as\n */\nexport function setSyncedStringConfig(\n    syncedDataObject: SyncedDataObject,\n    syncedStateId: string,\n    defaultValue: string,\n) {\n    syncedDataObject.setConfig<ISyncedStringState>(syncedStateId, {\n        syncedStateId,\n        fluidToView: new Map([\n            [\n                \"value\", {\n                    type: SharedString.name,\n                    viewKey: \"value\",\n                    sharedObjectCreate: (runtime) => {\n                        const url = SharedString.create(runtime);\n                        url.insertText(0, defaultValue);\n                        return url;\n                    },\n                },\n            ],\n        ]) as any,\n        defaultViewState: {},\n    });\n}\n\n/**\n * Function to use the SharedString state that has been prepared for this view\n * @param syncedDataObject - The Fluid data object that holds the synced state config for this view\n * @param syncedStateId - The ID of this view state\n * @returns [the initialized SharedString, a synced setState call for the SharedString]\n */\nexport function useSyncedString(\n    syncedDataObject: SyncedDataObject,\n    syncedStateId: string,\n): [SharedString | undefined, (newState: ISyncedStringState) => void] {\n    const [state, setState] = useStateFluid<ISyncedStringState, ISyncedStringState>(\n        {\n            syncedDataObject,\n            syncedStateId,\n        }, {},\n    );\n    return [state.value, setState];\n}\n"]}