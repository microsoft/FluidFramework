{"version":3,"file":"syncedObject.js","sourceRoot":"","sources":["../../../src/syncedObjects/object/syncedObject.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAGH,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AAGpD;;;;;;GAMG;AACH,MAAM,UAAU,qBAAqB,CACjC,gBAAkC,EAClC,aAAqB,EACrB,YAAe;IAEf,gBAAgB,CAAC,SAAS,CAAqB,aAAa,EAAE;QAC1D,aAAa;QACb,WAAW,EAAE,IAAI,GAAG,CAAC;YACjB;gBACI,OAAO,EAAE;oBACL,IAAI,EAAE,KAAK;oBACX,OAAO,EAAE,OAAO;iBACnB;aACJ;SACJ,CAAC;QACF,gBAAgB,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE;KAC5C,CAAC,CAAC;AACP,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,eAAe,CAC3B,gBAAkC,EAClC,aAAqB,EACrB,YAAe;IAEf,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,aAAa,CACnC;QACI,gBAAgB;QAChB,aAAa;KAChB,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,CAC7B,CAAC;IACF,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,QAAW,EAAE,EAAE,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;AACzE,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { SyncedDataObject } from \"../..\";\nimport { useStateFluid } from \"../../useStateFluid\";\nimport { ISyncedMapState } from \"./interface\";\n\n/**\n * Function to set the config for any type T object on a syncedDataObject's SharedMap synced state\n * @param syncedDataObject - The Fluid data object on which the synced state config is being set\n * @param syncedStateId - The ID of the view state that this config schema is being set for\n * @param defaultValue - The default value of type T that the state will be initialized with prior to\n * Fluid initialization\n */\nexport function setSyncedObjectConfig<T>(\n    syncedDataObject: SyncedDataObject,\n    syncedStateId: string,\n    defaultValue: T,\n) {\n    syncedDataObject.setConfig<ISyncedMapState<T>>(syncedStateId, {\n        syncedStateId,\n        fluidToView: new Map([\n            [\n                \"value\", {\n                    type: \"any\",\n                    viewKey: \"value\",\n                },\n            ],\n        ]),\n        defaultViewState: { value: defaultValue },\n    });\n}\n\n/**\n * Function to use the synced state of type T that has been prepared for this view\n * @param syncedDataObject - The Fluid data object that holds the synced state config for this view\n * @param syncedStateId - The ID of this view state\n * @param defaultValue - The default value of type T that the view state will be initialized with\n * @returns [the initialized synced state of type T, a synced setState call for the state]\n */\nexport function useSyncedObject<T>(\n    syncedDataObject: SyncedDataObject,\n    syncedStateId: string,\n    defaultValue: T,\n): [T, (newState: T) => void] {\n    const [state, setState] = useStateFluid<ISyncedMapState<T>, ISyncedMapState<T>>(\n        {\n            syncedDataObject,\n            syncedStateId,\n        }, { value: defaultValue },\n    );\n    return [state.value, (newState: T) => setState({ value: newState })];\n}\n"]}