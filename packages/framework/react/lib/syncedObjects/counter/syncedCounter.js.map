{"version":3,"file":"syncedCounter.js","sourceRoot":"","sources":["../../../src/syncedObjects/counter/syncedCounter.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;AAGxD,OAAO,EAAE,2BAA2B,EAAE,4BAA4B,EAAE,MAAM,sBAAsB,CAAC;AAEjG;;;;;;;;GAQG;AACH,MAAM,UAAU,sBAAsB,CAClC,gBAAkC,EAClC,aAAqB,EACrB,eAAuB,CAAC,EACxB,qBAAyE,aAAa,CAAC,MAAM;IAE7F,2BAA2B,CACvB,gBAAgB,EAChB,aAAa,EACb,OAAO,EACP,SAAS,EACT,EAAE,KAAK,EAAE,YAAY,EAAE,EACvB,kBAAkB,CACrB,CAAC;AACN,CAAC;AAED;;;;;;;;GAQG;AACH,MAAM,UAAU,gBAAgB,CAC5B,gBAAkC,EAClC,aAAqB,EACrB,eAAuB,CAAC;IAIxB,MAAM,CAAC,KAAK,EAAE,YAAY,CAAC,GAAG,4BAA4B,CACtD,gBAAgB,EAChB,aAAa,EACb,OAAO,EACP,SAAS,EACT,EAAE,KAAK,EAAE,YAAY,EAAE,CAC1B,CAAC;IACF,MAAM,OAAO,GAA0B;QACnC,SAAS,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC;KAC5E,CAAC;IAEF,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;AAC5C,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { IFluidDataStoreRuntime } from \"@fluidframework/datastore-definitions\";\nimport { SharedCounter } from \"@fluidframework/counter\";\nimport { SyncedDataObject } from \"../..\";\nimport { ISyncedCounterViewState, ISyncedCounterFluidState, ISyncedCounterReducer } from \"./interface\";\nimport { setFluidSyncedCounterConfig, useSyncedCounterReducerFluid } from \"./fluidSyncedCounter\";\n\n/**\n * Function to set the config for a synced counter on a syncedDataObject's SharedMap synced state. This\n * will initialize and provide a SharedCount for the view to use. This SharedString provided is automatically\n * bound to the state update of the functional view useSyncedCounter is called in.\n * @param syncedDataObject - The Fluid data object on which the synced state config is being set\n * @param syncedStateId - The ID of the view state that this config schema is being set for\n * @param defaultValue - The default number the view value will be set to prior to the Fluid counter initializing\n * @param sharedObjectCreate - The creation function for the SharedCounter. This can be set to pre-increment the counter\n */\nexport function setSyncedCounterConfig(\n    syncedDataObject: SyncedDataObject,\n    syncedStateId: string,\n    defaultValue: number = 0,\n    sharedObjectCreate: (runtime: IFluidDataStoreRuntime) => SharedCounter = SharedCounter.create,\n) {\n    setFluidSyncedCounterConfig<ISyncedCounterViewState, ISyncedCounterFluidState>(\n        syncedDataObject,\n        syncedStateId,\n        \"value\",\n        \"counter\",\n        { value: defaultValue },\n        sharedObjectCreate,\n    );\n}\n\n/**\n * Function to use the synced counter state powered by a SharedCounter that has been prepared for this view\n * @param syncedDataObject - The Fluid data object that holds the synced state config for this view\n * @param syncedStateId - The ID of this view state\n * @returns [\n *  the number that the SharedCounter has been incremented to,\n *  the reducer to modify the SharedCounter by incrementing it\n * ]\n */\nexport function useSyncedCounter(\n    syncedDataObject: SyncedDataObject,\n    syncedStateId: string,\n    defaultValue: number = 0,\n): [number, ISyncedCounterReducer] {\n    type viewState = ISyncedCounterViewState;\n    type fluidState = ISyncedCounterFluidState;\n    const [state, fluidReducer] = useSyncedCounterReducerFluid<viewState, fluidState>(\n        syncedDataObject,\n        syncedStateId,\n        \"value\",\n        \"counter\",\n        { value: defaultValue },\n    );\n    const reducer: ISyncedCounterReducer = {\n        increment: (step: number) => fluidReducer.increment.function(state, step),\n    };\n\n    return [state.viewState.value, reducer];\n}\n"]}