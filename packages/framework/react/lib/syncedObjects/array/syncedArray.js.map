{"version":3,"file":"syncedArray.js","sourceRoot":"","sources":["../../../src/syncedObjects/array/syncedArray.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,OAAO,EAAE,oBAAoB,EAAE,MAAM,0BAA0B,CAAC;AAGhE,OAAO,EAAE,yBAAyB,EAAE,0BAA0B,EAAE,MAAM,oBAAoB,CAAC;AAE3F;;;;;;;;;;GAUG;AACH,MAAM,UAAU,oBAAoB,CAChC,gBAAkC,EAClC,aAAqB,EACrB,eAAoB,EAAE,EACtB,kBAAkB,GAAG,oBAAoB,CAAC,MAAM;IAEhD,yBAAyB,CACrB,gBAAgB,EAChB,aAAa,EACb,QAAQ,EACR,QAAQ,EACR,EAAE,MAAM,EAAE,YAAY,EAAE,EACxB,kBAAkB,CACrB,CAAC;AACN,CAAC;AAED;;;;;;;;GAQG;AACH,MAAM,UAAU,cAAc,CAC1B,gBAAkC,EAClC,aAAqB,EACrB,eAAe,EAAS;IAIxB,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,GAAG,0BAA0B,CAC/C,gBAAgB,EAChB,aAAa,EACb,QAAQ,EACR,QAAQ,EACR,EAAE,MAAM,EAAE,YAAY,EAAE,CAC3B,CAAC;IACF,MAAM,WAAW,GAA2B;QACxC,GAAG,EAAE,CAAC,KAAQ,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC;KACxD,CAAC;IAEF,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;AACjD,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { SharedObjectSequence } from \"@fluidframework/sequence\";\nimport { SyncedDataObject } from \"../..\";\nimport { ISyncedArrayViewState, ISyncedArrayFluidState, ISyncedArrayReducer } from \"./interface\";\nimport { setFluidSyncedArrayConfig, useSyncedArrayReducerFluid } from \"./fluidSyncedArray\";\n\n/**\n * Function to set the config for a synced array on a syncedDataObject's SharedMap synced state. This\n * will initialize and provide a SharedObjectSequence<T> for the view to use through a T[] interface.\n * This SharedObjectSequence provided is automatically bound to the state update of the\n * functional view useSyncedArray is called in.\n * @param syncedDataObject - The Fluid data object on which the synced state config is being set\n * @param syncedStateId - The ID of the view state that this config schema is being set for\n * @param defaultValue - The default values in the view array prior to the SharedObjectSequence initializing\n * @param sharedObjectCreate - The creation function for the SharedObjectSequence. This can be set to\n * pre-increment the sequence with initial values.\n */\nexport function setSyncedArrayConfig<T>(\n    syncedDataObject: SyncedDataObject,\n    syncedStateId: string,\n    defaultValue: T[] = [],\n    sharedObjectCreate = SharedObjectSequence.create,\n) {\n    setFluidSyncedArrayConfig<ISyncedArrayViewState<T>, ISyncedArrayFluidState<T>>(\n        syncedDataObject,\n        syncedStateId,\n        \"values\",\n        \"values\",\n        { values: defaultValue },\n        sharedObjectCreate,\n    );\n}\n\n/**\n * Function to use the synced array state powered by a SharedObjectSequence<T> that has been prepared for this view\n * @param syncedDataObject - The Fluid data object that holds the synced state config for this view\n * @param syncedStateId - The ID of this view state\n * @returns [\n *  the array of T objects currently in the SharedObjectSequence,\n *  the reducer to modify values on the SharedObjectSequence\n * ]\n */\nexport function useSyncedArray<T>(\n    syncedDataObject: SyncedDataObject,\n    syncedStateId: string,\n    defaultValue = [] as T[],\n): [T[], ISyncedArrayReducer<T>] {\n    type viewState = ISyncedArrayViewState<T>;\n    type fluidState = ISyncedArrayFluidState<T>;\n    const [state, reducer] = useSyncedArrayReducerFluid<viewState, fluidState>(\n        syncedDataObject,\n        syncedStateId,\n        \"values\",\n        \"values\",\n        { values: defaultValue },\n    );\n    const pureReducer: ISyncedArrayReducer<T> = {\n        add: (value: T) => reducer.add.function(state, value),\n    };\n\n    return [state.viewState.values, pureReducer];\n}\n"]}