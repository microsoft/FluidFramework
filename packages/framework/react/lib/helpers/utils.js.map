{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/helpers/utils.tsx"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { IFluidHandle } from \"@fluidframework/core-interfaces\";\nimport { IDirectoryValueChanged, SharedMap } from \"@fluidframework/map\";\nimport { SharedObject } from \"@fluidframework/shared-object-base\";\nimport {\n    FluidObjectMap,\n    IFluidState,\n    IViewState,\n    IFluidConverter,\n} from \"../interface\";\nimport { IFluidObjectMapItem } from \"..\";\n\nexport function getByFluidKey<\n    SV extends IViewState,\n    SF extends IFluidState\n>(searchValue: string, map: Map<keyof SV, IFluidConverter<SV, SF>>) {\n    for (const [key, value] of map.entries()) {\n        if (value.fluidKey === searchValue) {\n            return key;\n        }\n    }\n}\n\nexport async function asyncForEach(\n    array: IFluidHandle[],\n    callback: (\n        handle: IFluidHandle,\n        fluidObjectMap: FluidObjectMap,\n        syncedStateCallback: (change: IDirectoryValueChanged, local: boolean) => void,\n        refreshView: () => void,\n        storedHandleMap: SharedMap,\n    ) => Promise<void>,\n    fluidObjectMap: FluidObjectMap,\n    syncedStateCallback: (change: IDirectoryValueChanged, local: boolean) => void,\n    refreshView: () => void,\n    storedHandleMap: SharedMap,\n): Promise<void> {\n    const promises: Promise<void>[] = [];\n    for (const value of array) {\n        promises.push(\n            callback(value, fluidObjectMap, syncedStateCallback, refreshView, storedHandleMap),\n        );\n    }\n    await Promise.all(promises);\n}\n\nexport const addFluidObject = async <\n    SV extends IViewState,\n    SF extends IFluidState\n>(\n    handle: IFluidHandle,\n    fluidObjectMap: FluidObjectMap,\n    syncedStateCallback: (change: IDirectoryValueChanged, local: boolean) => void,\n    refreshView: () => void,\n    storedHandleMap: SharedMap,\n): Promise<void> => {\n    const maybeValue: IFluidObjectMapItem | undefined = fluidObjectMap.get(handle.absolutePath);\n    let value: IFluidObjectMapItem = {\n        isListened: false,\n        isRuntimeMap: false,\n    };\n    if (maybeValue === undefined) {\n        fluidObjectMap.set(\n            handle.absolutePath,\n            value,\n        );\n    } else {\n        value = maybeValue;\n    }\n    value.isListened = false;\n    fluidObjectMap.set(handle.absolutePath, value);\n    if (!storedHandleMap.has(handle.absolutePath)) {\n        storedHandleMap.set(handle.absolutePath, handle);\n    }\n    return handle.get().then((fluidObject) => {\n        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n        if (value.isRuntimeMap) {\n            (fluidObject as SharedMap).on(\"valueChanged\", syncedStateCallback);\n        } else if (value.listenedEvents !== undefined) {\n            for (const event of value.listenedEvents) {\n                (fluidObject as SharedObject).on(event, refreshView);\n            }\n        }\n        value.fluidObject = fluidObject;\n        value.isListened = true;\n        fluidObjectMap.set(handle.absolutePath, value);\n    });\n};\n\nexport function isEquivalent(a, b) {\n    if (a === undefined || b === undefined) {\n        return a === b;\n    }\n    const aKeys = Object.getOwnPropertyNames(a);\n    const bKeys = Object.getOwnPropertyNames(b);\n    if (aKeys.length !== bKeys.length) {\n        return false;\n    }\n    for (const i of aKeys) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n"]}