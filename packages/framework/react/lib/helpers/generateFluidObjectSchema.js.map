{"version":3,"file":"generateFluidObjectSchema.js","sourceRoot":"","sources":["../../src/helpers/generateFluidObjectSchema.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAGH,OAAO,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAC;AAShD;;;;;;;KAOK;AACL,MAAM,UAAU,yBAAyB,CAIrC,OAA+B,EAC/B,gBAAoB,EACpB,WAAmC,EACnC,WAAoC;IAEpC,wDAAwD;IACxD,6DAA6D;IAC7D,MAAM,eAAe,GAAG,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAClD,MAAM,gBAAgB,GAAG,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACnD,MAAM,eAAe,GAAG,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAClD,KAAK,MAAM,aAAa,IAAI,WAAW,CAAC,IAAI,EAAE,EAAE;QAC5C,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAC7C,IAAI,KAAK,KAAK,SAAS,EAAE;YACrB,MAAM,KAAK,CAAC,+BAA+B,CAAC,CAAC;SAChD;QACD,MAAM,EACF,IAAI,EACJ,OAAO,EACP,aAAa,GAChB,GAAG,KAAK,CAAC;QACV,MAAM,cAAc,GAAG,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,GAAG,CAAC,OAAO,CAAC,CAAC;QACjD,IAAI,cAAc,KAAK,SAAS,EAAE;YAC9B,IACI,gBAAgB,CAAC,OAAO,CAAC,KAAK,SAAS;mBACpC,OAAO,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,KAAK,IAAI;mBAC3C,IAAI,KAAK,KAAK,EACnB;gBACE,MAAM,KAAK,CAAC,0CAA0C,OAAO,EAAE,CAAC,CAAC;aACpE;iBAAM;gBACH,SAAS;aACZ;SACJ;QACD,IAAI,IAAI,KAAK,cAAc,CAAC,IAAI,EAAE;YAC9B,gBAAgB,CAAC,GAAG,CAAC,aAAuB,EAAE,KAAK,CAAC,CAAC;SACxD;aAAM,IAAI,aAAa,KAAK,SAAS,EAAE;YACpC,gBAAgB,CAAC,GAAG,CAAC,aAAuB,EAAE,IAAI,CAAC,CAAC;SACvD;aAAM;YACH,MAAM,KAAK,CAAC,+CAA+C,aAAa,EAAE,CAAC,CAAC;SAC/E;KACJ;IAED,IAAI,WAAW,KAAK,SAAS,EAAE;QAC3B,KAAK,MAAM,YAAY,IAAI,WAAW,CAAC,IAAI,EAAE,EAAE;YAC3C,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAC5C,IAAI,KAAK,KAAK,SAAS,EAAE;gBACrB,MAAM,KAAK,CAAC,+BAA+B,CAAC,CAAC;aAChD;YACD,MAAM,EACF,IAAI,EACJ,QAAQ,EACR,cAAc,GACjB,GAAG,KAAK,CAAC;YACV,MAAM,aAAa,GAAG,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAChD,IAAI,aAAa,KAAK,SAAS,EAAE;gBAC7B,MAAM,KAAK,CAAC,yCAAyC,QAAQ,EAAE,CAAC,CAAC;aACpE;YACD,IAAI,IAAI,KAAK,aAAa,CAAC,IAAI,EAAE;gBAC7B,eAAe,CAAC,GAAG,CAAC,YAAsB,EAAE,KAAK,CAAC,CAAC;aACtD;iBAAM,IAAI,cAAc,KAAK,SAAS,EAAE;gBACrC,eAAe,CAAC,GAAG,CAAC,YAAsB,EAAE,IAAI,CAAC,CAAC;aACrD;iBAAM;gBACH,MAAM,KAAK,CAAC,+CAA+C,YAAY,EAAE,CAAC,CAAC;aAC9E;SACJ;KACJ;IAED,OAAO,EAAE,eAAe,EAAE,gBAAgB,EAAE,eAAe,EAAE,CAAC;AAClE,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { IFluidDataStoreRuntime } from \"@fluidframework/datastore-definitions\";\nimport { SharedMap } from \"@fluidframework/map\";\nimport {\n    IFluidState,\n    IViewState,\n    ViewToFluidMap,\n    FluidToViewMap,\n    IFluidSchema,\n} from \"../interface\";\n\n/**\n * Identifies which values within the Fluid and view states match\n * The view and Fluid matching map identify if the value in the respective states\n * needs a converter or not\n * @param runtime - The data store runtime used to create the SharedMap objects\n * @param fluidToView - The Fluid to view state conversion mapping\n * @param viewToFluid - The view to Fluid conversion state mapping\n * */\nexport function generateFluidObjectSchema<\n    SV extends IViewState,\n    SF extends IFluidState\n>(\n    runtime: IFluidDataStoreRuntime,\n    defaultViewState: SV,\n    fluidToView: FluidToViewMap<SV, SF>,\n    viewToFluid?: ViewToFluidMap<SV, SF>,\n): IFluidSchema {\n    // matching primitives w/ the same key in view and fluid\n    // true if needs converter or is a Fluid object, false if not\n    const viewMatchingMap = SharedMap.create(runtime);\n    const fluidMatchingMap = SharedMap.create(runtime);\n    const storedHandleMap = SharedMap.create(runtime);\n    for (const fluidStateKey of fluidToView.keys()) {\n        const value = fluidToView.get(fluidStateKey);\n        if (value === undefined) {\n            throw Error(\"Cannot find fluidToView value\");\n        }\n        const {\n            type,\n            viewKey,\n            viewConverter,\n        } = value;\n        const fluidConverter = viewToFluid?.get(viewKey);\n        if (fluidConverter === undefined) {\n            if (\n                defaultViewState[viewKey] !== undefined\n                && typeof (defaultViewState[viewKey]) !== type\n                && type !== \"any\"\n            ) {\n                throw Error(`Failed to find Fluid converter for key ${viewKey}`);\n            } else {\n                continue;\n            }\n        }\n        if (type === fluidConverter.type) {\n            fluidMatchingMap.set(fluidStateKey as string, false);\n        } else if (viewConverter !== undefined) {\n            fluidMatchingMap.set(fluidStateKey as string, true);\n        } else {\n            throw Error(`Failed to find view converter for Fluid key ${fluidStateKey}`);\n        }\n    }\n\n    if (viewToFluid !== undefined) {\n        for (const viewStateKey of viewToFluid.keys()) {\n            const value = viewToFluid.get(viewStateKey);\n            if (value === undefined) {\n                throw Error(\"Cannot find viewToFluid value\");\n            }\n            const {\n                type,\n                fluidKey,\n                fluidConverter,\n            } = value;\n            const viewConverter = fluidToView.get(fluidKey);\n            if (viewConverter === undefined) {\n                throw Error(`Failed to find view converter for key ${fluidKey}`);\n            }\n            if (type === viewConverter.type) {\n                viewMatchingMap.set(viewStateKey as string, false);\n            } else if (fluidConverter !== undefined) {\n                viewMatchingMap.set(viewStateKey as string, true);\n            } else {\n                throw Error(`Failed to find Fluid converter for view key ${viewStateKey}`);\n            }\n        }\n    }\n\n    return { viewMatchingMap, fluidMatchingMap, storedHandleMap };\n}\n"]}