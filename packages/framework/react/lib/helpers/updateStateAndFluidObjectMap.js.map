{"version":3,"file":"updateStateAndFluidObjectMap.js","sourceRoot":"","sources":["../../src/helpers/updateStateAndFluidObjectMap.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAaH,OAAO,EAAE,cAAc,EAAE,YAAY,EAAE,MAAM,SAAS,CAAC;AACvD,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAExC;;;;;;;;;;;;;;;;;GAiBG;AACH,MAAM,CAAC,MAAM,4BAA4B,GAAG,KAAK,EAI7C,aAA6B,EAC7B,cAA8B,EAC9B,eAA0B,EAC1B,mBAA4B,EAC5B,aAAqB,EACrB,WAAyB,EACzB,OAA+B,EAC/B,SAAa,EACb,QAA+D,EAC/D,mBAA6E,EAC7E,WAAmC,EACnC,WAAoC,EACtC,EAAE,CACA,YAAY,CACR,aAAa,EACb,cAAc,EACd,cAAc,EACd,mBAAmB,EACnB,GAAG,EAAE,CACD,SAAS,CACL,IAAI,EACJ,aAAa,EACb,WAAW,EACX,OAAO,EACP,SAAS,EACT,QAAQ,EACR,cAAc,EACd,WAAW,EACX,WAAW,CACd,EACL,eAAe,CAClB,CAAC,IAAI,CAAC,GAAG,EAAE,CACR,SAAS,CACL,mBAAmB,EACnB,aAAa,EACb,WAAW,EACX,OAAO,EACP,SAAS,EACT,QAAQ,EACR,cAAc,EACd,WAAW,EACX,WAAW,CACd,CACJ,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { IDirectoryValueChanged, SharedMap } from \"@fluidframework/map\";\nimport { IFluidHandle } from \"@fluidframework/core-interfaces\";\nimport { IFluidDataStoreRuntime } from \"@fluidframework/datastore-definitions\";\nimport {\n    FluidObjectMap,\n    IFluidState,\n    IViewState,\n    ViewToFluidMap,\n    FluidToViewMap,\n} from \"../interface\";\nimport { ISyncedState } from \"..\";\nimport { addFluidObject, asyncForEach } from \"./utils\";\nimport { syncState } from \"./syncState\";\n\n/**\n * Add listeners too all the new handles passed in, store their respective Fluid objects\n * on the fluidObjectMap, and then update both the local and synced state\n * @param newHandleList - List of IFluidHandles for new Fluid objects that need to be added to the map\n * @param fluidObjectMap - A map of Fluid handle paths to their Fluid objects\n * @param isSyncedStateUpdate - Is the update from a local state update or from one triggered by the synced state\n * @param syncedStateId - Unique ID for this synced Fluid object's state\n * @param syncedState - The shared map this Fluid object's synced state is stored on\n * @param runtime - The data store runtime\n * @param viewState - The current view state\n * @param setState - Callback to update the react view state\n * @param syncedStateCallback - The callback that will be triggered when the synced state value for the Fluid objects\n * passed in changes\n * @param fluidToView - A map of the Fluid state values that need conversion to their view state counterparts and the\n * respective converters\n * @param viewToFluid - A map of the view state values that need conversion to their Fluid state counterparts and the\n * respective converters\n */\nexport const updateStateAndFluidObjectMap = async <\n    SV extends IViewState,\n    SF extends IFluidState\n>(\n    newHandleList: IFluidHandle[],\n    fluidObjectMap: FluidObjectMap,\n    storedHandleMap: SharedMap,\n    isSyncedStateUpdate: boolean,\n    syncedStateId: string,\n    syncedState: ISyncedState,\n    runtime: IFluidDataStoreRuntime,\n    viewState: SV,\n    setState: (newState: SV, isSyncedStateUpdate?: boolean) => void,\n    syncedStateCallback: (change: IDirectoryValueChanged, local: boolean) => void,\n    fluidToView: FluidToViewMap<SV, SF>,\n    viewToFluid?: ViewToFluidMap<SV, SF>,\n) =>\n    asyncForEach(\n        newHandleList,\n        addFluidObject,\n        fluidObjectMap,\n        syncedStateCallback,\n        () =>\n            syncState(\n                true,\n                syncedStateId,\n                syncedState,\n                runtime,\n                viewState,\n                setState,\n                fluidObjectMap,\n                fluidToView,\n                viewToFluid,\n            ),\n        storedHandleMap,\n    ).then(() =>\n        syncState(\n            isSyncedStateUpdate,\n            syncedStateId,\n            syncedState,\n            runtime,\n            viewState,\n            setState,\n            fluidObjectMap,\n            fluidToView,\n            viewToFluid,\n        ),\n    );\n"]}