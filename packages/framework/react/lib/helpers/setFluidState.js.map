{"version":3,"file":"setFluidState.js","sourceRoot":"","sources":["../../src/helpers/setFluidState.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ISharedMap, SharedMap } from \"@fluidframework/map\";\nimport { IFluidDataStoreRuntime } from \"@fluidframework/datastore-definitions\";\nimport { IFluidHandle } from \"@fluidframework/core-interfaces\";\nimport {\n    FluidObjectMap,\n    IViewConverter,\n    IFluidConverter,\n    ISyncedState,\n} from \"../interface\";\n\n/**\n * Store the Fluid state onto the shared synced state\n * @param syncedStateId - Unique ID to use for storing the Fluid object's synced state in the map\n * @param syncedState - The shared map that will be used to store the synced state\n * @param runtime - The data store runtime\n * @param fluidObjectMap - A map of Fluid handle paths to their Fluid objects\n * @param fluidToView - A map of the Fluid state values that need conversion to their view state counterparts and the\n * respective converters\n * @param newFluidState - The Fluid state to store on to the syncedState,\n * after converting Fluid objects to their handles\n */\nexport function setFluidState<SV, SF>(\n    syncedStateId: string,\n    syncedState: ISyncedState,\n    runtime: IFluidDataStoreRuntime,\n    fluidObjectMap: FluidObjectMap,\n    fluidToView: Map<keyof SF, IViewConverter<SV, SF>>,\n    newViewState: SV,\n    newFluidState?: SF,\n    viewToFluid?: Map<keyof SV, IFluidConverter<SV, SF>>,\n): IFluidHandle {\n    const storedStateHandle = syncedState.get<IFluidHandle>(\n        `syncedState-${syncedStateId}`,\n    );\n    let storedState: ISharedMap | undefined;\n    if (storedStateHandle) {\n        storedState = fluidObjectMap.get(storedStateHandle.absolutePath)\n            ?.fluidObject as ISharedMap;\n    }\n    if (storedStateHandle === undefined || storedState === undefined) {\n        const newState = SharedMap.create(runtime);\n        fluidObjectMap.set(newState.handle.absolutePath, {\n            fluidObject: newState,\n            isRuntimeMap: true,\n        });\n        storedState = newState;\n    }\n    if (storedState === undefined) {\n        throw Error(\"Failed to fetch synced state from root\");\n    }\n    for (const key of fluidToView.keys()) {\n        const fluidKey = key as string;\n        const syncedStateKey = fluidToView?.get(fluidKey as keyof SF)?.rootKey;\n        const createCallback = fluidToView?.get(fluidKey as keyof SF)\n            ?.sharedObjectCreate;\n        if (createCallback !== undefined) {\n            if (storedState.get(fluidKey) === undefined) {\n                const sharedObject = createCallback(runtime);\n                fluidObjectMap.set(sharedObject.handle.absolutePath, {\n                    fluidObject: sharedObject,\n                    listenedEvents: fluidToView?.get(fluidKey as keyof SF)\n                        ?.listenedEvents ?? [\"valueChanged\"],\n                });\n                storedState.set(fluidKey, sharedObject.handle);\n                if (syncedStateKey !== undefined) {\n                    syncedState.set(syncedStateKey, sharedObject.handle);\n                }\n            } else {\n                storedState.set(fluidKey, storedState.get(fluidKey));\n                if (syncedStateKey !== undefined) {\n                    syncedState.set(\n                        syncedStateKey,\n                        syncedState.get(syncedStateKey),\n                    );\n                }\n            }\n        } else if (syncedStateKey !== undefined) {\n            const value = newFluidState !== undefined\n                ? newFluidState[fluidKey]\n                : syncedState.get(syncedStateKey);\n            syncedState.set(syncedStateKey, value);\n            storedState.set(fluidKey, value);\n        } else {\n            const value = newFluidState !== undefined\n                ? newFluidState[fluidKey]\n                : storedState.get(fluidKey);\n            storedState.set(fluidKey, value);\n        }\n    }\n    if (viewToFluid !== undefined && newFluidState !== undefined) {\n        for (const key of viewToFluid.keys()) {\n            const viewKey = key as string;\n            const fluidConverter = viewToFluid?.get(viewKey as keyof SV)\n                ?.fluidConverter;\n            const fluidKey = viewToFluid?.get(viewKey as keyof SV)\n                ?.fluidKey;\n            if (fluidConverter !== undefined && fluidKey !== undefined) {\n                const value = fluidConverter(newViewState, newFluidState);\n                // Write this value to the stored state if it doesn't match the name of a view value\n                if (\n                    fluidToView.get(fluidKey)?.sharedObjectCreate ===\n                    undefined\n                ) {\n                    storedState.set(viewKey, value);\n                }\n            }\n        }\n    }\n    syncedState.set(`syncedState-${syncedStateId}`, storedState.handle);\n    return storedState.handle;\n}\n"]}