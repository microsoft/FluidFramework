{"version":3,"file":"getViewFromFluid.js","sourceRoot":"","sources":["../../src/helpers/getViewFromFluid.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAUH,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAEhD;;;;;;;;;;GAUG;AACH,MAAM,UAAU,gBAAgB,CAI5B,aAAqB,EACrB,WAAyB,EACzB,QAAkB,EAClB,cAA8B,EAC9B,WAAkD,EAClD,SAAa,EACb,kBAAgC;;IAEhC,MAAM,gBAAgB,GAAG,aAAa,CAClC,aAAa,EACb,WAAW,EACX,cAAc,EACd,WAAW,CACd,CAAC;IACF,IAAI,gBAAgB,KAAK,SAAS,EAAE;QAChC,MAAM,KAAK,CACP,oEAAoE,CACvE,CAAC;KACL;IACD,IAAI,KAAK,GAAG,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IACvC,IAAI,kBAAkB,KAAK,SAAS,EAAE;QAClC,KAAK,SAAG,kBAAkB,CAAC,QAAQ,CAAC,mCAAI,KAAK,CAAC;KACjD;IACD,MAAM,aAAa,SAAG,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,0CAAE,aAAa,CAAC;IAC/D,IAAI,aAAa,KAAK,SAAS,EAAE;QAC7B,MAAM,iBAAiB,GAAgB,EAAE,CAAC;QAC1C,iBAAiB,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;QACpC,OAAO,aAAa,CAAC,SAAS,EAAE,iBAAiB,EAAE,cAAc,CAAC,CAAC;KACtE;SAAM;QACH,MAAM,gBAAgB,GAAgB,EAAE,CAAC;QACzC,MAAM,mBAAmB,GAAI,KAAsB,CAAC,YAAY,CAAC;QACjE,MAAM,cAAc,GAAG,mBAAmB,KAAK,SAAS;YACpD,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,mBAAmB,CAAC,YAAY,CAAC;YACtD,CAAC,CAAC,KAAK,CAAC;QACZ,gBAAgB,CAAC,QAAkB,CAAC,GAAG,cAAc,CAAC;QACtD,OAAO,gBAAgB,CAAC;KAC3B;AACL,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { IFluidObject } from \"@fluidframework/core-interfaces\";\nimport {\n    FluidObjectMap,\n    IViewConverter,\n    IViewState,\n    IFluidState,\n    ISyncedState,\n} from \"../interface\";\nimport { getFluidState } from \"./getFluidState\";\n\n/**\n * Return a partial view state containing the Fluid state key identified converted into its\n * corresponding view state value in the partial view state returned\n * @param syncedStateId - Unique ID for the synced state of this view\n * @param syncedState - The shared map this shared state is stored on\n * @param fluidKey - The key of the value within the Fluid state that we want converted\n * @param fluidObjectMap - A map of Fluid handle paths to their Fluid objects\n * @param fluidToView - A map of the Fluid state values that need conversion to their view state counterparts and the\n * respective converters\n * @param combinedFluidState - Optional param containing the combined Fluid state so far to fetch from\n */\nexport function getViewFromFluid<\n    SV extends IViewState,\n    SF extends IFluidState\n>(\n    syncedStateId: string,\n    syncedState: ISyncedState,\n    fluidKey: keyof SF,\n    fluidObjectMap: FluidObjectMap,\n    fluidToView: Map<keyof SF, IViewConverter<SV, SF>>,\n    viewState: SV,\n    combinedFluidState?: Partial<SF>,\n): Partial<SV> {\n    const fluidObjectState = getFluidState(\n        syncedStateId,\n        syncedState,\n        fluidObjectMap,\n        fluidToView,\n    );\n    if (fluidObjectState === undefined) {\n        throw Error(\n            \"Attempted to fetch view from Fluid state before it was initialized\",\n        );\n    }\n    let value = fluidObjectState[fluidKey];\n    if (combinedFluidState !== undefined) {\n        value = combinedFluidState[fluidKey] ?? value;\n    }\n    const viewConverter = fluidToView.get(fluidKey)?.viewConverter;\n    if (viewConverter !== undefined) {\n        const partialFluidState: Partial<SF> = {};\n        partialFluidState[fluidKey] = value;\n        return viewConverter(viewState, partialFluidState, fluidObjectMap);\n    } else {\n        const partialViewState: Partial<SV> = {};\n        const valueAsIFluidHandle = (value as IFluidObject).IFluidHandle;\n        const convertedValue = valueAsIFluidHandle !== undefined\n            ? fluidObjectMap.get(valueAsIFluidHandle.absolutePath)\n            : value;\n        partialViewState[fluidKey as string] = convertedValue;\n        return partialViewState;\n    }\n}\n"]}