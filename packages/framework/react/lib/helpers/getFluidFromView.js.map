{"version":3,"file":"getFluidFromView.js","sourceRoot":"","sources":["../../src/helpers/getFluidFromView.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAQH;;;;;;;GAOG;AACH,MAAM,UAAU,gBAAgB,CAI5B,KAAS,EACT,OAAiB,EACjB,UAAc,EACd,WAAoD;;IAEpD,MAAM,cAAc,SAAG,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,GAAG,CAAC,OAAO,2CAAG,cAAc,CAAC;IACjE,IAAI,cAAc,KAAK,SAAS,EAAE;QAC9B,+DAA+D;QAC/D,OAAO,cAAc,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;KAC5C;SAAM;QACH,MAAM,iBAAiB,GAAgB,EAAE,CAAC;QAC1C,iBAAiB,CAAC,OAAiB,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;QACtD,OAAO,iBAAiB,CAAC;KAC5B;AACL,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    IFluidConverter,\n    IViewState,\n    IFluidState,\n} from \"../interface\";\n\n/**\n * Return a partial Fluid state containing the view state key identified converted into its\n * corresponding Fluid state value in the partial Fluid state returned\n * @param state - The current view state\n * @param viewKey - The view state key that needs to converted to its Fluid state\n * @param viewToFluid - A map of the view state values that need conversion to their Fluid state counterparts and the\n * respective converters\n */\nexport function getFluidFromView<\n    SV extends IViewState,\n    SF extends IFluidState\n>(\n    state: SV,\n    viewKey: keyof SV,\n    fluidState: SF,\n    viewToFluid?: Map<keyof SV, IFluidConverter<SV, SF>>,\n): Partial<SF> {\n    const fluidConverter = viewToFluid?.get(viewKey)?.fluidConverter;\n    if (fluidConverter !== undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return fluidConverter(state, fluidState);\n    } else {\n        const partialFluidState: Partial<SF> = {};\n        partialFluidState[viewKey as string] = state[viewKey];\n        return partialFluidState;\n    }\n}\n"]}