{"version":3,"file":"syncState.js","sourceRoot":"","sources":["../../src/helpers/syncState.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { IFluidDataStoreRuntime } from \"@fluidframework/datastore-definitions\";\nimport { ISharedMap } from \"@fluidframework/map\";\nimport {\n    FluidObjectMap,\n    IFluidState,\n    IViewState,\n    ViewToFluidMap,\n    FluidToViewMap,\n    ISyncedState,\n} from \"../interface\";\nimport { getFluidFromView } from \"./getFluidFromView\";\nimport { getViewFromFluid } from \"./getViewFromFluid\";\nimport { getFluidState } from \"./getFluidState\";\nimport { setFluidState } from \"./setFluidState\";\nimport { getSchema } from \"./getSchema\";\n\n/**\n * Function to combine both the view and Fluid states so that they are in sync. If the update\n * is from a local update, the new Fluid state created from converting the new local view state\n * is used to update the synced Fluid state, which in turn will update the local state on other clients.\n * If it is an update triggered from a remote change on the synced state, the new Fluid state from the synced state\n * is used to overwrite the local synced state and the new local view is created accordingly.\n * @param isSyncedStateUpdate - Is the update from a local state update or from one triggered by the synced state\n * @param syncedStateId - Unique ID for this synced Fluid object's state\n * @param syncedState - The shared map this Fluid object synced state is stored on\n * @param viewState - The current view state\n * @param setState - Callback to update the react view state\n * @param fluidObjectMap - A map of Fluid handle paths to their Fluid objects\n * @param viewToFluid - A map of the view state values that need conversion to their Fluid state counterparts and the\n * respective converters\n * @param fluidToView - A map of the Fluid state values that need conversion to their view state counterparts and the\n * respective converters\n */\nexport function syncState<\n    SV extends IViewState,\n    SF extends IFluidState\n>(\n    isSyncedStateUpdate: boolean,\n    syncedStateId: string,\n    syncedState: ISyncedState,\n    runtime: IFluidDataStoreRuntime,\n    viewState: SV,\n    setState: (\n        newState: SV,\n        isSyncedStateUpdate?: boolean,\n        isLocal?: boolean\n    ) => void,\n    fluidObjectMap: FluidObjectMap,\n    fluidToView: FluidToViewMap<SV, SF>,\n    viewToFluid?: ViewToFluidMap<SV, SF>,\n) {\n    // Use the provided Fluid state if it is available, or use the one fetched from the synced state\n    const currentFluidState = getFluidState(\n        syncedStateId,\n        syncedState,\n        fluidObjectMap,\n        fluidToView,\n    );\n    if (currentFluidState === undefined) {\n        throw Error(\n            \"Attempted to sync view and Fluid states before Fluid state was initialized\",\n        );\n    }\n    // Fetch the schema\n    const schemaHandles = getSchema(\n        syncedStateId,\n        syncedState,\n    );\n    if (schemaHandles === undefined) {\n        throw Error(\"No schema found stored on the root\");\n    }\n    const {\n        viewMatchingMapHandle,\n        fluidMatchingMapHandle,\n    } = schemaHandles;\n\n    const viewMatchingMap = fluidObjectMap.get(viewMatchingMapHandle.absolutePath)\n        ?.fluidObject as ISharedMap;\n    const fluidMatchingMap = fluidObjectMap.get(fluidMatchingMapHandle.absolutePath)\n        ?.fluidObject as ISharedMap;\n\n    if (viewMatchingMap === undefined || fluidMatchingMap === undefined) {\n        throw Error(\"Failed to fetch shared map DDSes from the schema handles\");\n    }\n\n    // Create the combined root state by combining the current root state and the new\n    // view state after it has been converted\n    let combinedFluidState = { ...currentFluidState };\n    Object.entries(viewState).forEach(([viewKey, viewValue]) => {\n        const needsConverter = viewMatchingMap.get(viewKey);\n        let partialRootState = {};\n        if (needsConverter !== undefined) {\n            partialRootState = getFluidFromView(\n                viewState,\n                viewKey as keyof SV,\n                currentFluidState,\n                viewToFluid,\n            );\n        } else {\n            partialRootState[viewKey] = viewState[viewKey];\n        }\n        // If it is from a synced state update, the values fetched from the synced state at the beginning\n        // overwrite those created here. Otherwise, the new values overwrite those in the synced state\n        if (isSyncedStateUpdate) {\n            combinedFluidState = { ...partialRootState, ...combinedFluidState };\n        } else {\n            combinedFluidState = { ...combinedFluidState, ...partialRootState };\n        }\n    });\n\n    // Create the combined view state by combining the current view with the new Fluid state\n    // after it has been converted\n    let combinedViewState = { ...viewState, ...{ fluidObjectMap } };\n    Object.entries(currentFluidState).forEach(([fluidKey, fluidValue]) => {\n        const needsConverter = fluidMatchingMap.get(fluidKey);\n        let partialViewState = {};\n        if (needsConverter !== undefined) {\n            partialViewState = getViewFromFluid(\n                syncedStateId,\n                syncedState,\n                fluidKey as keyof SF,\n                fluidObjectMap,\n                fluidToView,\n                combinedViewState,\n                combinedFluidState,\n            );\n        } else {\n            partialViewState[fluidKey] = currentFluidState[fluidKey];\n        }\n        // If it is from a synced state update, the values converted from the synced state overwrite those\n        // created here. Otherwise, the new view values overwrite those from the synced state.\n        if (isSyncedStateUpdate) {\n            combinedViewState = { ...combinedViewState, ...partialViewState };\n        } else {\n            combinedViewState = { ...partialViewState, ...combinedViewState };\n        }\n    });\n\n    // If it is a local update, broadcast it by setting it on the root and updating locally\n    // Otherwise, only update locally as the root update has already been broadcasted\n    if (!isSyncedStateUpdate) {\n        setFluidState(\n            syncedStateId,\n            syncedState,\n            runtime,\n            fluidObjectMap,\n            fluidToView,\n            combinedViewState,\n            combinedFluidState,\n            viewToFluid,\n        );\n    }\n    setState(combinedViewState, isSyncedStateUpdate, true);\n}\n"]}