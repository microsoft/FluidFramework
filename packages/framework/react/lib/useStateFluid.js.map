{"version":3,"file":"useStateFluid.js","sourceRoot":"","sources":["../src/useStateFluid.tsx"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAO/B,OAAO,EAAE,eAAe,EAAE,SAAS,EAAE,MAAM,WAAW,CAAC;AAEvD;;GAEG;AACH,MAAM,UAAU,aAAa,CAIzB,KAA0B,EAAE,gBAAoB;;IAEhD,MAAM,EACF,aAAa,EACb,gBAAgB,GACnB,GAAG,KAAK,CAAC;IACV,MAAM,MAAM,GAAG,gBAAgB,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;IACzD,IAAI,MAAM,KAAK,SAAS,EAAE;QACtB,MAAM,KAAK,CAAC,qDAAqD,aAAa,EAAE,CAAC,CAAC;KACrF;IACD,MAAM,WAAW,GAAG,gBAAgB,CAAC,WAAW,CAAC;IACjD,MAAM,SAAS,SAAG,KAAK,CAAC,SAAS,mCAAI,gBAAgB,CAAC,SAAS,CAAC;IAChE,MAAM,EAAE,WAAW,EAAE,WAAW,EAAE,GAAG,MAAoC,CAAC;IAC1E,wFAAwF;IACxF,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAK,gBAAgB,CAAC,CAAC;IAEzE,0EAA0E;IAC1E,4FAA4F;IAC5F,oCAAoC;IACpC,yEAAyE;IACzE,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE;QAC3B,mEAAmE;QACnE,eAAe,CACX,aAAa,EACb,WAAW,EACX,SAAS,EACT,UAAU,EACV,aAAa,EACb,WAAW,EACX,WAAW,CACd,CAAC;KACL;IAED,+FAA+F;IAC/F,6FAA6F;IAC7F,gEAAgE;IAChE,MAAM,aAAa,GAAG,KAAK,CAAC,WAAW,CACnC,CAAC,QAAqB,EAAE,cAAc,GAAG,KAAK,EAAE,UAAmB,KAAK,EAAE,EAAE;QACxE,MAAM,gBAAgB,iDACf,UAAU,GACV,QAAQ,KACX,aAAa,EAAE,IAAI,GACtB,CAAC;QACF,IAAI,OAAO,EAAE;YACT,aAAa,CAAC,gBAAgB,CAAC,CAAC;SACnC;aAAM;YACH,SAAS,CACL,cAAc,EACd,aAAa,EACb,WAAW,EACX,SAAS,CAAC,OAAO,EACjB,gBAAgB,EAChB,aAAa,EACb,SAAS,CAAC,cAAc,EACxB,WAAW,EACX,WAAW,CACd,CAAC;SACL;IACL,CAAC,EACD,CAAC,WAAW,EAAE,WAAW,EAAE,UAAU,EAAE,aAAa,EAAE,SAAS,CAAC,CACnE,CAAC;IACF,OAAO,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;AACvC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport * as React from \"react\";\nimport {\n    IViewState,\n    IFluidProps,\n    IFluidState,\n    ISyncedStateConfig,\n} from \"./interface\";\nimport { initializeState, syncState } from \"./helpers\";\n\n/**\n * A wrapper around the useState React hook that combines local and Fluid state updates\n */\nexport function useStateFluid<\n    SV extends IViewState,\n    SF extends IFluidState\n>(\n    props: IFluidProps<SV, SF>, initialViewState: SV,\n): [SV, (newState: SV, isSyncedStateUpdate?: boolean) => void] {\n    const {\n        syncedStateId,\n        syncedDataObject,\n    } = props;\n    const config = syncedDataObject.getConfig(syncedStateId);\n    if (config === undefined) {\n        throw Error(`Failed to find configuration for synced state ID: ${syncedStateId}`);\n    }\n    const syncedState = syncedDataObject.syncedState;\n    const dataProps = props.dataProps ?? syncedDataObject.dataProps;\n    const { fluidToView, viewToFluid } = config as ISyncedStateConfig<SV, SF>;\n    // Establish the react state and setState functions using the initialViewState passed in\n    const [reactState, reactSetState] = React.useState<SV>(initialViewState);\n\n    // If this is the first time this function is being called in this session\n    // It's okay to disable eslint here as the state will be updated with the initialized values\n    // after the async call has finished\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (!reactState.isInitialized) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        initializeState<SV, SF>(\n            syncedStateId,\n            syncedState,\n            dataProps,\n            reactState,\n            reactSetState,\n            fluidToView,\n            viewToFluid,\n        );\n    }\n\n    // Create the fluidSetState function as a callback that in turn calls either our combined state\n    // update to both the local and Fluid state or just the local state respectively based off of\n    // if the state update is coming locally, i.e. not from the root\n    const fluidSetState = React.useCallback(\n        (newState: Partial<SV>, fromRootUpdate = false, isLocal: boolean = false) => {\n            const newCombinedState = {\n                ...reactState,\n                ...newState,\n                isInitialized: true,\n            };\n            if (isLocal) {\n                reactSetState(newCombinedState);\n            } else {\n                syncState(\n                    fromRootUpdate,\n                    syncedStateId,\n                    syncedState,\n                    dataProps.runtime,\n                    newCombinedState,\n                    reactSetState,\n                    dataProps.fluidObjectMap,\n                    fluidToView,\n                    viewToFluid,\n                );\n            }\n        },\n        [syncedState, viewToFluid, reactState, reactSetState, dataProps],\n    );\n    return [reactState, fluidSetState];\n}\n"]}