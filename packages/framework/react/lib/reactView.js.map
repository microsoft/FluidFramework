{"version":3,"file":"reactView.js","sourceRoot":"","sources":["../src/reactView.tsx"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAU/B,OAAO,EAAE,SAAS,EAAE,eAAe,EAAE,MAAM,WAAW,CAAC;AAEvD;;GAEG;AACH,MAAM,OAAgB,cACM,SAAQ,KAAK,CAAC,SAAkC;IAMxE,YAAY,KAA0B;QAClC,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,MAAM,EACF,aAAa,EACb,gBAAgB,GACnB,GAAG,KAAK,CAAC;QACV,MAAM,MAAM,GAAG,gBAAgB,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;QACzD,IAAI,MAAM,KAAK,SAAS,EAAE;YACtB,MAAM,KAAK,CAAC,qDAAqD,aAAa,EAAE,CAAC,CAAC;SACrF;QACD,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,WAAkB,CAAC;QAC9C,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,WAAkB,CAAC;QAC9C,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,IAAI,CAAC,YAAY,GAAG,gBAAgB,CAAC,WAAW,CAAC;QACjD,IAAI,CAAC,UAAU,GAAG,gBAAgB,CAAC,SAAS,CAAC;QAC7C,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,gBAAgB,CAAC;IACzC,CAAC;IAEM,KAAK,CAAC,iBAAiB;QAC1B,MAAM,eAAe,CACjB,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EACzB,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,YAAY,CACpB,CAAC;IACN,CAAC;IAED;;;;;;OAMG;IACK,SAAS,CACb,QAAY,EACZ,cAAwB,EACxB,OAAiB;QAEjB,yEAAyE;QACzE,IAAI,OAAO,EAAE;YACT,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YAC7B,yEAAyE;SACxE;aAAM,IAAI,cAAc,EAAE;YACvB,SAAS,CACL,IAAI,EACJ,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,UAAU,CAAC,OAAO,EACvB,QAAQ,EACR,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EACzB,IAAI,CAAC,UAAU,CAAC,cAAc,EAC9B,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,YAAY,CACpB,CAAC;SACL;aAAM;YACH,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;SAC3B;IACL,CAAC;IAED;;;OAGG;IACI,QAAQ,CAAC,QAAY;QACxB,SAAS,CACL,KAAK,EACL,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,UAAU,CAAC,OAAO,EACvB,QAAQ,EACR,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EACzB,IAAI,CAAC,UAAU,CAAC,cAAc,EAC9B,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,YAAY,CACpB,CAAC;IACN,CAAC;CACJ","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport * as React from \"react\";\nimport {\n    IFluidProps,\n    IFluidState,\n    IViewState,\n    IFluidConverter,\n    IViewConverter,\n    IFluidDataProps,\n    ISyncedState,\n} from \"./interface\";\nimport { syncState, initializeState } from \"./helpers\";\n\n/**\n * A React view with a synced state, initial props, and a Fluid-to-view state two-way mapping\n */\nexport abstract class FluidReactView<SV extends IViewState,\n    SF extends IFluidState> extends React.Component<IFluidProps<SV, SF>, SV> {\n    private readonly _syncedStateId: string;\n    private readonly _syncedState: ISyncedState;\n    private readonly _dataProps: IFluidDataProps;\n    private readonly _viewToFluid: Map<keyof SV, IFluidConverter<SV, SF>>;\n    private readonly _fluidToView: Map<keyof SF, IViewConverter<SV, SF>>;\n    constructor(props: IFluidProps<SV, SF>) {\n        super(props);\n        const {\n            syncedStateId,\n            syncedDataObject,\n        } = props;\n        const config = syncedDataObject.getConfig(syncedStateId);\n        if (config === undefined) {\n            throw Error(`Failed to find configuration for synced state ID: ${syncedStateId}`);\n        }\n        this._viewToFluid = config.viewToFluid as any;\n        this._fluidToView = config.fluidToView as any;\n        this._syncedStateId = syncedStateId;\n        this._syncedState = syncedDataObject.syncedState;\n        this._dataProps = syncedDataObject.dataProps;\n        this.state = config.defaultViewState;\n    }\n\n    public async componentDidMount() {\n        await initializeState(\n            this._syncedStateId,\n            this._syncedState,\n            this._dataProps,\n            this.state,\n            this._setState.bind(this),\n            this._fluidToView,\n            this._viewToFluid,\n        );\n    }\n\n    /**\n     * Function to update the state from both synced state updates or local ones. Only updates the synced state\n     * on local updates\n     * @param newState - the new state to be set\n     * @param fromRootUpdate - is this update coming locally or from a synced state value change\n     * @param isLocal - should this update be applied only locally\n     */\n    private _setState(\n        newState: SV,\n        fromRootUpdate?: boolean,\n        isLocal?: boolean,\n    ) {\n        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n        if (isLocal) {\n            super.setState(newState);\n        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n        } else if (fromRootUpdate) {\n            syncState(\n                true,\n                this._syncedStateId,\n                this._syncedState,\n                this._dataProps.runtime,\n                newState,\n                this._setState.bind(this),\n                this._dataProps.fluidObjectMap,\n                this._fluidToView,\n                this._viewToFluid,\n            );\n        } else {\n            this.setState(newState);\n        }\n    }\n\n    /**\n     * Function to update the current state. It overloads the React setState function\n     * @param newState - New state to be set both locally and on the synced state\n     */\n    public setState(newState: SV) {\n        syncState(\n            false,\n            this._syncedStateId,\n            this._syncedState,\n            this._dataProps.runtime,\n            newState,\n            this._setState.bind(this),\n            this._dataProps.fluidObjectMap,\n            this._fluidToView,\n            this._viewToFluid,\n        );\n    }\n}\n"]}