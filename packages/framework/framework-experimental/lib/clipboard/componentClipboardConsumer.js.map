{"version":3,"file":"componentClipboardConsumer.js","sourceRoot":"","sources":["../../src/clipboard/componentClipboardConsumer.ts"],"names":[],"mappings":"AAWA,MAAM,CAAC,MAAM,2BAA2B,GAA6C,6BAA6B,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { IFluidDataStoreContext } from \"@fluidframework/runtime-definitions\";\n\ndeclare module \"@fluidframework/component-core-interfaces\" {\n    // eslint-disable-next-line @typescript-eslint/no-empty-interface\n    export interface IFluidObject extends Readonly<Partial<IProvideComponentClipboardConsumer>> { }\n}\n\nexport const IComponentClipboardConsumer: keyof IProvideComponentClipboardConsumer = \"IComponentClipboardConsumer\";\n\nexport interface IProvideComponentClipboardConsumer {\n    readonly IComponentClipboardConsumer: IComponentClipboardConsumer;\n}\n\n/**\n * On paste, the target of the paste event should do the following:\n *  1. Insert appropriate internal data for the content being pasted\n *  2. Either create nested components based on their **fluidUrlAttributeName** data- attribute found\n *  in the clipboard content, or, alternatively just use the HTML representation of that nested component\n *  any way they wish.\n *\n * Components may implement **IComponentClipboardConsumer.getComponentFromClipboardHTML** to provide an\n * alternate component identifier to be instantiated during the paste operation. This alternate component\n * should be instantiated on paste instead of the original component component identifier that was serialized\n * on copy. In essence, the first instantiated component (serialized component identifier) may act as a\n * factory for the component that will actually be instantiated.\n *\n * Disclaimer: These interfaces are experimental and are subject to change.\n */\nexport interface IComponentClipboardConsumer extends IProvideComponentClipboardConsumer {\n    /**\n   * Provide an alternate component identifier to be instantiated during the paste operation.\n   * @alpha\n   * @param targetContext - IFluidDataStoreContext of the target\n   * @param clipboardHTML - the html string that serialized by the component to the system clipboard.\n   */\n    getComponentFromClipboardHTML(\n        targetContext: IFluidDataStoreContext,\n        clipboardHTML: string | undefined,\n    ): Promise<string | undefined>;\n}\n"]}