{"version":3,"file":"componentClipboardProvider.js","sourceRoot":"","sources":["../../src/clipboard/componentClipboardProvider.ts"],"names":[],"mappings":"AASA,MAAM,CAAC,MAAM,uBAAuB,GAAyC,yBAAyB,CAAC;AAMvG;;;;;;;;;;;;;;GAcG;AAEH,MAAM,CAAC,MAAM,qBAAqB,GAAG,UAAU,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\ndeclare module \"@fluidframework/component-core-interfaces\" {\n    // eslint-disable-next-line @typescript-eslint/no-empty-interface\n    export interface IFluidObject extends Readonly<Partial<IProvideComponentClipboardData>> { }\n}\n\nexport const IComponentClipboardData: keyof IProvideComponentClipboardData = \"IComponentClipboardData\";\n\nexport interface IProvideComponentClipboardData {\n    readonly IComponentClipboardData: IComponentClipboardData;\n}\n\n/**\n * During copy, component hosts can use their “selection” or equivalent concept to identify any nested\n * components involved. If the selection includes nested components, the host component should use the\n * **IComponentClipboardData** interface on each of these nested component to acquire their contribution\n * to the copied content, and combine it with its own copied content. These nested components should do the\n * same with their own nested components. What content a component provides is entirely up to it.\n *\n * Nested components might need to contribute multiple formats of clipboard data to their host components\n * (e.g. plain-text, HTML).\n *\n * In addition, a nested component should specify their complete fluid url in the **fluidUrlAttributeName**\n * data- attribute of its containing HTML element to ensure that the proper component is instantiated on paste.\n *\n * Disclaimer: These interfaces are experimental and are subject to change.\n */\n\nexport const fluidUrlAttributeName = \"fluidUrl\";\n\nexport interface IComponentClipboardData extends IProvideComponentClipboardData {\n    /**\n   * Return the serialized HTML representation of the entire component instance to be\n   * included for the html clipboard slot.\n   * @alpha\n   */\n    getComponentHtmlForClipboard(): string | undefined;\n\n    /**\n   * Returns the string representation for the entire component instance to be serialized for the\n   * clipboard plain-text clipboard slot.\n   * @alpha\n   */\n    getComponentTextForClipboard(): string | undefined;\n}\n"]}