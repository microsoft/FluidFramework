/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type * as old from "@fluidframework/aqueduct-previous/internal";
import type { TypeOnly, MinimalType, FullType } from "@fluidframework/build-tools";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_BaseContainerRuntimeFactory": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_BaseContainerRuntimeFactory():
    TypeOnly<old.BaseContainerRuntimeFactory>;
declare function use_current_ClassDeclaration_BaseContainerRuntimeFactory(
    use: TypeOnly<current.BaseContainerRuntimeFactory>): void;
use_current_ClassDeclaration_BaseContainerRuntimeFactory(
    get_old_ClassDeclaration_BaseContainerRuntimeFactory());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_BaseContainerRuntimeFactory": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_BaseContainerRuntimeFactory():
    TypeOnly<current.BaseContainerRuntimeFactory>;
declare function use_old_ClassDeclaration_BaseContainerRuntimeFactory(
    use: TypeOnly<old.BaseContainerRuntimeFactory>): void;
use_old_ClassDeclaration_BaseContainerRuntimeFactory(
    get_current_ClassDeclaration_BaseContainerRuntimeFactory());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_BaseContainerRuntimeFactoryProps": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_BaseContainerRuntimeFactoryProps():
    TypeOnly<old.BaseContainerRuntimeFactoryProps>;
declare function use_current_InterfaceDeclaration_BaseContainerRuntimeFactoryProps(
    use: TypeOnly<current.BaseContainerRuntimeFactoryProps>): void;
use_current_InterfaceDeclaration_BaseContainerRuntimeFactoryProps(
    get_old_InterfaceDeclaration_BaseContainerRuntimeFactoryProps());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_BaseContainerRuntimeFactoryProps": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_BaseContainerRuntimeFactoryProps():
    TypeOnly<current.BaseContainerRuntimeFactoryProps>;
declare function use_old_InterfaceDeclaration_BaseContainerRuntimeFactoryProps(
    use: TypeOnly<old.BaseContainerRuntimeFactoryProps>): void;
use_old_InterfaceDeclaration_BaseContainerRuntimeFactoryProps(
    get_current_InterfaceDeclaration_BaseContainerRuntimeFactoryProps());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_ContainerRuntimeFactoryWithDefaultDataStore": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_ContainerRuntimeFactoryWithDefaultDataStore():
    TypeOnly<old.ContainerRuntimeFactoryWithDefaultDataStore>;
declare function use_current_ClassDeclaration_ContainerRuntimeFactoryWithDefaultDataStore(
    use: TypeOnly<current.ContainerRuntimeFactoryWithDefaultDataStore>): void;
use_current_ClassDeclaration_ContainerRuntimeFactoryWithDefaultDataStore(
    get_old_ClassDeclaration_ContainerRuntimeFactoryWithDefaultDataStore());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_ContainerRuntimeFactoryWithDefaultDataStore": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_ContainerRuntimeFactoryWithDefaultDataStore():
    TypeOnly<current.ContainerRuntimeFactoryWithDefaultDataStore>;
declare function use_old_ClassDeclaration_ContainerRuntimeFactoryWithDefaultDataStore(
    use: TypeOnly<old.ContainerRuntimeFactoryWithDefaultDataStore>): void;
use_old_ClassDeclaration_ContainerRuntimeFactoryWithDefaultDataStore(
    get_current_ClassDeclaration_ContainerRuntimeFactoryWithDefaultDataStore());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ContainerRuntimeFactoryWithDefaultDataStoreProps": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_ContainerRuntimeFactoryWithDefaultDataStoreProps():
    TypeOnly<old.ContainerRuntimeFactoryWithDefaultDataStoreProps>;
declare function use_current_InterfaceDeclaration_ContainerRuntimeFactoryWithDefaultDataStoreProps(
    use: TypeOnly<current.ContainerRuntimeFactoryWithDefaultDataStoreProps>): void;
use_current_InterfaceDeclaration_ContainerRuntimeFactoryWithDefaultDataStoreProps(
    get_old_InterfaceDeclaration_ContainerRuntimeFactoryWithDefaultDataStoreProps());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ContainerRuntimeFactoryWithDefaultDataStoreProps": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_ContainerRuntimeFactoryWithDefaultDataStoreProps():
    TypeOnly<current.ContainerRuntimeFactoryWithDefaultDataStoreProps>;
declare function use_old_InterfaceDeclaration_ContainerRuntimeFactoryWithDefaultDataStoreProps(
    use: TypeOnly<old.ContainerRuntimeFactoryWithDefaultDataStoreProps>): void;
use_old_InterfaceDeclaration_ContainerRuntimeFactoryWithDefaultDataStoreProps(
    get_current_InterfaceDeclaration_ContainerRuntimeFactoryWithDefaultDataStoreProps());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_DataObject": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_DataObject():
    TypeOnly<old.DataObject>;
declare function use_current_ClassDeclaration_DataObject(
    use: TypeOnly<current.DataObject>): void;
use_current_ClassDeclaration_DataObject(
    get_old_ClassDeclaration_DataObject());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_DataObject": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_DataObject():
    TypeOnly<current.DataObject>;
declare function use_old_ClassDeclaration_DataObject(
    use: TypeOnly<old.DataObject>): void;
use_old_ClassDeclaration_DataObject(
    get_current_ClassDeclaration_DataObject());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_DataObjectFactory": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_DataObjectFactory():
    TypeOnly<old.DataObjectFactory<any>>;
declare function use_current_ClassDeclaration_DataObjectFactory(
    use: TypeOnly<current.DataObjectFactory<any>>): void;
use_current_ClassDeclaration_DataObjectFactory(
    get_old_ClassDeclaration_DataObjectFactory());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_DataObjectFactory": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_DataObjectFactory():
    TypeOnly<current.DataObjectFactory<any>>;
declare function use_old_ClassDeclaration_DataObjectFactory(
    use: TypeOnly<old.DataObjectFactory<any>>): void;
use_old_ClassDeclaration_DataObjectFactory(
    get_current_ClassDeclaration_DataObjectFactory());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_DataObjectTypes": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_DataObjectTypes():
    TypeOnly<old.DataObjectTypes>;
declare function use_current_InterfaceDeclaration_DataObjectTypes(
    use: TypeOnly<current.DataObjectTypes>): void;
use_current_InterfaceDeclaration_DataObjectTypes(
    get_old_InterfaceDeclaration_DataObjectTypes());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_DataObjectTypes": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_DataObjectTypes():
    TypeOnly<current.DataObjectTypes>;
declare function use_old_InterfaceDeclaration_DataObjectTypes(
    use: TypeOnly<old.DataObjectTypes>): void;
use_old_InterfaceDeclaration_DataObjectTypes(
    get_current_InterfaceDeclaration_DataObjectTypes());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IDataObjectProps": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IDataObjectProps():
    TypeOnly<old.IDataObjectProps>;
declare function use_current_InterfaceDeclaration_IDataObjectProps(
    use: TypeOnly<current.IDataObjectProps>): void;
use_current_InterfaceDeclaration_IDataObjectProps(
    get_old_InterfaceDeclaration_IDataObjectProps());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IDataObjectProps": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IDataObjectProps():
    TypeOnly<current.IDataObjectProps>;
declare function use_old_InterfaceDeclaration_IDataObjectProps(
    use: TypeOnly<old.IDataObjectProps>): void;
use_old_InterfaceDeclaration_IDataObjectProps(
    get_current_InterfaceDeclaration_IDataObjectProps());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_PureDataObject": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_PureDataObject():
    TypeOnly<old.PureDataObject>;
declare function use_current_ClassDeclaration_PureDataObject(
    use: TypeOnly<current.PureDataObject>): void;
use_current_ClassDeclaration_PureDataObject(
    get_old_ClassDeclaration_PureDataObject());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_PureDataObject": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_PureDataObject():
    TypeOnly<current.PureDataObject>;
declare function use_old_ClassDeclaration_PureDataObject(
    use: TypeOnly<old.PureDataObject>): void;
use_old_ClassDeclaration_PureDataObject(
    get_current_ClassDeclaration_PureDataObject());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_PureDataObjectFactory": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_PureDataObjectFactory():
    TypeOnly<old.PureDataObjectFactory<any>>;
declare function use_current_ClassDeclaration_PureDataObjectFactory(
    use: TypeOnly<current.PureDataObjectFactory<any>>): void;
use_current_ClassDeclaration_PureDataObjectFactory(
    get_old_ClassDeclaration_PureDataObjectFactory());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_PureDataObjectFactory": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_PureDataObjectFactory():
    TypeOnly<current.PureDataObjectFactory<any>>;
declare function use_old_ClassDeclaration_PureDataObjectFactory(
    use: TypeOnly<old.PureDataObjectFactory<any>>): void;
use_old_ClassDeclaration_PureDataObjectFactory(
    get_current_ClassDeclaration_PureDataObjectFactory());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_createDataObjectKind": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_createDataObjectKind():
    TypeOnly<typeof old.createDataObjectKind>;
declare function use_current_FunctionDeclaration_createDataObjectKind(
    use: TypeOnly<typeof current.createDataObjectKind>): void;
use_current_FunctionDeclaration_createDataObjectKind(
    get_old_FunctionDeclaration_createDataObjectKind());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_createDataObjectKind": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_createDataObjectKind():
    TypeOnly<typeof current.createDataObjectKind>;
declare function use_old_FunctionDeclaration_createDataObjectKind(
    use: TypeOnly<typeof old.createDataObjectKind>): void;
use_old_FunctionDeclaration_createDataObjectKind(
    get_current_FunctionDeclaration_createDataObjectKind());
