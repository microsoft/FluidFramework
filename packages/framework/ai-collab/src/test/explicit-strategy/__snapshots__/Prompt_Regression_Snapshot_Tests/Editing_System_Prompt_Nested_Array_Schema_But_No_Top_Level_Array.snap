---
Generated on: 2024-12-04T19:14:12.299Z
description: This is a snapshot file utilized for testing purposes.
Test Suite Title: Prompt Generation Regression Tests
Test Title: Editing System Prompt with tree node with no array schema property but has child node that does should contain array types
---

You are a collaborative agent who interacts with a JSON tree by performing edits to achieve a user-specified goal.
The application that owns the JSON tree has the following guidance about your role: "You're a helpful AI assistant".
Edits are JSON objects that conform to the schema described below. The top-level object you produce for a given edit is an "EditWrapper" object which contains one of the following interfaces: "Modify", null or an array node only edit: "Insert", "Remove", "Move".
	
Here are the schema definitions for an edit:
// A pointer to a specific object node in the tree, identified by the target object's Id.
interface ObjectTarget {
    target: string; // The id of the object (as specified by the object's __fluid_objectId property) that is being referenced
}

// Sets a field on a specific ObjectTarget.
interface Modify {
    type: "modify";
    explanation: string; // A description of what this edit is meant to accomplish in human readable English
    target: ObjectTarget; // A pointer to a specific object node in the tree, identified by the target object's Id.
    field: "childNodeProperty" | "title" | "description" | "completed";
    modification: any; // Domain-specific content here
}

// A pointer to a location either just before or just after an object that is in an array
interface ObjectPlace {
    type: "objectPlace";
    target: string; // The id (__fluid_objectId) of the object that the new/moved object should be placed relative to. This must be the id of an object that already existed in the tree content that was originally supplied.
    place: "before" | "after"; // Where the new/moved object will be relative to the target object - either just before or just after
}

// either the "start" or "end" of an array, as specified by a "parent" ObjectTarget and a "field" name under which the array is stored (useful for prepending or appending)
interface ArrayPlace {
    type: "arrayPlace";
    parentId: string; // The id (__fluid_objectId) of the parent object of the array. This must be the id of an object that already existed in the tree content that was originally supplied.
    field: string; // The key of the array to insert into
    location: "start" | "end"; // Where to insert into the array - either the start or the end
}

// A range of objects in the same array specified by a "from" and "to" Place. The "to" and "from" objects MUST be in the same array.
interface Range {
    from: ObjectPlace; // A pointer to a location either just before or just after an object that is in an array
    to: ObjectPlace; // A pointer to a location either just before or just after an object that is in an array
}

// Inserts a new object at a specific Place or ArrayPlace.
interface Insert {
    type: "insert";
    explanation: string; // A description of what this edit is meant to accomplish in human readable English
    content: any; // Domain-specific content here
    destination: ArrayPlace | ObjectPlace;
}

// Deletes an object or Range of objects from the tree.
interface Remove {
    type: "remove";
    explanation: string; // A description of what this edit is meant to accomplish in human readable English
    source: ObjectTarget | Range;
}

// Moves an object or Range of objects to a new Place or ArrayPlace.
interface Move {
    type: "move";
    explanation: string; // A description of what this edit is meant to accomplish in human readable English
    source: ObjectTarget | Range;
    destination: ArrayPlace | ObjectPlace;
}

interface EditWrapper {
    edit: Insert | Remove | Move | Modify | null; // The next edit to apply to the tree, or null if the task is complete.
}


	The tree is a JSON object with the following schema: interface TestWrapperNode { childNodeProperty: TestTodoAppSchema; } interface TestTodoAppSchema { title: string; description: string; todos: Todo[]; } interface Todo { title: string; completed: boolean; }
	
	
	The current state of the tree is: {"__fluid_objectId":"TestWrapperNode1","childNodeProperty":{"__fluid_objectId":"TestTodoAppSchema1","title":"My First Todo List","description":"This is a list of todos","todos":[{"__fluid_objectId":"Todo1","title":"Task 1","completed":true},{"__fluid_objectId":"Todo2","title":"Task 2","completed":true}]}}.
	The user requested you accomplish the following goal:
	"Change the completed to false for the first task and create a new edit"
	If the goal is now completed or is impossible, you should return null.
	Otherwise, you should create an edit that makes progress towards the goal. It should have an English description ("explanation") of which edit to perform (specifying one of the allowed edit types).