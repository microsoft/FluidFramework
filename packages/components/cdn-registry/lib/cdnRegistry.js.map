{"version":3,"file":"cdnRegistry.js","sourceRoot":"","sources":["../src/cdnRegistry.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n *\n */\n\nimport { IComponent, IComponentRouter, IRequest, IResponse } from \"@microsoft/fluid-component-core-interfaces\";\nimport {\n    IContainerContext,\n    IFluidCodeDetails,\n    IFluidModule,\n    IFluidPackage,\n    isFluidPackage,\n} from \"@microsoft/fluid-container-definitions\";\nimport {\n    createComponentResponse, createErrorResponse, handleRegistryRequest, RequestParser,\n} from \"@microsoft/fluid-container-runtime\";\nimport { } from \"@microsoft/fluid-framework-interfaces\";\nimport {\n    ComponentFactoryTypes,\n    IComponentRegistry,\n} from \"@microsoft/fluid-runtime-definitions\";\n\n// tslint:disable-next-line: completed-docs\nexport class CdnRegistry implements IComponentRegistry, IComponentRouter {\n\n    public static readonly defaultComponent: string = \"default\";\n\n    public get IComponentRegistry() { return this; }\n    public get IComponentRouter() { return this; }\n\n    private readonly packages = new Map<string, Promise<IFluidPackage | undefined>>();\n    private readonly modules = new Map<string, Promise<IFluidModule | undefined>>();\n\n    public constructor(\n        private readonly containerContext: IContainerContext,\n        public readonly cdnUrlBase: string) {\n    }\n\n    public async get(name: string): Promise<ComponentFactoryTypes | undefined> {\n        const response =  await this.request({url: encodeURIComponent(name)});\n        if (response.status === 200) {\n            return response.value as ComponentFactoryTypes;\n        }\n        return undefined;\n    }\n\n    public async request(request: IRequest): Promise<IResponse> {\n        const parser = RequestParser.create(request);\n        if (parser.pathParts.length === 0) {\n            return createComponentResponse(this);\n        }\n\n        const fluidModule = await this.getModuleFromCache(parser.pathParts[0]);\n        if (fluidModule === undefined || fluidModule.fluidExport === undefined) {\n            return createErrorResponse(404, parser.url);\n        }\n\n        if (parser.pathParts.length === 1) {\n            return createComponentResponse(fluidModule.fluidExport);\n        }\n\n        if (parser.pathParts[1] === CdnRegistry.defaultComponent) {\n            const defaultComponent = await this.getDefaultFactory(fluidModule.fluidExport) as IComponent;\n            if (defaultComponent === undefined) {\n                return createErrorResponse(404, parser.url);\n            }\n            if (parser.pathParts.length === 2) {\n                return createComponentResponse(defaultComponent);\n            }\n            if (defaultComponent.IComponentRegistry) {\n                return handleRegistryRequest(\n                    parser.createSubRequest(2),\n                    defaultComponent.IComponentRegistry);\n            }\n            return createErrorResponse(400, parser.url);\n        }\n\n        if (fluidModule.fluidExport.IComponentRegistry) {\n            return handleRegistryRequest(\n                parser.createSubRequest(1),\n                fluidModule.fluidExport.IComponentRegistry);\n        }\n\n        return createErrorResponse(400, parser.url);\n    }\n\n    protected async getFluidPackage(pkgName: string): Promise<IFluidPackage | undefined> {\n        const response = await fetch(`${this.cdnUrlBase}/${pkgName}/package.json`);\n        if (!response.ok) {\n            return undefined;\n        } else {\n            const responseText = await response.text();\n            const fluidPackageJson = JSON.parse(responseText);\n            if (isFluidPackage(fluidPackageJson)) {\n                return fluidPackageJson;\n            } else {\n                return undefined;\n            }\n        }\n    }\n\n    private async getDefaultFactory(fluidExport: IComponent) {\n        if (fluidExport.IComponentDefaultFactory !== undefined) {\n            return fluidExport.IComponentDefaultFactory.getDefaultFactory();\n        } else if (fluidExport.IComponentFactory !== undefined) {\n            return fluidExport.IComponentFactory;\n        }\n        return undefined;\n    }\n\n    private async getModuleFromCache(name: string): Promise<IFluidModule | undefined> {\n        if (!this.modules.has(name)) {\n\n            const getModule = async (moduleName: string) => {\n                const fluidPackage = await this.getPackageFromCache(moduleName);\n                if (fluidPackage === undefined) {\n                    return undefined;\n                } else {\n                    const details: IFluidCodeDetails = {\n                        config: { cdn: this.cdnUrlBase },\n                        package: fluidPackage,\n                    };\n                    return this.containerContext.codeLoader.load<IFluidModule>(details);\n                }\n            };\n\n            this.modules.set(name, getModule(name));\n\n        }\n        return this.modules.get(name);\n    }\n\n    private async getPackageFromCache(name: string): Promise<IFluidPackage | undefined> {\n        if (!this.packages.has(name)) {\n            this.packages.set(name, this.getFluidPackage(name));\n        }\n        return this.packages.get(name);\n    }\n}\n"]}