{"version":3,"file":"segmentspan.js","sourceRoot":"","sources":["../src/segmentspan.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAIH,MAAM,OAAO,WAAW;IAkBpB,YAAY,QAAiB,EAAE,OAAkB,EAAE,WAAoB,EAAE,SAAkB;QANnF,kBAAa,GAAG,GAAG,CAAC;QACpB,iBAAY,GAAG,GAAG,CAAC;QACV,cAAS,GAAG,EAAE,CAAC;QACxB,eAAU,GAAG,GAAG,CAAC;QACjB,iBAAY,GAAG,GAAG,CAAC;QAGvB,IAAI,QAAQ,KAAK,SAAS,EAAE;YACxB,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;SAC1D;IACL,CAAC;IArBD,IAAW,QAAQ,KAA0B,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IACrE,IAAW,WAAW,KAAK,OAAO,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;IACtD,IAAW,aAAa,KAAK,OAAO,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;IAC7E,IAAW,WAAW,KAAK,OAAO,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IACjH,IAAW,OAAO,KAAK,OAAO,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAE1D,IAAW,YAAY,KAAK,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtD,IAAW,WAAW,KAAK,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAE5E,IAAW,MAAM,KAAK,OAAO,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;IAcrE,mCAAmC;IAC5B,OAAO,CAAC,QAA8G;QACzH,IAAI,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;QACpC,IAAI,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC;QAClC,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC;QAE/B,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjC,IAAI,QAAQ,CAAC,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,YAAY,EAAE,KAAK,GAAG,QAAQ,CAAC,CAAC,KAAK,KAAK,EAAE;gBACtG,OAAO;aACV;YAED,QAAQ,IAAI,OAAO,CAAC,YAAY,CAAC;YACjC,WAAW,GAAG,CAAC,CAAC;SACnB;IACL,CAAC;IAEM,MAAM,CAAC,QAAgB,EAAE,OAAiB,EAAE,WAAmB,EAAE,SAAiB;QACrF,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC7B,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC;QAC7B,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAE5B,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC;YAE9B,8FAA8F;YAC9F,wDAAwD;YACxD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;SAChD;QAED,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,IAAI,OAAO,CAAC,YAAY,CAAC,CAAC;QACpF,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC;IACtF,CAAC;IAED;;;OAGG;IACI,yBAAyB,CAAC,UAAkB;QAC/C,IAAI,iBAAiB,GAAG,UAAU,CAAC;QACnC,IAAI,OAAiB,CAAC;QACtB,IAAI,MAAM,GAAG,GAAG,CAAC;QAEjB,4FAA4F;QAC5F,kFAAkF;QAClF,IAAI,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,EAAE,EAAE;YACzD,OAAO,GAAG,SAAS,CAAC;YACpB,MAAM,GAAG,GAAG,SAAS,GAAG,WAAW,CAAC;YAEpC,MAAM,GAAG,WAAW,GAAG,iBAAiB,CAAC;YACzC,IAAI,iBAAiB,GAAG,GAAG,EAAE;gBACzB,OAAO,KAAK,CAAC;aAChB;YAED,iBAAiB,IAAI,GAAG,CAAC;YACzB,OAAO,IAAI,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC;IAC/B,CAAC;CACJ","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ISegment } from \"@microsoft/fluid-merge-tree\";\n\nexport class SegmentSpan {\n    public get segments(): readonly ISegment[] { return this._segments; }\n    public get startOffset() { return this._startOffset; }\n    public get startPosition() { return this.firstPosition + this._startOffset; }\n    public get endPosition() { return this.lastPosition + Math.min(this._endOffset, this.lastSegment.cachedLength); }\n    public get isEmpty() { return isNaN(this.firstPosition); }\n\n    public get firstSegment() { return this.segments[0]; }\n    public get lastSegment() { return this.segments[this.segments.length - 1]; }\n\n    public get length() { return this.endPosition - this.startPosition; }\n\n    private firstPosition = NaN;\n    private lastPosition = NaN;\n    private readonly _segments = [];\n    private _endOffset = NaN;\n    private _startOffset = NaN;\n\n    constructor(position?: number, segment?: ISegment, startOffset?: number, endOffset?: number) {\n        if (position !== undefined) {\n            this.append(position, segment, startOffset, endOffset);\n        }\n    }\n\n    // eslint-disable-next-line max-len\n    public forEach(callback: (position: number, segment: ISegment, startOffset: number, endOffset: number) => boolean | undefined) {\n        let startOffset = this._startOffset;\n        let position = this.firstPosition;\n        const final = this.endPosition;\n\n        for (const segment of this.segments) {\n            if (callback(position, segment, startOffset, Math.min(segment.cachedLength, final - position)) === false) {\n                return;\n            }\n\n            position += segment.cachedLength;\n            startOffset = 0;\n        }\n    }\n\n    public append(position: number, segment: ISegment, startOffset: number, endOffset: number) {\n        this._segments.push(segment);\n        this.lastPosition = position;\n        this._endOffset = endOffset;\n\n        if (this.isEmpty) {\n            this.firstPosition = position;\n\n            // Note: The first segment appended to the span may not be the first segment in the iteration,\n            //       in which case the startOffset will be negative.\n            this._startOffset = Math.max(startOffset, 0);\n        }\n\n        console.assert(0 <= this._startOffset && this._startOffset <= segment.cachedLength);\n        console.assert(0 <= this.startPosition && this.startPosition <= this.endPosition);\n    }\n\n    /**\n     * Given an offset from the beginning of the span, returns the segment that contains the offset\n     * as well as the offset from the segment start.\n     */\n    public spanOffsetToSegmentOffset(spanOffset: number) {\n        let currentSpanOffset = spanOffset;\n        let segment: ISegment;\n        let offset = NaN;\n\n        // Note: It is trivial to accelerate this using binary search.  To do so, construct a second\n        //       array of cumulative span lengths when pushing each segment in 'append()'.\n        this.forEach((position, candidate, startOffset, endOffset) => {\n            segment = candidate;\n            const len = endOffset - startOffset;\n\n            offset = startOffset + currentSpanOffset;\n            if (currentSpanOffset < len) {\n                return false;\n            }\n\n            currentSpanOffset -= len;\n            return true;\n        });\n\n        return { segment, offset };\n    }\n}\n"]}