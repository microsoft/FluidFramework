{"version":3,"file":"document.js","sourceRoot":"","sources":["../src/document.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { PrimedComponent } from \"@microsoft/fluid-aqueduct\";\nimport { IComponentHandle } from \"@microsoft/fluid-component-core-interfaces\";\nimport { ISegment, LocalReference, PropertySet, ReferenceType } from \"@microsoft/fluid-merge-tree\";\nimport { IComponentContext, IComponentRuntime } from \"@microsoft/fluid-runtime-definitions\";\nimport { SequenceDeltaEvent, SequenceMaintenanceEvent, SharedString } from \"@microsoft/fluid-sequence\";\nimport { debug } from \"./debug\";\n// eslint-disable-next-line import/no-internal-modules\nimport { clamp } from \"./util/clamp\";\n\n// TODO: We need the ability to create LocalReferences to the end of the document. Our\n//       workaround creates a LocalReference with an 'undefined' segment that is never\n//       inserted into the MergeTree.  We then special case this segment in localRefToPosition,\n//       addLocalRef, removeLocalRef, etc.\n//\n//       Note, we use 'undefined' for our sentinel value to also workaround the case where\n//       the user deletes the entire sequence.  (The SlideOnRemove references end up pointing\n//       to undefined segments.)\n//\n//       See: https://github.com/microsoft/FluidFramework/issues/86\nconst endOfTextSegment = undefined;\nconst endOfTextSegmentAndOffset = Object.freeze({ segment: endOfTextSegment, offset: 0 });\n\ntype LeafAction = (position: number, segment: ISegment, startOffset: number, endOffset: number) => boolean;\n\n/**\n * Used by 'FlowDocument.visitRange'.  Uses the otherwise unused 'accum' object to pass the\n * leaf action callback, allowing us to simplify the the callback signature and (maybe)\n * avoiding an unnecessary allocation to wrap the given 'callback'.\n */\nconst accumAsLeafAction = (\n    segment: ISegment,\n    position: number,\n    refSeq: number,\n    clientId: number,\n    startOffset: number,\n    endOffset: number,\n    accum?: LeafAction,\n) => (accum)(position, segment, startOffset, endOffset);\n\nconst localAnnotationSym = Symbol(\"SourceDocument.localAnnotation\");\n\nexport class SourceDocument extends PrimedComponent {\n    private get sharedString() { return this.maybeSharedString; }\n    public get length() { return this.sharedString.getLength(); }\n\n    private maybeSharedString?: SharedString;\n\n    constructor(runtime: IComponentRuntime, context: IComponentContext) {\n        super(runtime, context);\n    }\n\n    public getSegmentAndOffset(position: number) {\n        // Special case for LocalReference to end of document.  (See comments on 'endOfTextSegment').\n        return position === this.length\n            ? endOfTextSegmentAndOffset\n            : this.sharedString.getContainingSegment(position);\n    }\n\n    public getPosition(segment: ISegment) {\n        // Special case for LocalReference to end of document.  (See comments on 'endOfTextSegment').\n        return segment === endOfTextSegment\n            ? this.length\n            : this.sharedString.getPosition(segment);\n    }\n\n    public addLocalRef(position: number) {\n        // Special case for LocalReference to end of document.  (See comments on 'endOfTextSegment').\n        if (position >= this.length) {\n            return this.sharedString.createPositionReference(endOfTextSegment, 0, ReferenceType.Transient);\n        }\n\n        const { segment, offset } = this.getSegmentAndOffset(position);\n        const localRef = this.sharedString.createPositionReference(segment, offset, ReferenceType.SlideOnRemove);\n\n        return localRef;\n    }\n\n    public removeLocalRef(localRef: LocalReference) {\n        const segment = localRef.getSegment();\n\n        // Special case for LocalReference to end of document.  (See comments on 'endOfTextSegment').\n        if (segment !== endOfTextSegment) {\n            this.sharedString.removeLocalReference(localRef);\n        }\n    }\n\n    public localRefToPosition(localRef: LocalReference) {\n        // Special case for LocalReference to end of document.  (See comments on 'endOfTextSegment').\n        return localRef.getSegment() === endOfTextSegment\n            ? this.length\n            : localRef.toPosition();\n    }\n\n    public insertText(position: number, text: string) {\n        debug(`insertText(${position},\"${text}\")`);\n        this.sharedString.insertText(position, text);\n    }\n\n    public replaceWithText(start: number, end: number, text: string) {\n        debug(`replaceWithText(${start}, ${end}, \"${text}\")`);\n        this.sharedString.replaceText(start, end, text);\n    }\n\n    public remove(start: number, end: number) {\n        debug(`remove(${start},${end})`);\n        this.sharedString.removeRange(start, end);\n    }\n\n    public visitRange(callback: LeafAction, start = 0, end = this.length) {\n        // eslint-disable-next-line no-param-reassign\n        end = clamp(0, end, this.length);\n        // eslint-disable-next-line no-param-reassign\n        start = clamp(0, start, end);\n\n        // Early exit if passed an empty or invalid range (e.g., NaN).\n        if (!(start < end)) {\n            return;\n        }\n\n        // Note: We pass the leaf callback action as the accumulator, and then use the 'accumAsLeafAction'\n        //       actions to invoke the accum for each leaf.  (Paranoid micro-optimization that attempts to\n        //       avoid allocation while simplifying the 'LeafAction' signature.)\n        this.sharedString.walkSegments(accumAsLeafAction, start, end, callback);\n    }\n\n    /* eslint-disable max-len */\n    public on(event: \"maintenance\", listener: (event: SequenceMaintenanceEvent, target: SharedString, ...args: any[]) => void): this;\n    public on(event: \"sequenceDelta\", listener: (event: SequenceDeltaEvent, target: SharedString, ...args: any[]) => void): this;\n    public on(event: \"maintenance\" | \"sequenceDelta\", listener: (event: any, target: SharedString, ...args: any[]) => void): this {\n        this.maybeSharedString.on(event, listener);\n        return this;\n    }\n\n    public off(event: \"maintenance\", listener: (event: SequenceMaintenanceEvent, target: SharedString, ...args: any[]) => void): this;\n    public off(event: \"sequenceDelta\", listener: (event: SequenceDeltaEvent, target: SharedString, ...args: any[]) => void): this;\n    public off(event: \"maintenance\" | \"sequenceDelta\", listener: (event: any, target: SharedString, ...args: any[]) => void): this {\n        this.maybeSharedString.removeListener(event, listener);\n        return this;\n    }\n    /* eslint-enable max-len */\n\n    public getPreviousSegment(current: ISegment) {\n        const position = this.getPosition(current);\n        return position > 0\n            ? this.getSegmentAndOffset(position - 1).segment\n            : undefined;\n    }\n\n    public annotate(start: number, end: number, props: PropertySet) {\n        this.sharedString.annotateRange(start, end, props);\n    }\n\n    public annotateLocal(start: number, end: number, props: PropertySet) {\n        this.ensureIntervalBoundary(start);\n        this.ensureIntervalBoundary(end);\n\n        this.visitRange((_, segment) => {\n            segment[localAnnotationSym] = { ...segment[localAnnotationSym], ...props };\n            return true;\n        }, start, end);\n    }\n\n    protected async componentInitializingFirstTime() {\n        this.root.set(\"text\", SharedString.create(this.runtime, \"text\").handle);\n    }\n\n    protected async componentHasInitialized() {\n        this.maybeSharedString = await (await this.root.wait<IComponentHandle<SharedString>>(\"text\")).get();\n    }\n\n    private ensureIntervalBoundary(position: number) {\n        // Ensure this segment will not coalesce by annotating with a unique id, if it doesn't have one already.\n        let { segment } = this.getSegmentAndOffset(position);\n        const tid = segment.properties && segment.properties.tid;\n        if (!tid) {\n            // tslint:disable-next-line:insecure-random\n            this.annotate(position, position + 1, { tid: Math.random().toString(36).slice(2) });\n\n            // Annotating may have caused the segment to split.  Retrieve it again.\n            segment = this.getSegmentAndOffset(position).segment;\n        }\n    }\n}\n"]}