/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/driver-definitions-previous";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_ConnectionMode": {"forwardCompat": false}
 */
declare function get_old_TypeAliasDeclaration_ConnectionMode():
    TypeOnly<old.ConnectionMode>;
declare function use_current_TypeAliasDeclaration_ConnectionMode(
    use: TypeOnly<current.ConnectionMode>): void;
use_current_TypeAliasDeclaration_ConnectionMode(
    get_old_TypeAliasDeclaration_ConnectionMode());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_ConnectionMode": {"backCompat": false}
 */
declare function get_current_TypeAliasDeclaration_ConnectionMode():
    TypeOnly<current.ConnectionMode>;
declare function use_old_TypeAliasDeclaration_ConnectionMode(
    use: TypeOnly<old.ConnectionMode>): void;
use_old_TypeAliasDeclaration_ConnectionMode(
    get_current_TypeAliasDeclaration_ConnectionMode());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ICapabilities": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_ICapabilities():
    TypeOnly<old.ICapabilities>;
declare function use_current_InterfaceDeclaration_ICapabilities(
    use: TypeOnly<current.ICapabilities>): void;
use_current_InterfaceDeclaration_ICapabilities(
    get_old_InterfaceDeclaration_ICapabilities());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ICapabilities": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_ICapabilities():
    TypeOnly<current.ICapabilities>;
declare function use_old_InterfaceDeclaration_ICapabilities(
    use: TypeOnly<old.ICapabilities>): void;
use_old_InterfaceDeclaration_ICapabilities(
    get_current_InterfaceDeclaration_ICapabilities());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IClient": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IClient():
    TypeOnly<old.IClient>;
declare function use_current_InterfaceDeclaration_IClient(
    use: TypeOnly<current.IClient>): void;
use_current_InterfaceDeclaration_IClient(
    get_old_InterfaceDeclaration_IClient());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IClient": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IClient():
    TypeOnly<current.IClient>;
declare function use_old_InterfaceDeclaration_IClient(
    use: TypeOnly<old.IClient>): void;
use_old_InterfaceDeclaration_IClient(
    get_current_InterfaceDeclaration_IClient());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IClientDetails": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IClientDetails():
    TypeOnly<old.IClientDetails>;
declare function use_current_InterfaceDeclaration_IClientDetails(
    use: TypeOnly<current.IClientDetails>): void;
use_current_InterfaceDeclaration_IClientDetails(
    get_old_InterfaceDeclaration_IClientDetails());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IClientDetails": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IClientDetails():
    TypeOnly<current.IClientDetails>;
declare function use_old_InterfaceDeclaration_IClientDetails(
    use: TypeOnly<old.IClientDetails>): void;
use_old_InterfaceDeclaration_IClientDetails(
    get_current_InterfaceDeclaration_IClientDetails());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IQuorumClients": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IQuorumClients():
    TypeOnly<old.IQuorumClients>;
declare function use_current_InterfaceDeclaration_IQuorumClients(
    use: TypeOnly<current.IQuorumClients>): void;
use_current_InterfaceDeclaration_IQuorumClients(
    get_old_InterfaceDeclaration_IQuorumClients());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IQuorumClients": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IQuorumClients():
    TypeOnly<current.IQuorumClients>;
declare function use_old_InterfaceDeclaration_IQuorumClients(
    use: TypeOnly<old.IQuorumClients>): void;
use_old_InterfaceDeclaration_IQuorumClients(
    get_current_InterfaceDeclaration_IQuorumClients());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISequencedClient": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_ISequencedClient():
    TypeOnly<old.ISequencedClient>;
declare function use_current_InterfaceDeclaration_ISequencedClient(
    use: TypeOnly<current.ISequencedClient>): void;
use_current_InterfaceDeclaration_ISequencedClient(
    get_old_InterfaceDeclaration_ISequencedClient());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISequencedClient": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_ISequencedClient():
    TypeOnly<current.ISequencedClient>;
declare function use_old_InterfaceDeclaration_ISequencedClient(
    use: TypeOnly<old.ISequencedClient>): void;
use_old_InterfaceDeclaration_ISequencedClient(
    get_current_InterfaceDeclaration_ISequencedClient());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISummaryAttachment": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_ISummaryAttachment():
    TypeOnly<old.ISummaryAttachment>;
declare function use_current_InterfaceDeclaration_ISummaryAttachment(
    use: TypeOnly<current.ISummaryAttachment>): void;
use_current_InterfaceDeclaration_ISummaryAttachment(
    get_old_InterfaceDeclaration_ISummaryAttachment());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISummaryAttachment": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_ISummaryAttachment():
    TypeOnly<current.ISummaryAttachment>;
declare function use_old_InterfaceDeclaration_ISummaryAttachment(
    use: TypeOnly<old.ISummaryAttachment>): void;
use_old_InterfaceDeclaration_ISummaryAttachment(
    get_current_InterfaceDeclaration_ISummaryAttachment());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISummaryBlob": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_ISummaryBlob():
    TypeOnly<old.ISummaryBlob>;
declare function use_current_InterfaceDeclaration_ISummaryBlob(
    use: TypeOnly<current.ISummaryBlob>): void;
use_current_InterfaceDeclaration_ISummaryBlob(
    get_old_InterfaceDeclaration_ISummaryBlob());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISummaryBlob": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_ISummaryBlob():
    TypeOnly<current.ISummaryBlob>;
declare function use_old_InterfaceDeclaration_ISummaryBlob(
    use: TypeOnly<old.ISummaryBlob>): void;
use_old_InterfaceDeclaration_ISummaryBlob(
    get_current_InterfaceDeclaration_ISummaryBlob());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISummaryHandle": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_ISummaryHandle():
    TypeOnly<old.ISummaryHandle>;
declare function use_current_InterfaceDeclaration_ISummaryHandle(
    use: TypeOnly<current.ISummaryHandle>): void;
use_current_InterfaceDeclaration_ISummaryHandle(
    get_old_InterfaceDeclaration_ISummaryHandle());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISummaryHandle": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_ISummaryHandle():
    TypeOnly<current.ISummaryHandle>;
declare function use_old_InterfaceDeclaration_ISummaryHandle(
    use: TypeOnly<old.ISummaryHandle>): void;
use_old_InterfaceDeclaration_ISummaryHandle(
    get_current_InterfaceDeclaration_ISummaryHandle());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISummaryTree": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_ISummaryTree():
    TypeOnly<old.ISummaryTree>;
declare function use_current_InterfaceDeclaration_ISummaryTree(
    use: TypeOnly<current.ISummaryTree>): void;
use_current_InterfaceDeclaration_ISummaryTree(
    get_old_InterfaceDeclaration_ISummaryTree());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISummaryTree": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_ISummaryTree():
    TypeOnly<current.ISummaryTree>;
declare function use_old_InterfaceDeclaration_ISummaryTree(
    use: TypeOnly<old.ISummaryTree>): void;
use_old_InterfaceDeclaration_ISummaryTree(
    get_current_InterfaceDeclaration_ISummaryTree());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IUser": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IUser():
    TypeOnly<old.IUser>;
declare function use_current_InterfaceDeclaration_IUser(
    use: TypeOnly<current.IUser>): void;
use_current_InterfaceDeclaration_IUser(
    get_old_InterfaceDeclaration_IUser());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IUser": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IUser():
    TypeOnly<current.IUser>;
declare function use_old_InterfaceDeclaration_IUser(
    use: TypeOnly<old.IUser>): void;
use_old_InterfaceDeclaration_IUser(
    get_current_InterfaceDeclaration_IUser());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_SummaryObject": {"forwardCompat": false}
 */
declare function get_old_TypeAliasDeclaration_SummaryObject():
    TypeOnly<old.SummaryObject>;
declare function use_current_TypeAliasDeclaration_SummaryObject(
    use: TypeOnly<current.SummaryObject>): void;
use_current_TypeAliasDeclaration_SummaryObject(
    get_old_TypeAliasDeclaration_SummaryObject());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_SummaryObject": {"backCompat": false}
 */
declare function get_current_TypeAliasDeclaration_SummaryObject():
    TypeOnly<current.SummaryObject>;
declare function use_old_TypeAliasDeclaration_SummaryObject(
    use: TypeOnly<old.SummaryObject>): void;
use_old_TypeAliasDeclaration_SummaryObject(
    get_current_TypeAliasDeclaration_SummaryObject());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_SummaryType": {"forwardCompat": false}
 */
declare function get_old_TypeAliasDeclaration_SummaryType():
    TypeOnly<old.SummaryType>;
declare function use_current_TypeAliasDeclaration_SummaryType(
    use: TypeOnly<current.SummaryType>): void;
use_current_TypeAliasDeclaration_SummaryType(
    get_old_TypeAliasDeclaration_SummaryType());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_SummaryType": {"backCompat": false}
 */
declare function get_current_TypeAliasDeclaration_SummaryType():
    TypeOnly<current.SummaryType>;
declare function use_old_TypeAliasDeclaration_SummaryType(
    use: TypeOnly<old.SummaryType>): void;
use_old_TypeAliasDeclaration_SummaryType(
    get_current_TypeAliasDeclaration_SummaryType());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_SummaryTypeNoHandle": {"forwardCompat": false}
 */
declare function get_old_TypeAliasDeclaration_SummaryTypeNoHandle():
    TypeOnly<old.SummaryTypeNoHandle>;
declare function use_current_TypeAliasDeclaration_SummaryTypeNoHandle(
    use: TypeOnly<current.SummaryTypeNoHandle>): void;
use_current_TypeAliasDeclaration_SummaryTypeNoHandle(
    get_old_TypeAliasDeclaration_SummaryTypeNoHandle());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_SummaryTypeNoHandle": {"backCompat": false}
 */
declare function get_current_TypeAliasDeclaration_SummaryTypeNoHandle():
    TypeOnly<current.SummaryTypeNoHandle>;
declare function use_old_TypeAliasDeclaration_SummaryTypeNoHandle(
    use: TypeOnly<old.SummaryTypeNoHandle>): void;
use_old_TypeAliasDeclaration_SummaryTypeNoHandle(
    get_current_TypeAliasDeclaration_SummaryTypeNoHandle());
