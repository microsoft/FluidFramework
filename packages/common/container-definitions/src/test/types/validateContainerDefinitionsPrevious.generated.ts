/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType, requireAssignableTo } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/container-definitions-previous/internal";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current | requireAssignableTo<true, true>;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Enum_AttachState": {"forwardCompat": false}
 */
declare type old_as_current_for_Enum_AttachState = requireAssignableTo<TypeOnly<old.AttachState>, TypeOnly<current.AttachState>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Enum_AttachState": {"backCompat": false}
 */
declare type current_as_old_for_Enum_AttachState = requireAssignableTo<TypeOnly<current.AttachState>, TypeOnly<old.AttachState>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Enum_LoaderHeader": {"forwardCompat": false}
 */
declare type old_as_current_for_Enum_LoaderHeader = requireAssignableTo<TypeOnly<old.LoaderHeader>, TypeOnly<current.LoaderHeader>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Enum_LoaderHeader": {"backCompat": false}
 */
declare type current_as_old_for_Enum_LoaderHeader = requireAssignableTo<TypeOnly<current.LoaderHeader>, TypeOnly<old.LoaderHeader>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ContainerWarning": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ContainerWarning = requireAssignableTo<TypeOnly<old.ContainerWarning>, TypeOnly<current.ContainerWarning>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ContainerWarning": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ContainerWarning = requireAssignableTo<TypeOnly<current.ContainerWarning>, TypeOnly<old.ContainerWarning>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IAudience": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IAudience = requireAssignableTo<TypeOnly<old.IAudience>, TypeOnly<current.IAudience>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IAudience": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IAudience = requireAssignableTo<TypeOnly<current.IAudience>, TypeOnly<old.IAudience>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IAudienceEvents": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IAudienceEvents = requireAssignableTo<TypeOnly<old.IAudienceEvents>, TypeOnly<current.IAudienceEvents>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IAudienceEvents": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IAudienceEvents = requireAssignableTo<TypeOnly<current.IAudienceEvents>, TypeOnly<old.IAudienceEvents>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IAudienceOwner": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IAudienceOwner = requireAssignableTo<TypeOnly<old.IAudienceOwner>, TypeOnly<current.IAudienceOwner>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IAudienceOwner": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IAudienceOwner = requireAssignableTo<TypeOnly<current.IAudienceOwner>, TypeOnly<old.IAudienceOwner>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IBatchMessage": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IBatchMessage = requireAssignableTo<TypeOnly<old.IBatchMessage>, TypeOnly<current.IBatchMessage>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IBatchMessage": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IBatchMessage = requireAssignableTo<TypeOnly<current.IBatchMessage>, TypeOnly<old.IBatchMessage>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICodeDetailsLoader": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ICodeDetailsLoader = requireAssignableTo<TypeOnly<old.ICodeDetailsLoader>, TypeOnly<current.ICodeDetailsLoader>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICodeDetailsLoader": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ICodeDetailsLoader = requireAssignableTo<TypeOnly<current.ICodeDetailsLoader>, TypeOnly<old.ICodeDetailsLoader>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IConnectionDetails": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IConnectionDetails = requireAssignableTo<TypeOnly<old.IConnectionDetails>, TypeOnly<current.IConnectionDetails>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IConnectionDetails": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IConnectionDetails = requireAssignableTo<TypeOnly<current.IConnectionDetails>, TypeOnly<old.IConnectionDetails>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IContainer": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IContainer = requireAssignableTo<TypeOnly<old.IContainer>, TypeOnly<current.IContainer>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IContainer": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IContainer = requireAssignableTo<TypeOnly<current.IContainer>, TypeOnly<old.IContainer>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IContainerContext": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IContainerContext = requireAssignableTo<TypeOnly<old.IContainerContext>, TypeOnly<current.IContainerContext>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IContainerContext": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IContainerContext = requireAssignableTo<TypeOnly<current.IContainerContext>, TypeOnly<old.IContainerContext>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IContainerEvents": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IContainerEvents = requireAssignableTo<TypeOnly<old.IContainerEvents>, TypeOnly<current.IContainerEvents>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IContainerEvents": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IContainerEvents = requireAssignableTo<TypeOnly<current.IContainerEvents>, TypeOnly<old.IContainerEvents>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IContainerLoadMode": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IContainerLoadMode = requireAssignableTo<TypeOnly<old.IContainerLoadMode>, TypeOnly<current.IContainerLoadMode>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IContainerLoadMode": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IContainerLoadMode = requireAssignableTo<TypeOnly<current.IContainerLoadMode>, TypeOnly<old.IContainerLoadMode>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IDeltaManager": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IDeltaManager = requireAssignableTo<TypeOnly<current.IDeltaManager<never,never>>, TypeOnly<old.IDeltaManager<never,never>>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IDeltaManagerEvents": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IDeltaManagerEvents = requireAssignableTo<TypeOnly<current.IDeltaManagerEvents>, TypeOnly<old.IDeltaManagerEvents>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IDeltaQueue": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IDeltaQueue = requireAssignableTo<TypeOnly<current.IDeltaQueue<never>>, TypeOnly<old.IDeltaQueue<never>>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IDeltaQueueEvents": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IDeltaQueueEvents = requireAssignableTo<TypeOnly<current.IDeltaQueueEvents<never>>, TypeOnly<old.IDeltaQueueEvents<never>>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IDeltaSender": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IDeltaSender = requireAssignableTo<TypeOnly<current.IDeltaSender>, TypeOnly<old.IDeltaSender>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IErrorBase": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IErrorBase = requireAssignableTo<TypeOnly<old.IErrorBase>, TypeOnly<current.IErrorBase>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IErrorBase": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IErrorBase = requireAssignableTo<TypeOnly<current.IErrorBase>, TypeOnly<old.IErrorBase>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IFluidBrowserPackage": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IFluidBrowserPackage = requireAssignableTo<TypeOnly<old.IFluidBrowserPackage>, TypeOnly<current.IFluidBrowserPackage>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IFluidBrowserPackage": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IFluidBrowserPackage = requireAssignableTo<TypeOnly<current.IFluidBrowserPackage>, TypeOnly<old.IFluidBrowserPackage>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IFluidBrowserPackageEnvironment": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IFluidBrowserPackageEnvironment = requireAssignableTo<TypeOnly<old.IFluidBrowserPackageEnvironment>, TypeOnly<current.IFluidBrowserPackageEnvironment>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IFluidBrowserPackageEnvironment": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IFluidBrowserPackageEnvironment = requireAssignableTo<TypeOnly<current.IFluidBrowserPackageEnvironment>, TypeOnly<old.IFluidBrowserPackageEnvironment>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IFluidCodeDetails": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IFluidCodeDetails = requireAssignableTo<TypeOnly<old.IFluidCodeDetails>, TypeOnly<current.IFluidCodeDetails>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IFluidCodeDetails": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IFluidCodeDetails = requireAssignableTo<TypeOnly<current.IFluidCodeDetails>, TypeOnly<old.IFluidCodeDetails>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IFluidCodeDetailsComparer": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IFluidCodeDetailsComparer = requireAssignableTo<TypeOnly<old.IFluidCodeDetailsComparer>, TypeOnly<current.IFluidCodeDetailsComparer>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IFluidCodeDetailsComparer": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IFluidCodeDetailsComparer = requireAssignableTo<TypeOnly<current.IFluidCodeDetailsComparer>, TypeOnly<old.IFluidCodeDetailsComparer>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IFluidCodeDetailsConfig": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IFluidCodeDetailsConfig = requireAssignableTo<TypeOnly<old.IFluidCodeDetailsConfig>, TypeOnly<current.IFluidCodeDetailsConfig>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IFluidCodeDetailsConfig": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IFluidCodeDetailsConfig = requireAssignableTo<TypeOnly<current.IFluidCodeDetailsConfig>, TypeOnly<old.IFluidCodeDetailsConfig>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IFluidModule": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IFluidModule = requireAssignableTo<TypeOnly<old.IFluidModule>, TypeOnly<current.IFluidModule>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IFluidModule": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IFluidModule = requireAssignableTo<TypeOnly<current.IFluidModule>, TypeOnly<old.IFluidModule>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IFluidModuleWithDetails": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IFluidModuleWithDetails = requireAssignableTo<TypeOnly<old.IFluidModuleWithDetails>, TypeOnly<current.IFluidModuleWithDetails>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IFluidModuleWithDetails": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IFluidModuleWithDetails = requireAssignableTo<TypeOnly<current.IFluidModuleWithDetails>, TypeOnly<old.IFluidModuleWithDetails>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IFluidPackage": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IFluidPackage = requireAssignableTo<TypeOnly<old.IFluidPackage>, TypeOnly<current.IFluidPackage>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IFluidPackage": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IFluidPackage = requireAssignableTo<TypeOnly<current.IFluidPackage>, TypeOnly<old.IFluidPackage>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IFluidPackageEnvironment": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IFluidPackageEnvironment = requireAssignableTo<TypeOnly<old.IFluidPackageEnvironment>, TypeOnly<current.IFluidPackageEnvironment>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IFluidPackageEnvironment": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IFluidPackageEnvironment = requireAssignableTo<TypeOnly<current.IFluidPackageEnvironment>, TypeOnly<old.IFluidPackageEnvironment>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IGetPendingLocalStateProps": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IGetPendingLocalStateProps = requireAssignableTo<TypeOnly<old.IGetPendingLocalStateProps>, TypeOnly<current.IGetPendingLocalStateProps>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IGetPendingLocalStateProps": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IGetPendingLocalStateProps = requireAssignableTo<TypeOnly<current.IGetPendingLocalStateProps>, TypeOnly<old.IGetPendingLocalStateProps>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IHostLoader": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IHostLoader = requireAssignableTo<TypeOnly<old.IHostLoader>, TypeOnly<current.IHostLoader>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IHostLoader": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IHostLoader = requireAssignableTo<TypeOnly<current.IHostLoader>, TypeOnly<old.IHostLoader>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ILoader": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ILoader = requireAssignableTo<TypeOnly<old.ILoader>, TypeOnly<current.ILoader>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ILoader": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ILoader = requireAssignableTo<TypeOnly<current.ILoader>, TypeOnly<old.ILoader>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IProvideFluidCodeDetailsComparer": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IProvideFluidCodeDetailsComparer = requireAssignableTo<TypeOnly<old.IProvideFluidCodeDetailsComparer>, TypeOnly<current.IProvideFluidCodeDetailsComparer>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IProvideFluidCodeDetailsComparer": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IProvideFluidCodeDetailsComparer = requireAssignableTo<TypeOnly<current.IProvideFluidCodeDetailsComparer>, TypeOnly<old.IProvideFluidCodeDetailsComparer>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IProvideLoader": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IProvideLoader = requireAssignableTo<TypeOnly<old.IProvideLoader>, TypeOnly<current.IProvideLoader>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IProvideLoader": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IProvideLoader = requireAssignableTo<TypeOnly<current.IProvideLoader>, TypeOnly<old.IProvideLoader>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IProvideRuntimeFactory": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IProvideRuntimeFactory = requireAssignableTo<TypeOnly<old.IProvideRuntimeFactory>, TypeOnly<current.IProvideRuntimeFactory>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IProvideRuntimeFactory": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IProvideRuntimeFactory = requireAssignableTo<TypeOnly<current.IProvideRuntimeFactory>, TypeOnly<old.IProvideRuntimeFactory>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IRuntime": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IRuntime = requireAssignableTo<TypeOnly<old.IRuntime>, TypeOnly<current.IRuntime>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IRuntime": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IRuntime = requireAssignableTo<TypeOnly<current.IRuntime>, TypeOnly<old.IRuntime>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IRuntimeFactory": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IRuntimeFactory = requireAssignableTo<TypeOnly<old.IRuntimeFactory>, TypeOnly<current.IRuntimeFactory>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IRuntimeFactory": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IRuntimeFactory = requireAssignableTo<TypeOnly<current.IRuntimeFactory>, TypeOnly<old.IRuntimeFactory>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ISelf": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ISelf = requireAssignableTo<TypeOnly<old.ISelf>, TypeOnly<current.ISelf>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ISelf": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ISelf = requireAssignableTo<TypeOnly<current.ISelf>, TypeOnly<old.ISelf>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ISnapshotTreeWithBlobContents": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ISnapshotTreeWithBlobContents = requireAssignableTo<TypeOnly<old.ISnapshotTreeWithBlobContents>, TypeOnly<current.ISnapshotTreeWithBlobContents>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ISnapshotTreeWithBlobContents": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ISnapshotTreeWithBlobContents = requireAssignableTo<TypeOnly<current.ISnapshotTreeWithBlobContents>, TypeOnly<old.ISnapshotTreeWithBlobContents>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IThrottlingWarning": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IThrottlingWarning = requireAssignableTo<TypeOnly<old.IThrottlingWarning>, TypeOnly<current.IThrottlingWarning>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IThrottlingWarning": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IThrottlingWarning = requireAssignableTo<TypeOnly<current.IThrottlingWarning>, TypeOnly<old.IThrottlingWarning>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_ConnectionState": {"forwardCompat": false}
 */
declare type old_as_current_for_TypeAlias_ConnectionState = requireAssignableTo<TypeOnly<old.ConnectionState>, TypeOnly<current.ConnectionState>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_ConnectionState": {"backCompat": false}
 */
declare type current_as_old_for_TypeAlias_ConnectionState = requireAssignableTo<TypeOnly<current.ConnectionState>, TypeOnly<old.ConnectionState>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_ContainerErrorTypes": {"forwardCompat": false}
 */
declare type old_as_current_for_TypeAlias_ContainerErrorTypes = requireAssignableTo<TypeOnly<old.ContainerErrorTypes>, TypeOnly<current.ContainerErrorTypes>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_ContainerErrorTypes": {"backCompat": false}
 */
declare type current_as_old_for_TypeAlias_ContainerErrorTypes = requireAssignableTo<TypeOnly<current.ContainerErrorTypes>, TypeOnly<old.ContainerErrorTypes>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_ICriticalContainerError": {"forwardCompat": false}
 */
declare type old_as_current_for_TypeAlias_ICriticalContainerError = requireAssignableTo<TypeOnly<old.ICriticalContainerError>, TypeOnly<current.ICriticalContainerError>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_ICriticalContainerError": {"backCompat": false}
 */
declare type current_as_old_for_TypeAlias_ICriticalContainerError = requireAssignableTo<TypeOnly<current.ICriticalContainerError>, TypeOnly<old.ICriticalContainerError>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_ILoaderOptions": {"forwardCompat": false}
 */
declare type old_as_current_for_TypeAlias_ILoaderOptions = requireAssignableTo<TypeOnly<old.ILoaderOptions>, TypeOnly<current.ILoaderOptions>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_ILoaderOptions": {"backCompat": false}
 */
declare type current_as_old_for_TypeAlias_ILoaderOptions = requireAssignableTo<TypeOnly<current.ILoaderOptions>, TypeOnly<old.ILoaderOptions>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_ReadOnlyInfo": {"forwardCompat": false}
 */
declare type old_as_current_for_TypeAlias_ReadOnlyInfo = requireAssignableTo<TypeOnly<old.ReadOnlyInfo>, TypeOnly<current.ReadOnlyInfo>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_ReadOnlyInfo": {"backCompat": false}
 */
declare type current_as_old_for_TypeAlias_ReadOnlyInfo = requireAssignableTo<TypeOnly<current.ReadOnlyInfo>, TypeOnly<old.ReadOnlyInfo>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Variable_ContainerErrorTypes": {"backCompat": false}
 */
declare type current_as_old_for_Variable_ContainerErrorTypes = requireAssignableTo<TypeOnly<typeof current.ContainerErrorTypes>, TypeOnly<typeof old.ContainerErrorTypes>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Variable_IFluidCodeDetailsComparer": {"backCompat": false}
 */
declare type current_as_old_for_Variable_IFluidCodeDetailsComparer = requireAssignableTo<TypeOnly<typeof current.IFluidCodeDetailsComparer>, TypeOnly<typeof old.IFluidCodeDetailsComparer>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Variable_IRuntimeFactory": {"backCompat": false}
 */
declare type current_as_old_for_Variable_IRuntimeFactory = requireAssignableTo<TypeOnly<typeof current.IRuntimeFactory>, TypeOnly<typeof old.IRuntimeFactory>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Variable_isFluidBrowserPackage": {"backCompat": false}
 */
declare type current_as_old_for_Variable_isFluidBrowserPackage = requireAssignableTo<TypeOnly<typeof current.isFluidBrowserPackage>, TypeOnly<typeof old.isFluidBrowserPackage>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Variable_isFluidPackage": {"backCompat": false}
 */
declare type current_as_old_for_Variable_isFluidPackage = requireAssignableTo<TypeOnly<typeof current.isFluidPackage>, TypeOnly<typeof old.isFluidPackage>>
