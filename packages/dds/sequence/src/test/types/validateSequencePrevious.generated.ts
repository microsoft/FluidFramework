/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-test-generator in @fluidframework/build-tools.
 */
import * as old from "@fluidframework/sequence-previous";
import * as current from "../../index";

type TypeOnly<T> = {
    [P in keyof T]: TypeOnly<T[P]>;
};

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_DeserializeCallback": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_DeserializeCallback():
    TypeOnly<old.DeserializeCallback>;
declare function use_current_TypeAliasDeclaration_DeserializeCallback(
    use: TypeOnly<current.DeserializeCallback>);
use_current_TypeAliasDeclaration_DeserializeCallback(
    get_old_TypeAliasDeclaration_DeserializeCallback());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_DeserializeCallback": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_DeserializeCallback():
    TypeOnly<current.DeserializeCallback>;
declare function use_old_TypeAliasDeclaration_DeserializeCallback(
    use: TypeOnly<old.DeserializeCallback>);
use_old_TypeAliasDeclaration_DeserializeCallback(
    get_current_TypeAliasDeclaration_DeserializeCallback());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IEndpointInRangeIndex": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IEndpointInRangeIndex():
    TypeOnly<old.IEndpointInRangeIndex<any>>;
declare function use_current_InterfaceDeclaration_IEndpointInRangeIndex(
    use: TypeOnly<current.IEndpointInRangeIndex<any>>);
use_current_InterfaceDeclaration_IEndpointInRangeIndex(
    get_old_InterfaceDeclaration_IEndpointInRangeIndex());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IEndpointInRangeIndex": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IEndpointInRangeIndex():
    TypeOnly<current.IEndpointInRangeIndex<any>>;
declare function use_old_InterfaceDeclaration_IEndpointInRangeIndex(
    use: TypeOnly<old.IEndpointInRangeIndex<any>>);
use_old_InterfaceDeclaration_IEndpointInRangeIndex(
    get_current_InterfaceDeclaration_IEndpointInRangeIndex());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IEndpointIndex": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IEndpointIndex():
    TypeOnly<old.IEndpointIndex<any>>;
declare function use_current_InterfaceDeclaration_IEndpointIndex(
    use: TypeOnly<current.IEndpointIndex<any>>);
use_current_InterfaceDeclaration_IEndpointIndex(
    get_old_InterfaceDeclaration_IEndpointIndex());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IEndpointIndex": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IEndpointIndex():
    TypeOnly<current.IEndpointIndex<any>>;
declare function use_old_InterfaceDeclaration_IEndpointIndex(
    use: TypeOnly<old.IEndpointIndex<any>>);
use_old_InterfaceDeclaration_IEndpointIndex(
    get_current_InterfaceDeclaration_IEndpointIndex());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IIdIntervalIndex": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IIdIntervalIndex():
    TypeOnly<old.IIdIntervalIndex<any>>;
declare function use_current_InterfaceDeclaration_IIdIntervalIndex(
    use: TypeOnly<current.IIdIntervalIndex<any>>);
use_current_InterfaceDeclaration_IIdIntervalIndex(
    get_old_InterfaceDeclaration_IIdIntervalIndex());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IIdIntervalIndex": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IIdIntervalIndex():
    TypeOnly<current.IIdIntervalIndex<any>>;
declare function use_old_InterfaceDeclaration_IIdIntervalIndex(
    use: TypeOnly<old.IIdIntervalIndex<any>>);
use_old_InterfaceDeclaration_IIdIntervalIndex(
    get_current_InterfaceDeclaration_IIdIntervalIndex());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IInterval": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IInterval():
    TypeOnly<old.IInterval>;
declare function use_current_InterfaceDeclaration_IInterval(
    use: TypeOnly<current.IInterval>);
use_current_InterfaceDeclaration_IInterval(
    get_old_InterfaceDeclaration_IInterval());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IInterval": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IInterval():
    TypeOnly<current.IInterval>;
declare function use_old_InterfaceDeclaration_IInterval(
    use: TypeOnly<old.IInterval>);
use_old_InterfaceDeclaration_IInterval(
    get_current_InterfaceDeclaration_IInterval());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IIntervalCollection": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IIntervalCollection():
    TypeOnly<old.IIntervalCollection<any>>;
declare function use_current_InterfaceDeclaration_IIntervalCollection(
    use: TypeOnly<current.IIntervalCollection<any>>);
use_current_InterfaceDeclaration_IIntervalCollection(
    get_old_InterfaceDeclaration_IIntervalCollection());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IIntervalCollection": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IIntervalCollection():
    TypeOnly<current.IIntervalCollection<any>>;
declare function use_old_InterfaceDeclaration_IIntervalCollection(
    use: TypeOnly<old.IIntervalCollection<any>>);
use_old_InterfaceDeclaration_IIntervalCollection(
    get_current_InterfaceDeclaration_IIntervalCollection());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IIntervalCollectionEvent": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IIntervalCollectionEvent():
    TypeOnly<old.IIntervalCollectionEvent<any>>;
declare function use_current_InterfaceDeclaration_IIntervalCollectionEvent(
    use: TypeOnly<current.IIntervalCollectionEvent<any>>);
use_current_InterfaceDeclaration_IIntervalCollectionEvent(
    get_old_InterfaceDeclaration_IIntervalCollectionEvent());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IIntervalCollectionEvent": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IIntervalCollectionEvent():
    TypeOnly<current.IIntervalCollectionEvent<any>>;
declare function use_old_InterfaceDeclaration_IIntervalCollectionEvent(
    use: TypeOnly<old.IIntervalCollectionEvent<any>>);
use_old_InterfaceDeclaration_IIntervalCollectionEvent(
    get_current_InterfaceDeclaration_IIntervalCollectionEvent());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IIntervalHelpers": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IIntervalHelpers():
    TypeOnly<old.IIntervalHelpers<any>>;
declare function use_current_InterfaceDeclaration_IIntervalHelpers(
    use: TypeOnly<current.IIntervalHelpers<any>>);
use_current_InterfaceDeclaration_IIntervalHelpers(
    get_old_InterfaceDeclaration_IIntervalHelpers());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IIntervalHelpers": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IIntervalHelpers():
    TypeOnly<current.IIntervalHelpers<any>>;
declare function use_old_InterfaceDeclaration_IIntervalHelpers(
    use: TypeOnly<old.IIntervalHelpers<any>>);
use_old_InterfaceDeclaration_IIntervalHelpers(
    get_current_InterfaceDeclaration_IIntervalHelpers());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IJSONRunSegment": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IJSONRunSegment():
    TypeOnly<old.IJSONRunSegment<any>>;
declare function use_current_InterfaceDeclaration_IJSONRunSegment(
    use: TypeOnly<current.IJSONRunSegment<any>>);
use_current_InterfaceDeclaration_IJSONRunSegment(
    get_old_InterfaceDeclaration_IJSONRunSegment());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IJSONRunSegment": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IJSONRunSegment():
    TypeOnly<current.IJSONRunSegment<any>>;
declare function use_old_InterfaceDeclaration_IJSONRunSegment(
    use: TypeOnly<old.IJSONRunSegment<any>>);
use_old_InterfaceDeclaration_IJSONRunSegment(
    get_current_InterfaceDeclaration_IJSONRunSegment());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IMapMessageLocalMetadata": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IMapMessageLocalMetadata():
    TypeOnly<old.IMapMessageLocalMetadata>;
declare function use_current_InterfaceDeclaration_IMapMessageLocalMetadata(
    use: TypeOnly<current.IMapMessageLocalMetadata>);
use_current_InterfaceDeclaration_IMapMessageLocalMetadata(
    get_old_InterfaceDeclaration_IMapMessageLocalMetadata());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IMapMessageLocalMetadata": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IMapMessageLocalMetadata():
    TypeOnly<current.IMapMessageLocalMetadata>;
declare function use_old_InterfaceDeclaration_IMapMessageLocalMetadata(
    use: TypeOnly<old.IMapMessageLocalMetadata>);
use_old_InterfaceDeclaration_IMapMessageLocalMetadata(
    get_current_InterfaceDeclaration_IMapMessageLocalMetadata());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IOverlappingIntervalsIndex": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IOverlappingIntervalsIndex():
    TypeOnly<old.IOverlappingIntervalsIndex<any>>;
declare function use_current_InterfaceDeclaration_IOverlappingIntervalsIndex(
    use: TypeOnly<current.IOverlappingIntervalsIndex<any>>);
use_current_InterfaceDeclaration_IOverlappingIntervalsIndex(
    get_old_InterfaceDeclaration_IOverlappingIntervalsIndex());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IOverlappingIntervalsIndex": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IOverlappingIntervalsIndex():
    TypeOnly<current.IOverlappingIntervalsIndex<any>>;
declare function use_old_InterfaceDeclaration_IOverlappingIntervalsIndex(
    use: TypeOnly<old.IOverlappingIntervalsIndex<any>>);
use_old_InterfaceDeclaration_IOverlappingIntervalsIndex(
    get_current_InterfaceDeclaration_IOverlappingIntervalsIndex());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISequenceDeltaRange": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISequenceDeltaRange():
    TypeOnly<old.ISequenceDeltaRange>;
declare function use_current_InterfaceDeclaration_ISequenceDeltaRange(
    use: TypeOnly<current.ISequenceDeltaRange>);
use_current_InterfaceDeclaration_ISequenceDeltaRange(
    get_old_InterfaceDeclaration_ISequenceDeltaRange());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISequenceDeltaRange": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISequenceDeltaRange():
    TypeOnly<current.ISequenceDeltaRange>;
declare function use_old_InterfaceDeclaration_ISequenceDeltaRange(
    use: TypeOnly<old.ISequenceDeltaRange>);
use_old_InterfaceDeclaration_ISequenceDeltaRange(
    get_current_InterfaceDeclaration_ISequenceDeltaRange());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISerializableInterval": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISerializableInterval():
    TypeOnly<old.ISerializableInterval>;
declare function use_current_InterfaceDeclaration_ISerializableInterval(
    use: TypeOnly<current.ISerializableInterval>);
use_current_InterfaceDeclaration_ISerializableInterval(
    get_old_InterfaceDeclaration_ISerializableInterval());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISerializableInterval": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISerializableInterval():
    TypeOnly<current.ISerializableInterval>;
declare function use_old_InterfaceDeclaration_ISerializableInterval(
    use: TypeOnly<old.ISerializableInterval>);
use_old_InterfaceDeclaration_ISerializableInterval(
    get_current_InterfaceDeclaration_ISerializableInterval());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISerializedInterval": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISerializedInterval():
    TypeOnly<old.ISerializedInterval>;
declare function use_current_InterfaceDeclaration_ISerializedInterval(
    use: TypeOnly<current.ISerializedInterval>);
use_current_InterfaceDeclaration_ISerializedInterval(
    get_old_InterfaceDeclaration_ISerializedInterval());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISerializedInterval": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISerializedInterval():
    TypeOnly<current.ISerializedInterval>;
declare function use_old_InterfaceDeclaration_ISerializedInterval(
    use: TypeOnly<old.ISerializedInterval>);
use_old_InterfaceDeclaration_ISerializedInterval(
    get_current_InterfaceDeclaration_ISerializedInterval());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISharedIntervalCollection": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISharedIntervalCollection():
    TypeOnly<old.ISharedIntervalCollection<any>>;
declare function use_current_InterfaceDeclaration_ISharedIntervalCollection(
    use: TypeOnly<current.ISharedIntervalCollection<any>>);
use_current_InterfaceDeclaration_ISharedIntervalCollection(
    get_old_InterfaceDeclaration_ISharedIntervalCollection());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISharedIntervalCollection": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISharedIntervalCollection():
    TypeOnly<current.ISharedIntervalCollection<any>>;
declare function use_old_InterfaceDeclaration_ISharedIntervalCollection(
    use: TypeOnly<old.ISharedIntervalCollection<any>>);
use_old_InterfaceDeclaration_ISharedIntervalCollection(
    get_current_InterfaceDeclaration_ISharedIntervalCollection());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISharedSegmentSequenceEvents": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISharedSegmentSequenceEvents():
    TypeOnly<old.ISharedSegmentSequenceEvents>;
declare function use_current_InterfaceDeclaration_ISharedSegmentSequenceEvents(
    use: TypeOnly<current.ISharedSegmentSequenceEvents>);
use_current_InterfaceDeclaration_ISharedSegmentSequenceEvents(
    get_old_InterfaceDeclaration_ISharedSegmentSequenceEvents());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISharedSegmentSequenceEvents": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISharedSegmentSequenceEvents():
    TypeOnly<current.ISharedSegmentSequenceEvents>;
declare function use_old_InterfaceDeclaration_ISharedSegmentSequenceEvents(
    use: TypeOnly<old.ISharedSegmentSequenceEvents>);
use_old_InterfaceDeclaration_ISharedSegmentSequenceEvents(
    get_current_InterfaceDeclaration_ISharedSegmentSequenceEvents());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISharedString": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISharedString():
    TypeOnly<old.ISharedString>;
declare function use_current_InterfaceDeclaration_ISharedString(
    use: TypeOnly<current.ISharedString>);
use_current_InterfaceDeclaration_ISharedString(
    get_old_InterfaceDeclaration_ISharedString());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISharedString": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISharedString():
    TypeOnly<current.ISharedString>;
declare function use_old_InterfaceDeclaration_ISharedString(
    use: TypeOnly<old.ISharedString>);
use_old_InterfaceDeclaration_ISharedString(
    get_current_InterfaceDeclaration_ISharedString());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IStartpointInRangeIndex": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IStartpointInRangeIndex():
    TypeOnly<old.IStartpointInRangeIndex<any>>;
declare function use_current_InterfaceDeclaration_IStartpointInRangeIndex(
    use: TypeOnly<current.IStartpointInRangeIndex<any>>);
use_current_InterfaceDeclaration_IStartpointInRangeIndex(
    get_old_InterfaceDeclaration_IStartpointInRangeIndex());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IStartpointInRangeIndex": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IStartpointInRangeIndex():
    TypeOnly<current.IStartpointInRangeIndex<any>>;
declare function use_old_InterfaceDeclaration_IStartpointInRangeIndex(
    use: TypeOnly<old.IStartpointInRangeIndex<any>>);
use_old_InterfaceDeclaration_IStartpointInRangeIndex(
    get_current_InterfaceDeclaration_IStartpointInRangeIndex());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IValueOpEmitter": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IValueOpEmitter():
    TypeOnly<old.IValueOpEmitter>;
declare function use_current_InterfaceDeclaration_IValueOpEmitter(
    use: TypeOnly<current.IValueOpEmitter>);
use_current_InterfaceDeclaration_IValueOpEmitter(
    get_old_InterfaceDeclaration_IValueOpEmitter());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IValueOpEmitter": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IValueOpEmitter():
    TypeOnly<current.IValueOpEmitter>;
declare function use_old_InterfaceDeclaration_IValueOpEmitter(
    use: TypeOnly<old.IValueOpEmitter>);
use_old_InterfaceDeclaration_IValueOpEmitter(
    get_current_InterfaceDeclaration_IValueOpEmitter());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_Interval": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_Interval():
    TypeOnly<old.Interval>;
declare function use_current_ClassDeclaration_Interval(
    use: TypeOnly<current.Interval>);
use_current_ClassDeclaration_Interval(
    get_old_ClassDeclaration_Interval());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_Interval": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_Interval():
    TypeOnly<current.Interval>;
declare function use_old_ClassDeclaration_Interval(
    use: TypeOnly<old.Interval>);
use_old_ClassDeclaration_Interval(
    get_current_ClassDeclaration_Interval());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IntervalIndex": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IntervalIndex():
    TypeOnly<old.IntervalIndex<any>>;
declare function use_current_InterfaceDeclaration_IntervalIndex(
    use: TypeOnly<current.IntervalIndex<any>>);
use_current_InterfaceDeclaration_IntervalIndex(
    get_old_InterfaceDeclaration_IntervalIndex());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IntervalIndex": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IntervalIndex():
    TypeOnly<current.IntervalIndex<any>>;
declare function use_old_InterfaceDeclaration_IntervalIndex(
    use: TypeOnly<old.IntervalIndex<any>>);
use_old_InterfaceDeclaration_IntervalIndex(
    get_current_InterfaceDeclaration_IntervalIndex());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IntervalLocator": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IntervalLocator():
    TypeOnly<old.IntervalLocator>;
declare function use_current_InterfaceDeclaration_IntervalLocator(
    use: TypeOnly<current.IntervalLocator>);
use_current_InterfaceDeclaration_IntervalLocator(
    get_old_InterfaceDeclaration_IntervalLocator());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IntervalLocator": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IntervalLocator():
    TypeOnly<current.IntervalLocator>;
declare function use_old_InterfaceDeclaration_IntervalLocator(
    use: TypeOnly<old.IntervalLocator>);
use_old_InterfaceDeclaration_IntervalLocator(
    get_current_InterfaceDeclaration_IntervalLocator());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_IntervalOpType": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_IntervalOpType():
    TypeOnly<typeof old.IntervalOpType>;
declare function use_current_VariableDeclaration_IntervalOpType(
    use: TypeOnly<typeof current.IntervalOpType>);
use_current_VariableDeclaration_IntervalOpType(
    get_old_VariableDeclaration_IntervalOpType());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_IntervalOpType": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_IntervalOpType():
    TypeOnly<typeof current.IntervalOpType>;
declare function use_old_VariableDeclaration_IntervalOpType(
    use: TypeOnly<typeof old.IntervalOpType>);
use_old_VariableDeclaration_IntervalOpType(
    get_current_VariableDeclaration_IntervalOpType());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_IntervalRevertible": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_IntervalRevertible():
    TypeOnly<old.IntervalRevertible>;
declare function use_current_TypeAliasDeclaration_IntervalRevertible(
    use: TypeOnly<current.IntervalRevertible>);
use_current_TypeAliasDeclaration_IntervalRevertible(
    get_old_TypeAliasDeclaration_IntervalRevertible());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_IntervalRevertible": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_IntervalRevertible():
    TypeOnly<current.IntervalRevertible>;
declare function use_old_TypeAliasDeclaration_IntervalRevertible(
    use: TypeOnly<old.IntervalRevertible>);
use_old_TypeAliasDeclaration_IntervalRevertible(
    get_current_TypeAliasDeclaration_IntervalRevertible());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_IntervalStickiness": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_IntervalStickiness():
    TypeOnly<typeof old.IntervalStickiness>;
declare function use_current_VariableDeclaration_IntervalStickiness(
    use: TypeOnly<typeof current.IntervalStickiness>);
use_current_VariableDeclaration_IntervalStickiness(
    get_old_VariableDeclaration_IntervalStickiness());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_IntervalStickiness": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_IntervalStickiness():
    TypeOnly<typeof current.IntervalStickiness>;
declare function use_old_VariableDeclaration_IntervalStickiness(
    use: TypeOnly<typeof old.IntervalStickiness>);
use_old_VariableDeclaration_IntervalStickiness(
    get_current_VariableDeclaration_IntervalStickiness());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_IntervalStickiness": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_IntervalStickiness():
    TypeOnly<old.IntervalStickiness>;
declare function use_current_TypeAliasDeclaration_IntervalStickiness(
    use: TypeOnly<current.IntervalStickiness>);
use_current_TypeAliasDeclaration_IntervalStickiness(
    get_old_TypeAliasDeclaration_IntervalStickiness());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_IntervalStickiness": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_IntervalStickiness():
    TypeOnly<current.IntervalStickiness>;
declare function use_old_TypeAliasDeclaration_IntervalStickiness(
    use: TypeOnly<old.IntervalStickiness>);
use_old_TypeAliasDeclaration_IntervalStickiness(
    get_current_TypeAliasDeclaration_IntervalStickiness());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "EnumDeclaration_IntervalType": {"forwardCompat": false}
*/
declare function get_old_EnumDeclaration_IntervalType():
    TypeOnly<old.IntervalType>;
declare function use_current_EnumDeclaration_IntervalType(
    use: TypeOnly<current.IntervalType>);
use_current_EnumDeclaration_IntervalType(
    get_old_EnumDeclaration_IntervalType());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "EnumDeclaration_IntervalType": {"backCompat": false}
*/
declare function get_current_EnumDeclaration_IntervalType():
    TypeOnly<current.IntervalType>;
declare function use_old_EnumDeclaration_IntervalType(
    use: TypeOnly<old.IntervalType>);
use_old_EnumDeclaration_IntervalType(
    get_current_EnumDeclaration_IntervalType());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SequenceDeltaEvent": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_SequenceDeltaEvent():
    TypeOnly<old.SequenceDeltaEvent>;
declare function use_current_ClassDeclaration_SequenceDeltaEvent(
    use: TypeOnly<current.SequenceDeltaEvent>);
use_current_ClassDeclaration_SequenceDeltaEvent(
    get_old_ClassDeclaration_SequenceDeltaEvent());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SequenceDeltaEvent": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_SequenceDeltaEvent():
    TypeOnly<current.SequenceDeltaEvent>;
declare function use_old_ClassDeclaration_SequenceDeltaEvent(
    use: TypeOnly<old.SequenceDeltaEvent>);
use_old_ClassDeclaration_SequenceDeltaEvent(
    get_current_ClassDeclaration_SequenceDeltaEvent());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SequenceEvent": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_SequenceEvent():
    TypeOnly<old.SequenceEvent>;
declare function use_current_ClassDeclaration_SequenceEvent(
    use: TypeOnly<current.SequenceEvent>);
use_current_ClassDeclaration_SequenceEvent(
    get_old_ClassDeclaration_SequenceEvent());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SequenceEvent": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_SequenceEvent():
    TypeOnly<current.SequenceEvent>;
declare function use_old_ClassDeclaration_SequenceEvent(
    use: TypeOnly<old.SequenceEvent>);
use_old_ClassDeclaration_SequenceEvent(
    get_current_ClassDeclaration_SequenceEvent());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SequenceInterval": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_SequenceInterval():
    TypeOnly<old.SequenceInterval>;
declare function use_current_ClassDeclaration_SequenceInterval(
    use: TypeOnly<current.SequenceInterval>);
use_current_ClassDeclaration_SequenceInterval(
    get_old_ClassDeclaration_SequenceInterval());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SequenceInterval": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_SequenceInterval():
    TypeOnly<current.SequenceInterval>;
declare function use_old_ClassDeclaration_SequenceInterval(
    use: TypeOnly<old.SequenceInterval>);
use_old_ClassDeclaration_SequenceInterval(
    get_current_ClassDeclaration_SequenceInterval());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_SequenceIntervalIndexes.Overlapping": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_SequenceIntervalIndexes_Overlapping():
    TypeOnly<old.SequenceIntervalIndexes.Overlapping>;
declare function use_current_InterfaceDeclaration_SequenceIntervalIndexes_Overlapping(
    use: TypeOnly<current.SequenceIntervalIndexes.Overlapping>);
use_current_InterfaceDeclaration_SequenceIntervalIndexes_Overlapping(
    get_old_InterfaceDeclaration_SequenceIntervalIndexes_Overlapping());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_SequenceIntervalIndexes.Overlapping": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_SequenceIntervalIndexes_Overlapping():
    TypeOnly<current.SequenceIntervalIndexes.Overlapping>;
declare function use_old_InterfaceDeclaration_SequenceIntervalIndexes_Overlapping(
    use: TypeOnly<old.SequenceIntervalIndexes.Overlapping>);
use_old_InterfaceDeclaration_SequenceIntervalIndexes_Overlapping(
    get_current_InterfaceDeclaration_SequenceIntervalIndexes_Overlapping());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SequenceMaintenanceEvent": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_SequenceMaintenanceEvent():
    TypeOnly<old.SequenceMaintenanceEvent>;
declare function use_current_ClassDeclaration_SequenceMaintenanceEvent(
    use: TypeOnly<current.SequenceMaintenanceEvent>);
use_current_ClassDeclaration_SequenceMaintenanceEvent(
    get_old_ClassDeclaration_SequenceMaintenanceEvent());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SequenceMaintenanceEvent": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_SequenceMaintenanceEvent():
    TypeOnly<current.SequenceMaintenanceEvent>;
declare function use_old_ClassDeclaration_SequenceMaintenanceEvent(
    use: TypeOnly<old.SequenceMaintenanceEvent>);
use_old_ClassDeclaration_SequenceMaintenanceEvent(
    get_current_ClassDeclaration_SequenceMaintenanceEvent());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_SequenceOptions": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_SequenceOptions():
    TypeOnly<old.SequenceOptions>;
declare function use_current_InterfaceDeclaration_SequenceOptions(
    use: TypeOnly<current.SequenceOptions>);
use_current_InterfaceDeclaration_SequenceOptions(
    get_old_InterfaceDeclaration_SequenceOptions());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_SequenceOptions": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_SequenceOptions():
    TypeOnly<current.SequenceOptions>;
declare function use_old_InterfaceDeclaration_SequenceOptions(
    use: TypeOnly<old.SequenceOptions>);
use_old_InterfaceDeclaration_SequenceOptions(
    get_current_InterfaceDeclaration_SequenceOptions());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_SerializedIntervalDelta": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_SerializedIntervalDelta():
    TypeOnly<old.SerializedIntervalDelta>;
declare function use_current_TypeAliasDeclaration_SerializedIntervalDelta(
    use: TypeOnly<current.SerializedIntervalDelta>);
use_current_TypeAliasDeclaration_SerializedIntervalDelta(
    get_old_TypeAliasDeclaration_SerializedIntervalDelta());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_SerializedIntervalDelta": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_SerializedIntervalDelta():
    TypeOnly<current.SerializedIntervalDelta>;
declare function use_old_TypeAliasDeclaration_SerializedIntervalDelta(
    use: TypeOnly<old.SerializedIntervalDelta>);
use_old_TypeAliasDeclaration_SerializedIntervalDelta(
    get_current_TypeAliasDeclaration_SerializedIntervalDelta());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SharedIntervalCollection": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_SharedIntervalCollection():
    TypeOnly<old.SharedIntervalCollection>;
declare function use_current_ClassDeclaration_SharedIntervalCollection(
    use: TypeOnly<current.SharedIntervalCollection>);
use_current_ClassDeclaration_SharedIntervalCollection(
    get_old_ClassDeclaration_SharedIntervalCollection());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SharedIntervalCollection": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_SharedIntervalCollection():
    TypeOnly<current.SharedIntervalCollection>;
declare function use_old_ClassDeclaration_SharedIntervalCollection(
    use: TypeOnly<old.SharedIntervalCollection>);
use_old_ClassDeclaration_SharedIntervalCollection(
    get_current_ClassDeclaration_SharedIntervalCollection());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SharedIntervalCollectionFactory": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_SharedIntervalCollectionFactory():
    TypeOnly<old.SharedIntervalCollectionFactory>;
declare function use_current_ClassDeclaration_SharedIntervalCollectionFactory(
    use: TypeOnly<current.SharedIntervalCollectionFactory>);
use_current_ClassDeclaration_SharedIntervalCollectionFactory(
    get_old_ClassDeclaration_SharedIntervalCollectionFactory());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SharedIntervalCollectionFactory": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_SharedIntervalCollectionFactory():
    TypeOnly<current.SharedIntervalCollectionFactory>;
declare function use_old_ClassDeclaration_SharedIntervalCollectionFactory(
    use: TypeOnly<old.SharedIntervalCollectionFactory>);
use_old_ClassDeclaration_SharedIntervalCollectionFactory(
    get_current_ClassDeclaration_SharedIntervalCollectionFactory());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SharedSegmentSequence": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_SharedSegmentSequence():
    TypeOnly<old.SharedSegmentSequence<any>>;
declare function use_current_ClassDeclaration_SharedSegmentSequence(
    use: TypeOnly<current.SharedSegmentSequence<any>>);
use_current_ClassDeclaration_SharedSegmentSequence(
    get_old_ClassDeclaration_SharedSegmentSequence());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SharedSegmentSequence": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_SharedSegmentSequence():
    TypeOnly<current.SharedSegmentSequence<any>>;
declare function use_old_ClassDeclaration_SharedSegmentSequence(
    use: TypeOnly<old.SharedSegmentSequence<any>>);
use_old_ClassDeclaration_SharedSegmentSequence(
    get_current_ClassDeclaration_SharedSegmentSequence());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SharedSequence": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_SharedSequence():
    TypeOnly<old.SharedSequence<any>>;
declare function use_current_ClassDeclaration_SharedSequence(
    use: TypeOnly<current.SharedSequence<any>>);
use_current_ClassDeclaration_SharedSequence(
    get_old_ClassDeclaration_SharedSequence());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SharedSequence": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_SharedSequence():
    TypeOnly<current.SharedSequence<any>>;
declare function use_old_ClassDeclaration_SharedSequence(
    use: TypeOnly<old.SharedSequence<any>>);
use_old_ClassDeclaration_SharedSequence(
    get_current_ClassDeclaration_SharedSequence());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SharedString": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_SharedString():
    TypeOnly<old.SharedString>;
declare function use_current_ClassDeclaration_SharedString(
    use: TypeOnly<current.SharedString>);
use_current_ClassDeclaration_SharedString(
    get_old_ClassDeclaration_SharedString());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SharedString": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_SharedString():
    TypeOnly<current.SharedString>;
declare function use_old_ClassDeclaration_SharedString(
    use: TypeOnly<old.SharedString>);
use_old_ClassDeclaration_SharedString(
    get_current_ClassDeclaration_SharedString());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SharedStringFactory": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_SharedStringFactory():
    TypeOnly<old.SharedStringFactory>;
declare function use_current_ClassDeclaration_SharedStringFactory(
    use: TypeOnly<current.SharedStringFactory>);
use_current_ClassDeclaration_SharedStringFactory(
    get_old_ClassDeclaration_SharedStringFactory());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SharedStringFactory": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_SharedStringFactory():
    TypeOnly<current.SharedStringFactory>;
declare function use_old_ClassDeclaration_SharedStringFactory(
    use: TypeOnly<old.SharedStringFactory>);
use_old_ClassDeclaration_SharedStringFactory(
    get_current_ClassDeclaration_SharedStringFactory());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_SharedStringRevertible": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_SharedStringRevertible():
    TypeOnly<old.SharedStringRevertible>;
declare function use_current_TypeAliasDeclaration_SharedStringRevertible(
    use: TypeOnly<current.SharedStringRevertible>);
use_current_TypeAliasDeclaration_SharedStringRevertible(
    get_old_TypeAliasDeclaration_SharedStringRevertible());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_SharedStringRevertible": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_SharedStringRevertible():
    TypeOnly<current.SharedStringRevertible>;
declare function use_old_TypeAliasDeclaration_SharedStringRevertible(
    use: TypeOnly<old.SharedStringRevertible>);
use_old_TypeAliasDeclaration_SharedStringRevertible(
    get_current_TypeAliasDeclaration_SharedStringRevertible());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_SharedStringSegment": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_SharedStringSegment():
    TypeOnly<old.SharedStringSegment>;
declare function use_current_TypeAliasDeclaration_SharedStringSegment(
    use: TypeOnly<current.SharedStringSegment>);
use_current_TypeAliasDeclaration_SharedStringSegment(
    get_old_TypeAliasDeclaration_SharedStringSegment());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_SharedStringSegment": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_SharedStringSegment():
    TypeOnly<current.SharedStringSegment>;
declare function use_old_TypeAliasDeclaration_SharedStringSegment(
    use: TypeOnly<old.SharedStringSegment>);
use_old_TypeAliasDeclaration_SharedStringSegment(
    get_current_TypeAliasDeclaration_SharedStringSegment());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SubSequence": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_SubSequence():
    TypeOnly<old.SubSequence<any>>;
declare function use_current_ClassDeclaration_SubSequence(
    use: TypeOnly<current.SubSequence<any>>);
use_current_ClassDeclaration_SubSequence(
    get_old_ClassDeclaration_SubSequence());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SubSequence": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_SubSequence():
    TypeOnly<current.SubSequence<any>>;
declare function use_old_ClassDeclaration_SubSequence(
    use: TypeOnly<old.SubSequence<any>>);
use_old_ClassDeclaration_SubSequence(
    get_current_ClassDeclaration_SubSequence());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_appendAddIntervalToRevertibles": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_appendAddIntervalToRevertibles():
    TypeOnly<typeof old.appendAddIntervalToRevertibles>;
declare function use_current_FunctionDeclaration_appendAddIntervalToRevertibles(
    use: TypeOnly<typeof current.appendAddIntervalToRevertibles>);
use_current_FunctionDeclaration_appendAddIntervalToRevertibles(
    get_old_FunctionDeclaration_appendAddIntervalToRevertibles());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_appendAddIntervalToRevertibles": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_appendAddIntervalToRevertibles():
    TypeOnly<typeof current.appendAddIntervalToRevertibles>;
declare function use_old_FunctionDeclaration_appendAddIntervalToRevertibles(
    use: TypeOnly<typeof old.appendAddIntervalToRevertibles>);
use_old_FunctionDeclaration_appendAddIntervalToRevertibles(
    get_current_FunctionDeclaration_appendAddIntervalToRevertibles());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_appendChangeIntervalToRevertibles": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_appendChangeIntervalToRevertibles():
    TypeOnly<typeof old.appendChangeIntervalToRevertibles>;
declare function use_current_FunctionDeclaration_appendChangeIntervalToRevertibles(
    use: TypeOnly<typeof current.appendChangeIntervalToRevertibles>);
use_current_FunctionDeclaration_appendChangeIntervalToRevertibles(
    get_old_FunctionDeclaration_appendChangeIntervalToRevertibles());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_appendChangeIntervalToRevertibles": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_appendChangeIntervalToRevertibles():
    TypeOnly<typeof current.appendChangeIntervalToRevertibles>;
declare function use_old_FunctionDeclaration_appendChangeIntervalToRevertibles(
    use: TypeOnly<typeof old.appendChangeIntervalToRevertibles>);
use_old_FunctionDeclaration_appendChangeIntervalToRevertibles(
    get_current_FunctionDeclaration_appendChangeIntervalToRevertibles());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_appendDeleteIntervalToRevertibles": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_appendDeleteIntervalToRevertibles():
    TypeOnly<typeof old.appendDeleteIntervalToRevertibles>;
declare function use_current_FunctionDeclaration_appendDeleteIntervalToRevertibles(
    use: TypeOnly<typeof current.appendDeleteIntervalToRevertibles>);
use_current_FunctionDeclaration_appendDeleteIntervalToRevertibles(
    get_old_FunctionDeclaration_appendDeleteIntervalToRevertibles());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_appendDeleteIntervalToRevertibles": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_appendDeleteIntervalToRevertibles():
    TypeOnly<typeof current.appendDeleteIntervalToRevertibles>;
declare function use_old_FunctionDeclaration_appendDeleteIntervalToRevertibles(
    use: TypeOnly<typeof old.appendDeleteIntervalToRevertibles>);
use_old_FunctionDeclaration_appendDeleteIntervalToRevertibles(
    get_current_FunctionDeclaration_appendDeleteIntervalToRevertibles());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_appendIntervalPropertyChangedToRevertibles": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_appendIntervalPropertyChangedToRevertibles():
    TypeOnly<typeof old.appendIntervalPropertyChangedToRevertibles>;
declare function use_current_FunctionDeclaration_appendIntervalPropertyChangedToRevertibles(
    use: TypeOnly<typeof current.appendIntervalPropertyChangedToRevertibles>);
use_current_FunctionDeclaration_appendIntervalPropertyChangedToRevertibles(
    get_old_FunctionDeclaration_appendIntervalPropertyChangedToRevertibles());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_appendIntervalPropertyChangedToRevertibles": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_appendIntervalPropertyChangedToRevertibles():
    TypeOnly<typeof current.appendIntervalPropertyChangedToRevertibles>;
declare function use_old_FunctionDeclaration_appendIntervalPropertyChangedToRevertibles(
    use: TypeOnly<typeof old.appendIntervalPropertyChangedToRevertibles>);
use_old_FunctionDeclaration_appendIntervalPropertyChangedToRevertibles(
    get_current_FunctionDeclaration_appendIntervalPropertyChangedToRevertibles());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_appendSharedStringDeltaToRevertibles": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_appendSharedStringDeltaToRevertibles():
    TypeOnly<typeof old.appendSharedStringDeltaToRevertibles>;
declare function use_current_FunctionDeclaration_appendSharedStringDeltaToRevertibles(
    use: TypeOnly<typeof current.appendSharedStringDeltaToRevertibles>);
use_current_FunctionDeclaration_appendSharedStringDeltaToRevertibles(
    get_old_FunctionDeclaration_appendSharedStringDeltaToRevertibles());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_appendSharedStringDeltaToRevertibles": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_appendSharedStringDeltaToRevertibles():
    TypeOnly<typeof current.appendSharedStringDeltaToRevertibles>;
declare function use_old_FunctionDeclaration_appendSharedStringDeltaToRevertibles(
    use: TypeOnly<typeof old.appendSharedStringDeltaToRevertibles>);
use_old_FunctionDeclaration_appendSharedStringDeltaToRevertibles(
    get_current_FunctionDeclaration_appendSharedStringDeltaToRevertibles());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_createEndpointInRangeIndex": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_createEndpointInRangeIndex():
    TypeOnly<typeof old.createEndpointInRangeIndex>;
declare function use_current_FunctionDeclaration_createEndpointInRangeIndex(
    use: TypeOnly<typeof current.createEndpointInRangeIndex>);
use_current_FunctionDeclaration_createEndpointInRangeIndex(
    get_old_FunctionDeclaration_createEndpointInRangeIndex());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_createEndpointInRangeIndex": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_createEndpointInRangeIndex():
    TypeOnly<typeof current.createEndpointInRangeIndex>;
declare function use_old_FunctionDeclaration_createEndpointInRangeIndex(
    use: TypeOnly<typeof old.createEndpointInRangeIndex>);
use_old_FunctionDeclaration_createEndpointInRangeIndex(
    get_current_FunctionDeclaration_createEndpointInRangeIndex());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_createEndpointIndex": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_createEndpointIndex():
    TypeOnly<typeof old.createEndpointIndex>;
declare function use_current_FunctionDeclaration_createEndpointIndex(
    use: TypeOnly<typeof current.createEndpointIndex>);
use_current_FunctionDeclaration_createEndpointIndex(
    get_old_FunctionDeclaration_createEndpointIndex());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_createEndpointIndex": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_createEndpointIndex():
    TypeOnly<typeof current.createEndpointIndex>;
declare function use_old_FunctionDeclaration_createEndpointIndex(
    use: TypeOnly<typeof old.createEndpointIndex>);
use_old_FunctionDeclaration_createEndpointIndex(
    get_current_FunctionDeclaration_createEndpointIndex());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_createIdIntervalIndex": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_createIdIntervalIndex():
    TypeOnly<typeof old.createIdIntervalIndex>;
declare function use_current_FunctionDeclaration_createIdIntervalIndex(
    use: TypeOnly<typeof current.createIdIntervalIndex>);
use_current_FunctionDeclaration_createIdIntervalIndex(
    get_old_FunctionDeclaration_createIdIntervalIndex());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_createIdIntervalIndex": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_createIdIntervalIndex():
    TypeOnly<typeof current.createIdIntervalIndex>;
declare function use_old_FunctionDeclaration_createIdIntervalIndex(
    use: TypeOnly<typeof old.createIdIntervalIndex>);
use_old_FunctionDeclaration_createIdIntervalIndex(
    get_current_FunctionDeclaration_createIdIntervalIndex());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_createOverlappingIntervalsIndex": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_createOverlappingIntervalsIndex():
    TypeOnly<typeof old.createOverlappingIntervalsIndex>;
declare function use_current_FunctionDeclaration_createOverlappingIntervalsIndex(
    use: TypeOnly<typeof current.createOverlappingIntervalsIndex>);
use_current_FunctionDeclaration_createOverlappingIntervalsIndex(
    get_old_FunctionDeclaration_createOverlappingIntervalsIndex());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_createOverlappingIntervalsIndex": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_createOverlappingIntervalsIndex():
    TypeOnly<typeof current.createOverlappingIntervalsIndex>;
declare function use_old_FunctionDeclaration_createOverlappingIntervalsIndex(
    use: TypeOnly<typeof old.createOverlappingIntervalsIndex>);
use_old_FunctionDeclaration_createOverlappingIntervalsIndex(
    get_current_FunctionDeclaration_createOverlappingIntervalsIndex());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_createOverlappingSequenceIntervalsIndex": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_createOverlappingSequenceIntervalsIndex():
    TypeOnly<typeof old.createOverlappingSequenceIntervalsIndex>;
declare function use_current_FunctionDeclaration_createOverlappingSequenceIntervalsIndex(
    use: TypeOnly<typeof current.createOverlappingSequenceIntervalsIndex>);
use_current_FunctionDeclaration_createOverlappingSequenceIntervalsIndex(
    get_old_FunctionDeclaration_createOverlappingSequenceIntervalsIndex());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_createOverlappingSequenceIntervalsIndex": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_createOverlappingSequenceIntervalsIndex():
    TypeOnly<typeof current.createOverlappingSequenceIntervalsIndex>;
declare function use_old_FunctionDeclaration_createOverlappingSequenceIntervalsIndex(
    use: TypeOnly<typeof old.createOverlappingSequenceIntervalsIndex>);
use_old_FunctionDeclaration_createOverlappingSequenceIntervalsIndex(
    get_current_FunctionDeclaration_createOverlappingSequenceIntervalsIndex());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_createStartpointInRangeIndex": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_createStartpointInRangeIndex():
    TypeOnly<typeof old.createStartpointInRangeIndex>;
declare function use_current_FunctionDeclaration_createStartpointInRangeIndex(
    use: TypeOnly<typeof current.createStartpointInRangeIndex>);
use_current_FunctionDeclaration_createStartpointInRangeIndex(
    get_old_FunctionDeclaration_createStartpointInRangeIndex());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_createStartpointInRangeIndex": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_createStartpointInRangeIndex():
    TypeOnly<typeof current.createStartpointInRangeIndex>;
declare function use_old_FunctionDeclaration_createStartpointInRangeIndex(
    use: TypeOnly<typeof old.createStartpointInRangeIndex>);
use_old_FunctionDeclaration_createStartpointInRangeIndex(
    get_current_FunctionDeclaration_createStartpointInRangeIndex());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_discardSharedStringRevertibles": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_discardSharedStringRevertibles():
    TypeOnly<typeof old.discardSharedStringRevertibles>;
declare function use_current_FunctionDeclaration_discardSharedStringRevertibles(
    use: TypeOnly<typeof current.discardSharedStringRevertibles>);
use_current_FunctionDeclaration_discardSharedStringRevertibles(
    get_old_FunctionDeclaration_discardSharedStringRevertibles());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_discardSharedStringRevertibles": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_discardSharedStringRevertibles():
    TypeOnly<typeof current.discardSharedStringRevertibles>;
declare function use_old_FunctionDeclaration_discardSharedStringRevertibles(
    use: TypeOnly<typeof old.discardSharedStringRevertibles>);
use_old_FunctionDeclaration_discardSharedStringRevertibles(
    get_current_FunctionDeclaration_discardSharedStringRevertibles());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_getTextAndMarkers": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_getTextAndMarkers():
    TypeOnly<typeof old.getTextAndMarkers>;
declare function use_current_FunctionDeclaration_getTextAndMarkers(
    use: TypeOnly<typeof current.getTextAndMarkers>);
use_current_FunctionDeclaration_getTextAndMarkers(
    get_old_FunctionDeclaration_getTextAndMarkers());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_getTextAndMarkers": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_getTextAndMarkers():
    TypeOnly<typeof current.getTextAndMarkers>;
declare function use_old_FunctionDeclaration_getTextAndMarkers(
    use: TypeOnly<typeof old.getTextAndMarkers>);
use_old_FunctionDeclaration_getTextAndMarkers(
    get_current_FunctionDeclaration_getTextAndMarkers());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_intervalLocatorFromEndpoint": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_intervalLocatorFromEndpoint():
    TypeOnly<typeof old.intervalLocatorFromEndpoint>;
declare function use_current_FunctionDeclaration_intervalLocatorFromEndpoint(
    use: TypeOnly<typeof current.intervalLocatorFromEndpoint>);
use_current_FunctionDeclaration_intervalLocatorFromEndpoint(
    get_old_FunctionDeclaration_intervalLocatorFromEndpoint());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_intervalLocatorFromEndpoint": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_intervalLocatorFromEndpoint():
    TypeOnly<typeof current.intervalLocatorFromEndpoint>;
declare function use_old_FunctionDeclaration_intervalLocatorFromEndpoint(
    use: TypeOnly<typeof old.intervalLocatorFromEndpoint>);
use_old_FunctionDeclaration_intervalLocatorFromEndpoint(
    get_current_FunctionDeclaration_intervalLocatorFromEndpoint());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_revertSharedStringRevertibles": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_revertSharedStringRevertibles():
    TypeOnly<typeof old.revertSharedStringRevertibles>;
declare function use_current_FunctionDeclaration_revertSharedStringRevertibles(
    use: TypeOnly<typeof current.revertSharedStringRevertibles>);
use_current_FunctionDeclaration_revertSharedStringRevertibles(
    get_old_FunctionDeclaration_revertSharedStringRevertibles());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_revertSharedStringRevertibles": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_revertSharedStringRevertibles():
    TypeOnly<typeof current.revertSharedStringRevertibles>;
declare function use_old_FunctionDeclaration_revertSharedStringRevertibles(
    use: TypeOnly<typeof old.revertSharedStringRevertibles>);
use_old_FunctionDeclaration_revertSharedStringRevertibles(
    get_current_FunctionDeclaration_revertSharedStringRevertibles());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_sequenceIntervalHelpers": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_sequenceIntervalHelpers():
    TypeOnly<typeof old.sequenceIntervalHelpers>;
declare function use_current_VariableDeclaration_sequenceIntervalHelpers(
    use: TypeOnly<typeof current.sequenceIntervalHelpers>);
use_current_VariableDeclaration_sequenceIntervalHelpers(
    get_old_VariableDeclaration_sequenceIntervalHelpers());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_sequenceIntervalHelpers": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_sequenceIntervalHelpers():
    TypeOnly<typeof current.sequenceIntervalHelpers>;
declare function use_old_VariableDeclaration_sequenceIntervalHelpers(
    use: TypeOnly<typeof old.sequenceIntervalHelpers>);
use_old_VariableDeclaration_sequenceIntervalHelpers(
    get_current_VariableDeclaration_sequenceIntervalHelpers());
