/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

import { strict as assert } from "assert";
import {
	combineReducersAsync as combineReducers,
	AsyncReducer as Reducer,
} from "@fluid-internal/stochastic-test-utils";
import { DDSFuzzTestState } from "@fluid-internal/test-dds-utils";
import { PropertySet } from "@fluidframework/merge-tree";
import { IntervalStickiness, IntervalType } from "../intervalCollection";
import { SharedStringFactory } from "../sequenceFactory";

export interface RangeSpec {
	start: number;
	end: number;
}

export interface IntervalCollectionSpec {
	collectionName: string;
}

export interface AddText {
	type: "addText";
	index: number;
	content: string;
}

export interface RemoveRange extends RangeSpec {
	type: "removeRange";
}

// For non-interval collection fuzzing, annotating text would also be useful.
export interface AddInterval extends IntervalCollectionSpec, RangeSpec {
	type: "addInterval";
	// Normally interval ids get autogenerated, but including it here allows tracking
	// what happened to an interval over the course of its lifetime based on the history
	// file, which is useful for debugging test failures.
	id: string;
	stickiness: IntervalStickiness;
}

export interface ChangeInterval extends IntervalCollectionSpec, Partial<RangeSpec> {
	type: "changeInterval";
	id: string;
}

export interface DeleteInterval extends IntervalCollectionSpec {
	type: "deleteInterval";
	id: string;
}

export interface ChangeProperties extends IntervalCollectionSpec {
	type: "changeProperties";
	id: string;
	properties: PropertySet;
}

export type IntervalOperation = AddInterval | ChangeInterval | DeleteInterval | ChangeProperties;

export type TextOperation = AddText | RemoveRange;

export type ClientOperation = IntervalOperation | TextOperation;

export type Operation = ClientOperation;

export type FuzzTestState = DDSFuzzTestState<SharedStringFactory>;

export interface LoggingInfo {
	/** id of the interval to track over time */
	intervalId: string;
	/** Clients to print */
	clientIds: string[];
}

function logCurrentState(state: FuzzTestState, loggingInfo: LoggingInfo): void {
	for (const id of loggingInfo.clientIds) {
		const { channel } = state.clients.find((s) => s.containerRuntime.clientId === id) ?? {};
		assert(channel);
		const labels = channel.getIntervalCollectionLabels();
		const interval = Array.from(labels)
			.map((label) =>
				channel.getIntervalCollection(label).getIntervalById(loggingInfo.intervalId),
			)
			.find((result) => result !== undefined);

		console.log(`Client ${id}:`);
		if (interval !== undefined) {
			const start = channel.localReferencePositionToPosition(interval.start);
			const end = channel.localReferencePositionToPosition(interval.end);
			if (end === start) {
				console.log(`${" ".repeat(start)}x`);
			} else {
				console.log(`${" ".repeat(start)}[${" ".repeat(end - start - 1)}]`);
			}
		}
		console.log(channel.getText());
		console.log("\n");
	}
}

type ClientOpState = FuzzTestState;

export function makeReducer(loggingInfo?: LoggingInfo): Reducer<Operation, ClientOpState> {
	const withLogging =
		<T>(baseReducer: Reducer<T, ClientOpState>): Reducer<T, ClientOpState> =>
		async (state, operation) => {
			if (loggingInfo !== undefined) {
				logCurrentState(state, loggingInfo);
				console.log("-".repeat(20));
				console.log("Next operation:", JSON.stringify(operation, undefined, 4));
			}
			await baseReducer(state, operation);
		};

	const reducer = combineReducers<Operation, ClientOpState>({
		addText: async ({ channel }, { index, content }) => {
			channel.insertText(index, content);
		},
		removeRange: async ({ channel }, { start, end }) => {
			channel.removeRange(start, end);
		},
		addInterval: async ({ channel }, { start, end, collectionName, id }) => {
			const collection = channel.getIntervalCollection(collectionName);
			collection.add(start, end, IntervalType.SlideOnRemove, { intervalId: id });
		},
		deleteInterval: async ({ channel }, { id, collectionName }) => {
			const collection = channel.getIntervalCollection(collectionName);
			collection.removeIntervalById(id);
		},
		changeInterval: async ({ channel }, { id, start, end, collectionName }) => {
			const collection = channel.getIntervalCollection(collectionName);
			collection.change(id, start, end);
		},
		changeProperties: async ({ channel }, { id, properties, collectionName }) => {
			const collection = channel.getIntervalCollection(collectionName);
			collection.changeProperties(id, { ...properties });
		},
	});

	return withLogging(reducer);
}
