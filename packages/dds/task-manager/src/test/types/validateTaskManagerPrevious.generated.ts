/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type * as old from "@fluid-experimental/task-manager-previous";
import type { TypeOnly, MinimalType, FullType, requireAssignableTo } from "@fluidframework/build-tools";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current | requireAssignableTo<true, true>;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_OldestClientObserver": {"forwardCompat": false}
 */
declare type old_as_current_for_Class_OldestClientObserver = requireAssignableTo<TypeOnly<old.OldestClientObserver>, TypeOnly<current.OldestClientObserver>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_OldestClientObserver": {"backCompat": false}
 */
declare type current_as_old_for_Class_OldestClientObserver = requireAssignableTo<TypeOnly<current.OldestClientObserver>, TypeOnly<old.OldestClientObserver>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_TaskManager": {"forwardCompat": false}
 */
declare type old_as_current_for_Class_TaskManager = requireAssignableTo<TypeOnly<old.TaskManager>, TypeOnly<current.TaskManager>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_TaskManager": {"backCompat": false}
 */
declare type current_as_old_for_Class_TaskManager = requireAssignableTo<TypeOnly<current.TaskManager>, TypeOnly<old.TaskManager>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_OldestClientObserver": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_OldestClientObserver = requireAssignableTo<TypeOnly<typeof current.OldestClientObserver>, TypeOnly<typeof old.OldestClientObserver>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_TaskManager": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_TaskManager = requireAssignableTo<TypeOnly<typeof current.TaskManager>, TypeOnly<typeof old.TaskManager>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IOldestClientObservable": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IOldestClientObservable = requireAssignableTo<TypeOnly<old.IOldestClientObservable>, TypeOnly<current.IOldestClientObservable>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IOldestClientObservable": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IOldestClientObservable = requireAssignableTo<TypeOnly<current.IOldestClientObservable>, TypeOnly<old.IOldestClientObservable>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IOldestClientObservableEvents": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IOldestClientObservableEvents = requireAssignableTo<TypeOnly<old.IOldestClientObservableEvents>, TypeOnly<current.IOldestClientObservableEvents>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IOldestClientObservableEvents": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IOldestClientObservableEvents = requireAssignableTo<TypeOnly<current.IOldestClientObservableEvents>, TypeOnly<old.IOldestClientObservableEvents>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IOldestClientObserver": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IOldestClientObserver = requireAssignableTo<TypeOnly<old.IOldestClientObserver>, TypeOnly<current.IOldestClientObserver>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IOldestClientObserver": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IOldestClientObserver = requireAssignableTo<TypeOnly<current.IOldestClientObserver>, TypeOnly<old.IOldestClientObserver>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IOldestClientObserverEvents": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IOldestClientObserverEvents = requireAssignableTo<TypeOnly<old.IOldestClientObserverEvents>, TypeOnly<current.IOldestClientObserverEvents>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IOldestClientObserverEvents": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IOldestClientObserverEvents = requireAssignableTo<TypeOnly<current.IOldestClientObserverEvents>, TypeOnly<old.IOldestClientObserverEvents>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ITaskManager": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ITaskManager = requireAssignableTo<TypeOnly<old.ITaskManager>, TypeOnly<current.ITaskManager>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ITaskManager": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ITaskManager = requireAssignableTo<TypeOnly<current.ITaskManager>, TypeOnly<old.ITaskManager>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ITaskManagerEvents": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ITaskManagerEvents = requireAssignableTo<TypeOnly<old.ITaskManagerEvents>, TypeOnly<current.ITaskManagerEvents>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ITaskManagerEvents": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ITaskManagerEvents = requireAssignableTo<TypeOnly<current.ITaskManagerEvents>, TypeOnly<old.ITaskManagerEvents>>
