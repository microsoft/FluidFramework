/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType, requireAssignableTo } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/map-previous/internal";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current | requireAssignableTo<true, true>;

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_DirectoryFactory": {"backCompat": false}
 */
declare type current_as_old_for_Class_DirectoryFactory = requireAssignableTo<TypeOnly<current.DirectoryFactory>, TypeOnly<old.DirectoryFactory>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_MapFactory": {"backCompat": false}
 */
declare type current_as_old_for_Class_MapFactory = requireAssignableTo<TypeOnly<current.MapFactory>, TypeOnly<old.MapFactory>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_DirectoryFactory": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_DirectoryFactory = requireAssignableTo<TypeOnly<typeof current.DirectoryFactory>, TypeOnly<typeof old.DirectoryFactory>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_MapFactory": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_MapFactory = requireAssignableTo<TypeOnly<typeof current.MapFactory>, TypeOnly<typeof old.MapFactory>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICreateInfo": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ICreateInfo = requireAssignableTo<TypeOnly<old.ICreateInfo>, TypeOnly<current.ICreateInfo>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICreateInfo": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ICreateInfo = requireAssignableTo<TypeOnly<current.ICreateInfo>, TypeOnly<old.ICreateInfo>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IDirectory": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IDirectory = requireAssignableTo<TypeOnly<current.IDirectory>, TypeOnly<old.IDirectory>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IDirectoryDataObject": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IDirectoryDataObject = requireAssignableTo<TypeOnly<old.IDirectoryDataObject>, TypeOnly<current.IDirectoryDataObject>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IDirectoryDataObject": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IDirectoryDataObject = requireAssignableTo<TypeOnly<current.IDirectoryDataObject>, TypeOnly<old.IDirectoryDataObject>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IDirectoryEvents": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IDirectoryEvents = requireAssignableTo<TypeOnly<current.IDirectoryEvents>, TypeOnly<old.IDirectoryEvents>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IDirectoryNewStorageFormat": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IDirectoryNewStorageFormat = requireAssignableTo<TypeOnly<old.IDirectoryNewStorageFormat>, TypeOnly<current.IDirectoryNewStorageFormat>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IDirectoryNewStorageFormat": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IDirectoryNewStorageFormat = requireAssignableTo<TypeOnly<current.IDirectoryNewStorageFormat>, TypeOnly<old.IDirectoryNewStorageFormat>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IDirectoryValueChanged": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IDirectoryValueChanged = requireAssignableTo<TypeOnly<current.IDirectoryValueChanged>, TypeOnly<old.IDirectoryValueChanged>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ISerializableValue": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ISerializableValue = requireAssignableTo<TypeOnly<old.ISerializableValue>, TypeOnly<current.ISerializableValue>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ISerializableValue": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ISerializableValue = requireAssignableTo<TypeOnly<current.ISerializableValue>, TypeOnly<old.ISerializableValue>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ISharedDirectory": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ISharedDirectory = requireAssignableTo<TypeOnly<current.ISharedDirectory>, TypeOnly<old.ISharedDirectory>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ISharedDirectoryEvents": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ISharedDirectoryEvents = requireAssignableTo<TypeOnly<current.ISharedDirectoryEvents>, TypeOnly<old.ISharedDirectoryEvents>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ISharedMap": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ISharedMap = requireAssignableTo<TypeOnly<current.ISharedMap>, TypeOnly<old.ISharedMap>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ISharedMapEvents": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ISharedMapEvents = requireAssignableTo<TypeOnly<current.ISharedMapEvents>, TypeOnly<old.ISharedMapEvents>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IValueChanged": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IValueChanged = requireAssignableTo<TypeOnly<current.IValueChanged>, TypeOnly<old.IValueChanged>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_SharedDirectory": {"forwardCompat": false}
 */
declare type old_as_current_for_TypeAlias_SharedDirectory = requireAssignableTo<TypeOnly<old.SharedDirectory>, TypeOnly<current.SharedDirectory>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_SharedDirectory": {"backCompat": false}
 */
declare type current_as_old_for_TypeAlias_SharedDirectory = requireAssignableTo<TypeOnly<current.SharedDirectory>, TypeOnly<old.SharedDirectory>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_SharedMap": {"forwardCompat": false}
 */
declare type old_as_current_for_TypeAlias_SharedMap = requireAssignableTo<TypeOnly<old.SharedMap>, TypeOnly<current.SharedMap>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_SharedMap": {"backCompat": false}
 */
declare type current_as_old_for_TypeAlias_SharedMap = requireAssignableTo<TypeOnly<current.SharedMap>, TypeOnly<old.SharedMap>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Variable_SharedDirectory": {"backCompat": false}
 */
declare type current_as_old_for_Variable_SharedDirectory = requireAssignableTo<TypeOnly<typeof current.SharedDirectory>, TypeOnly<typeof old.SharedDirectory>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Variable_SharedMap": {"backCompat": false}
 */
declare type current_as_old_for_Variable_SharedMap = requireAssignableTo<TypeOnly<typeof current.SharedMap>, TypeOnly<typeof old.SharedMap>>
