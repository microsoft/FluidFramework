/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/counter-previous/internal";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISharedCounter": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_ISharedCounter():
    TypeOnly<old.ISharedCounter>;
declare function use_current_InterfaceDeclaration_ISharedCounter(
    use: TypeOnly<current.ISharedCounter>): void;
use_current_InterfaceDeclaration_ISharedCounter(
    get_old_InterfaceDeclaration_ISharedCounter());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISharedCounter": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_ISharedCounter():
    TypeOnly<current.ISharedCounter>;
declare function use_old_InterfaceDeclaration_ISharedCounter(
    use: TypeOnly<old.ISharedCounter>): void;
use_old_InterfaceDeclaration_ISharedCounter(
    get_current_InterfaceDeclaration_ISharedCounter());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISharedCounterEvents": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_ISharedCounterEvents():
    TypeOnly<old.ISharedCounterEvents>;
declare function use_current_InterfaceDeclaration_ISharedCounterEvents(
    use: TypeOnly<current.ISharedCounterEvents>): void;
use_current_InterfaceDeclaration_ISharedCounterEvents(
    get_old_InterfaceDeclaration_ISharedCounterEvents());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISharedCounterEvents": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_ISharedCounterEvents():
    TypeOnly<current.ISharedCounterEvents>;
declare function use_old_InterfaceDeclaration_ISharedCounterEvents(
    use: TypeOnly<old.ISharedCounterEvents>): void;
use_old_InterfaceDeclaration_ISharedCounterEvents(
    get_current_InterfaceDeclaration_ISharedCounterEvents());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_SharedCounter": {"forwardCompat": false}
 */
declare function get_old_VariableDeclaration_SharedCounter():
    TypeOnly<typeof old.SharedCounter>;
declare function use_current_VariableDeclaration_SharedCounter(
    use: TypeOnly<typeof current.SharedCounter>): void;
use_current_VariableDeclaration_SharedCounter(
    get_old_VariableDeclaration_SharedCounter());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_SharedCounter": {"backCompat": false}
 */
declare function get_current_VariableDeclaration_SharedCounter():
    TypeOnly<typeof current.SharedCounter>;
declare function use_old_VariableDeclaration_SharedCounter(
    use: TypeOnly<typeof old.SharedCounter>): void;
use_old_VariableDeclaration_SharedCounter(
    get_current_VariableDeclaration_SharedCounter());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_SharedCounter": {"forwardCompat": false}
 */
declare function get_old_TypeAliasDeclaration_SharedCounter():
    TypeOnly<old.SharedCounter>;
declare function use_current_TypeAliasDeclaration_SharedCounter(
    use: TypeOnly<current.SharedCounter>): void;
use_current_TypeAliasDeclaration_SharedCounter(
    get_old_TypeAliasDeclaration_SharedCounter());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_SharedCounter": {"backCompat": false}
 */
declare function get_current_TypeAliasDeclaration_SharedCounter():
    TypeOnly<current.SharedCounter>;
declare function use_old_TypeAliasDeclaration_SharedCounter(
    use: TypeOnly<old.SharedCounter>): void;
use_old_TypeAliasDeclaration_SharedCounter(
    get_current_TypeAliasDeclaration_SharedCounter());
