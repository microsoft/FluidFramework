/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

export {
	typeNameSymbol,
	typeSchemaSymbol,
	type WithType,
	type TreeNodeSchema,
	type AnnotatedAllowedType,
	type NormalizedAnnotatedAllowedTypes,
	NodeKind,
	type TreeNodeSchemaClass,
	type TreeNodeSchemaNonClass,
	type TreeNodeSchemaCore,
	// TreeNode is only type exported, which prevents use of the class object for unsupported use-cases like direct sub-classing and instanceof.
	// See docs on TreeNode for more details.
	type TreeNode,
	type Unhydrated,
	type InternalTreeNode,
	isTreeNode,
	tryDisposeTreeNode,
	HydratedContext,
	SimpleContextSlot,
	getOrCreateInnerNode,
	getOrCreateNodeFromInnerNode,
	getOrCreateNodeFromInnerUnboxedNode,
	getKernel,
} from "./core/index.js";
export {
	type ITree,
	type TreeView,
	type ViewableTree,
	type TreeViewEvents,
	TreeViewConfiguration,
	TreeViewConfigurationAlpha,
	type ITreeViewConfiguration,
	type SchemaCompatibilityStatus,
	type ITreeConfigurationOptions,
	SchemaFactory,
	SchemaFactoryAlpha,
	type SchemaFactoryObjectOptions,
	type ScopedSchemaName,
	type ValidateRecursiveSchema,
	type FixRecursiveArraySchema,
	adaptEnum,
	enumFromStrings,
	singletonSchema,
	treeNodeApi,
	type TreeNodeApi,
	type NodeChangedData,
	TreeBeta,
	type TreeChangeEventsBeta,
	type SimpleTreeIndex,
	type IdentifierIndex,
	createSimpleTreeIndex,
	createIdentifierIndex,
	type JsonSchemaId,
	type JsonSchemaType,
	type JsonObjectNodeSchema,
	type JsonArrayNodeSchema,
	type JsonMapNodeSchema,
	type JsonLeafNodeSchema,
	type JsonSchemaRef,
	type JsonRefPath,
	type JsonNodeSchema,
	type JsonNodeSchemaBase,
	type JsonTreeSchema,
	type JsonFieldSchema,
	type JsonLeafSchemaType,
	type TreeSchemaEncodingOptions,
	getJsonSchema,
	getSimpleSchema,
	type VerboseTreeNode,
	type TreeEncodingOptions,
	type VerboseTree,
	extractPersistedSchema,
	comparePersistedSchema,
	type ConciseTree,
	SchemaCompatibilityTester,
	type Unenforced,
	type System_Unsafe,
	type ArrayNodeCustomizableSchemaUnsafe,
	type MapNodeCustomizableSchemaUnsafe,
	type TreeViewAlpha,
	type TreeBranch,
	type TreeBranchEvents,
	getPropertyKeyFromStoredKey,
	getStoredKey,
	tryGetSchema,
	applySchemaToParserOptions,
	cursorFromVerbose,
	verboseFromCursor,
	conciseFromCursor,
	createFromCursor,
	asTreeViewAlpha,
	customFromCursorStored,
	type CustomTreeNode,
	type CustomTreeValue,
	tryStoredSchemaAsArray,
	type SchemaStatics,
	type ITreeAlpha,
	type TransactionConstraint,
	type NodeInDocumentConstraint,
	type RunTransactionParams,
	type VoidTransactionCallbackStatus,
	type TransactionCallbackStatus,
	type TransactionResult,
	type TransactionResultExt,
	type TransactionResultSuccess,
	type TransactionResultFailed,
	rollback,
	generateSchemaFromSimpleSchema,
	replaceConciseTreeHandles,
	replaceHandles,
	replaceVerboseTreeHandles,
	type HandleConverter,
	allowUnused,
	type FieldSchemaAlphaUnsafe,
	getIdentifierFromNode,
	type TreeSchema,
	type ValidateRecursiveSchemaTemplate,
	type FixRecursiveRecursionLimit,
	schemaStatics,
	type TreeChangeEvents,
} from "./api/index.js";
export type {
	SimpleTreeSchema,
	SimpleNodeSchema,
	SimpleFieldSchema,
	SimpleLeafNodeSchema,
	SimpleMapNodeSchema,
	SimpleArrayNodeSchema,
	SimpleObjectNodeSchema,
	SimpleNodeSchemaBase,
	SimpleNodeSchemaBaseAlpha,
	SimpleObjectFieldSchema,
} from "./simpleSchema.js";
export {
	type NodeFromSchema,
	isTreeNodeSchemaClass,
	type ImplicitFieldSchema,
	type ImplicitAnnotatedFieldSchema,
	type TreeFieldFromImplicitField,
	type ImplicitAllowedTypes,
	type ImplicitAnnotatedAllowedTypes,
	type UnannotateImplicitAllowedTypes,
	type UnannotateAllowedTypes,
	type UnannotateAllowedType,
	type UnannotateAllowedTypesList,
	type UnannotateAllowedTypeOrLazyItem,
	type UnannotateImplicitFieldSchema,
	type UnannotateSchemaRecord,
	type TreeNodeFromImplicitAllowedTypes,
	type InsertableTreeNodeFromImplicitAllowedTypes,
	type TreeLeafValue,
	type AllowedTypes,
	type AllowedTypeMetadata,
	type AllowedTypesMetadata,
	type AnnotatedAllowedTypes,
	FieldKind,
	FieldSchema,
	type FieldSchemaAlpha,
	type InsertableTreeFieldFromImplicitField,
	type InsertableTypedNode,
	type NodeBuilderData,
	type DefaultProvider,
	type FieldProps,
	type FieldPropsAlpha,
	normalizeFieldSchema,
	areFieldSchemaEqual,
	areImplicitFieldSchemaEqual,
	type ApplyKind,
	type FieldSchemaMetadata,
	type InsertableField,
	type Insertable,
	type UnsafeUnknownSchema,
	normalizeAllowedTypes,
	type ApplyKindInput,
	type InsertableTreeNodeFromAllowedTypes,
	type Input,
	type ReadableField,
	type ReadSchema,
	type NodeSchemaOptions,
	type NodeSchemaOptionsAlpha,
	type NodeSchemaMetadata,
	evaluateLazySchema,
} from "./schemaTypes.js";
export { tryGetTreeNodeForField } from "./getTreeNodeForField.js";
export {
	type ArrayNodeCustomizableSchema,
	type ArrayNodePojoEmulationSchema,
	ArrayNodeSchema,
	asIndex,
	isArrayNodeSchema,
	IterableTreeArrayContent,
	type ReadonlyArrayNode,
	TreeArrayNode,
	type MapNodeCustomizableSchema,
	type MapNodePojoEmulationSchema,
	MapNodeSchema,
	isMapNodeSchema,
	type TreeMapNode,
	type MapNodeInsertableData,
	type FieldHasDefault,
	type InsertableObjectFromSchemaRecord,
	type ObjectFromSchemaRecord,
	ObjectNodeSchema,
	type ObjectNodeSchemaPrivate,
	isObjectNodeSchema,
	type InsertableObjectFromAnnotatedSchemaRecord,
	type TreeObjectNode,
	setField,
	createUnknownOptionalFieldPolicy,
} from "./node-kinds/index.js";
export {
	unhydratedFlexTreeFromInsertable,
	type InsertableContent,
	type FactoryContent,
	type FactoryContentObject,
} from "./unhydratedFlexTreeFromInsertable.js";
export {
	prepareForInsertion,
	prepareForInsertionContextless,
} from "./prepareForInsertion.js";
export { toStoredSchema, getStoredSchema } from "./toStoredSchema.js";
export {
	numberSchema,
	stringSchema,
	booleanSchema,
	handleSchema,
	nullSchema,
} from "./leafNodeSchema.js";
export type { LeafSchema } from "./leafNodeSchema.js";
export type { LazyItem, FlexList, FlexListToUnion, ExtractItemType } from "./flexList.js";
