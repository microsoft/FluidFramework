/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

import { assert } from "@fluidframework/core-utils/internal";
import type { IIdCompressor } from "@fluidframework/id-compressor";
import {
	UsageError,
	type ITelemetryLoggerExt,
} from "@fluidframework/telemetry-utils/internal";
import { noopValidator } from "../codec/index.js";
import {
	type Anchor,
	type AnchorLocator,
	type AnchorNode,
	AnchorSet,
	type AnchorSetRootEvents,
	type ChangeFamily,
	CommitKind,
	type CommitMetadata,
	type DeltaVisitor,
	type DetachedFieldIndex,
	type IEditableForest,
	type IForestSubscription,
	type JsonableTree,
	type Revertible,
	RevertibleStatus,
	type RevisionTag,
	type RevisionTagCodec,
	type TreeStoredSchema,
	TreeStoredSchemaRepository,
	type TreeStoredSchemaSubscription,
	combineVisitors,
	makeAnonChange,
	makeDetachedFieldIndex,
	rebaseChange,
	tagChange,
	visitDelta,
} from "../core/index.js";
import {
	type HasListeners,
	type IEmitter,
	type Listenable,
	createEmitter,
} from "../events/index.js";
import {
	type FieldBatchCodec,
	type TreeCompressionStrategy,
	buildForest,
	intoDelta,
	jsonableTreeFromCursor,
	makeFieldBatchCodec,
} from "../feature-libraries/index.js";
import { SharedTreeBranch, getChangeReplaceType } from "../shared-tree-core/index.js";
import { type IDisposable, TransactionResult, disposeSymbol, fail } from "../util/index.js";

import { SharedTreeChangeFamily, hasSchemaChange } from "./sharedTreeChangeFamily.js";
import type { SharedTreeChange } from "./sharedTreeChangeTypes.js";
import type { ISharedTreeEditor, SharedTreeEditBuilder } from "./sharedTreeEditBuilder.js";

/**
 * Events for {@link ITreeCheckout}.
 * @internal
 */
export interface CheckoutEvents {
	/**
	 * A batch of changes has finished processing and the view is in a consistent state.
	 * It is once again safe to access the FlexTree, Forest and AnchorSet.
	 *
	 * @remarks
	 * This is mainly useful for knowing when to do followup work scheduled during events from Anchors.
	 */
	afterBatch(): void;

	/**
	 * Fired when a revertible change has been made to this view.
	 *
	 * Applications which subscribe to this event are expected to revert or discard revertibles they acquire (failure to do so will leak memory).
	 * The provided revertible is inherently bound to the view that raised the event, calling `revert` won't apply to forked views.
	 *
	 * @param revertible - The revertible that can be used to revert the change.
	 */

	/**
	 * {@inheritdoc TreeViewEvents.commitApplied}
	 */
	commitApplied(data: CommitMetadata, getRevertible?: RevertibleFactory): void;
}

/**
 * Factory for creating a {@link Revertible}.
 * Will error if invoked outside the scope of the `commitApplied` event that provides it, or if invoked multiple times.
 *
 * @param onRevertibleDisposed - A callback that will be invoked when the `Revertible` generated by this factory is disposed.
 * This happens when the `Revertible` is disposed manually, or when the `TreeView` that the `Revertible` belongs to is disposed,
 * whichever happens first.
 * This is typically used to clean up any resources associated with the `Revertible` in the host application.
 *
 * @sealed @public
 */
export type RevertibleFactory = (
	onRevertibleDisposed?: (revertible: Revertible) => void,
) => Revertible;

/**
 * Provides a means for interacting with a SharedTree.
 * This includes reading data from the tree and running transactions to mutate the tree.
 * @remarks This interface should not have any implementations other than those provided by the SharedTree package libraries.
 * @privateRemarks
 * API for interacting with a {@link SharedTreeBranch}.
 * Implementations of this interface must implement the {@link branchKey} property.
 * @internal
 */
export interface ITreeCheckout extends AnchorLocator {
	/**
	 * Read and Write access for schema stored in the document.
	 *
	 * These APIs are temporary and will be replaced with different abstractions (View Schema based) in a different place later.
	 *
	 * TODO:
	 * Editing of this should be moved into transactions with the rest of tree editing to they can be intermixed.
	 * This will be done after the relations between views, branches and Indexes are figured out.
	 *
	 * TODO:
	 * Public APIs for dealing with schema should be in terms of View Schema, and schema update policies.
	 * The actual stored schema should be hidden (or ar least not be the most prominent way to interact with schema).
	 *
	 * TODO:
	 * Something should ensure the document contents are always in schema.
	 */
	readonly storedSchema: TreeStoredSchemaSubscription;
	/**
	 * Current contents.
	 * Updated by edits (local and remote).
	 * Use `editor` to create a local edit.
	 */
	readonly forest: IForestSubscription;

	/**
	 * Used to edit the state of the tree. Edits will be immediately applied locally to the tree.
	 * If there is no transaction currently ongoing, then the edits will be submitted to Fluid immediately as well.
	 */
	readonly editor: ISharedTreeEditor;

	/**
	 * A collection of functions for managing transactions.
	 */
	readonly transaction: ITransaction;

	/**
	 * Spawn a new view which is based off of the current state of this view.
	 * Any mutations of the new view will not apply to this view until the new view is merged back into this view via `merge()`.
	 */
	fork(): ITreeCheckoutFork;

	/**
	 * Apply all the new changes on the given view to this view.
	 * @param view - a view which was created by a call to `fork()`.
	 * It is automatically disposed after the merge completes.
	 * @remarks All ongoing transactions (if any) in `view` will be committed before the merge.
	 */
	merge(view: ITreeCheckoutFork): void;

	/**
	 * Apply all the new changes on the given view to this view.
	 * @param view - a view which was created by a call to `fork()`.
	 * @param disposeView - whether or not to dispose `view` after the merge completes.
	 * @remarks All ongoing transactions (if any) in `view` will be committed before the merge.
	 */
	merge(view: ITreeCheckoutFork, disposeView: boolean): void;

	/**
	 * Rebase the given view onto this view.
	 * @param view - a view which was created by a call to `fork()`. It is modified by this operation.
	 */
	rebase(view: ITreeCheckoutFork): void;

	/**
	 * Replaces all schema with the provided schema.
	 * Can over-write preexisting schema, and removes unmentioned schema.
	 */
	updateSchema(newSchema: TreeStoredSchema): void;

	/**
	 * Events about this view.
	 */
	readonly events: Listenable<CheckoutEvents>;

	/**
	 * Events about the root of the tree in this view.
	 */
	readonly rootEvents: Listenable<AnchorSetRootEvents>;

	/**
	 * Returns a JsonableTree for each tree that was removed from (and not restored to) the document.
	 * This list is guaranteed to contain all nodes that are recoverable through undo/redo on this checkout.
	 * The list may also contain additional nodes.
	 *
	 * This is only intended for use in testing and exceptional code paths: it is not performant.
	 */
	getRemovedRoots(): [string | number | undefined, number, JsonableTree][];
}

/**
 * Creates a {@link TreeCheckout}.
 * @param args - an object containing optional components that will be used to build the view.
 * Any components not provided will be created by default.
 * @remarks This does not create a {@link SharedTree}, but rather a view with the minimal state
 * and functionality required to implement {@link ITreeCheckout}.
 */
export function createTreeCheckout(
	idCompressor: IIdCompressor,
	mintRevisionTag: () => RevisionTag,
	revisionTagCodec: RevisionTagCodec,
	args?: {
		branch?: SharedTreeBranch<SharedTreeEditBuilder, SharedTreeChange>;
		changeFamily?: ChangeFamily<SharedTreeEditBuilder, SharedTreeChange>;
		schema?: TreeStoredSchemaRepository;
		forest?: IEditableForest;
		fieldBatchCodec?: FieldBatchCodec;
		events?: Listenable<CheckoutEvents> &
			IEmitter<CheckoutEvents> &
			HasListeners<CheckoutEvents>;
		removedRoots?: DetachedFieldIndex;
		chunkCompressionStrategy?: TreeCompressionStrategy;
		logger?: ITelemetryLoggerExt;
	},
): TreeCheckout {
	const forest = args?.forest ?? buildForest();
	const schema = args?.schema ?? new TreeStoredSchemaRepository();
	const defaultCodecOptions = { jsonValidator: noopValidator };
	const defaultFieldBatchVersion = 1;
	const changeFamily =
		args?.changeFamily ??
		new SharedTreeChangeFamily(
			revisionTagCodec,
			args?.fieldBatchCodec ??
				makeFieldBatchCodec(defaultCodecOptions, defaultFieldBatchVersion),
			{ jsonValidator: noopValidator },
			args?.chunkCompressionStrategy,
		);
	const branch =
		args?.branch ??
		new SharedTreeBranch(
			{
				change: changeFamily.rebaser.compose([]),
				revision: "root",
			},
			changeFamily,
			() => idCompressor.generateCompressedId(),
		);
	const events = args?.events ?? createEmitter();

	const transaction = new Transaction(branch);

	return new TreeCheckout(
		transaction,
		branch,
		changeFamily,
		schema,
		forest,
		events,
		mintRevisionTag,
		revisionTagCodec,
		idCompressor,
		args?.removedRoots,
		args?.logger,
	);
}

/**
 * A collection of functions for managing transactions.
 * Transactions allow edits to be batched into atomic units.
 * Edits made during a transaction will update the local state of the tree immediately, but will be squashed into a single edit when the transaction is committed.
 * If the transaction is aborted, the local state will be reset to what it was before the transaction began.
 * Transactions may nest, meaning that a transaction may be started while a transaction is already ongoing.
 *
 * To avoid updating observers of the view state with intermediate results during a transaction,
 * use {@link ITreeCheckout#fork} and {@link ISharedTreeFork#merge}.
 * @internal
 */
export interface ITransaction {
	/**
	 * Start a new transaction.
	 * If a transaction is already in progress when this new transaction starts, then this transaction will be "nested" inside of it,
	 * i.e. the outer transaction will still be in progress after this new transaction is committed or aborted.
	 *
	 * @remarks - Asynchronous transactions are not supported on the root checkout,
	 * since it is always kept up-to-date with the latest remote edits and the results of this rebasing (which might invalidate
	 * the transaction) is not visible to the application author.
	 * Instead,
	 *
	 * 1. fork the root checkout
	 * 2. run the transaction on the fork
	 * 3. merge the fork back into the root checkout
	 *
	 * @privateRemarks - There is currently no enforcement that asynchronous transactions don't happen on the root checkout.
	 * AB#6488 tracks adding some enforcement to make it more clear to application authors that this is not supported.
	 */
	start(): void;
	/**
	 * Close this transaction by squashing its edits and committing them as a single edit.
	 * If this is the root checkout and there are no ongoing transactions remaining, the squashed edit will be submitted to Fluid.
	 */
	commit(): TransactionResult.Commit;
	/**
	 * Close this transaction and revert the state of the tree to what it was before this transaction began.
	 */
	abort(): TransactionResult.Abort;
	/**
	 * True if there is at least one transaction currently in progress on this view, otherwise false.
	 */
	inProgress(): boolean;
}

class Transaction implements ITransaction {
	public constructor(
		private readonly branch: SharedTreeBranch<SharedTreeEditBuilder, SharedTreeChange>,
	) {}

	public start(): void {
		this.branch.startTransaction();
		this.branch.editor.enterTransaction();
	}
	public commit(): TransactionResult.Commit {
		this.branch.commitTransaction();
		this.branch.editor.exitTransaction();
		return TransactionResult.Commit;
	}
	public abort(): TransactionResult.Abort {
		this.branch.abortTransaction();
		this.branch.editor.exitTransaction();
		return TransactionResult.Abort;
	}
	public inProgress(): boolean {
		return this.branch.isTransacting();
	}
}

/**
 * Branch (like in a version control system) of SharedTree.
 *
 * {@link ITreeCheckout} that has forked off of the main trunk/branch.
 * @internal
 */
export interface ITreeCheckoutFork extends ITreeCheckout, IDisposable {
	/**
	 * Rebase the changes that have been applied to this view over all the new changes in the given view.
	 * @param view - Either the root view or a view that was created by a call to `fork()`. It is not modified by this operation.
	 */
	rebaseOnto(view: ITreeCheckout): void;
}

/**
 * Metrics derived from a revert operation.
 *
 * @see {@link TreeCheckout.revertRevertible}.
 */
export interface RevertMetrics {
	/**
	 * The age of the revertible commit relative to the head of the branch to which the reversion will be applied.
	 */
	readonly age: number;

	// TODO: add other stats as needed for telemetry, etc.
}

/**
 * An implementation of {@link ITreeCheckoutFork}.
 */
export class TreeCheckout implements ITreeCheckoutFork {
	private isDisposed = false;

	/**
	 * Set of revertibles maintained for automatic disposal
	 */
	private readonly revertibles = new Set<DisposableRevertible>();

	/**
	 * Each branch's head commit corresponds to a revertible commit.
	 * Maintaining a whole branch ensures the commit graph is not pruned in a way that would prevent the commit from
	 * being reverted.
	 */
	private readonly revertibleCommitBranches = new Map<
		RevisionTag,
		SharedTreeBranch<SharedTreeEditBuilder, SharedTreeChange>
	>();

	/**
	 * The name of the telemetry event logged for calls to {@link TreeCheckout.revertRevertible}.
	 * @privateRemarks Exposed for testing purposes.
	 */
	public static readonly revertTelemetryEventName = "RevertRevertible";

	public constructor(
		public readonly transaction: ITransaction,
		private readonly branch: SharedTreeBranch<SharedTreeEditBuilder, SharedTreeChange>,
		private readonly changeFamily: ChangeFamily<SharedTreeEditBuilder, SharedTreeChange>,
		public readonly storedSchema: TreeStoredSchemaRepository,
		public readonly forest: IEditableForest,
		public readonly events: Listenable<CheckoutEvents> &
			IEmitter<CheckoutEvents> &
			HasListeners<CheckoutEvents>,
		private readonly mintRevisionTag: () => RevisionTag,
		private readonly revisionTagCodec: RevisionTagCodec,
		private readonly idCompressor: IIdCompressor,
		private readonly removedRoots: DetachedFieldIndex = makeDetachedFieldIndex(
			"repair",
			revisionTagCodec,
			idCompressor,
		),
		/** Optional logger for telemetry. */
		private readonly logger?: ITelemetryLoggerExt,
	) {
		// We subscribe to `beforeChange` rather than `afterChange` here because it's possible that the change is invalid WRT our forest.
		// For example, a bug in the editor might produce a malformed change object and thus applying the change to the forest will throw an error.
		// In such a case we will crash here, preventing the change from being added to the commit graph, and preventing `afterChange` from firing.
		// One important consequence of this is that we will not submit the op containing the invalid change, since op submissions happens in response to `afterChange`.
		branch.on("beforeChange", (event) => {
			if (event.change !== undefined) {
				// Conflicts due to schema will be empty and thus are not applied.
				for (const change of event.change.change.changes) {
					if (change.type === "data") {
						const delta = intoDelta(tagChange(change.innerChange, event.change.revision));
						this.withCombinedVisitor((visitor) => {
							visitDelta(delta, visitor, this.removedRoots);
						});
					} else if (change.type === "schema") {
						// Schema changes from a current to a new schema are expected to be backwards compatible.
						// This guarantees that all data in the forest (which is valid before the schema change)
						// is also valid under the new schema.
						// Note however, that such schema changes may in some cases be rolled back:
						// Case 1: A transaction with a schema change may be aborted.
						// The transaction may have made some data changes that would render some trees invalid
						// under the old schema, but these changes will also be rolled back, thereby putting the forest
						// back in the state before the transaction, which is valid under the original (reinstated) schema.
						// Case 2: A branch with a schema change may be rebased such that the schema change (because
						// of a constraint) is no longer applied.
						// Such a branch may contain data changes that would render some trees invalid under the
						// original schema. These data changes may not necessarily be rolled back.
						// They will however be rebased over the rollback of the schema change. This rebasing will
						// ensure that these data changes are muted if they would render some trees invalid under the
						// original (reinstated) schema.
						storedSchema.apply(change.innerChange.schema.new);
					} else {
						fail("Unknown Shared Tree change type.");
					}
				}
				this.events.emit("afterBatch");
			}
			if (event.type === "replace" && getChangeReplaceType(event) === "transactionCommit") {
				const transactionRevision = event.newCommits[0].revision;
				for (const transactionStep of event.removedCommits) {
					this.removedRoots.updateMajor(transactionStep.revision, transactionRevision);
				}
			}
		});
		branch.on("commitApplied", (data) => {
			const commit = branch.getHead();
			const { change, revision } = commit;
			let withinEventContext = true;

			const getRevertible = hasSchemaChange(change)
				? undefined
				: (onRevertibleDisposed?: (revertible: Revertible) => void) => {
						if (!withinEventContext) {
							throw new UsageError(
								"Cannot get a revertible outside of the context of a commitApplied event.",
							);
						}
						if (this.revertibleCommitBranches.get(revision) !== undefined) {
							throw new UsageError(
								"Cannot generate the same revertible more than once. Note that this can happen when multiple commitApplied event listeners are registered.",
							);
						}
						const revertibleCommits = this.revertibleCommitBranches;
						const revertible: DisposableRevertible = {
							get status(): RevertibleStatus {
								const revertibleCommit = revertibleCommits.get(revision);
								return revertibleCommit === undefined
									? RevertibleStatus.Disposed
									: RevertibleStatus.Valid;
							},
							revert: (release: boolean = true) => {
								if (revertible.status === RevertibleStatus.Disposed) {
									throw new UsageError(
										"Unable to revert a revertible that has been disposed.",
									);
								}

								const revertMetrics = this.revertRevertible(revision, data.kind);
								this.logger?.sendTelemetryEvent({
									eventName: TreeCheckout.revertTelemetryEventName,
									...revertMetrics,
								});

								if (release) {
									revertible.dispose();
								}
							},
							dispose: () => {
								if (revertible.status === RevertibleStatus.Disposed) {
									throw new UsageError(
										"Unable to dispose a revertible that has already been disposed.",
									);
								}
								this.disposeRevertible(revertible, revision);
								onRevertibleDisposed?.(revertible);
							},
						};

						this.revertibleCommitBranches.set(revision, branch.fork());
						this.revertibles.add(revertible);
						return revertible;
					};

			this.events.emit("commitApplied", data, getRevertible);
			withinEventContext = false;
		});
	}

	private withCombinedVisitor(fn: (visitor: DeltaVisitor) => void): void {
		const anchorVisitor = this.forest.anchors.acquireVisitor();
		const combinedVisitor = combineVisitors(
			[this.forest.acquireVisitor(), anchorVisitor],
			[anchorVisitor],
		);
		fn(combinedVisitor);
		combinedVisitor.free();
	}

	private checkNotDisposed(): void {
		assert(!this.isDisposed, 0x911 /* Invalid operation on a disposed TreeCheckout */);
	}

	public get rootEvents(): Listenable<AnchorSetRootEvents> {
		return this.forest.anchors;
	}

	public get editor(): ISharedTreeEditor {
		this.checkNotDisposed();
		return this.branch.editor;
	}

	public locate(anchor: Anchor): AnchorNode | undefined {
		this.checkNotDisposed();
		return this.forest.anchors.locate(anchor);
	}

	public fork(): TreeCheckout {
		this.checkNotDisposed();
		const anchors = new AnchorSet();
		const branch = this.branch.fork();
		const storedSchema = this.storedSchema.clone();
		const forest = this.forest.clone(storedSchema, anchors);
		const transaction = new Transaction(branch);
		return new TreeCheckout(
			transaction,
			branch,
			this.changeFamily,
			storedSchema,
			forest,
			createEmitter(),
			this.mintRevisionTag,
			this.revisionTagCodec,
			this.idCompressor,
			this.removedRoots.clone(),
			this.logger,
		);
	}

	public rebase(view: TreeCheckout): void {
		this.checkNotDisposed();
		view.branch.rebaseOnto(this.branch);
	}

	public rebaseOnto(view: ITreeCheckout): void {
		this.checkNotDisposed();
		view.rebase(this);
	}

	public merge(view: TreeCheckout): void;
	public merge(view: TreeCheckout, disposeView: boolean): void;
	public merge(view: TreeCheckout, disposeView = true): void {
		this.checkNotDisposed();
		assert(
			!this.transaction.inProgress() || disposeView,
			0x710 /* A view that is merged into an in-progress transaction must be disposed */,
		);
		while (view.transaction.inProgress()) {
			view.transaction.commit();
		}
		this.branch.merge(view.branch);
		if (disposeView) {
			view[disposeSymbol]();
		}
	}

	public updateSchema(newSchema: TreeStoredSchema): void {
		this.checkNotDisposed();
		this.editor.schema.setStoredSchema(this.storedSchema.clone(), newSchema);
	}

	public [disposeSymbol](): void {
		this.checkNotDisposed();
		this.isDisposed = true;
		this.purgeRevertibles();
		this.branch.dispose();
	}

	public getRemovedRoots(): [string | number | undefined, number, JsonableTree][] {
		const trees: [string | number | undefined, number, JsonableTree][] = [];
		const cursor = this.forest.allocateCursor("getRemovedRoots");
		for (const { id, root } of this.removedRoots.entries()) {
			const parentField = this.removedRoots.toFieldKey(root);
			this.forest.moveCursorToPath({ parent: undefined, parentField, parentIndex: 0 }, cursor);
			const tree = jsonableTreeFromCursor(cursor);
			// This method is used for tree consistency comparison.
			const { major, minor } = id;
			const finalizedMajor = major !== undefined ? this.revisionTagCodec.encode(major) : major;
			trees.push([finalizedMajor, minor, tree]);
		}
		cursor.free();
		return trees;
	}

	private purgeRevertibles(): void {
		for (const revertible of this.revertibles) {
			revertible.dispose();
		}
	}

	private disposeRevertible(revertible: DisposableRevertible, revision: RevisionTag): void {
		this.revertibleCommitBranches.get(revision)?.dispose();
		this.revertibleCommitBranches.delete(revision);
		this.revertibles.delete(revertible);
	}

	private revertRevertible(revision: RevisionTag, kind: CommitKind): RevertMetrics {
		if (this.branch.isTransacting()) {
			throw new UsageError("Undo is not yet supported during transactions.");
		}

		const revertibleBranch = this.revertibleCommitBranches.get(revision);
		assert(revertibleBranch !== undefined, 0x7cc /* expected to find a revertible commit */);
		const commitToRevert = revertibleBranch.getHead();

		let change = makeAnonChange(
			this.changeFamily.rebaser.invert(tagChange(commitToRevert.change, revision), false),
		);

		const headCommit = this.branch.getHead();
		// Rebase the inverted change onto any commits that occurred after the undoable commits.
		if (commitToRevert !== headCommit) {
			change = makeAnonChange(
				rebaseChange(
					this.changeFamily.rebaser,
					change,
					commitToRevert,
					headCommit,
					this.mintRevisionTag,
				).change,
			);
		}

		this.branch.apply(
			change.change,
			this.mintRevisionTag(),
			kind === CommitKind.Default || kind === CommitKind.Redo
				? CommitKind.Undo
				: CommitKind.Redo,
		);

		// Derive some stats about the reversion to return to the caller.
		let revertAge = 0;
		let currentCommit = headCommit;
		while (commitToRevert.revision !== currentCommit.revision) {
			revertAge++;

			const parentCommit = currentCommit.parent;
			assert(parentCommit !== undefined, 0x9a9 /* expected to find a parent commit */);
			currentCommit = parentCommit;
		}

		return { age: revertAge };
	}
}

/**
 * Run a synchronous transaction on the given shared tree view.
 * This is a convenience helper around the {@link SharedTreeFork#transaction} APIs.
 * @param view - the view on which to run the transaction
 * @param transaction - the transaction function. This will be executed immediately. It is passed `view` as an argument for convenience.
 * If this function returns an `Abort` result then the transaction will be aborted. Otherwise, it will be committed.
 * @returns whether or not the transaction was committed or aborted
 * @internal
 */
export function runSynchronous(
	view: ITreeCheckout,
	transaction: (view: ITreeCheckout) => TransactionResult | void,
): TransactionResult {
	view.transaction.start();
	const result = transaction(view);
	return result === TransactionResult.Abort
		? view.transaction.abort()
		: view.transaction.commit();
}

interface DisposableRevertible extends Revertible {
	dispose: () => void;
}
