/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType, requireAssignableTo } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/shared-object-base-previous/internal";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current | requireAssignableTo<true, true>;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_FluidSerializer": {"forwardCompat": false}
 */
declare type old_as_current_for_ClassDeclaration_FluidSerializer = requireAssignableTo<TypeOnly<old.FluidSerializer>, TypeOnly<current.FluidSerializer>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_FluidSerializer": {"backCompat": false}
 */
declare type current_as_old_for_ClassDeclaration_FluidSerializer = requireAssignableTo<TypeOnly<current.FluidSerializer>, TypeOnly<old.FluidSerializer>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IFluidSerializer": {"forwardCompat": false}
 */
declare type old_as_current_for_InterfaceDeclaration_IFluidSerializer = requireAssignableTo<TypeOnly<old.IFluidSerializer>, TypeOnly<current.IFluidSerializer>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IFluidSerializer": {"backCompat": false}
 */
declare type current_as_old_for_InterfaceDeclaration_IFluidSerializer = requireAssignableTo<TypeOnly<current.IFluidSerializer>, TypeOnly<old.IFluidSerializer>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISharedObject": {"forwardCompat": false}
 */
declare type old_as_current_for_InterfaceDeclaration_ISharedObject = requireAssignableTo<TypeOnly<old.ISharedObject>, TypeOnly<current.ISharedObject>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISharedObject": {"backCompat": false}
 */
declare type current_as_old_for_InterfaceDeclaration_ISharedObject = requireAssignableTo<TypeOnly<current.ISharedObject>, TypeOnly<old.ISharedObject>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISharedObjectEvents": {"forwardCompat": false}
 */
declare type old_as_current_for_InterfaceDeclaration_ISharedObjectEvents = requireAssignableTo<TypeOnly<old.ISharedObjectEvents>, TypeOnly<current.ISharedObjectEvents>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISharedObjectEvents": {"backCompat": false}
 */
declare type current_as_old_for_InterfaceDeclaration_ISharedObjectEvents = requireAssignableTo<TypeOnly<current.ISharedObjectEvents>, TypeOnly<old.ISharedObjectEvents>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISharedObjectKind": {"forwardCompat": false}
 */
declare type old_as_current_for_InterfaceDeclaration_ISharedObjectKind = requireAssignableTo<TypeOnly<old.ISharedObjectKind<any>>, TypeOnly<current.ISharedObjectKind<any>>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISharedObjectKind": {"backCompat": false}
 */
declare type current_as_old_for_InterfaceDeclaration_ISharedObjectKind = requireAssignableTo<TypeOnly<current.ISharedObjectKind<any>>, TypeOnly<old.ISharedObjectKind<any>>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_SharedObject": {"forwardCompat": false}
 */
declare type old_as_current_for_ClassDeclaration_SharedObject = requireAssignableTo<TypeOnly<old.SharedObject>, TypeOnly<current.SharedObject>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_SharedObject": {"backCompat": false}
 */
declare type current_as_old_for_ClassDeclaration_SharedObject = requireAssignableTo<TypeOnly<current.SharedObject>, TypeOnly<old.SharedObject>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_SharedObjectCore": {"forwardCompat": false}
 */
declare type old_as_current_for_ClassDeclaration_SharedObjectCore = requireAssignableTo<TypeOnly<old.SharedObjectCore>, TypeOnly<current.SharedObjectCore>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_SharedObjectCore": {"backCompat": false}
 */
declare type current_as_old_for_ClassDeclaration_SharedObjectCore = requireAssignableTo<TypeOnly<current.SharedObjectCore>, TypeOnly<old.SharedObjectCore>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_SharedObjectKind": {"backCompat": false}
 */
declare type current_as_old_for_InterfaceDeclaration_SharedObjectKind = requireAssignableTo<TypeOnly<current.SharedObjectKind>, TypeOnly<old.SharedObjectKind>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_SummarySerializer": {"forwardCompat": false}
 */
declare type old_as_current_for_ClassDeclaration_SummarySerializer = requireAssignableTo<TypeOnly<old.SummarySerializer>, TypeOnly<current.SummarySerializer>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_SummarySerializer": {"backCompat": false}
 */
declare type current_as_old_for_ClassDeclaration_SummarySerializer = requireAssignableTo<TypeOnly<current.SummarySerializer>, TypeOnly<old.SummarySerializer>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "EnumDeclaration_ValueType": {"forwardCompat": false}
 */
declare type old_as_current_for_EnumDeclaration_ValueType = requireAssignableTo<TypeOnly<old.ValueType>, TypeOnly<current.ValueType>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "EnumDeclaration_ValueType": {"backCompat": false}
 */
declare type current_as_old_for_EnumDeclaration_ValueType = requireAssignableTo<TypeOnly<current.ValueType>, TypeOnly<old.ValueType>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_bindHandles": {"forwardCompat": false}
 */
declare type old_as_current_for_FunctionDeclaration_bindHandles = requireAssignableTo<TypeOnly<typeof old.bindHandles>, TypeOnly<typeof current.bindHandles>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_bindHandles": {"backCompat": false}
 */
declare type current_as_old_for_FunctionDeclaration_bindHandles = requireAssignableTo<TypeOnly<typeof current.bindHandles>, TypeOnly<typeof old.bindHandles>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_createSharedObjectKind": {"forwardCompat": false}
 */
declare type old_as_current_for_FunctionDeclaration_createSharedObjectKind = requireAssignableTo<TypeOnly<typeof old.createSharedObjectKind>, TypeOnly<typeof current.createSharedObjectKind>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_createSharedObjectKind": {"backCompat": false}
 */
declare type current_as_old_for_FunctionDeclaration_createSharedObjectKind = requireAssignableTo<TypeOnly<typeof current.createSharedObjectKind>, TypeOnly<typeof old.createSharedObjectKind>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_createSingleBlobSummary": {"forwardCompat": false}
 */
declare type old_as_current_for_FunctionDeclaration_createSingleBlobSummary = requireAssignableTo<TypeOnly<typeof old.createSingleBlobSummary>, TypeOnly<typeof current.createSingleBlobSummary>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_createSingleBlobSummary": {"backCompat": false}
 */
declare type current_as_old_for_FunctionDeclaration_createSingleBlobSummary = requireAssignableTo<TypeOnly<typeof current.createSingleBlobSummary>, TypeOnly<typeof old.createSingleBlobSummary>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_makeHandlesSerializable": {"forwardCompat": false}
 */
declare type old_as_current_for_FunctionDeclaration_makeHandlesSerializable = requireAssignableTo<TypeOnly<typeof old.makeHandlesSerializable>, TypeOnly<typeof current.makeHandlesSerializable>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_makeHandlesSerializable": {"backCompat": false}
 */
declare type current_as_old_for_FunctionDeclaration_makeHandlesSerializable = requireAssignableTo<TypeOnly<typeof current.makeHandlesSerializable>, TypeOnly<typeof old.makeHandlesSerializable>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_parseHandles": {"forwardCompat": false}
 */
declare type old_as_current_for_FunctionDeclaration_parseHandles = requireAssignableTo<TypeOnly<typeof old.parseHandles>, TypeOnly<typeof current.parseHandles>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_parseHandles": {"backCompat": false}
 */
declare type current_as_old_for_FunctionDeclaration_parseHandles = requireAssignableTo<TypeOnly<typeof current.parseHandles>, TypeOnly<typeof old.parseHandles>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_serializeHandles": {"forwardCompat": false}
 */
declare type old_as_current_for_FunctionDeclaration_serializeHandles = requireAssignableTo<TypeOnly<typeof old.serializeHandles>, TypeOnly<typeof current.serializeHandles>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_serializeHandles": {"backCompat": false}
 */
declare type current_as_old_for_FunctionDeclaration_serializeHandles = requireAssignableTo<TypeOnly<typeof current.serializeHandles>, TypeOnly<typeof old.serializeHandles>>
