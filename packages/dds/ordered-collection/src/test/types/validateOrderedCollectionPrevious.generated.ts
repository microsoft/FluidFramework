/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType, requireAssignableTo } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/ordered-collection-previous/internal";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current | requireAssignableTo<true, true>;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_ConsensusCallback": {"forwardCompat": false}
 */
declare type old_as_current_for_TypeAliasDeclaration_ConsensusCallback = requireAssignableTo<TypeOnly<old.ConsensusCallback<any>>, TypeOnly<current.ConsensusCallback<any>>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_ConsensusCallback": {"backCompat": false}
 */
declare type current_as_old_for_TypeAliasDeclaration_ConsensusCallback = requireAssignableTo<TypeOnly<current.ConsensusCallback<any>>, TypeOnly<old.ConsensusCallback<any>>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_ConsensusOrderedCollection": {"forwardCompat": false}
 */
declare type old_as_current_for_ClassDeclaration_ConsensusOrderedCollection = requireAssignableTo<TypeOnly<old.ConsensusOrderedCollection>, TypeOnly<current.ConsensusOrderedCollection>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_ConsensusOrderedCollection": {"backCompat": false}
 */
declare type current_as_old_for_ClassDeclaration_ConsensusOrderedCollection = requireAssignableTo<TypeOnly<current.ConsensusOrderedCollection>, TypeOnly<old.ConsensusOrderedCollection>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_ConsensusQueue": {"forwardCompat": false}
 */
// @ts-expect-error compatibility expected to be broken
declare type old_as_current_for_VariableDeclaration_ConsensusQueue = requireAssignableTo<TypeOnly<typeof old.ConsensusQueue>, TypeOnly<typeof current.ConsensusQueue>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_ConsensusQueue": {"backCompat": false}
 */
declare type current_as_old_for_VariableDeclaration_ConsensusQueue = requireAssignableTo<TypeOnly<typeof current.ConsensusQueue>, TypeOnly<typeof old.ConsensusQueue>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_ConsensusQueue": {"forwardCompat": false}
 */
declare type old_as_current_for_TypeAliasDeclaration_ConsensusQueue = requireAssignableTo<TypeOnly<old.ConsensusQueue>, TypeOnly<current.ConsensusQueue>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_ConsensusQueue": {"backCompat": false}
 */
declare type current_as_old_for_TypeAliasDeclaration_ConsensusQueue = requireAssignableTo<TypeOnly<current.ConsensusQueue>, TypeOnly<old.ConsensusQueue>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_ConsensusQueueClass": {"forwardCompat": false}
 */
declare type old_as_current_for_ClassDeclaration_ConsensusQueueClass = requireAssignableTo<TypeOnly<old.ConsensusQueueClass>, TypeOnly<current.ConsensusQueueClass>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_ConsensusQueueClass": {"backCompat": false}
 */
declare type current_as_old_for_ClassDeclaration_ConsensusQueueClass = requireAssignableTo<TypeOnly<current.ConsensusQueueClass>, TypeOnly<old.ConsensusQueueClass>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_ConsensusQueueFactory": {"forwardCompat": false}
 */
declare type old_as_current_for_ClassDeclaration_ConsensusQueueFactory = requireAssignableTo<TypeOnly<old.ConsensusQueueFactory>, TypeOnly<current.ConsensusQueueFactory>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_ConsensusQueueFactory": {"backCompat": false}
 */
declare type current_as_old_for_ClassDeclaration_ConsensusQueueFactory = requireAssignableTo<TypeOnly<current.ConsensusQueueFactory>, TypeOnly<old.ConsensusQueueFactory>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "EnumDeclaration_ConsensusResult": {"forwardCompat": false}
 */
declare type old_as_current_for_EnumDeclaration_ConsensusResult = requireAssignableTo<TypeOnly<old.ConsensusResult>, TypeOnly<current.ConsensusResult>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "EnumDeclaration_ConsensusResult": {"backCompat": false}
 */
declare type current_as_old_for_EnumDeclaration_ConsensusResult = requireAssignableTo<TypeOnly<current.ConsensusResult>, TypeOnly<old.ConsensusResult>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IConsensusOrderedCollection": {"forwardCompat": false}
 */
declare type old_as_current_for_InterfaceDeclaration_IConsensusOrderedCollection = requireAssignableTo<TypeOnly<old.IConsensusOrderedCollection>, TypeOnly<current.IConsensusOrderedCollection>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IConsensusOrderedCollection": {"backCompat": false}
 */
declare type current_as_old_for_InterfaceDeclaration_IConsensusOrderedCollection = requireAssignableTo<TypeOnly<current.IConsensusOrderedCollection>, TypeOnly<old.IConsensusOrderedCollection>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IConsensusOrderedCollectionEvents": {"forwardCompat": false}
 */
declare type old_as_current_for_InterfaceDeclaration_IConsensusOrderedCollectionEvents = requireAssignableTo<TypeOnly<old.IConsensusOrderedCollectionEvents<any>>, TypeOnly<current.IConsensusOrderedCollectionEvents<any>>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IConsensusOrderedCollectionEvents": {"backCompat": false}
 */
declare type current_as_old_for_InterfaceDeclaration_IConsensusOrderedCollectionEvents = requireAssignableTo<TypeOnly<current.IConsensusOrderedCollectionEvents<any>>, TypeOnly<old.IConsensusOrderedCollectionEvents<any>>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IConsensusOrderedCollectionFactory": {"forwardCompat": false}
 */
declare type old_as_current_for_InterfaceDeclaration_IConsensusOrderedCollectionFactory = requireAssignableTo<TypeOnly<old.IConsensusOrderedCollectionFactory>, TypeOnly<current.IConsensusOrderedCollectionFactory>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IConsensusOrderedCollectionFactory": {"backCompat": false}
 */
declare type current_as_old_for_InterfaceDeclaration_IConsensusOrderedCollectionFactory = requireAssignableTo<TypeOnly<current.IConsensusOrderedCollectionFactory>, TypeOnly<old.IConsensusOrderedCollectionFactory>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IOrderedCollection": {"forwardCompat": false}
 */
declare type old_as_current_for_InterfaceDeclaration_IOrderedCollection = requireAssignableTo<TypeOnly<old.IOrderedCollection>, TypeOnly<current.IOrderedCollection>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IOrderedCollection": {"backCompat": false}
 */
declare type current_as_old_for_InterfaceDeclaration_IOrderedCollection = requireAssignableTo<TypeOnly<current.IOrderedCollection>, TypeOnly<old.IOrderedCollection>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISnapshotable": {"forwardCompat": false}
 */
declare type old_as_current_for_InterfaceDeclaration_ISnapshotable = requireAssignableTo<TypeOnly<old.ISnapshotable<any>>, TypeOnly<current.ISnapshotable<any>>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISnapshotable": {"backCompat": false}
 */
declare type current_as_old_for_InterfaceDeclaration_ISnapshotable = requireAssignableTo<TypeOnly<current.ISnapshotable<any>>, TypeOnly<old.ISnapshotable<any>>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_acquireAndComplete": {"forwardCompat": false}
 */
declare type old_as_current_for_FunctionDeclaration_acquireAndComplete = requireAssignableTo<TypeOnly<typeof old.acquireAndComplete>, TypeOnly<typeof current.acquireAndComplete>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_acquireAndComplete": {"backCompat": false}
 */
declare type current_as_old_for_FunctionDeclaration_acquireAndComplete = requireAssignableTo<TypeOnly<typeof current.acquireAndComplete>, TypeOnly<typeof old.acquireAndComplete>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_waitAcquireAndComplete": {"forwardCompat": false}
 */
declare type old_as_current_for_FunctionDeclaration_waitAcquireAndComplete = requireAssignableTo<TypeOnly<typeof old.waitAcquireAndComplete>, TypeOnly<typeof current.waitAcquireAndComplete>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_waitAcquireAndComplete": {"backCompat": false}
 */
declare type current_as_old_for_FunctionDeclaration_waitAcquireAndComplete = requireAssignableTo<TypeOnly<typeof current.waitAcquireAndComplete>, TypeOnly<typeof old.waitAcquireAndComplete>>
