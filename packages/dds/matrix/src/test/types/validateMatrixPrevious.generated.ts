/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType, requireAssignableTo } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/matrix-previous/internal";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current | requireAssignableTo<true, true>;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_SharedMatrixFactory": {"forwardCompat": false}
 */
declare type old_as_current_for_Class_SharedMatrixFactory = requireAssignableTo<TypeOnly<old.SharedMatrixFactory>, TypeOnly<current.SharedMatrixFactory>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_SharedMatrixFactory": {"backCompat": false}
 */
declare type current_as_old_for_Class_SharedMatrixFactory = requireAssignableTo<TypeOnly<current.SharedMatrixFactory>, TypeOnly<old.SharedMatrixFactory>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_SharedMatrixFactory": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_SharedMatrixFactory = requireAssignableTo<TypeOnly<typeof current.SharedMatrixFactory>, TypeOnly<typeof old.SharedMatrixFactory>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IRevertible": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IRevertible = requireAssignableTo<TypeOnly<old.IRevertible>, TypeOnly<current.IRevertible>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IRevertible": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IRevertible = requireAssignableTo<TypeOnly<current.IRevertible>, TypeOnly<old.IRevertible>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ISharedMatrix": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ISharedMatrix = requireAssignableTo<TypeOnly<old.ISharedMatrix>, TypeOnly<current.ISharedMatrix>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ISharedMatrix": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ISharedMatrix = requireAssignableTo<TypeOnly<current.ISharedMatrix>, TypeOnly<old.ISharedMatrix>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ISharedMatrixEvents": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ISharedMatrixEvents = requireAssignableTo<TypeOnly<old.ISharedMatrixEvents<any>>, TypeOnly<current.ISharedMatrixEvents<any>>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ISharedMatrixEvents": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ISharedMatrixEvents = requireAssignableTo<TypeOnly<current.ISharedMatrixEvents<any>>, TypeOnly<old.ISharedMatrixEvents<any>>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IUndoConsumer": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IUndoConsumer = requireAssignableTo<TypeOnly<old.IUndoConsumer>, TypeOnly<current.IUndoConsumer>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IUndoConsumer": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IUndoConsumer = requireAssignableTo<TypeOnly<current.IUndoConsumer>, TypeOnly<old.IUndoConsumer>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_MatrixItem": {"forwardCompat": false}
 */
declare type old_as_current_for_TypeAlias_MatrixItem = requireAssignableTo<TypeOnly<old.MatrixItem<any>>, TypeOnly<current.MatrixItem<any>>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_MatrixItem": {"backCompat": false}
 */
declare type current_as_old_for_TypeAlias_MatrixItem = requireAssignableTo<TypeOnly<current.MatrixItem<any>>, TypeOnly<old.MatrixItem<any>>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_SharedMatrix": {"forwardCompat": false}
 */
declare type old_as_current_for_TypeAlias_SharedMatrix = requireAssignableTo<TypeOnly<old.SharedMatrix>, TypeOnly<current.SharedMatrix>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_SharedMatrix": {"backCompat": false}
 */
declare type current_as_old_for_TypeAlias_SharedMatrix = requireAssignableTo<TypeOnly<current.SharedMatrix>, TypeOnly<old.SharedMatrix>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Variable_SharedMatrix": {"backCompat": false}
 */
declare type current_as_old_for_Variable_SharedMatrix = requireAssignableTo<TypeOnly<typeof current.SharedMatrix>, TypeOnly<typeof old.SharedMatrix>>
