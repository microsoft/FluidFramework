{"version":3,"file":"odspPersistantCache.js","sourceRoot":"","sources":["odspPersistantCache.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;AAIH,MAAa,mBAAmB;IAG5B;QAFiB,UAAK,GAAG,IAAI,GAAG,EAAe,CAAC;IAE1B,CAAC;IAEvB,KAAK,CAAC,GAAG,CAAC,KAAkB;QACxB,+DAA+D;QAC/D,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IACpD,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,KAAkB,EAAE,KAAU;QACpC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;IACpD,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,IAAgB,IAAkB,CAAC;IAE/C,YAAY,CAAC,KAAkB;QACnC,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,GAAG,EAAE,CAAC;IAC5D,CAAC;CACJ;AAnBD,kDAmBC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICacheEntry, IFileEntry, IPersistedCache } from \"@fluidframework/odsp-driver-definitions\";\n\nexport class OdspPersistentCache implements IPersistedCache {\n    private readonly cache = new Map<string, any>();\n\n    public constructor() {}\n\n    async get(entry: ICacheEntry): Promise<any> {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return this.cache.get(this.keyFromEntry(entry));\n    }\n\n    async put(entry: ICacheEntry, value: any) {\n        this.cache.set(this.keyFromEntry(entry), value);\n    }\n\n    async removeEntries(file: IFileEntry): Promise<void> {}\n\n    private keyFromEntry(entry: ICacheEntry): string {\n        return `${entry.file.docId}_${entry.type}_${entry.key}`;\n    }\n}\n"]}