{"version":3,"file":"multiResolver.js","sourceRoot":"","sources":["multiResolver.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { IResolvedUrl, IUrlResolver } from \"@fluidframework/driver-definitions\";\nimport { IRequest } from \"@fluidframework/core-interfaces\";\nimport { LocalResolver } from \"@fluidframework/local-driver\";\nimport { InsecureUrlResolver } from \"@fluidframework/test-runtime-utils\";\nimport { ITinyliciousRouteOptions, RouteOptions } from \"./loader\";\nimport { OdspUrlResolver } from \"./odspUrlResolver\";\n\nexport const dockerUrls = {\n    hostUrl: \"http://localhost:3000\",\n    ordererUrl: \"http://localhost:3003\",\n    storageUrl: \"http://localhost:3001\",\n};\n\nconst defaultTinyliciousPort = 7070;\n\nexport const tinyliciousUrls = (options: ITinyliciousRouteOptions) => {\n    const port = options.tinyliciousPort ?? defaultTinyliciousPort;\n\n    return {\n        hostUrl: `http://localhost:${port}`,\n        ordererUrl: `http://localhost:${port}`,\n        storageUrl: `http://localhost:${port}`,\n    };\n};\n\nfunction getUrlResolver(options: RouteOptions): IUrlResolver {\n    switch (options.mode) {\n        case \"docker\":\n            return new InsecureUrlResolver(\n                dockerUrls.hostUrl,\n                dockerUrls.ordererUrl,\n                dockerUrls.storageUrl,\n                options.tenantId,\n                options.bearerSecret);\n\n        case \"r11s\":\n            return new InsecureUrlResolver(\n                options.fluidHost,\n                options.fluidHost.replace(\"www\", \"alfred\"),\n                options.fluidHost.replace(\"www\", \"historian\"),\n                options.tenantId,\n                options.bearerSecret);\n        case \"tinylicious\": {\n            const urls = tinyliciousUrls(options);\n            return new InsecureUrlResolver(\n                urls.hostUrl,\n                urls.ordererUrl,\n                urls.storageUrl,\n                \"tinylicious\",\n                options.bearerSecret);\n        }\n        case \"spo\":\n        case \"spo-df\":\n            return new OdspUrlResolver(\n                options.server,\n                { accessToken: options.odspAccessToken });\n\n        default: // Local\n            return new LocalResolver();\n    }\n}\n\nexport class MultiUrlResolver implements IUrlResolver {\n    private readonly urlResolver: IUrlResolver;\n    constructor(\n        private readonly documentId: string,\n        private readonly rawUrl: string,\n        private readonly options: RouteOptions,\n        private readonly useLocalResolver: boolean = false,\n    ) {\n        if (this.useLocalResolver) {\n            this.urlResolver = new LocalResolver();\n        } else {\n            this.urlResolver = getUrlResolver(options);\n        }\n    }\n\n    async getAbsoluteUrl(resolvedUrl: IResolvedUrl, relativeUrl: string): Promise<string> {\n        let url = relativeUrl;\n        if (url.startsWith(\"/\")) {\n            url = url.substr(1);\n        }\n        return `${this.rawUrl}/${this.documentId}/${url}`;\n    }\n\n    async resolve(request: IRequest): Promise<IResolvedUrl | undefined> {\n        return this.urlResolver.resolve(request);\n    }\n\n    public async createRequestForCreateNew(\n        fileName: string,\n    ): Promise<IRequest> {\n        if (this.useLocalResolver) {\n            return (this.urlResolver as LocalResolver).createCreateNewRequest(fileName);\n        }\n        switch (this.options.mode) {\n            case \"r11s\":\n            case \"docker\":\n            case \"tinylicious\":\n                return (this.urlResolver as InsecureUrlResolver).createCreateNewRequest(fileName);\n\n            case \"spo\":\n            case \"spo-df\":\n                return (this.urlResolver as OdspUrlResolver).createCreateNewRequest(fileName);\n\n            default: // Local\n                return (this.urlResolver as LocalResolver).createCreateNewRequest(fileName);\n        }\n    }\n}\n"]}