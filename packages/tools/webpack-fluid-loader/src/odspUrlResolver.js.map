{"version":3,"file":"odspUrlResolver.js","sourceRoot":"","sources":["odspUrlResolver.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;AAIH,yEAG2C;AAC3C,6DAAmF;AAEnF,MAAa,eAAe;IAGxB,YACqB,MAAc,EACd,eAAqC;QADrC,WAAM,GAAN,MAAM,CAAQ;QACd,oBAAe,GAAf,eAAe,CAAsB;QAJzC,sBAAiB,GAAG,IAAI,mCAAqB,EAAE,CAAC;IAK7D,CAAC;IAEE,KAAK,CAAC,OAAO,CAAC,OAAiB;QAClC,IAAI;YACA,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAClE,OAAO,WAAW,CAAC;SACtB;QAAC,OAAO,KAAK,EAAE,GAAG;QAEnB,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAEjC,MAAM,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,UAAU,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1C,MAAM,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC5D,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QAE/C,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,MAAM,8CAA0B,CACxD,IAAI,CAAC,MAAM,EACX,EAAE,EACF,QAAQ,EACR,IAAI,CAAC,eAAe,EACpB,IAAI,CAAC,CAAC;QAEV,MAAM,OAAO,GAAG,2BAAa,CAAC;YAC1B,OAAO,EAAC,WAAW,IAAI,CAAC,MAAM,EAAE;YAChC,OAAO;YACP,MAAM;YACN,aAAa;SAChB,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;IACtF,CAAC;IAEO,YAAY,CAAC,UAAkB;QACnC,MAAM,OAAO,GAAG,kBAAkB,CAAC,GAAG,UAAU,QAAQ,CAAC,CAAC;QAC1D,OAAO,SAAS,OAAO,EAAE,CAAC;IAC9B,CAAC;IAEM,KAAK,CAAC,cAAc,CAAC,WAAyB,EAAE,WAAmB;QACtE,OAAO,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IAC3E,CAAC;IAEM,KAAK,CAAC,sBAAsB,CAAC,QAAgB;QAChD,MAAM,QAAQ,GAAG,QAAQ,CAAC;QAC1B,MAAM,SAAS,GAAG,MAAM,8CAA0B,CAC9C,IAAI,CAAC,MAAM,EACX,EAAE,EACF,QAAQ,EACR,IAAI,CAAC,eAAe,EACpB,KAAK,CAAC,CAAC;QACX,OAAO,IAAI,CAAC,iBAAiB,CAAC,sBAAsB,CAChD,WAAW,IAAI,CAAC,MAAM,EAAE,EAAE,SAAS,CAAC,OAAO,EAAE,QAAQ,EAAE,GAAG,QAAQ,QAAQ,CAAC,CAAC;IACpF,CAAC;CACJ;AA1DD,0CA0DC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { IRequest } from \"@fluidframework/core-interfaces\";\nimport { IUrlResolver, IResolvedUrl } from \"@fluidframework/driver-definitions\";\nimport {\n    IOdspAuthRequestInfo,\n    getDriveItemByRootFileName,\n} from \"@fluidframework/odsp-doclib-utils\";\nimport { OdspDriverUrlResolver, createOdspUrl } from \"@fluidframework/odsp-driver\";\n\nexport class OdspUrlResolver implements IUrlResolver {\n    private readonly driverUrlResolver = new OdspDriverUrlResolver();\n\n    constructor(\n        private readonly server: string,\n        private readonly authRequestInfo: IOdspAuthRequestInfo,\n    ) { }\n\n    public async resolve(request: IRequest): Promise<IResolvedUrl> {\n        try {\n            const resolvedUrl = await this.driverUrlResolver.resolve(request);\n            return resolvedUrl;\n        } catch (error) { }\n\n        const url = new URL(request.url);\n\n        const fullPath = url.pathname.substr(1);\n        const documentId = fullPath.split(\"/\")[0];\n        const dataStorePath = fullPath.slice(documentId.length + 1);\n        const filePath = this.formFilePath(documentId);\n\n        const { driveId, itemId } = await getDriveItemByRootFileName(\n            this.server,\n            \"\",\n            filePath,\n            this.authRequestInfo,\n            true);\n\n        const odspUrl = createOdspUrl({\n            siteUrl:`https://${this.server}`,\n            driveId,\n            itemId,\n            dataStorePath,\n        });\n\n        return this.driverUrlResolver.resolve({ url: odspUrl, headers: request.headers });\n    }\n\n    private formFilePath(documentId: string): string {\n        const encoded = encodeURIComponent(`${documentId}.fluid`);\n        return `/r11s/${encoded}`;\n    }\n\n    public async getAbsoluteUrl(resolvedUrl: IResolvedUrl, relativeUrl: string): Promise<string> {\n        return this.driverUrlResolver.getAbsoluteUrl(resolvedUrl, relativeUrl);\n    }\n\n    public async createCreateNewRequest(fileName: string): Promise<IRequest> {\n        const filePath = \"/r11s/\";\n        const driveItem = await getDriveItemByRootFileName(\n            this.server,\n            \"\",\n            filePath,\n            this.authRequestInfo,\n            false);\n        return this.driverUrlResolver.createCreateNewRequest(\n            `https://${this.server}`, driveItem.driveId, filePath, `${fileName}.fluid`);\n    }\n}\n"]}