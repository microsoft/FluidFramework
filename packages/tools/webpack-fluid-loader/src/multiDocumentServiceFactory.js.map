{"version":3,"file":"multiDocumentServiceFactory.js","sourceRoot":"","sources":["multiDocumentServiceFactory.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;AAEH,6EAA8G;AAC9G,+DAA2E;AAC3E,+DAAyG;AACzG,6DAAyE;AAEzE,+EAA2F;AAC3F,mFAAuE;AACvE,2EAA2E;AAC3E,+BAAkC;AAGrB,QAAA,UAAU,GAAG,IAAI,GAAG,EAAuC,CAAC;AAEzE,SAAgB,yBAAyB,CACrC,UAAkB,EAClB,OAAqB,EACrB,mBAAoC;;IAEpC,MAAM,SAAS,SAAG,kBAAU,CAAC,GAAG,CAAC,UAAU,CAAC,mCACxC,gDAA0B,CAAC,MAAM,CAAC,IAAI,2CAA4B,CAAC,UAAU,CAAC,CAAC,CAAC;IACpF,kBAAU,CAAC,GAAG,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;IAEtC,MAAM,OAAO,GAAG,GAAmB,EAAE,CAAC,CAAC;QACnC,EAAE,EAAE,SAAI,EAAE;QACV,IAAI,EAAE,sCAAa,EAAE;KACxB,CAAC,CAAC;IAEH,IAAI,0BAAiD,CAAC;IACtD,gGAAgG;IAChG,IAAI,OAAO,CAAC,IAAI,KAAK,aAAa,EAAE;QAChC,0BAA0B,GAAG,IAAI,0CAAqB,CAClD,OAAO,EACP,OAAO,EAAE,CAAC,CAAC;KAClB;SACI;QACD,0BAA0B,GAAG,IAAI,0CAAqB,CACjD,OAAsC,CAAC,YAAY,EACpD,OAAO,EAAE,CAAC,CAAC;KAClB;IAED,OAAO,0CAA2B,CAAC,MAAM,CAAC;QACtC,IAAI,0CAA2B,CAAC,SAAS,CAAC;QAC1C,yBAAyB;QACzB,IAAI,wCAA0B,CAC1B,KAAK,IAAI,EAAE,CAAC,OAAO,CAAC,IAAI,KAAK,KAAK,IAAI,OAAO,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,SAAS,EACrG,KAAK,IAAI,EAAE,CAAC,OAAO,CAAC,IAAI,KAAK,KAAK,IAAI,OAAO,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,SAAS,EACrG,mBAAmB,CACtB;QACD,IAAI,0DAAmC,CAAC,0BAA0B,CAAC;KACtE,CAAC,CAAC;AACP,CAAC;AArCD,8DAqCC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ILocalDeltaConnectionServer, LocalDeltaConnectionServer } from \"@fluidframework/server-local-server\";\nimport { MultiDocumentServiceFactory } from \"@fluidframework/driver-utils\";\nimport { LocalDocumentServiceFactory, LocalSessionStorageDbFactory } from \"@fluidframework/local-driver\";\nimport { OdspDocumentServiceFactory } from \"@fluidframework/odsp-driver\";\nimport { IPersistedCache } from \"@fluidframework/odsp-driver-definitions\";\nimport { RouterliciousDocumentServiceFactory } from \"@fluidframework/routerlicious-driver\";\nimport { getRandomName } from \"@fluidframework/server-services-client\";\nimport { InsecureTokenProvider } from \"@fluidframework/test-runtime-utils\";\nimport { v4 as uuid } from \"uuid\";\nimport { IDevServerUser, IRouterliciousRouteOptions, RouteOptions } from \"./loader\";\n\nexport const deltaConns = new Map<string, ILocalDeltaConnectionServer>();\n\nexport function getDocumentServiceFactory(\n    documentId: string,\n    options: RouteOptions,\n    odspPersistantCache: IPersistedCache,\n) {\n    const deltaConn = deltaConns.get(documentId) ??\n        LocalDeltaConnectionServer.create(new LocalSessionStorageDbFactory(documentId));\n    deltaConns.set(documentId, deltaConn);\n\n    const getUser = (): IDevServerUser => ({\n        id: uuid(),\n        name: getRandomName(),\n    });\n\n    let routerliciousTokenProvider: InsecureTokenProvider;\n    // tokenprovider and routerlicious document service will not be called for local and spo server.\n    if (options.mode === \"tinylicious\") {\n        routerliciousTokenProvider = new InsecureTokenProvider(\n            \"12345\",\n            getUser());\n    }\n    else {\n        routerliciousTokenProvider = new InsecureTokenProvider(\n            (options as IRouterliciousRouteOptions).tenantSecret,\n            getUser());\n    }\n\n    return MultiDocumentServiceFactory.create([\n        new LocalDocumentServiceFactory(deltaConn),\n        // TODO: web socket token\n        new OdspDocumentServiceFactory(\n            async () => options.mode === \"spo\" || options.mode === \"spo-df\" ? options.odspAccessToken : undefined,\n            async () => options.mode === \"spo\" || options.mode === \"spo-df\" ? options.pushAccessToken : undefined,\n            odspPersistantCache,\n        ),\n        new RouterliciousDocumentServiceFactory(routerliciousTokenProvider),\n    ]);\n}\n"]}