{"version":3,"file":"fluidAnalyzeMessages.js","sourceRoot":"","sources":["../src/fluidAnalyzeMessages.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { assert } from \"@fluidframework/common-utils\";\nimport {\n    ISequencedDocumentMessage,\n    ISummaryProposal,\n    MessageType,\n    TreeEntry,\n} from \"@fluidframework/protocol-definitions\";\nimport { IAttachMessage, IEnvelope } from \"@fluidframework/runtime-definitions\";\nimport {\n    ContainerMessageType,\n    isRuntimeMessage,\n    unpackRuntimeMessage,\n} from \"@fluidframework/container-runtime\";\nimport { DataStoreMessageType } from \"@fluidframework/datastore\";\n\nconst noClientName = \"No Client\";\nconst objectTypePrefix = \"https://graph.microsoft.com/types/\";\n\nfunction incr(map: Map<string, [number, number]>, key: string, size: number) {\n    const value = map.get(key);\n    if (value === undefined) {\n        map.set(key, [1, size]);\n    } else {\n        value[0]++;\n        value[1] += size;\n        map.set(key, value);\n    }\n}\n\ninterface ISessionInfo {\n    startSeq: number;\n    opCount: number;\n    email: string;\n    duration: number;\n}\n\ninterface IMessageAnalyzer {\n    processOp(op: ISequencedDocumentMessage, msgSize: number, filteredOutOp: boolean): void;\n    reportAnalyzes(lastOp: ISequencedDocumentMessage): void;\n}\n\n/**\n * Helper class to track session statistics\n */\nclass ActiveSession {\n    public static create(email: string, message: ISequencedDocumentMessage) {\n        return new ActiveSession(email, message);\n    }\n\n    private opCount = 0;\n\n    constructor(private readonly email: string, private readonly startMessage: ISequencedDocumentMessage) {\n    }\n\n    public reportOp(timestamp: number) {\n        this.opCount++;\n    }\n\n    public leave(timestamp: number): ISessionInfo {\n        return {\n            opCount: this.opCount,\n            email: this.email,\n            startSeq: this.startMessage.sequenceNumber,\n            duration: timestamp - this.startMessage.timestamp,\n        };\n    }\n}\n\n// Format a number separating 3 digits by comma\n// eslint-disable-next-line unicorn/no-unsafe-regex\nexport const formatNumber = (num: number): string => num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\nfunction dumpStats(\n    map: Map<string, [number, number]>,\n    props: {\n        title: string;\n        headers: [string, string];\n        lines?: number;\n        orderByFirstColumn?: boolean;\n        reverseColumnsInUI?: boolean;\n        removeTotals?: boolean;\n        reverseSort?: boolean;\n    }) {\n    const fieldSizes = [10, 14];\n    const nameLength = 72;\n    const fieldsLength = fieldSizes[0] + fieldSizes[1] + 1;\n    let headers = props.headers;\n\n    let recordsToShow = props.lines ? props.lines : 10;\n    if (map.size !== recordsToShow && !props.removeTotals && recordsToShow > 1) {\n        recordsToShow--;\n    }\n\n    let sorted: [string, [number, number]][];\n    const sortIndex = props.orderByFirstColumn ? 0 : 1;\n    let add: string;\n    if (props.reverseSort) {\n        sorted = [...map.entries()].sort((a, b) => a[1][sortIndex] - b[1][sortIndex]);\n        add = \"↑\";\n    } else {\n        sorted = [...map.entries()].sort((a, b) => b[1][sortIndex] - a[1][sortIndex]);\n        add = \"↓\";\n    }\n    headers[sortIndex] = `${headers[sortIndex]} ${add}`;\n\n    if (props.reverseColumnsInUI) {\n        headers = [headers[1], headers[0]];\n        const sorted2: [string, [number, number]][] = [];\n        for (const [name, [count, size]] of sorted) {\n            sorted2.push([name, [size, count]]);\n        }\n        sorted = sorted2;\n    }\n\n    let totalCount = 0;\n    let sizeTotal = 0;\n\n    props.title = `${props.title} (${sorted.length})`;\n    const header0 = headers[0].padStart(fieldSizes[0]);\n    let overflow = header0.length - fieldSizes[0];\n    console.log(`\\n\\n${props.title.padEnd(nameLength)} │ ${header0} ${headers[1].padStart(fieldSizes[1] - overflow)}`);\n\n    console.log(`${\"─\".repeat(nameLength + 1)}┼${\"─\".repeat(fieldsLength + 1)}`);\n    let index = 0;\n    let allOtherCount = 0;\n    let allOtherSize = 0;\n    for (const [name, [count, size]] of sorted) {\n        index++;\n        totalCount += count;\n        sizeTotal += size;\n        if (index <= recordsToShow) {\n            const item = name.padEnd(nameLength);\n            overflow = item.length - nameLength;\n            const col1 = formatNumber(count).padStart(fieldSizes[0] - overflow);\n            overflow += col1.length - fieldSizes[0];\n            const col2 = formatNumber(size).padStart(fieldSizes[1] - overflow);\n            console.log(`${item} │ ${col1} ${col2}`);\n        } else {\n            allOtherCount += count;\n            allOtherSize += size;\n        }\n    }\n\n    if (!props.removeTotals) {\n        if (allOtherCount || allOtherSize) {\n            // eslint-disable-next-line max-len\n            console.log(`${`All Others (${sorted.length - recordsToShow})`.padEnd(nameLength)} │ ${formatNumber(allOtherCount).padStart(fieldSizes[0])} ${formatNumber(allOtherSize).padStart(fieldSizes[1])}`);\n        }\n        console.log(`${\"─\".repeat(nameLength + 1)}┼${\"─\".repeat(fieldsLength + 1)}`);\n        // eslint-disable-next-line max-len\n        console.log(`${\"Total\".padEnd(nameLength)} │ ${formatNumber(totalCount).padStart(fieldSizes[0])} ${formatNumber(sizeTotal).padStart(fieldSizes[1])}`);\n    }\n}\n\nconst getObjectId = (dataStoreId: string, id: string) => `[${dataStoreId}]/${id}`;\n\n/**\n * Analyzer for sessions\n */\nclass SessionAnalyzer implements IMessageAnalyzer {\n    private readonly sessionsInProgress = new Map<string, ActiveSession>();\n    private readonly sessions = new Map<string, [number, number]>();\n    private readonly users = new Map<string, [number, number]>();\n\n    private first = true;\n\n    public processOp(message: ISequencedDocumentMessage, msgSize: number, skipMessage: boolean): void {\n        if (this.first) {\n            this.first = false;\n            // Start of the road.\n            const noNameSession = ActiveSession.create(noClientName, message);\n            this.sessionsInProgress.set(noClientName, noNameSession);\n        }\n        const session = processQuorumMessages(\n            message,\n            skipMessage,\n            this.sessionsInProgress,\n            this.sessions,\n            this.users);\n        if (!skipMessage && session) {\n            session.reportOp(message.timestamp);\n        }\n    }\n\n    public reportAnalyzes(lastOp: ISequencedDocumentMessage): void {\n        // Close any open sessions\n        reportOpenSessions(\n            lastOp.timestamp,\n            this.sessionsInProgress,\n            this.sessions,\n            this.users);\n        dumpStats(this.users, {\n            title: \"Users\",\n            headers: [\"Sessions\", \"Op count\"],\n            reverseColumnsInUI: true,\n            lines: 6,\n        });\n        dumpStats(this.sessions, {\n            title: \"Sessions\",\n            headers: [\"Duration(s)\", \"Op count\"],\n            reverseColumnsInUI: true,\n            lines: 6,\n        });\n        dumpStats(this.sessions, {\n            title: \"Sessions\",\n            headers: [\"Duration(s)\", \"Op count\"],\n            orderByFirstColumn: true,\n            reverseColumnsInUI: true,\n            removeTotals: true,\n            lines: 5,\n        });\n    }\n}\n\n/**\n * Analyzer for data structures\n */\nclass DataStructureAnalyzer implements IMessageAnalyzer {\n    private readonly messageTypeStats = new Map<string, [number, number]>();\n    private readonly dataType = new Map<string, string>();\n    private readonly dataTypeStats = new Map<string, [number, number]>();\n    private readonly objectStats = new Map<string, [number, number]>();\n\n    public processOp(message: ISequencedDocumentMessage, msgSize: number, skipMessage: boolean): void {\n        if (!skipMessage) {\n            processOp(\n                message,\n                this.dataType,\n                this.objectStats,\n                msgSize,\n                this.dataTypeStats,\n                this.messageTypeStats);\n        }\n    }\n\n    public reportAnalyzes(lastOp: ISequencedDocumentMessage): void {\n        dumpStats(this.messageTypeStats, {\n            title: \"Message Type\",\n            headers: [\"Op count\", \"Bytes\"],\n            lines: 20,\n        });\n        dumpStats(calcChannelStats(this.dataType, this.objectStats), {\n            title: \"Channel name\",\n            headers: [\"Op count\", \"Bytes\"],\n            lines: 7,\n        });\n        /*\n        dumpStats(this.dataTypeStats, {\n            title: \"Channel type\",\n            headers: [\"Op count\", \"Bytes\"],\n        });\n        */\n    }\n}\n\n/**\n * Helper class to report if we filtered out any messages.\n */\nclass FilteredMessageAnalyzer implements IMessageAnalyzer {\n    private sizeTotal = 0;\n    private opsTotal = 0;\n    private sizeFiltered = 0;\n    private opsFiltered = 0;\n    private filtered = false;\n\n    public processOp(message: ISequencedDocumentMessage, msgSize: number, skipMessage: boolean): void {\n        this.sizeTotal += msgSize;\n        this.opsTotal++;\n        if (!skipMessage) {\n            this.sizeFiltered += msgSize;\n            this.opsFiltered++;\n        } else {\n            this.filtered = true;\n        }\n    }\n\n    public reportAnalyzes(lastOp: ISequencedDocumentMessage): void {\n        if (this.filtered) {\n            // eslint-disable-next-line max-len\n            console.log(`\\nData is filtered according to --filter:messageType argument(s):\\nOp size: ${this.sizeFiltered} / ${this.sizeTotal}\\nOp count ${this.opsFiltered} / ${this.opsTotal}`);\n        }\n        if (this.opsTotal === 0) {\n            console.error(\"No ops were found\");\n        }\n    }\n}\n\n/**\n * Helper class to find places where we generated too many ops\n */\nclass MessageDensityAnalyzer implements IMessageAnalyzer {\n    private readonly opChunk = 1000;\n    private opLimit = 1;\n    private size = 0;\n    private timeStart = 0;\n    private doctimerStart = 0;\n    private readonly ranges = new Map<string, [number, number]>();\n\n    public processOp(message: ISequencedDocumentMessage, msgSize: number, skipMessage: boolean): void {\n        if (message.sequenceNumber >= this.opLimit) {\n            if (message.sequenceNumber !== 1) {\n                const timeDiff = durationFromTime(message.timestamp - this.timeStart);\n                const opsString = `ops = [${this.opLimit - this.opChunk}, ${this.opLimit - 1}]`.padEnd(26);\n                // eslint-disable-next-line max-len\n                const timeString = `time = [${durationFromTime(this.timeStart - this.doctimerStart)}, ${durationFromTime(message.timestamp - this.doctimerStart)}]`;\n                this.ranges.set(\n                    `${opsString} ${timeString}`,\n                    [timeDiff, this.size]);\n            } else {\n                this.doctimerStart = message.timestamp;\n            }\n            this.opLimit += this.opChunk;\n            this.size = 0;\n            this.timeStart = message.timestamp;\n        }\n        if (!skipMessage) {\n            this.size += msgSize;\n        }\n    }\n\n    public reportAnalyzes(lastOp: ISequencedDocumentMessage): void {\n        dumpStats(this.ranges, {\n            title: \"Fastest 1000 op ranges\",\n            headers: [\"Duration(s)\", \"Bytes\"],\n            orderByFirstColumn: true,\n            reverseSort: true,\n            removeTotals: true,\n            lines: 3,\n        });\n    }\n}\n\n/**\n * Helper class to analyze collab window size\n */\nclass CollabWindowSizeAnalyzer implements IMessageAnalyzer {\n    private maxCollabWindow = 0;\n    private opSeq = 0;\n\n    public processOp(message: ISequencedDocumentMessage, msgSize: number, skipMessage: boolean): void {\n        const value = message.sequenceNumber - message.minimumSequenceNumber;\n        if (value > this.maxCollabWindow) {\n            this.maxCollabWindow = value;\n            this.opSeq = message.sequenceNumber;\n        }\n    }\n\n    public reportAnalyzes(lastOp: ISequencedDocumentMessage): void {\n        console.log(`\\nMaximum collab window size: ${this.maxCollabWindow}, seq# ${this.opSeq}`);\n    }\n}\n\n/**\n * Helper class to analyze frequency of summaries\n */\nclass SummaryAnalyzer implements IMessageAnalyzer {\n    private lastSummaryOp = 0;\n    private maxDistance = 0;\n    private maxSeq = 0;\n    private minDistance = Number.MAX_SAFE_INTEGER;\n    private minSeq = 0;\n    private maxResponse = 0;\n    private maxResponseSeq = 0;\n\n    public processOp(message: ISequencedDocumentMessage, msgSize: number, skipMessage: boolean): void {\n        if (message.type === MessageType.SummaryAck) {\n            const distance = message.sequenceNumber - this.lastSummaryOp - 1;\n            if (this.maxDistance < distance) {\n                this.maxDistance = distance;\n                this.maxSeq = message.sequenceNumber;\n            }\n            if (this.minDistance > distance) {\n                this.minDistance = distance;\n                this.minSeq = message.sequenceNumber;\n            }\n\n            this.lastSummaryOp = message.sequenceNumber;\n        }\n        if (message.type === MessageType.SummaryAck || message.type === MessageType.SummaryNack) {\n            const contents: ISummaryProposal = message.contents.summaryProposal;\n            const distance = message.sequenceNumber - contents.summarySequenceNumber;\n            if (distance > this.maxResponse) {\n                this.maxResponse = distance;\n                this.maxResponseSeq = message.sequenceNumber;\n            }\n        }\n    }\n\n    public reportAnalyzes(lastOp: ISequencedDocumentMessage): void {\n        const distance = lastOp.sequenceNumber - this.lastSummaryOp;\n        if (this.maxDistance < distance) {\n            this.maxDistance = distance;\n            this.maxSeq = lastOp.sequenceNumber + 1;\n        }\n\n        console.log(\"\");\n        if (this.minDistance === Number.MAX_SAFE_INTEGER) {\n            console.log(\"No summaries found in this document\");\n        } else {\n            console.log(`Maximum distance between summaries: ${this.maxDistance}, seq# ${this.maxSeq}`);\n            console.log(`Maximum server response for summary: ${this.maxResponse}, seq# ${this.maxResponseSeq}`);\n            console.log(`Minimum distance between summaries: ${this.minDistance}, seq# ${this.minSeq}`);\n        }\n    }\n}\n\n/**\n * Helper class to dump messages to console\n */\nclass MessageDumper implements IMessageAnalyzer {\n    public processOp(message: ISequencedDocumentMessage, msgSize: number, skipMessage: boolean): void {\n        if (!skipMessage) {\n            console.log(JSON.stringify(message, undefined, 2));\n        }\n    }\n\n    public reportAnalyzes(lastOp: ISequencedDocumentMessage): void {\n    }\n}\n\nexport async function printMessageStats(\n    generator, // AsyncGenerator<ISequencedDocumentMessage[]>,\n    dumpMessageStats: boolean,\n    dumpMessages: boolean,\n    messageTypeFilter: Set<string> = new Set<string>()) {\n    let lastMessage: ISequencedDocumentMessage | undefined;\n\n    const analyzers: IMessageAnalyzer[] = [\n        new FilteredMessageAnalyzer(), // Should come first\n        new SessionAnalyzer(),\n        new DataStructureAnalyzer(),\n        new MessageDensityAnalyzer(),\n        new CollabWindowSizeAnalyzer(),\n        new SummaryAnalyzer(),\n    ];\n\n    if (dumpMessages) {\n        analyzers.push(new MessageDumper());\n    }\n\n    for await (const messages of generator) {\n        for (const message of (messages as ISequencedDocumentMessage[])) {\n            const msgSize = JSON.stringify(message).length;\n            lastMessage = message;\n\n            const skipMessage = messageTypeFilter.size !== 0 && !messageTypeFilter.has(message.type);\n\n            for (const analyzer of analyzers) {\n                analyzer.processOp(message, msgSize, skipMessage);\n            }\n        }\n    }\n\n    if (lastMessage !== undefined) {\n        if (dumpMessageStats) {\n            for (const analyzer of analyzers) {\n                analyzer.reportAnalyzes(lastMessage);\n            }\n        } else {\n            // Warn about filtered messages\n            analyzers[0].reportAnalyzes(lastMessage);\n        }\n    }\n    console.log(\"\");\n}\n\nfunction processOp(\n    message: ISequencedDocumentMessage,\n    dataType: Map<string, string>,\n    objectStats: Map<string, [number, number]>,\n    msgSize: number,\n    dataTypeStats: Map<string, [number, number]>,\n    messageTypeStats: Map<string, [number, number]>) {\n    let type = message.type;\n    let recorded = false;\n    if (isRuntimeMessage(message)) {\n        const runtimeMessage = unpackRuntimeMessage(message);\n        switch (runtimeMessage.type) {\n            case ContainerMessageType.Attach: {\n                const attachMessage = runtimeMessage.contents as IAttachMessage;\n                processDataStoreAttachOp(attachMessage, dataType);\n                break;\n            }\n            // skip for now because these ops do not have contents\n            case ContainerMessageType.BlobAttach: {\n                break;\n            }\n            default: {\n                let envelope = runtimeMessage.contents as IEnvelope;\n                // TODO: Legacy?\n                if (envelope && typeof envelope === \"string\") {\n                    envelope = JSON.parse(envelope);\n                }\n                const innerContent = envelope.contents as {\n                    content: any;\n                    type: string;\n                };\n                const address = envelope.address;\n                type = `${type}/${innerContent.type}`;\n                switch (innerContent.type) {\n                    case DataStoreMessageType.Attach: {\n                        const attachMessage = innerContent.content as IAttachMessage;\n                        let objectType = attachMessage.type;\n                        if (objectType.startsWith(objectTypePrefix)) {\n                            objectType = objectType.substring(objectTypePrefix.length);\n                        }\n                        dataType.set(getObjectId(address, attachMessage.id), objectType);\n                        break;\n                    }\n                    case DataStoreMessageType.ChannelOp:\n                    default: {\n                        const innerEnvelope = innerContent.content as IEnvelope;\n                        const innerContent2 = innerEnvelope.contents as {\n                            type?: string;\n                            value?: any;\n                        };\n\n                        const objectId = getObjectId(address, innerEnvelope.address);\n                        incr(objectStats, objectId, msgSize);\n                        let objectType = dataType.get(objectId);\n                        if (objectType === undefined) {\n                            // Somehow we do not have data...\n                            dataType.set(objectId, objectId);\n                            objectType = objectId;\n                        }\n                        incr(dataTypeStats, objectType, msgSize);\n                        recorded = true;\n\n                        let subType = innerContent2.type;\n                        if (innerContent2.type === \"set\" &&\n                            typeof innerContent2.value === \"object\" &&\n                            innerContent2.value !== null) {\n                            type = `${type}/${subType}`;\n                            subType = innerContent2.value.type;\n                        } else if (objectType === \"mergeTree\" && subType !== undefined) {\n                            const types = [\"insert\", \"remove\", \"annotate\", \"group\"];\n                            if (types[subType]) {\n                                subType = types[subType];\n                            }\n                        }\n                        if (subType !== undefined) {\n                            type = `${type}/${subType}`;\n                        }\n\n                        type = `${type} (${objectType})`;\n                    }\n                }\n            }\n        }\n    }\n\n    incr(messageTypeStats, type, msgSize);\n    if (!recorded) {\n        // const objectId = `${type} (system)`;\n        const objectId = `(system messages)`;\n        const objectType = objectId;\n        if (dataType.get(objectId) === undefined) {\n            dataType.set(objectId, objectId);\n        }\n        incr(objectStats, objectId, msgSize);\n        incr(dataTypeStats, objectType, msgSize);\n    }\n}\n\nfunction processDataStoreAttachOp(\n    attachMessage: IAttachMessage | string,\n    dataType: Map<string, string>) {\n    // dataType.set(getObjectId(attachMessage.id), attachMessage.type);\n\n    // That's data store, and it brings a bunch of data structures.\n    // Let's try to crack it.\n    let parsedAttachMessage: IAttachMessage;\n    if (typeof attachMessage === \"string\") {\n        parsedAttachMessage = JSON.parse(attachMessage);\n    } else {\n        parsedAttachMessage = attachMessage;\n    }\n    for (const entry of parsedAttachMessage.snapshot.entries) {\n        if (entry.type === TreeEntry.Tree) {\n            for (const entry2 of entry.value.entries) {\n                if (entry2.path === \".attributes\" && entry2.type === TreeEntry.Blob) {\n                    const attrib = JSON.parse(entry2.value.contents);\n                    let objectType = attrib.type;\n                    if (objectType.startsWith(objectTypePrefix)) {\n                        objectType = objectType.substring(objectTypePrefix.length);\n                    }\n                    dataType.set(getObjectId(parsedAttachMessage.id, entry.path), objectType);\n                }\n            }\n        }\n    }\n}\n\nfunction reportOpenSessions(\n    lastOpTimestamp: number,\n    sessionsInProgress: Map<string, ActiveSession>,\n    sessions: Map<string, [number, number]>,\n    users: Map<string, [number, number]>) {\n    const activeSessions = new Map<string, [number, number]>();\n\n    for (const [clientId, ses] of sessionsInProgress) {\n        const sessionInfo = ses.leave(lastOpTimestamp);\n        if (clientId !== noClientName) {\n            const sessionName = `${clientId} (${sessionInfo.email})`;\n            const sessionPayload: [number, number] = [durationFromTime(sessionInfo.duration), sessionInfo.opCount];\n            sessions.set(sessionName, sessionPayload);\n            activeSessions.set(sessionName, sessionPayload);\n        } else {\n            sessions.set(\n                `Full file lifespan (noClient messages)`,\n                [durationFromTime(sessionInfo.duration), sessionInfo.opCount]);\n        }\n        incr(users, sessionInfo.email, sessionInfo.opCount);\n    }\n\n    if (activeSessions.size > 0) {\n        dumpStats(activeSessions, {\n            title: \"Active sessions\",\n            headers: [\"Duration\", \"Op count\"],\n            lines: 6,\n            orderByFirstColumn: true,\n            removeTotals: true,\n        });\n    }\n}\n\nfunction calcChannelStats(dataType: Map<string, string>, objectStats: Map<string, [number, number]>) {\n    const channelStats = new Map<string, [number, number]>();\n    for (const [objectId, type] of dataType) {\n        let value = objectStats.get(objectId);\n        if (value === undefined) {\n            value = [0, 0];\n        }\n        if (type === objectId) {\n            channelStats.set(`${objectId}`, value);\n        } else {\n            channelStats.set(`${objectId} (${type})`, value);\n        }\n    }\n    return channelStats;\n}\n\nfunction processQuorumMessages(\n    message: ISequencedDocumentMessage,\n    skipMessage: boolean,\n    sessionsInProgress: Map<string, ActiveSession>,\n    sessions: Map<string, [number, number]>,\n    users: Map<string, [number, number]>) {\n    let session: ActiveSession | undefined;\n    const dataString = (message as any).data;\n    if (message.type === \"join\") {\n        const data = JSON.parse(dataString);\n        session = ActiveSession.create(data.detail.user.id, message);\n        sessionsInProgress.set(data.clientId, session);\n    } else if (message.type === \"leave\") {\n        const clientId = JSON.parse(dataString);\n        session = sessionsInProgress.get(clientId);\n        sessionsInProgress.delete(clientId);\n        assert(!!session, 0x1b7 /* \"Bad session state for processing quorum messages\" */);\n        if (session) {\n            if (!skipMessage) {\n                session.reportOp(message.timestamp);\n            }\n            const sessionInfo: ISessionInfo = session.leave(message.timestamp);\n            sessions.set(\n                `${clientId} (${sessionInfo.email})`,\n                [durationFromTime(sessionInfo.duration), sessionInfo.opCount]);\n            incr(users, sessionInfo.email, sessionInfo.opCount);\n            session = undefined; // Do not record it second time\n        }\n    } else {\n        // message.clientId can be null\n        session = sessionsInProgress.get(message.clientId);\n        if (session === undefined) {\n            session = sessionsInProgress.get(noClientName);\n            assert(!!session, 0x1b8 /* \"Bad session state for processing quorum messages\" */);\n        }\n    }\n    return session;\n}\n\nconst durationFromTime = (time: number): number => Math.floor(time / 1000);\n"]}