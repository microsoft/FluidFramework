/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
import {
	ContainerDevtoolsProps as ContainerDevtoolsPropsBase,
	initializeDevtools as initializeDevtoolsBase,
	initializeContainerDevtools as initializeContainerDevtoolsBase,
	DevtoolsLogger,
	VisualizeSharedObject,
} from "@fluid-tools/client-debugger";
import { FluidContainer, IFluidContainer } from "@fluidframework/fluid-static";

/**
 * Properties for configuring the Devtools.
 *
 * @public
 */
export interface DevtoolsProps {
	/**
	 * (optional) telemetry logger associated with the Fluid runtime.
	 *
	 * @remarks
	 *
	 * Note: the Devtools do not register this logger with the Fluid runtime; that must be done separately.
	 *
	 * This is provided to the Devtools instance strictly to enable communicating supported / desired functionality with
	 * external listeners.
	 */
	logger?: DevtoolsLogger;

	/**
	 * (optional) List of Containers to initialize the devtools with.
	 *
	 * @remarks Additional Containers can be registered with the Devtools via {@link initializeContainerDevtools}.
	 */
	initialContainers?: ContainerDevtoolsProps[];

	/**
	 * (optional) Configurations for generating visual representations of
	 * {@link @fluidframework/shared-object-base#ISharedObject}s under each Container's
	 * {@link @fluidframework/fluid-static#IFluidContainer.initialObjects}.
	 *
	 * @remarks
	 *
	 * If not specified, then only `SharedObject` types natively known by the system will be visualized, and using
	 * default visualization implementations.
	 *
	 * If a visualizer configuration is specified for a shared object type that has a default visualizer, the custom
	 * one will be used.
	 */
	dataVisualizers?: Record<string, VisualizeSharedObject>;
}

/**
 * Properties for configuring Devtools for an individual {@link @fluidframework/fluid-static#IFluidContainer}.
 *
 * @public
 */
export interface ContainerDevtoolsProps {
	/**
	 * The Container to register with the Devtools.
	 */
	container: IFluidContainer;

	/**
	 * The ID of the {@link ContainerDevtoolsProps.container | Container}.
	 */
	containerId: string;

	/**
	 * (optional) Nickname for the {@link ContainerDevtoolsProps.container | Container} and corresponding
	 * stats generated by the Devtools.
	 *
	 * @remarks
	 *
	 * Associated tooling may take advantage of this to differentiate between instances using
	 * semantically meaningful information.
	 *
	 * If not provided, the {@link ContainerDevtoolsProps.containerId} will be used for the purpose of distinguishing
	 * instances.
	 */
	containerNickname?: string;

	/**
	 * (optional) Configurations for generating visual representations of
	 * {@link @fluidframework/shared-object-base#ISharedObject}s under each Container's
	 * {@link @fluidframework/fluid-static#IFluidContainer.initialObjects}.
	 *
	 * @remarks
	 *
	 * If not specified, then only `SharedObject` types natively known by the system will be visualized, and using
	 * default visualization implementations.
	 *
	 * If a visualizer configuration is specified for a shared object type that has a default visualizer, the custom
	 * one will be used.
	 */
	dataVisualizers?: Record<string, VisualizeSharedObject>;
}

/**
 * TODO
 *
 * @public
 */
export function initializeDevtools(props: DevtoolsProps): void {
	const { initialContainers, logger } = props;

	let mappedInitialContainers: ContainerDevtoolsPropsBase[] | undefined;
	if (initialContainers !== undefined) {
		mappedInitialContainers = [];
		for (const containerProps of initialContainers) {
			const mappedContainerProps = mapContainerProps(containerProps);
			if (mappedContainerProps !== undefined) {
				mappedInitialContainers.push(mappedContainerProps);
			}
		}
	}

	initializeDevtoolsBase({
		logger,
		initialContainers: mappedInitialContainers,
	});
}

/**
 * TODO
 *
 * @public
 */
export function initializeContainerDevtools(props: ContainerDevtoolsProps): void {
	const mappedProps = mapContainerProps(props);
	if (mappedProps !== undefined) {
		initializeContainerDevtoolsBase(mappedProps);
	}
}

// Convenience re-exports
export { closeDevtools, closeContainerDevtools } from "@fluid-tools/client-debugger";

/**
 * TODO
 */
function mapContainerProps(
	containerProps: ContainerDevtoolsProps,
): ContainerDevtoolsPropsBase | undefined {
	const { container, containerId, containerNickname, dataVisualizers } = containerProps;
	const fluidContainer = container as FluidContainer;

	if (fluidContainer.INTERNAL_CONTAINER_DO_NOT_USE === undefined) {
		console.error("Missing Container accessor on FluidContainer.");
		return undefined;
	}

	const innerContainer = fluidContainer.INTERNAL_CONTAINER_DO_NOT_USE();
	return {
		container: innerContainer,
		containerId,
		containerNickname,
		containerData: container.initialObjects,
		dataVisualizers,
	};
}
