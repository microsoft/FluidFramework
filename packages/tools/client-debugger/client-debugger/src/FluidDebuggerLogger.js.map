{"version":3,"file":"FluidDebuggerLogger.js","sourceRoot":"","sources":["FluidDebuggerLogger.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAGH,OAAO,EACN,eAAe,EACf,eAAe,EACf,WAAW,GAEX,MAAM,iCAAiC,CAAC;AACzC,OAAO,EACN,qBAAqB,EAErB,mBAAmB,GAEnB,MAAM,aAAa,CAAC;AAErB;;;;;;;GAOG;AACH,MAAM,OAAO,mBAAoB,SAAQ,eAAe;IAgDvD,YAAoB,SAAkB,EAAE,UAAyC;QAChF,KAAK,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;IAC9B,CAAC;IAjDD;;;;OAIG;IACI,MAAM,CAAC,MAAM,CACnB,SAAkB,EAClB,UAAyC;QAEzC,OAAO,IAAI,mBAAmB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;IACvD,CAAC;IAED;;;;;;OAMG;IACI,MAAM,CAAC,WAAW,CACxB,SAAkB,EAClB,UAAiC,EACjC,UAAyC;QAEzC,IAAI,CAAC,UAAU,EAAE;YAChB,OAAO,mBAAmB,CAAC,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;SACzD;QAED,MAAM,eAAe,GAAG,IAAI,eAAe,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;QACnE,eAAe,CAAC,SAAS,CACxB,mBAAmB,CAAC,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC,CAC7E,CAAC;QACF,eAAe,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC;QAErE,OAAO,eAAe,CAAC;IACxB,CAAC;IAEO,MAAM,CAAC,qBAAqB,CACnC,UAAiC;QAEjC,IAAI,UAAU,YAAY,eAAe,EAAE;YAC1C,8DAA8D;YAC9D,OAAQ,UAAkE,CAAC,UAAU,CAAC;SACtF;QACD,OAAO,SAAS,CAAC;IAClB,CAAC;IAMD;;;;OAIG;IACI,IAAI,CAAC,KAA0B;QACrC,8DAA8D;QAE9D,MAAM,QAAQ,GAAwB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QAE/D,mBAAmB,CAClB;YACC,MAAM,EAAE,qBAAqB;YAC7B,IAAI,EAAE,iBAAiB;YACvB,IAAI,EAAE;gBACL,QAAQ,EAAE,QAAQ;aAClB;SACD,EACD,mBAAmB,CAAC,6BAA6B,CACjD,CAAC;IACH,CAAC;;AAED;;GAEG;AACqB,iDAA6B,GAA0B;IAC9E,OAAO,EAAE,oBAAoB;CAC7B,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ITelemetryBaseEvent, ITelemetryBaseLogger } from \"@fluidframework/common-definitions\";\nimport {\n\tTelemetryLogger,\n\tMultiSinkLogger,\n\tChildLogger,\n\tITelemetryLoggerPropertyBags,\n} from \"@fluidframework/telemetry-utils\";\nimport {\n\tdebuggerMessageSource,\n\tMessageLoggingOptions,\n\tpostMessageToWindow,\n\tTelemetryEventMessage,\n} from \"./messaging\";\n\n/**\n * Logger implementation that posts all telemetry events to the window (globalThis object).\n *\n * @remarks This logger is intended to integrate with the Fluid Debugger DevTools extension.\n *\n * @sealed\n * @internal\n */\nexport class FluidDebuggerLogger extends TelemetryLogger {\n\t/**\n\t * Create an instance of this logger\n\t * @param namespace - Telemetry event name prefix to add to all events\n\t * @param properties - Base properties to add to all events\n\t */\n\tpublic static create(\n\t\tnamespace?: string,\n\t\tproperties?: ITelemetryLoggerPropertyBags,\n\t): TelemetryLogger {\n\t\treturn new FluidDebuggerLogger(namespace, properties);\n\t}\n\n\t/**\n\t * Mix in this logger with another.\n\t * The returned logger will output events to the newly created DevTools extension logger *and* the base logger.\n\t * @param namespace - Telemetry event name prefix to add to all events\n\t * @param baseLogger - Base logger to output events (in addition to DevTools extension logger being created). Can be undefined.\n\t * @param properties - Base properties to add to all events\n\t */\n\tpublic static mixinLogger(\n\t\tnamespace?: string,\n\t\tbaseLogger?: ITelemetryBaseLogger,\n\t\tproperties?: ITelemetryLoggerPropertyBags,\n\t): TelemetryLogger {\n\t\tif (!baseLogger) {\n\t\t\treturn FluidDebuggerLogger.create(namespace, properties);\n\t\t}\n\n\t\tconst multiSinkLogger = new MultiSinkLogger(undefined, properties);\n\t\tmultiSinkLogger.addLogger(\n\t\t\tFluidDebuggerLogger.create(namespace, this.tryGetBaseLoggerProps(baseLogger)),\n\t\t);\n\t\tmultiSinkLogger.addLogger(ChildLogger.create(baseLogger, namespace));\n\n\t\treturn multiSinkLogger;\n\t}\n\n\tprivate static tryGetBaseLoggerProps(\n\t\tbaseLogger?: ITelemetryBaseLogger,\n\t): ITelemetryLoggerPropertyBags | undefined {\n\t\tif (baseLogger instanceof TelemetryLogger) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\treturn (baseLogger as any as { properties: ITelemetryLoggerPropertyBags }).properties;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate constructor(namespace?: string, properties?: ITelemetryLoggerPropertyBags) {\n\t\tsuper(namespace, properties);\n\t}\n\n\t/**\n\t * Post a telemetry event to the window (globalThis object).\n\t *\n\t * @param event - the event to send\n\t */\n\tpublic send(event: ITelemetryBaseEvent): void {\n\t\t// TODO: ability to disable the logger so this becomes a no-op\n\n\t\tconst newEvent: ITelemetryBaseEvent = this.prepareEvent(event);\n\n\t\tpostMessageToWindow<TelemetryEventMessage>(\n\t\t\t{\n\t\t\t\tsource: debuggerMessageSource,\n\t\t\t\ttype: \"TELEMETRY_EVENT\",\n\t\t\t\tdata: {\n\t\t\t\t\tcontents: newEvent,\n\t\t\t\t},\n\t\t\t},\n\t\t\tFluidDebuggerLogger.RegistryMessageLoggingOptions,\n\t\t);\n\t}\n\n\t/**\n\t * Message logging options used by the logger for messages posted to the console.\n\t */\n\tprivate static readonly RegistryMessageLoggingOptions: MessageLoggingOptions = {\n\t\tcontext: \"DEBUGGER TELEMETRY\",\n\t};\n}\n"]}