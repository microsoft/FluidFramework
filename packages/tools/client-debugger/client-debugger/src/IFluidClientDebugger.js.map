{"version":3,"file":"IFluidClientDebugger.js","sourceRoot":"","sources":["IFluidClientDebugger.ts"],"names":[],"mappings":"","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { IDisposable, IEvent, IEventProvider } from \"@fluidframework/common-definitions\";\nimport { IAudience, IContainer } from \"@fluidframework/container-definitions\";\nimport { IFluidLoadable } from \"@fluidframework/core-interfaces\";\n\nimport { AudienceChangeLogEntry, ConnectionStateChangeLogEntry } from \"./Logs\";\n\n// TODOs:\n// - Data recording configuration (what things the user wishes to subscribe to)\n// - Allow consumers to opt out of posting messages to the window?\n// - Pass diffs instead of all data in change events (probably requires defining separate full-dump messages from delta messages)\n\n/**\n * Events emitted by {@link IFluidClientDebugger}.\n *\n * @internal\n */\nexport interface IFluidClientDebuggerEvents extends IEvent {\n\t/**\n\t * Emitted when the {@link IFluidClientDebugger} itself has been disposed.\n\t *\n\t * @see {@link IFluidClientDebugger.dispose}\n\t */\n\t(event: \"disposed\", listener: () => void);\n}\n\n/**\n * Fluid debug session associated with a Fluid Client via its\n * {@link @fluidframework/container-definitions#IContainer} and\n * {@link @fluidframework/container-definitions#IAudience}.\n *\n * @internal\n */\nexport interface IFluidClientDebugger\n\textends IEventProvider<IFluidClientDebuggerEvents>,\n\t\tIDisposable {\n\t/**\n\t * The ID of {@link IFluidClientDebugger.container}.\n\t */\n\treadonly containerId: string;\n\n\t/**\n\t * The Container session with which the debugger is associated.\n\t */\n\treadonly container: IContainer;\n\n\t/**\n\t * The Audience associated with the Container\n\t */\n\treadonly audience: IAudience;\n\n\t/**\n\t * Data contents of the Container.\n\t *\n\t * @remarks\n\t *\n\t * This map is assumed to be immutable. The debugger will not make any modifications to its contents.\n\t */\n\treadonly containerData?: IFluidLoadable | Record<string, IFluidLoadable>;\n\n\t/**\n\t * Optional: Nickname to assign to the debugger instance.\n\t *\n\t * @remarks\n\t *\n\t * Associated tooling may take advantage of this to differentiate between debugger instances using\n\t * semantically meaningful information.\n\t *\n\t * If not provided, the {@link FluidClientDebuggerProps.containerId} will be used for the purpose of distinguising\n\t * debugger instances.\n\t */\n\treadonly containerNickname?: string;\n\n\t/**\n\t * Gets the history of all ConnectionState changes since the debugger session was initialized.\n\t *\n\t * @remarks\n\t *\n\t * {@link IFluidClientDebugger.container}'s `connected` and `disconnected` events signal that this data has changed.\n\t * Consumers will need to re-call this to get the most up-to-date data.\n\t */\n\tgetContainerConnectionLog(): readonly ConnectionStateChangeLogEntry[];\n\n\t/**\n\t * Historical log of audience member changes.\n\t *\n\t * @remarks\n\t *\n\t * {@link IFluidClientDebugger.audience}'s `addMember` and `removeMember` events signal that this data has changed.\n\t * Consumers will need to re-call this to get the most up-to-date data.\n\t */\n\tgetAudienceHistory(): readonly AudienceChangeLogEntry[];\n\n\t/**\n\t * Disposes the debugger session.\n\t * All data recording will stop, and no further state change events will be emitted.\n\t */\n\tdispose(): void;\n}\n"]}