{"version":3,"file":"FluidClientDebugger.js","sourceRoot":"","sources":["FluidClientDebugger.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { TypedEventEmitter } from \"@fluidframework/common-utils\";\nimport { IAudience, IContainer } from \"@fluidframework/container-definitions\";\nimport { IFluidLoadable } from \"@fluidframework/core-interfaces\";\nimport { IClient } from \"@fluidframework/protocol-definitions\";\nimport { ContainerStateChangeKind } from \"./Container\";\nimport { ContainerStateMetadata } from \"./ContainerMetadata\";\n\nimport { IFluidClientDebugger, IFluidClientDebuggerEvents } from \"./IFluidClientDebugger\";\nimport { AudienceChangeLogEntry, ConnectionStateChangeLogEntry } from \"./Logs\";\nimport {\n\tAudienceEventMessage,\n\tGetAudienceMessage,\n\tContainerStateChangeMessage,\n\tdebuggerMessageSource,\n\tGetContainerStateMessage,\n\thandleIncomingWindowMessage,\n\tIDebuggerMessage,\n\tInboundHandlers,\n\tMessageLoggingOptions,\n\tpostMessageToWindow,\n} from \"./messaging\";\nimport { FluidClientDebuggerProps } from \"./Registry\";\n\n/**\n * {@link IFluidClientDebugger} implementation.\n *\n * @remarks\n *\n * This class listens to incoming messages from the window (globalThis), and posts messages to it upon relevant\n * state changes and when requested.\n *\n * **Messages it listens for:**\n *\n * - {@link GetContainerStateMessage}: When received (if the container ID matches), the debugger will broadcast {@link ContainerStateChangeMessage}.\n *\n * TODO: Document others as they are added.\n *\n * **Messages it posts:**\n *\n * - {@link ContainerStateChangeMessage}: This is posted any time relevant Container state changes,\n * or when requested (via {@link GetContainerStateMessage}).\n *\n * TODO: Document others as they are added.\n *\n * @sealed\n * @internal\n */\nexport class FluidClientDebugger\n\textends TypedEventEmitter<IFluidClientDebuggerEvents>\n\timplements IFluidClientDebugger\n{\n\t/**\n\t * {@inheritDoc IFluidClientDebugger.containerId}\n\t */\n\tpublic readonly containerId: string;\n\n\t/**\n\t * {@inheritDoc FluidClientDebuggerProps.container}\n\t */\n\tpublic readonly container: IContainer;\n\n\t/**\n\t * {@inheritDoc FluidClientDebuggerProps.audience}\n\t */\n\tpublic get audience(): IAudience {\n\t\treturn this.container.audience;\n\t}\n\n\t/**\n\t * {@inheritDoc IFluidClientDebugger.containerData}\n\t */\n\tpublic readonly containerData?: IFluidLoadable | Record<string, IFluidLoadable>;\n\n\t/**\n\t * {@inheritDoc IFluidClientDebugger.containerNickname}\n\t */\n\tpublic readonly containerNickname?: string;\n\n\t// #region Accumulated log state\n\n\t/**\n\t * Accumulated data for {@link IFluidClientDebugger.getContainerConnectionLog}.\n\t */\n\tprivate readonly _connectionStateLog: ConnectionStateChangeLogEntry[];\n\n\t/**\n\t * Accumulated data for {@link IFluidClientDebugger.getAudienceHistory}.\n\t */\n\tprivate readonly _audienceChangeLog: AudienceChangeLogEntry[];\n\n\t// #endregion\n\n\t// #region Container-related event handlers\n\n\tprivate readonly containerAttachedHandler = (): void => {\n\t\tthis.postContainerStateChange();\n\t\tthis._connectionStateLog.push({\n\t\t\tnewState: ContainerStateChangeKind.Attached,\n\t\t\ttimestamp: Date.now(),\n\t\t\tclientId: undefined,\n\t\t});\n\t};\n\n\tprivate readonly containerConnectedHandler = (clientId: string): void => {\n\t\tthis.postContainerStateChange();\n\t\tthis._connectionStateLog.push({\n\t\t\tnewState: ContainerStateChangeKind.Connected,\n\t\t\ttimestamp: Date.now(),\n\t\t\tclientId,\n\t\t});\n\t};\n\n\tprivate readonly containerDisconnectedHandler = (): void => {\n\t\tthis.postContainerStateChange();\n\t\tthis._connectionStateLog.push({\n\t\t\tnewState: ContainerStateChangeKind.Disconnected,\n\t\t\ttimestamp: Date.now(),\n\t\t\tclientId: undefined,\n\t\t});\n\t};\n\n\tprivate readonly containerClosedHandler = (): void => {\n\t\tthis.postContainerStateChange();\n\t\tthis._connectionStateLog.push({\n\t\t\tnewState: ContainerStateChangeKind.Closed,\n\t\t\ttimestamp: Date.now(),\n\t\t\tclientId: undefined,\n\t\t});\n\t};\n\n\tprivate readonly containerDisposedHandler = (): void => {\n\t\tthis.postContainerStateChange();\n\t\tthis._connectionStateLog.push({\n\t\t\tnewState: ContainerStateChangeKind.Disposed,\n\t\t\ttimestamp: Date.now(),\n\t\t\tclientId: undefined,\n\t\t});\n\t};\n\n\t// #endregion\n\n\t// #region Audience-related event handlers\n\n\tprivate readonly audienceMemberAddedHandler = (clientId: string, client: IClient): void => {\n\t\tthis._audienceChangeLog.push({\n\t\t\tclientId,\n\t\t\tclient,\n\t\t\tchangeKind: \"added\",\n\t\t\ttimestamp: Date.now(),\n\t\t});\n\t\tthis.postAudienceStateChange();\n\t};\n\n\tprivate readonly audienceMemberRemovedHandler = (clientId: string, client: IClient): void => {\n\t\tthis._audienceChangeLog.push({\n\t\t\tclientId,\n\t\t\tclient,\n\t\t\tchangeKind: \"removed\",\n\t\t\ttimestamp: Date.now(),\n\t\t});\n\t\tthis.postAudienceStateChange();\n\t};\n\n\t// #endregion\n\n\t// #region Window event handlers\n\n\t/**\n\t * Handlers for inbound messages related to the debugger.\n\t */\n\tprivate readonly inboundMessageHandlers: InboundHandlers = {\n\t\t[\"GET_CONTAINER_STATE\"]: (untypedMessage) => {\n\t\t\tconst message = untypedMessage as GetContainerStateMessage;\n\t\t\tif (message.data.containerId === this.containerId) {\n\t\t\t\tthis.postContainerStateChange();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\t[\"GET_AUDIENCE_EVENT\"]: (untypedMessage) => {\n\t\t\tconst message = untypedMessage as GetAudienceMessage;\n\t\t\tif (message.data.containerId === this.containerId) {\n\t\t\t\tthis.postAudienceStateChange();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t};\n\n\t/**\n\t * Event handler for messages coming from the window (globalThis).\n\t */\n\tprivate readonly windowMessageHandler = (\n\t\tevent: MessageEvent<Partial<IDebuggerMessage>>,\n\t): void => {\n\t\thandleIncomingWindowMessage(event, this.inboundMessageHandlers, this.messageLoggingOptions);\n\t};\n\n\t/**\n\t * Posts a {@link ContainerStateChangeMessage} to the window (globalThis).\n\t */\n\tprivate readonly postContainerStateChange = (): void => {\n\t\tpostMessageToWindow<ContainerStateChangeMessage>(\n\t\t\t{\n\t\t\t\tsource: debuggerMessageSource,\n\t\t\t\ttype: \"CONTAINER_STATE_CHANGE\",\n\t\t\t\tdata: {\n\t\t\t\t\tcontainerId: this.containerId,\n\t\t\t\t\tcontainerState: this.getContainerState(),\n\t\t\t\t},\n\t\t\t},\n\t\t\tthis.messageLoggingOptions,\n\t\t);\n\t};\n\n\t/**\n\t * Posts a {@link AudienceEventMessage} to the window (globalThis)\n\t *\n\t */\n\tprivate readonly postAudienceStateChange = (): void => {\n\t\tconsole.log(\"---------------------------------------\");\n\t\tconsole.log(\"this.container.audience.getMembers():\", this.container.audience.getMembers());\n\t\tconsole.log(\"---------------------------------------\");\n\t\tconsole.log(\"this.getAudienceHistory():\", this.getAudienceHistory());\n\t\tconsole.log(\"---------------------------------------\");\n\n\t\tpostMessageToWindow<AudienceEventMessage>(\n\t\t\t{\n\t\t\t\tsource: debuggerMessageSource,\n\t\t\t\ttype: \"AUDIENCE_EVENT\",\n\t\t\t\tdata: {\n\t\t\t\t\tcontainerId: this.containerId,\n\t\t\t\t\taudienceState: this.container.audience.getMembers(),\n\t\t\t\t\taudienceHistory: this.getAudienceHistory(),\n\t\t\t\t},\n\t\t\t},\n\t\t\tthis.messageLoggingOptions,\n\t\t);\n\n\t\tconsole.log(\"Passed Post\");\n\t};\n\n\t// #endregion\n\n\tprivate readonly debuggerDisposedHandler = (): boolean => this.emit(\"disposed\");\n\n\t/**\n\t * Message logging options used by the debugger.\n\t */\n\tprivate get messageLoggingOptions(): MessageLoggingOptions {\n\t\treturn { context: `Debugger(${this.containerId})` };\n\t}\n\n\t/**\n\t * Whether or not the instance has been disposed yet.\n\t *\n\t * @remarks Not related to Container disposal.\n\t *\n\t * @see {@link IFluidClientDebugger.dispose}\n\t */\n\tprivate _disposed: boolean;\n\n\tpublic constructor(props: FluidClientDebuggerProps) {\n\t\tsuper();\n\n\t\tthis.containerId = props.containerId;\n\t\tthis.containerData = props.containerData;\n\t\tthis.container = props.container;\n\t\tthis.containerNickname = props.containerNickname;\n\n\t\t// TODO: would it be useful to log the states (and timestamps) at time of debugger initialize?\n\t\tthis._connectionStateLog = [];\n\t\tthis._audienceChangeLog = [];\n\n\t\t// Bind Container events required for change-logging\n\t\tthis.container.on(\"attached\", this.containerAttachedHandler);\n\t\tthis.container.on(\"connected\", this.containerConnectedHandler);\n\t\tthis.container.on(\"disconnected\", this.containerDisconnectedHandler);\n\t\tthis.container.on(\"disposed\", this.containerDisposedHandler);\n\t\tthis.container.on(\"closed\", this.containerClosedHandler);\n\n\t\t// Bind Audience events required for change-logging\n\t\tthis.audience.on(\"addMember\", this.audienceMemberAddedHandler);\n\t\tthis.audience.on(\"removeMember\", this.audienceMemberRemovedHandler);\n\n\t\t// Register listener for inbound messages from the window (globalThis)\n\t\tglobalThis.addEventListener?.(\"message\", this.windowMessageHandler);\n\n\t\tthis._disposed = false;\n\t}\n\n\t/**\n\t * {@inheritDoc IFluidClientDebugger.getConnectionStateLog}\n\t */\n\tpublic getContainerConnectionLog(): readonly ConnectionStateChangeLogEntry[] {\n\t\t// Clone array contents so consumers don't see local changes\n\t\treturn this._connectionStateLog.map((value) => value);\n\t}\n\n\t/**\n\t * {@inheritDoc IFluidClientDebugger.getAudienceHistory}\n\t */\n\tpublic getAudienceHistory(): readonly AudienceChangeLogEntry[] {\n\t\t// Clone array contents so consumers don't see local changes\n\t\treturn this._audienceChangeLog.map((value) => value);\n\t}\n\n\t/**\n\t * {@inheritDoc IFluidClientDebugger.dispose}\n\t */\n\tpublic dispose(): void {\n\t\t// Unbind Container events\n\t\tthis.container.off(\"attached\", this.containerAttachedHandler);\n\t\tthis.container.off(\"connected\", this.containerConnectedHandler);\n\t\tthis.container.off(\"disconnected\", this.containerDisconnectedHandler);\n\t\tthis.container.off(\"disposed\", this.containerDisposedHandler);\n\t\tthis.container.off(\"closed\", this.containerClosedHandler);\n\n\t\t// Unbind Audience events\n\t\tthis.audience.off(\"addMember\", this.audienceMemberAddedHandler);\n\t\tthis.audience.off(\"removeMember\", this.audienceMemberRemovedHandler);\n\n\t\t// Unbind window event listener\n\t\tglobalThis.removeEventListener?.(\"message\", this.windowMessageHandler);\n\n\t\tthis.debuggerDisposedHandler(); // Notify consumers that the debugger has been disposed.\n\n\t\tthis._disposed = true;\n\t}\n\n\t/**\n\t * {@inheritDoc @fluidframework/common-definitions#IDisposable.disposed}\n\t */\n\tpublic get disposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\tprivate getContainerState(): ContainerStateMetadata {\n\t\tconst clientId = this.container.clientId;\n\t\treturn {\n\t\t\tid: this.containerId,\n\t\t\tnickname: this.containerNickname,\n\t\t\tattachState: this.container.attachState,\n\t\t\tconnectionState: this.container.connectionState,\n\t\t\tclosed: this.container.closed,\n\t\t\tclientId: this.container.clientId,\n\t\t\taudienceId:\n\t\t\t\tclientId === undefined ? undefined : this.audience.getMember(clientId)?.user.id,\n\t\t};\n\t}\n}\n"]}