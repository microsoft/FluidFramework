/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

import React from "react";

import {
	handleIncomingMessage,
	IDebuggerMessage,
	InboundHandlers,
	TelemetryEventMessage,
} from "@fluid-tools/client-debugger";
import { ITelemetryBaseEvent } from "@fluidframework/common-definitions";
import { _TelemetryView } from "@fluid-tools/client-debugger-view";
import { useMessageRelay } from "./MessageRelayContext";

const loggingContext = "EXTENSION(DebuggerPanel:Telemetry)";

/**
 * Displays telemetry events generated by FluidFramework in the application.
 *
 * @remarks Must be run under a {@link MessageRelayContext}.
 */
export function TelemetryView(): React.ReactElement {
	const messageRelay = useMessageRelay();

	const [telemetryEvents, setTelemetryEvents] = React.useState<ITelemetryBaseEvent[]>([]);

	React.useEffect(() => {
		/**
		 * Handlers for inbound messages related to telemetry.
		 */
		const inboundMessageHandlers: InboundHandlers = {
			["TELEMETRY_EVENT"]: (untypedMessage) => {
				const message: TelemetryEventMessage = untypedMessage as TelemetryEventMessage;
				setTelemetryEvents([message.data.contents, ...telemetryEvents]);
				return true;
			},
		};

		/**
		 * Event handler for messages coming from the Message Relay
		 */
		function messageHandler(message: Partial<IDebuggerMessage>): void {
			handleIncomingMessage(message, inboundMessageHandlers, {
				context: loggingContext,
			});
		}

		messageRelay.on("message", messageHandler);

		return (): void => {
			messageRelay.off("message", messageHandler);
		};
	}, [messageRelay, telemetryEvents, setTelemetryEvents]);

	return <_TelemetryView telemetryEvents={telemetryEvents}></_TelemetryView>;
}
