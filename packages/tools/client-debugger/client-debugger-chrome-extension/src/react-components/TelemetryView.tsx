/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

import React from "react";

import {
	handleIncomingMessage,
	IDebuggerMessage,
	InboundHandlers,
	TelemetryEventMessage,
} from "@fluid-tools/client-debugger";

import { MessageRelayContext } from "./MessageRelayContext";

const loggingContext = "EXTENSION(DebuggerPanel:Telemetry)";

/**
 * Displays telemetry events generated by FluidFramework in the application.
 *
 * @remarks Must be run under a {@link MessageRelayContext}.
 */
export function TelemetryView(): React.ReactElement {
	const messageRelay = React.useContext(MessageRelayContext);
	if (messageRelay === undefined) {
		throw new Error(
			"MessageRelayContext was not defined. Parent component is responsible for ensuring this has been constructed.",
		);
	}

	const [messages, setMessages] = React.useState<string[]>([]);

	React.useEffect(() => {
		/**
		 * Handlers for inbound messages related to telemetry.
		 */
		const inboundMessageHandlers: InboundHandlers = {
			["TELEMETRY_EVENT"]: (untypedMessage) => {
				const message: TelemetryEventMessage = untypedMessage as TelemetryEventMessage;
				setMessages([JSON.stringify(message.data.contents), ...messages]);
				return true;
			},
		};

		/**
		 * Event handler for messages coming from the Message Relay
		 */
		function messageHandler(message: Partial<IDebuggerMessage>): void {
			handleIncomingMessage(message, inboundMessageHandlers, {
				context: loggingContext,
			});
		}

		messageRelay.on("message", messageHandler);

		return (): void => {
			messageRelay.off("message", messageHandler);
		};
	}, [messageRelay, messages, setMessages]);

	return (
		<div>
			<p>Telemetry events (newest first):</p>
			<ul>
				{messages.map((message) => (
					<li>{message}</li>
				))}
			</ul>
		</div>
	);
}
