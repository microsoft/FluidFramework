/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-test-generator in @fluidframework/build-tools.
 */
import * as old from "@fluid-experimental/devtools-previous";
import * as current from "../../index";

type TypeOnly<T> = {
    [P in keyof T]: TypeOnly<T[P]>;
};

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ContainerDevtoolsProps": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ContainerDevtoolsProps():
    TypeOnly<old.ContainerDevtoolsProps>;
declare function use_current_InterfaceDeclaration_ContainerDevtoolsProps(
    use: TypeOnly<current.ContainerDevtoolsProps>);
use_current_InterfaceDeclaration_ContainerDevtoolsProps(
    get_old_InterfaceDeclaration_ContainerDevtoolsProps());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ContainerDevtoolsProps": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ContainerDevtoolsProps():
    TypeOnly<current.ContainerDevtoolsProps>;
declare function use_old_InterfaceDeclaration_ContainerDevtoolsProps(
    use: TypeOnly<old.ContainerDevtoolsProps>);
use_old_InterfaceDeclaration_ContainerDevtoolsProps(
    get_current_InterfaceDeclaration_ContainerDevtoolsProps());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_ContainerKey": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_ContainerKey():
    TypeOnly<old.ContainerKey>;
declare function use_current_TypeAliasDeclaration_ContainerKey(
    use: TypeOnly<current.ContainerKey>);
use_current_TypeAliasDeclaration_ContainerKey(
    get_old_TypeAliasDeclaration_ContainerKey());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_ContainerKey": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_ContainerKey():
    TypeOnly<current.ContainerKey>;
declare function use_old_TypeAliasDeclaration_ContainerKey(
    use: TypeOnly<old.ContainerKey>);
use_old_TypeAliasDeclaration_ContainerKey(
    get_current_TypeAliasDeclaration_ContainerKey());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DevtoolsLogger": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_DevtoolsLogger():
    TypeOnly<old.DevtoolsLogger>;
declare function use_current_ClassDeclaration_DevtoolsLogger(
    use: TypeOnly<current.DevtoolsLogger>);
use_current_ClassDeclaration_DevtoolsLogger(
    get_old_ClassDeclaration_DevtoolsLogger());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DevtoolsLogger": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_DevtoolsLogger():
    TypeOnly<current.DevtoolsLogger>;
declare function use_old_ClassDeclaration_DevtoolsLogger(
    use: TypeOnly<old.DevtoolsLogger>);
use_old_ClassDeclaration_DevtoolsLogger(
    get_current_ClassDeclaration_DevtoolsLogger());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_DevtoolsProps": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_DevtoolsProps():
    TypeOnly<old.DevtoolsProps>;
declare function use_current_InterfaceDeclaration_DevtoolsProps(
    use: TypeOnly<current.DevtoolsProps>);
use_current_InterfaceDeclaration_DevtoolsProps(
    get_old_InterfaceDeclaration_DevtoolsProps());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_DevtoolsProps": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_DevtoolsProps():
    TypeOnly<current.DevtoolsProps>;
declare function use_old_InterfaceDeclaration_DevtoolsProps(
    use: TypeOnly<old.DevtoolsProps>);
use_old_InterfaceDeclaration_DevtoolsProps(
    get_current_InterfaceDeclaration_DevtoolsProps());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_HasContainerKey": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_HasContainerKey():
    TypeOnly<old.HasContainerKey>;
declare function use_current_InterfaceDeclaration_HasContainerKey(
    use: TypeOnly<current.HasContainerKey>);
use_current_InterfaceDeclaration_HasContainerKey(
    get_old_InterfaceDeclaration_HasContainerKey());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_HasContainerKey": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_HasContainerKey():
    TypeOnly<current.HasContainerKey>;
declare function use_old_InterfaceDeclaration_HasContainerKey(
    use: TypeOnly<old.HasContainerKey>);
use_old_InterfaceDeclaration_HasContainerKey(
    get_current_InterfaceDeclaration_HasContainerKey());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IDevtools": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IDevtools():
    TypeOnly<old.IDevtools>;
declare function use_current_InterfaceDeclaration_IDevtools(
    use: TypeOnly<current.IDevtools>);
use_current_InterfaceDeclaration_IDevtools(
    get_old_InterfaceDeclaration_IDevtools());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IDevtools": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IDevtools():
    TypeOnly<current.IDevtools>;
declare function use_old_InterfaceDeclaration_IDevtools(
    use: TypeOnly<old.IDevtools>);
use_old_InterfaceDeclaration_IDevtools(
    get_current_InterfaceDeclaration_IDevtools());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_initializeDevtools": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_initializeDevtools():
    TypeOnly<typeof old.initializeDevtools>;
declare function use_current_FunctionDeclaration_initializeDevtools(
    use: TypeOnly<typeof current.initializeDevtools>);
use_current_FunctionDeclaration_initializeDevtools(
    get_old_FunctionDeclaration_initializeDevtools());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_initializeDevtools": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_initializeDevtools():
    TypeOnly<typeof current.initializeDevtools>;
declare function use_old_FunctionDeclaration_initializeDevtools(
    use: TypeOnly<typeof old.initializeDevtools>);
use_old_FunctionDeclaration_initializeDevtools(
    get_current_FunctionDeclaration_initializeDevtools());
