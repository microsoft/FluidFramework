{"version":3,"file":"FluidValueView.js","sourceRoot":"","sources":["../../../src/components/data-visualization/FluidValueView.tsx"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,MAAM,OAAO,CAAC;AAG1B,OAAO,EAAE,2BAA2B,EAAE,MAAM,qCAAqC,CAAC;AAClF,OAAO,EAAE,YAAY,EAAE,MAAM,mBAAmB,CAAC;AAGjD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7C,OAAO,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AASzC;;;;GAIG;AACH,MAAM,UAAU,cAAc,CAAC,KAA0B;IACxD,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,GAAG,KAAK,CAAC;IAC5C,MAAM,EAAE,qBAAqB,EAAE,GAAG,2BAA2B,EAAE,CAAC;IAChE,MAAM,cAAc,GACnB,qBAAqB,CAAC,oBAAoB,KAAK,IAAI,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,CAAC;IACrF,MAAM,MAAM,GAAG,CACd,0CACE,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC,CAC1B,oBAAC,YAAY,IAAC,KAAK,EAAE,KAAK,EAAE,YAAY,EAAE,YAAY,EAAE,IAAI,EAAE,IAAI,GAAI,CACtE,CAAC,CAAC,CAAC,CACH,oBAAC,UAAU,IACV,KAAK,EAAE,KAAK,EACZ,gBAAgB,EAAE,IAAI,CAAC,YAAY,EACnC,WAAW,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAC/B,oBAAoB,EAAE,IAAI,CAAC,oBAAoB,GAC9C,CACF,CACC,CACH,CAAC;IAEF,OAAO,oBAAC,QAAQ,IAAC,MAAM,EAAE,MAAM,GAAI,CAAC;AACrC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React from \"react\";\n\nimport type { FluidObjectValueNode, HasContainerKey } from \"@fluidframework/devtools-core\";\nimport { useContainerFeaturesContext } from \"../../ContainerFeatureFlagHelper.js\";\nimport { EditableView } from \"./EditableView.js\";\n\nimport type { DataVisualizationTreeProps } from \"./CommonInterfaces.js\";\nimport { TreeHeader } from \"./TreeHeader.js\";\nimport { TreeItem } from \"./TreeItem.js\";\n\n/**\n * {@link ValueView} input props.\n */\nexport type FluidValueViewProps = DataVisualizationTreeProps<FluidObjectValueNode> &\n\tHasContainerKey &\n\tHasContainerKey;\n\n/**\n * Render data with type VisualNodeKind.FluidValueNode and render its children.\n *\n * @remarks {@link ContainerFeaturesContext} must be set in order to use this component.\n */\nexport function FluidValueView(props: FluidValueViewProps): React.ReactElement {\n\tconst { label, node, containerKey } = props;\n\tconst { containerFeatureFlags } = useContainerFeaturesContext();\n\tconst editingEnabled =\n\t\tcontainerFeatureFlags.containerDataEditing === true && node.editProps !== undefined;\n\tconst header = (\n\t\t<>\n\t\t\t{editingEnabled === true ? (\n\t\t\t\t<EditableView label={label} containerKey={containerKey} node={node} />\n\t\t\t) : (\n\t\t\t\t<TreeHeader\n\t\t\t\t\tlabel={label}\n\t\t\t\t\tnodeTypeMetadata={node.typeMetadata}\n\t\t\t\t\tinlineValue={String(node.value)}\n\t\t\t\t\tsharedTreeSchemaData={node.sharedTreeSchemaData}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</>\n\t);\n\n\treturn <TreeItem header={header} />;\n}\n"]}