/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

import type { IContainerRuntime } from "@fluidframework/container-runtime-definitions/internal";
import type { IFluidLoadable } from "@fluidframework/core-interfaces";

import { BaseDevtools } from "./BaseDevtools.js";
import type { ContainerKey } from "./CommonInterfaces.js";
import type { DecomposedContainer } from "./DecomposedContainer.js";
import type { ContainerDevtoolsFeatureFlags } from "./Features.js";
import type { InboundHandlers } from "./messaging/index.js";

/**
 * Properties for registering a container runtime with the Devtools.
 * @alpha
 */
export interface ContainerRuntimeDevtoolsProps {
	/**
	 * The container runtime to register with the Devtools.
	 */
	runtime: IContainerRuntime;

	/**
	 * Optional label for the container runtime replacing the guid generated by {@link @fluidframework/container-runtime#IContainerRuntime.generateDocumentUniqueId}.
	 */
	label?: string;
}

/**
 * Properties for constructing a {@link ContainerRuntimeDevtools} instance.
 * @alpha
 */
export interface ContainerRuntimeDevtoolsConstructorProps {
	/**
	 * The container key to use for this container runtime.
	 */
	containerKey: ContainerKey;

	/**
	 * The decomposed container wrapping the container runtime.
	 */
	container: DecomposedContainer;

	/**
	 * (optional) Data associated with the container runtime.
	 */
	containerData?: Record<string, IFluidLoadable>;
}

/**
 * {@link IContainerDevtools} implementation for container runtimes.
 *
 * @remarks
 *
 * This class provides devtools functionality for container runtimes that don't support
 * container-level operations like connect/disconnect/close. Container runtimes represent
 * the internal runtime state and don't emit "closed" events like IContainer does.
 *
 * @sealed
 */
export class ContainerRuntimeDevtools extends BaseDevtools<DecomposedContainer> {
	/**
	 * The registered container runtime's decomposed container.
	 */
	protected override get container(): DecomposedContainer {
		return this._container;
	}

	private readonly _container: DecomposedContainer;

	public constructor(props: ContainerRuntimeDevtoolsConstructorProps) {
		// Container runtimes don't support connection operations, so pass empty handlers
		const specificHandlers: InboundHandlers = {};

		super(props.containerKey, specificHandlers, props.containerData);

		this._container = props.container;

		// Bind container and audience events after container is set
		this.bindContainerEvents();
		this.bindAudienceEvents();
	}

	protected override getSupportedFeatures(): ContainerDevtoolsFeatureFlags {
		return {
			containerDataVisualization: this.containerData !== undefined,
			// Container runtimes do not have direct control over container lifecycle
			canModifyContainerState: false,
		};
	}

	/**
	 * {@inheritDoc IContainerDevtools.isClosed}
	 */
	public isClosed(): boolean {
		// Container runtimes cannot be closed directly
		return false;
	}
}
