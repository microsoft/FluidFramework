/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

import type { PureDataObject } from "@fluidframework/aqueduct/internal";
import type { IAudience } from "@fluidframework/container-definitions";
import type { IFluidLoadable } from "@fluidframework/core-interfaces";

import { BaseDevtools } from "./BaseDevtools.js";
import type { ContainerKey } from "./CommonInterfaces.js";
import type { ContainerStateMetadata } from "./ContainerMetadata.js";
import type { DecomposedContainer } from "./DecomposedContainer.js";
import type { ContainerDevtoolsFeatureFlags } from "./Features.js";
import type { InboundHandlers } from "./messaging/index.js";

/**
 * Properties for registering a data object with the Devtools.
 * @alpha
 */
export interface DataObjectProps {
	/**
	 * The data object to register with the Devtools.
	 */
	dataObject: PureDataObject;

	/**
	 * Optional label for the data object replacing the guid generated by {@link @fluidframework/container-runtime#IContainerRuntime.generateDocumentUniqueId}.
	 */
	label?: string;
}

/**
 * Properties for constructing a {@link DataObjectDevtools} instance.
 * @alpha
 */
export interface DataObjectDevtoolsProps {
	/**
	 * The container key to use for this data object.
	 */
	containerKey: ContainerKey;

	/**
	 * The decomposed container wrapping the data object.
	 */
	container: DecomposedContainer;

	/**
	 * (optional) Data associated with the data object.
	 */
	containerData?: Record<string, IFluidLoadable>;
}

/**
 * {@link IContainerDevtools} implementation for data objects.
 *
 * @remarks
 *
 * This class provides devtools functionality for data objects that don't support
 * container-level operations like connect/disconnect/close.
 *
 * @sealed
 */
export class DataObjectDevtools extends BaseDevtools {
	/**
	 * The registered data object's decomposed container.
	 */
	public readonly container: DecomposedContainer;

	/**
	 * The data object's audience.
	 */
	public get audience(): IAudience {
		return this.container.audience;
	}

	public constructor(props: DataObjectDevtoolsProps) {
		// Data objects don't support connection operations, so pass empty handlers
		const specificHandlers: InboundHandlers = {};

		super(props.containerKey, specificHandlers, props.containerData);

		this.container = props.container;

		// Bind Container events required for change-logging
		this.container.on("attached", this.containerAttachedHandler);
		this.container.on("connected", this.containerConnectedHandler);
		this.container.on("disconnected", this.containerDisconnectedHandler);
		this.container.on("disposed", this.containerDisposedHandler);
		this.container.on("closed", this.containerClosedHandler);

		// Bind Audience events required for change-logging
		this.audience.on("addMember", this.audienceMemberAddedHandler);
		this.audience.on("removeMember", this.audienceMemberRemovedHandler);
	}

	protected override getSupportedFeatures(): ContainerDevtoolsFeatureFlags {
		return {
			containerDataVisualization: this.containerData !== undefined,
			// Data objects don't support connection operations
			canConnect: false,
			canDisconnect: false,
			canClose: false,
		};
	}

	/**
	 * Generates {@link ContainerStateMetadata} describing the current state of the associated data object.
	 */
	protected getContainerState(): ContainerStateMetadata {
		const clientId = this.container.clientId;
		return {
			containerKey: this.containerKey,
			attachState: this.container.attachState,
			connectionState: this.container.connectionState,
			closed: this.container.closed,
			clientId: this.container.clientId,
			userId: clientId === undefined ? undefined : this.audience.getMember(clientId)?.user.id,
		};
	}

	protected override getClientId(): string | undefined {
		return this.container.clientId;
	}

	public override dispose(): void {
		// Unbind Container events
		this.container.off("attached", this.containerAttachedHandler);
		this.container.off("connected", this.containerConnectedHandler);
		this.container.off("disconnected", this.containerDisconnectedHandler);
		this.container.off("disposed", this.containerDisposedHandler);
		this.container.off("closed", this.containerClosedHandler);

		// Unbind Audience events
		this.audience.off("addMember", this.audienceMemberAddedHandler);
		this.audience.off("removeMember", this.audienceMemberRemovedHandler);

		// Call parent dispose
		super.dispose();
	}
}
