{"version":3,"file":"nodeStressTest.js","sourceRoot":"","sources":["../src/nodeStressTest.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport assert from \"assert\";\nimport fs from \"fs\";\nimport child_process from \"child_process\";\nimport commander from \"commander\";\nimport { Loader } from \"@fluidframework/container-loader\";\nimport { IFluidCodeDetails } from \"@fluidframework/core-interfaces\";\nimport { OdspDocumentServiceFactory, OdspDriverUrlResolver } from \"@fluidframework/odsp-driver\";\nimport { LocalCodeLoader } from \"@fluidframework/test-utils\";\nimport {\n    OdspTokenManager,\n    odspTokensCache,\n    getMicrosoftConfiguration,\n    OdspTokenConfig,\n} from \"@fluidframework/tool-utils\";\nimport { getLoginPageUrl, getOdspScope, getDriveId, IOdspTokens } from \"@fluidframework/odsp-doclib-utils\";\nimport { pkgName, pkgVersion } from \"./packageVersion\";\nimport { ITestConfig, ILoadTestConfig, ITestTenant } from \"./testConfigFile\";\nimport { IRunConfig, fluidExport, ILoadTest } from \"./loadTestDataStore\";\n\nconst packageName = `${pkgName}@${pkgVersion}`;\n\ninterface IOdspTestLoginInfo {\n    server: string;\n    username: string;\n    password: string;\n}\n\nconst codeDetails: IFluidCodeDetails = {\n    package: packageName,\n    config: {},\n};\n\nconst codeLoader = new LocalCodeLoader([[codeDetails, fluidExport]]);\nconst urlResolver = new OdspDriverUrlResolver();\nconst odspTokenManager = new OdspTokenManager(odspTokensCache);\n\nconst passwordTokenConfig = (username, password): OdspTokenConfig => ({\n    type: \"password\",\n    username,\n    password,\n});\n\nfunction createLoader(loginInfo: IOdspTestLoginInfo) {\n    const documentServiceFactory = new OdspDocumentServiceFactory(\n        async (_siteUrl: string, refresh: boolean, _claims?: string) => {\n            const tokens = await odspTokenManager.getOdspTokens(\n                loginInfo.server,\n                getMicrosoftConfiguration(),\n                passwordTokenConfig(loginInfo.username, loginInfo.password),\n                refresh,\n            );\n            return tokens.accessToken;\n        },\n        async (refresh: boolean, _claims?: string) => {\n            const tokens = await odspTokenManager.getPushTokens(\n                loginInfo.server,\n                getMicrosoftConfiguration(),\n                passwordTokenConfig(loginInfo.username, loginInfo.password),\n                refresh,\n            );\n            return tokens.accessToken;\n        },\n    );\n\n    // Construct the loader\n    const loader = new Loader({\n        urlResolver,\n        documentServiceFactory,\n        codeLoader,\n    });\n    return loader;\n}\n\nasync function initialize(driveId: string, loginInfo: IOdspTestLoginInfo) {\n    const loader = createLoader(loginInfo);\n    const container = await loader.createDetachedContainer(codeDetails);\n    container.on(\"error\", (error) => {\n        console.log(error);\n        process.exit(-1);\n    });\n    const siteUrl = `https://${loginInfo.server}`;\n    const request = urlResolver.createCreateNewRequest(siteUrl, driveId, \"/test\", \"test\");\n    await container.attach(request);\n    const dataStoreUrl = await container.getAbsoluteUrl(\"/\");\n    assert(dataStoreUrl);\n\n    container.close();\n\n    return dataStoreUrl;\n}\n\nasync function load(loginInfo: IOdspTestLoginInfo, url: string) {\n    const loader = createLoader(loginInfo);\n    const respond = await loader.request({ url });\n    // TODO: Error checking\n    return respond.value as ILoadTest;\n}\n\nasync function main() {\n    commander\n        .version(\"0.0.1\")\n        .requiredOption(\"-t, --tenant <tenant>\", \"Which test tenant info to use from testConfig.json\", \"fluidCI\")\n        .requiredOption(\"-p, --profile <profile>\", \"Which test profile to use from testConfig.json\", \"ci\")\n        .option(\"-u, --url <url>\", \"Load an existing data store rather than creating new\")\n        .option(\"-r, --runId <runId>\", \"run a child process with the given id. Requires --url option.\")\n        .option(\"-d, --debug\", \"Debug child processes via --inspect-brk\")\n        .option(\"-l, --log <filter>\", \"Filter debug logging. If not provided, uses DEBUG env variable.\")\n        .parse(process.argv);\n\n    const tenantArg: string = commander.tenant;\n    const profileArg: string = commander.profile;\n    const url: string | undefined = commander.url;\n    const runId: number | undefined = commander.runId === undefined ? undefined : parseInt(commander.runId, 10);\n    const debug: true | undefined = commander.debug;\n    const log: string | undefined = commander.log;\n\n    let config: ITestConfig;\n    try {\n        config = JSON.parse(fs.readFileSync(\"./testConfig.json\", \"utf-8\"));\n    } catch (e) {\n        console.error(\"Failed to read testConfig.json\");\n        console.error(e);\n        process.exit(-1);\n    }\n\n    const tenant: ITestTenant | undefined = config.tenants[tenantArg];\n    if (tenant === undefined) {\n        console.error(\"Invalid --tenant argument not found in testConfig.json tenants\");\n        process.exit(-1);\n    }\n\n    let password: string;\n    try {\n        // Expected format of login__odsp__test__accounts is simply string key-value pairs of username and password\n        const passwords: { [user: string]: string } =\n            JSON.parse(process.env.login__odsp__test__accounts ?? \"\");\n\n        password = passwords[tenant.username];\n        assert(password, \"Expected to find Password in an env variable since it wasn't provided via script param\");\n    } catch (e) {\n        console.error(\"Failed to parse login__odsp__test__accounts env variable\");\n        console.error(e);\n        process.exit(-1);\n    }\n    const loginInfo: IOdspTestLoginInfo = { server: tenant.server, username: tenant.username, password };\n\n    const profile: ILoadTestConfig | undefined = config.profiles[profileArg];\n    if (profile === undefined) {\n        console.error(\"Invalid --profile argument not found in testConfig.json profiles\");\n        process.exit(-1);\n    }\n\n    if (log !== undefined) {\n        process.env.DEBUG = log;\n    }\n\n    let result: number;\n    // When runId is specified (with url), kick off a single test runner and exit when it's finished\n    if (runId !== undefined) {\n        if (url === undefined) {\n            console.error(\"Missing --url argument needed to run child process\");\n            process.exit(-1);\n        }\n        result = await runnerProcess(loginInfo, profile, runId, url);\n        process.exit(result);\n    }\n\n    // When runId is not specified, this is the orchestrator process which will spawn child test runners.\n    result = await orchestratorProcess(\n        { ...loginInfo, tenantFriendlyName: tenantArg },\n        { ...profile, name: profileArg },\n        { url, debug });\n    process.exit(result);\n}\n\n/**\n * Implementation of the runner process. Returns the return code to exit the process with.\n */\nasync function runnerProcess(\n    loginInfo: IOdspTestLoginInfo,\n    profile: ILoadTestConfig,\n    runId: number,\n    url: string,\n): Promise<number> {\n    try {\n        const runConfig: IRunConfig = {\n            runId,\n            testConfig: profile,\n        };\n        const stressTest = await load(loginInfo, url);\n        await stressTest.run(runConfig);\n        console.log(`${runId.toString().padStart(3)}> exit`);\n        return 0;\n    } catch (e) {\n        console.error(`${runId.toString().padStart(3)}> error: loading test`);\n        console.error(e);\n        return -1;\n    }\n}\n\n/**\n * Implementation of the orchestrator process. Returns the return code to exit the process with.\n */\nasync function orchestratorProcess(\n    loginInfo: IOdspTestLoginInfo & { tenantFriendlyName: string },\n    profile: ILoadTestConfig & { name: string },\n    args: { url?: string, debug?: true },\n): Promise<number> {\n    let odspTokens: IOdspTokens;\n    try {\n        // Ensure fresh tokens here so the test runners have them cached\n        odspTokens = await odspTokenManager.getOdspTokens(\n            loginInfo.server,\n            getMicrosoftConfiguration(),\n            passwordTokenConfig(loginInfo.username, loginInfo.password),\n            undefined /* forceRefresh */,\n            true /* forceReauth */,\n        );\n        await odspTokenManager.getPushTokens(\n            loginInfo.server,\n            getMicrosoftConfiguration(),\n            passwordTokenConfig(loginInfo.username, loginInfo.password),\n            undefined /* forceRefresh */,\n            true /* forceReauth */,\n        );\n    } catch (ex) {\n        // Log the login page url in case the caller needs to allow consent for this app\n        const loginPageUrl =\n            getLoginPageUrl(\n                false,\n                loginInfo.server,\n                getMicrosoftConfiguration(),\n                getOdspScope(loginInfo.server),\n                \"http://localhost:7000/auth/callback\",\n            );\n\n        console.log(\"You may need to allow consent for this app. Re-run the tool after allowing consent.\");\n        console.log(`Go here allow the app: ${loginPageUrl}\\n`);\n\n        throw ex;\n    }\n\n    // Automatically determine driveId based on the server and user\n    const driveId = await getDriveId(loginInfo.server, \"\", undefined, { accessToken: odspTokens.accessToken });\n\n    // Create a new file if a url wasn't provided\n    const url = args.url ?? await initialize(driveId, loginInfo);\n\n    const estRunningTimeMin = Math.floor(2 * profile.totalSendCount / (profile.opRatePerMin * profile.numClients));\n    console.log(`Connecting to ${args.url ? \"existing\" : \"new\"} Container targeting dataStore with URL:\\n${url}`);\n    console.log(`Authenticated as user: ${loginInfo.username}`);\n    console.log(`Selected test profile: ${profile.name}`);\n    console.log(`Estimated run time: ${estRunningTimeMin} minutes\\n`);\n\n    const p: Promise<void>[] = [];\n    for (let i = 0; i < profile.numClients; i++) {\n        const childArgs: string[] = [\n            \"./dist/nodeStressTest.js\",\n            \"--tenant\", loginInfo.tenantFriendlyName,\n            \"--profile\", profile.name,\n            \"--runId\", i.toString(),\n            \"--url\", url];\n        if (args.debug) {\n            const debugPort = 9230 + i; // 9229 is the default and will be used for the root orchestrator process\n            childArgs.unshift(`--inspect-brk=${debugPort}`);\n        }\n        const process = child_process.spawn(\n            \"node\",\n            childArgs,\n            { stdio: \"inherit\" },\n        );\n        p.push(new Promise((resolve) => process.on(\"close\", resolve)));\n    }\n    await Promise.all(p);\n    return 0;\n}\n\nmain().catch(\n    (error) => {\n        console.error(error);\n        process.exit(-1);\n    },\n);\n"]}