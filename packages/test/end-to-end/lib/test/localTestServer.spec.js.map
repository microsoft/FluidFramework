{"version":3,"file":"localTestServer.spec.js","sourceRoot":"","sources":["../../src/test/localTestServer.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport * as api from \"@fluid-internal/client-api\";\nimport { IComponentHandle } from \"@microsoft/fluid-component-core-interfaces\";\nimport { MessageType } from \"@microsoft/fluid-protocol-definitions\";\nimport { SharedString } from \"@microsoft/fluid-sequence\";\nimport * as assert from \"assert\";\nimport {\n    DocumentDeltaEventManager,\n    ITestDeltaConnectionServer,\n    TestDeltaConnectionServer,\n    TestDocumentServiceFactory,\n    TestResolver,\n} from \"@microsoft/fluid-local-test-server\";\n\ndescribe(\"LocalTestServer\", () => {\n  const id = \"fluid://test.com/test/test\";\n\n  let testDeltaConnectionServer: ITestDeltaConnectionServer;\n  let documentDeltaEventManager: DocumentDeltaEventManager;\n  let user1Document: api.Document;\n  let user2Document: api.Document;\n  let user1SharedString: SharedString;\n  let user2SharedString: SharedString;\n\n  beforeEach(async () => {\n    testDeltaConnectionServer = TestDeltaConnectionServer.create();\n    documentDeltaEventManager = new DocumentDeltaEventManager(testDeltaConnectionServer);\n\n    const resolver = new TestResolver();\n    const serviceFactory = new TestDocumentServiceFactory(testDeltaConnectionServer);\n    user1Document = await api.load(\n      id, { resolver }, {}, serviceFactory);\n    let root = user1Document.getRoot();\n    user1SharedString = user1Document.createString();\n    root.set(\"SharedString\", user1SharedString.handle);\n    documentDeltaEventManager.registerDocuments(user1Document);\n\n    user2Document = await api.load(\n      id, { resolver }, {}, serviceFactory);\n    root = user2Document.getRoot();\n    const handle = await root.wait<IComponentHandle>(\"SharedString\");\n    user2SharedString = await handle.get<SharedString>();\n    documentDeltaEventManager.registerDocuments(user2Document);\n  });\n\n  describe(\"Document.existing\", () => {\n    it(\"Validate document is new for user1 1 and exists for client 2\", () => {\n      assert.equal(user1Document.existing, false, \"Document already exists\");\n      assert.equal(user2Document.existing, true, \"Document does not exist on the server\");\n      assert.notEqual(user2SharedString, undefined, \"Document does not contain a SharedString\");\n    });\n  });\n\n  describe(\"Attach Op Handlers on Both Clients\", () => {\n    it(\"Validate messaging\", async () => {\n      let user1ReceivedMsgCount: number = 0;\n      let user2ReceivedMsgCount: number = 0;\n\n      user1SharedString.on(\"op\", (msg, local) => {\n        if (!local) {\n          if (msg.type === MessageType.Operation) {\n            user1ReceivedMsgCount = user1ReceivedMsgCount + 1;\n          }\n        }\n      });\n\n      user2SharedString.on(\"op\", (msg, local) => {\n        if (!local) {\n          if (msg.type === MessageType.Operation) {\n            user2ReceivedMsgCount = user2ReceivedMsgCount + 1;\n          }\n        }\n      });\n\n      await documentDeltaEventManager.pauseProcessing();\n\n      user1SharedString.insertText(0, \"A\");\n      user2SharedString.insertText(0, \"C\");\n      assert.equal(user1ReceivedMsgCount, 0, \"User1 received message count is incorrect\");\n      assert.equal(user2ReceivedMsgCount, 0, \"User2 received message count is incorrect\");\n\n      await documentDeltaEventManager.processOutgoing(user1Document);\n      assert.equal(user1ReceivedMsgCount, 0, \"User1 received message count is incorrect\");\n      assert.equal(user2ReceivedMsgCount, 0, \"User2 received message count is incorrect\");\n\n      await documentDeltaEventManager.process(user2Document);\n      assert.equal(user1ReceivedMsgCount, 0, \"User1 received message count is incorrect\");\n      assert.equal(user2ReceivedMsgCount, 1, \"User2 received message count is incorrect\");\n\n      await documentDeltaEventManager.processIncoming(user1Document);\n      assert.equal(user1ReceivedMsgCount, 1, \"User1 received message count is incorrect\");\n      assert.equal(user2ReceivedMsgCount, 1, \"User2 received message count is incorrect\");\n\n      user1SharedString.insertText(0, \"B\");\n      await documentDeltaEventManager.process(user1Document, user2Document);\n\n      assert.equal(user1SharedString.getText(), user2SharedString.getText());\n      assert.equal(user1SharedString.getText().length, 3, user1SharedString.getText());\n      assert.equal(user1ReceivedMsgCount, 1, \"User1 received message count is incorrect\");\n      assert.equal(user2ReceivedMsgCount, 2, \"User2 received message count is incorrect\");\n    });\n  });\n\n  afterEach(async () => {\n    await Promise.all([\n      user1Document.close(),\n      user2Document.close(),\n    ]);\n    await testDeltaConnectionServer.webSocketServer.close();\n  });\n});\n"]}