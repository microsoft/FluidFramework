{"version":3,"file":"directoryEndToEndTests.spec.js","sourceRoot":"","sources":["../../src/test/directoryEndToEndTests.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/* tslint:disable:no-unsafe-any */\n/* tslint:disable:no-backbone-get-set-outside-model  */\nimport * as api from \"@fluid-internal/client-api\";\nimport { IComponentHandle } from \"@microsoft/fluid-component-core-interfaces\";\nimport { ISharedDirectory, ISharedMap, SharedDirectory, SharedMap } from \"@microsoft/fluid-map\";\nimport { MessageType } from \"@microsoft/fluid-protocol-definitions\";\nimport * as assert from \"assert\";\nimport {\n    DocumentDeltaEventManager,\n    ITestDeltaConnectionServer,\n    TestDeltaConnectionServer,\n    TestDocumentServiceFactory,\n    TestResolver,\n} from \"@microsoft/fluid-local-test-server\";\n\ndescribe(\"Directory\", () => {\n    const id = \"fluid://test.com/test/test\";\n    const directoryId = \"testDirectory\";\n\n    let testDeltaConnectionServer: ITestDeltaConnectionServer;\n    let documentDeltaEventManager: DocumentDeltaEventManager;\n    let user1Document: api.Document;\n    let user2Document: api.Document;\n    let user3Document: api.Document;\n    let root1Directory: ISharedDirectory;\n    let root2Directory: ISharedDirectory;\n    let root3Directory: ISharedDirectory;\n\n    beforeEach(async () => {\n        testDeltaConnectionServer = TestDeltaConnectionServer.create();\n        documentDeltaEventManager = new DocumentDeltaEventManager(testDeltaConnectionServer);\n        const serviceFactory = new TestDocumentServiceFactory(testDeltaConnectionServer);\n        const resolver = new TestResolver();\n        user1Document = await api.load(\n            id, { resolver }, {}, serviceFactory);\n        documentDeltaEventManager.registerDocuments(user1Document);\n\n        user2Document = await api.load(\n            id, { resolver }, {}, serviceFactory);\n        documentDeltaEventManager.registerDocuments(user2Document);\n\n        user3Document = await api.load(\n            id, { resolver }, {}, serviceFactory);\n        documentDeltaEventManager.registerDocuments(user3Document);\n        await documentDeltaEventManager.pauseProcessing();\n\n        // Create a directory on the root and propagate it to other documents\n        const directory = SharedDirectory.create(user1Document.runtime);\n        user1Document.getRoot().set(directoryId, directory.handle);\n        await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n\n        root1Directory = await user1Document.getRoot().get<IComponentHandle>(directoryId).get<ISharedDirectory>();\n        root2Directory = await user2Document.getRoot().get<IComponentHandle>(directoryId).get<ISharedDirectory>();\n        root3Directory = await user3Document.getRoot().get<IComponentHandle>(directoryId).get<ISharedDirectory>();\n    });\n\n    function expectAllValues(msg, key, path, value1, value2, value3) {\n        const user1Value = root1Directory.getWorkingDirectory(path).get(key) as string;\n        assert.equal(user1Value, value1, `Incorrect value for ${key} in document 1 ${msg}`);\n        const user2Value = root2Directory.getWorkingDirectory(path).get(key) as string;\n        assert.equal(user2Value, value2, `Incorrect value for ${key} in document 2 ${msg}`);\n        const user3Value = root3Directory.getWorkingDirectory(path).get(key) as string;\n        assert.equal(user3Value, value3, `Incorrect value for ${key} in document 3 ${msg}`);\n    }\n    function expectAllBeforeValues(key, path, value1, value2, value3) {\n        expectAllValues(\"before process\", key, path, value1, value2, value3);\n    }\n    function expectAllAfterValues(key, path, value) {\n        expectAllValues(\"after process\", key, path, value, value, value);\n    }\n\n    function expectAllSize(size: number, path?: string) {\n        const dir1 = path ? root1Directory.getWorkingDirectory(path) : root1Directory;\n        const dir2 = path ? root2Directory.getWorkingDirectory(path) : root2Directory;\n        const dir3 = path ? root3Directory.getWorkingDirectory(path) : root3Directory;\n\n        const keys1 = Array.from(dir1.keys());\n        assert.equal(keys1.length, size, \"Incorrect number of Keys in document1\");\n        const keys2 = Array.from(dir2.keys());\n        assert.equal(keys2.length, size, \"Incorrect number of Keys in document2\");\n        const keys3 = Array.from(dir3.keys());\n        assert.equal(keys3.length, size, \"Incorrect number of Keys in document3\");\n\n        assert.equal(dir1.size, size, \"Incorrect map size in document1\");\n        assert.equal(dir2.size, size, \"Incorrect map size in document2\");\n        assert.equal(dir3.size, size, \"Incorrect map size in document3\");\n    }\n\n    describe(\"Smoke test\", () => {\n        it(\"should create the directory in 3 documents correctly\", async () => {\n            // Directory was created in beforeEach\n            assert.ok(root1Directory, `Couldn't find the directory in root1, instead got ${root1Directory}`);\n            assert.ok(root2Directory, `Couldn't find the directory in root2, instead got ${root2Directory}`);\n            assert.ok(root3Directory, `Couldn't find the directory in root3, instead got ${root3Directory}`);\n        });\n\n        it(\"should set a key in the directory in three documents correctly\", async () => {\n            root1Directory.set(\"testKey1\", \"testValue1\");\n            await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n            expectAllAfterValues(\"testKey1\", \"/\", \"testValue1\");\n        });\n    });\n\n    describe(\"Root operations\", () => {\n        beforeEach(\"Populate with a value under the root\", async () => {\n            root1Directory.set(\"testKey1\", \"testValue1\");\n            await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n            expectAllAfterValues(\"testKey1\", \"/\", \"testValue1\");\n        });\n\n        it(\"should delete a value in 3 documents correctly\", async () => {\n            root2Directory.delete(\"testKey1\");\n            await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n\n            const hasKey1 = root1Directory.has(\"testKey1\");\n            assert.equal(hasKey1, false, \"testKey1 not deleted in document 1\");\n\n            const hasKey2 = root2Directory.has(\"testKey1\");\n            assert.equal(hasKey2, false, \"testKey1 not deleted in document 1\");\n\n            const hasKey3 = root3Directory.has(\"testKey1\");\n            assert.equal(hasKey3, false, \"testKey1 not deleted in document 1\");\n        });\n\n        it(\"should have the correct size in three documents\", async () => {\n            root3Directory.set(\"testKey3\", true);\n            await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n\n            // check the number of keys in the map (2 keys set)\n            expectAllSize(2);\n        });\n\n        it(\"should set key value to undefined in three documents correctly\", async () => {\n            root2Directory.set(\"testKey1\", undefined);\n            root2Directory.set(\"testKey2\", undefined);\n            await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n            expectAllAfterValues(\"testKey1\", \"/\", undefined);\n            expectAllAfterValues(\"testKey2\", \"/\", undefined);\n        });\n\n        it(\"should update value and trigger onValueChanged on other two documents\", async () => {\n            let user1ValueChangedCount: number = 0;\n            let user2ValueChangedCount: number = 0;\n            let user3ValueChangedCount: number = 0;\n            root1Directory.on(\"valueChanged\", (changed, local, msg) => {\n                if (!local) {\n                    if (msg.type === MessageType.Operation) {\n                        assert.equal(changed.key, \"testKey1\", \"Incorrect value for testKey1 in document 1\");\n                        user1ValueChangedCount = user1ValueChangedCount + 1;\n                    }\n                }\n            });\n            root2Directory.on(\"valueChanged\", (changed, local, msg) => {\n                if (!local) {\n                    if (msg.type === MessageType.Operation) {\n                        assert.equal(changed.key, \"testKey1\", \"Incorrect value for testKey1 in document 2\");\n                        user2ValueChangedCount = user2ValueChangedCount + 1;\n                    }\n                }\n            });\n            root3Directory.on(\"valueChanged\", (changed, local, msg) => {\n                if (!local) {\n                    if (msg.type === MessageType.Operation) {\n                        assert.equal(changed.key, \"testKey1\", \"Incorrect value for testKey1 in document 3\");\n                        user3ValueChangedCount = user3ValueChangedCount + 1;\n                    }\n                }\n            });\n\n            root1Directory.set(\"testKey1\", \"updatedValue\");\n\n            await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n\n            assert.equal(user1ValueChangedCount, 0, \"Incorrect number of valueChanged op received in document 1\");\n            assert.equal(user2ValueChangedCount, 1, \"Incorrect number of valueChanged op received in document 2\");\n            assert.equal(user3ValueChangedCount, 1, \"Incorrect number of valueChanged op received in document 3\");\n\n            expectAllAfterValues(\"testKey1\", \"/\", \"updatedValue\");\n        });\n\n        describe(\"Eventual consistency after simultaneous operations\", () => {\n            it(\"set/set\", async () => {\n                root1Directory.set(\"testKey1\", \"value1\");\n                root2Directory.set(\"testKey1\", \"value2\");\n                root3Directory.set(\"testKey1\", \"value0\");\n                root3Directory.set(\"testKey1\", \"value3\");\n\n                expectAllBeforeValues(\"testKey1\", \"/\", \"value1\", \"value2\", \"value3\");\n                await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n                expectAllAfterValues(\"testKey1\", \"/\", \"value3\");\n            });\n\n            it(\"delete/set\", async () => {\n                // set after delete\n                root1Directory.set(\"testKey1\", \"value1.1\");\n                root2Directory.delete(\"testKey1\");\n                root3Directory.set(\"testKey1\", \"value1.3\");\n\n                expectAllBeforeValues(\"testKey1\", \"/\", \"value1.1\", undefined, \"value1.3\");\n                await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n                expectAllAfterValues(\"testKey1\", \"/\", \"value1.3\");\n            });\n\n            it(\"delete/set from the same document\", async () => {\n                // delete and then set on the same document\n                root1Directory.set(\"testKey2\", \"value2.1\");\n                root2Directory.delete(\"testKey2\");\n                root3Directory.set(\"testKey2\", \"value2.3\");\n                // drain the outgoing so that the next set will come after\n                await documentDeltaEventManager.processOutgoing(user1Document, user2Document, user3Document);\n                root2Directory.set(\"testKey2\", \"value2.2\");\n\n                expectAllBeforeValues(\"testKey2\", \"/\", \"value2.1\", \"value2.2\", \"value2.3\");\n                await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n                expectAllAfterValues(\"testKey2\", \"/\", \"value2.2\");\n            });\n\n            it(\"set/delete\", async () => {\n                // delete after set\n                root1Directory.set(\"testKey3\", \"value3.1\");\n                root2Directory.set(\"testKey3\", \"value3.2\");\n                root3Directory.delete(\"testKey3\");\n\n                expectAllBeforeValues(\"testKey3\", \"/\", \"value3.1\", \"value3.2\", undefined);\n                await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n                expectAllAfterValues(\"testKey3\", \"/\", undefined);\n            });\n\n            it(\"set/clear\", async () => {\n                // clear after set\n                root1Directory.set(\"testKey1\", \"value1.1\");\n                root2Directory.set(\"testKey1\", \"value1.2\");\n                root3Directory.clear();\n                expectAllBeforeValues(\"testKey1\", \"/\", \"value1.1\", \"value1.2\", undefined);\n                assert.equal(root3Directory.size, 0, \"Incorrect map size after clear\");\n                await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n                expectAllAfterValues(\"testKey1\", \"/\", undefined);\n                expectAllSize(0);\n            });\n\n            it(\"clear/set on the same document\", async () => {\n                // set after clear on the same map\n                root1Directory.set(\"testKey2\", \"value2.1\");\n                root2Directory.clear();\n                root3Directory.set(\"testKey2\", \"value2.3\");\n                // drain the outgoing so that the next set will come after\n                await documentDeltaEventManager.processOutgoing(user1Document, user2Document, user3Document);\n                root2Directory.set(\"testKey2\", \"value2.2\");\n                expectAllBeforeValues(\"testKey2\", \"/\", \"value2.1\", \"value2.2\", \"value2.3\");\n                await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n                expectAllAfterValues(\"testKey2\", \"/\", \"value2.2\");\n                expectAllSize(1);\n            });\n\n            it(\"clear/set\", async () => {\n                // set after clear\n                root1Directory.set(\"testKey3\", \"value3.1\");\n                root2Directory.clear();\n                root3Directory.set(\"testKey3\", \"value3.3\");\n                expectAllBeforeValues(\"testKey3\", \"/\", \"value3.1\", undefined, \"value3.3\");\n                await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n                expectAllAfterValues(\"testKey3\", \"/\", \"value3.3\");\n                expectAllSize(1);\n            });\n        });\n\n        describe(\"Nested map support\", () => {\n            it(\"supports setting a map as a value\", async () => {\n                const newMap = SharedMap.create(user1Document.runtime);\n                root1Directory.set(\"mapKey\", newMap.handle);\n                await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n                const [root1Map, root2Map, root3Map] = await Promise.all([\n                    root1Directory.get<IComponentHandle>(\"mapKey\").get<ISharedMap>(),\n                    root2Directory.get<IComponentHandle>(\"mapKey\").get<ISharedMap>(),\n                    root3Directory.get<IComponentHandle>(\"mapKey\").get<ISharedMap>(),\n                ]);\n\n                assert.ok(root1Map);\n                assert.ok(root2Map);\n                assert.ok(root3Map);\n\n                root2Map.set(\"testMapKey\", \"testMapValue\");\n                await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n                assert.equal(root3Map.get(\"testMapKey\"), \"testMapValue\", \"Wrong values in map in document 3\");\n            });\n        });\n    });\n\n    describe(\"SubDirectory operations\", () => {\n        it(\"should set a key in a SubDirectory in three documents correctly\", async () => {\n            root1Directory.createSubDirectory(\"testSubDir1\").set(\"testKey1\", \"testValue1\");\n            await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n            expectAllAfterValues(\"testKey1\", \"testSubDir1\", \"testValue1\");\n        });\n\n        it(\"should delete a key in a SubDirectory in three documents correctly\", async () => {\n            root2Directory.createSubDirectory(\"testSubDir1\").set(\"testKey1\", \"testValue1\");\n            await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n            expectAllAfterValues(\"testKey1\", \"testSubDir1\", \"testValue1\");\n            const subDir1 = root3Directory.getWorkingDirectory(\"testSubDir1\");\n            subDir1.delete(\"testKey1\");\n            await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n            expectAllAfterValues(\"testKey1\", \"testSubDir1\", undefined);\n        });\n\n        it(\"should delete a child SubDirectory in a SubDirectory in three documents correctly\", async () => {\n            root2Directory.createSubDirectory(\"testSubDir1\").set(\"testKey1\", \"testValue1\");\n            await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n            expectAllAfterValues(\"testKey1\", \"testSubDir1\", \"testValue1\");\n            root3Directory.deleteSubDirectory(\"testSubDir1\");\n            await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n            assert.equal(root1Directory.getWorkingDirectory(\"testSubDir1\"), undefined);\n            assert.equal(root2Directory.getWorkingDirectory(\"testSubDir1\"), undefined);\n            assert.equal(root3Directory.getWorkingDirectory(\"testSubDir1\"), undefined);\n        });\n\n        it(\"should have the correct size in three documents\", async () => {\n            root1Directory.createSubDirectory(\"testSubDir1\").set(\"testKey1\", \"testValue1\");\n            root2Directory.createSubDirectory(\"testSubDir1\").set(\"testKey2\", \"testValue2\");\n            root3Directory.createSubDirectory(\"otherSubDir2\").set(\"testKey3\", \"testValue3\");\n            await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n            expectAllSize(2, \"testSubDir1\");\n            root3Directory.getWorkingDirectory(\"testSubDir1\").clear();\n            await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n            expectAllSize(0, \"testSubDir1\");\n        });\n\n        it(\"should update value and trigger onValueChanged on other two documents\", async () => {\n            let user1ValueChangedCount: number = 0;\n            let user2ValueChangedCount: number = 0;\n            let user3ValueChangedCount: number = 0;\n            root1Directory.on(\"valueChanged\", (changed, local, msg) => {\n                if (!local) {\n                    if (msg.type === MessageType.Operation) {\n                        assert.equal(changed.key, \"testKey1\", \"Incorrect value for key in document 1\");\n                        assert.equal(changed.path, \"/testSubDir1\", \"Incorrect value for path in document 1\");\n                        user1ValueChangedCount = user1ValueChangedCount + 1;\n                    }\n                }\n            });\n            root2Directory.on(\"valueChanged\", (changed, local, msg) => {\n                if (!local) {\n                    if (msg.type === MessageType.Operation) {\n                        assert.equal(changed.key, \"testKey1\", \"Incorrect value for key in document 2\");\n                        assert.equal(changed.path, \"/testSubDir1\", \"Incorrect value for path in document 2\");\n                        user2ValueChangedCount = user2ValueChangedCount + 1;\n                    }\n                }\n            });\n            root3Directory.on(\"valueChanged\", (changed, local, msg) => {\n                if (!local) {\n                    if (msg.type === MessageType.Operation) {\n                        assert.equal(changed.key, \"testKey1\", \"Incorrect value for key in document 3\");\n                        assert.equal(changed.path, \"/testSubDir1\", \"Incorrect value for path in document 3\");\n                        user3ValueChangedCount = user3ValueChangedCount + 1;\n                    }\n                }\n            });\n\n            root1Directory.createSubDirectory(\"testSubDir1\").set(\"testKey1\", \"updatedValue\");\n\n            await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n\n            assert.equal(user1ValueChangedCount, 0, \"Incorrect number of valueChanged op received in document 1\");\n            assert.equal(user2ValueChangedCount, 1, \"Incorrect number of valueChanged op received in document 2\");\n            assert.equal(user3ValueChangedCount, 1, \"Incorrect number of valueChanged op received in document 3\");\n\n            expectAllAfterValues(\"testKey1\", \"/testSubDir1\", \"updatedValue\");\n        });\n\n        describe(\"Eventual consistency after simultaneous operations\", () => {\n            let root1SubDir;\n            let root2SubDir;\n            let root3SubDir;\n            beforeEach(async () => {\n                root1Directory.createSubDirectory(\"testSubDir\").set(\"dummyKey\", \"dummyValue\");\n                await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n                root1SubDir = root1Directory.getWorkingDirectory(\"testSubDir\");\n                root2SubDir = root2Directory.getWorkingDirectory(\"testSubDir\");\n                root3SubDir = root3Directory.getWorkingDirectory(\"testSubDir\");\n            });\n\n            it(\"set/set\", async () => {\n                root1SubDir.set(\"testKey1\", \"value1\");\n                root2SubDir.set(\"testKey1\", \"value2\");\n                root3SubDir.set(\"testKey1\", \"value0\");\n                root3SubDir.set(\"testKey1\", \"value3\");\n\n                expectAllBeforeValues(\"testKey1\", \"/testSubDir\", \"value1\", \"value2\", \"value3\");\n                await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n                expectAllAfterValues(\"testKey1\", \"/testSubDir\", \"value3\");\n            });\n\n            it(\"delete/set\", async () => {\n                // set after delete\n                root1SubDir.set(\"testKey1\", \"value1.1\");\n                root2SubDir.delete(\"testKey1\");\n                root3SubDir.set(\"testKey1\", \"value1.3\");\n\n                expectAllBeforeValues(\"testKey1\", \"/testSubDir\", \"value1.1\", undefined, \"value1.3\");\n                await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n                expectAllAfterValues(\"testKey1\", \"/testSubDir\", \"value1.3\");\n            });\n\n            it(\"delete/set from the same document\", async () => {\n                // delete and then set on the same document\n                root1SubDir.set(\"testKey2\", \"value2.1\");\n                root2SubDir.delete(\"testKey2\");\n                root3SubDir.set(\"testKey2\", \"value2.3\");\n                // drain the outgoing so that the next set will come after\n                await documentDeltaEventManager.processOutgoing(user1Document, user2Document, user3Document);\n                root2SubDir.set(\"testKey2\", \"value2.2\");\n\n                expectAllBeforeValues(\"testKey2\", \"/testSubDir\", \"value2.1\", \"value2.2\", \"value2.3\");\n                await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n                expectAllAfterValues(\"testKey2\", \"/testSubDir\", \"value2.2\");\n            });\n\n            it(\"set/delete\", async () => {\n                // delete after set\n                root1SubDir.set(\"testKey3\", \"value3.1\");\n                root2SubDir.set(\"testKey3\", \"value3.2\");\n                root3SubDir.delete(\"testKey3\");\n\n                expectAllBeforeValues(\"testKey3\", \"/testSubDir\", \"value3.1\", \"value3.2\", undefined);\n                await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n                expectAllAfterValues(\"testKey3\", \"/testSubDir\", undefined);\n            });\n\n            it(\"set/clear\", async () => {\n                // clear after set\n                root1SubDir.set(\"testKey1\", \"value1.1\");\n                root2SubDir.set(\"testKey1\", \"value1.2\");\n                root3SubDir.clear();\n                expectAllBeforeValues(\"testKey1\", \"/testSubDir\", \"value1.1\", \"value1.2\", undefined);\n                assert.equal(root3SubDir.size, 0, \"Incorrect map size after clear\");\n                await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n                expectAllAfterValues(\"testKey1\", \"/testSubDir\", undefined);\n                expectAllSize(0, \"/testSubDir\");\n            });\n\n            it(\"clear/set on the same document\", async () => {\n                // set after clear on the same map\n                root1SubDir.set(\"testKey2\", \"value2.1\");\n                root2SubDir.clear();\n                root3SubDir.set(\"testKey2\", \"value2.3\");\n                // drain the outgoing so that the next set will come after\n                await documentDeltaEventManager.processOutgoing(user1Document, user2Document, user3Document);\n                root2SubDir.set(\"testKey2\", \"value2.2\");\n                expectAllBeforeValues(\"testKey2\", \"/testSubDir\", \"value2.1\", \"value2.2\", \"value2.3\");\n                await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n                expectAllAfterValues(\"testKey2\", \"/testSubDir\", \"value2.2\");\n                expectAllSize(1, \"/testSubDir\");\n            });\n\n            it(\"clear/set\", async () => {\n                // set after clear\n                root1SubDir.set(\"testKey3\", \"value3.1\");\n                root2SubDir.clear();\n                root3SubDir.set(\"testKey3\", \"value3.3\");\n                expectAllBeforeValues(\"testKey3\", \"/testSubDir\", \"value3.1\", undefined, \"value3.3\");\n                await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n                expectAllAfterValues(\"testKey3\", \"/testSubDir\", \"value3.3\");\n                expectAllSize(1, \"/testSubDir\");\n            });\n        });\n    });\n\n    afterEach(async () => {\n        await Promise.all([\n            user1Document.close(),\n            user2Document.close(),\n            user3Document.close(),\n        ]);\n        await testDeltaConnectionServer.webSocketServer.close();\n    });\n});\n"]}