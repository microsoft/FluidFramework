{"version":3,"file":"mapEndToEndTests.spec.js","sourceRoot":"","sources":["../../src/test/mapEndToEndTests.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/* tslint:disable:no-unsafe-any */\n/* tslint:disable:no-backbone-get-set-outside-model  */\nimport * as api from \"@fluid-internal/client-api\";\nimport { ISharedMap } from \"@microsoft/fluid-map\";\nimport { MessageType } from \"@microsoft/fluid-protocol-definitions\";\nimport * as assert from \"assert\";\nimport {\n    DocumentDeltaEventManager,\n    ITestDeltaConnectionServer,\n    TestDeltaConnectionServer,\n    TestDocumentServiceFactory,\n    TestResolver,\n} from \"@microsoft/fluid-local-test-server\";\n\ndescribe(\"Map\", () => {\n    const id = \"fluid://test.com/test/test\";\n\n    let testDeltaConnectionServer: ITestDeltaConnectionServer;\n    let documentDeltaEventManager: DocumentDeltaEventManager;\n    let user1Document: api.Document;\n    let user2Document: api.Document;\n    let user3Document: api.Document;\n    let root1: ISharedMap;\n    let root2: ISharedMap;\n    let root3: ISharedMap;\n\n    beforeEach(async () => {\n        testDeltaConnectionServer = TestDeltaConnectionServer.create();\n        documentDeltaEventManager = new DocumentDeltaEventManager(testDeltaConnectionServer);\n        const serviceFactory = new TestDocumentServiceFactory(testDeltaConnectionServer);\n        const resolver = new TestResolver();\n        user1Document = await api.load(\n            id, { resolver }, {}, serviceFactory);\n        documentDeltaEventManager.registerDocuments(user1Document);\n\n        user2Document = await api.load(\n            id, { resolver }, {}, serviceFactory);\n        documentDeltaEventManager.registerDocuments(user2Document);\n\n        user3Document = await api.load(\n            id, { resolver }, {}, serviceFactory);\n        documentDeltaEventManager.registerDocuments(user3Document);\n        root1 = user1Document.getRoot();\n        root2 = user2Document.getRoot();\n        root3 = user3Document.getRoot();\n        await documentDeltaEventManager.pauseProcessing();\n        root1.set(\"testKey1\", \"testValue\");\n        await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n    });\n\n    function expectAllValues(msg, key, value1, value2, value3) {\n        const user1Value = root1.get(key) as string;\n        assert.equal(user1Value, value1, `Incorrect value for ${key} in document 1 ${msg}`);\n        const user2Value = root2.get(key) as string;\n        assert.equal(user2Value, value2, `Incorrect value for ${key} in document 2 ${msg}`);\n        const user3Value = root3.get(key) as string;\n        assert.equal(user3Value, value3, `Incorrect value for ${key} in document 3 ${msg}`);\n    }\n    function expectAllBeforeValues(key, value1, value2, value3) {\n        expectAllValues(\"before process\", key, value1, value2, value3);\n    }\n    function expectAllAfterValues(key, value) {\n        expectAllValues(\"after process\", key, value, value, value);\n    }\n\n    function expectAllSize(size) {\n        const keys1 = Array.from(root1.keys());\n        assert.equal(keys1.length, size, \"Incorrect number of Keys in document1\");\n        const keys2 = Array.from(root2.keys());\n        assert.equal(keys2.length, size, \"Incorrect number of Keys in document2\");\n        const keys3 = Array.from(root3.keys());\n        assert.equal(keys3.length, size, \"Incorrect number of Keys in document3\");\n\n        assert.equal(root1.size, size, \"Incorrect map size in document1\");\n        assert.equal(root2.size, size, \"Incorrect map size in document2\");\n        assert.equal(root3.size, size, \"Incorrect map size in document3\");\n    }\n\n    it(\"should set key value in three documents correctly\", async () => {\n        expectAllAfterValues(\"testKey1\", \"testValue\");\n    });\n\n    it(\"should set key value to undefined in three documents correctly\", async () => {\n        root2.set(\"testKey1\", undefined);\n        root2.set(\"testKey2\", undefined);\n        await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n        expectAllAfterValues(\"testKey1\", undefined);\n        expectAllAfterValues(\"testKey2\", undefined);\n    });\n\n    it(\"Should delete values in 3 documents correctly\", async () => {\n        root2.delete(\"testKey1\");\n        await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n\n        const hasKey1 = root1.has(\"testKey1\");\n        assert.equal(hasKey1, false, \"testKey1 not deleted in document 1\");\n\n        const hasKey2 = root2.has(\"testKey1\");\n        assert.equal(hasKey2, false, \"testKey1 not deleted in document 1\");\n\n        const hasKey3 = root3.has(\"testKey1\");\n        assert.equal(hasKey3, false, \"testKey1 not deleted in document 1\");\n    });\n\n    it(\"Should check if three documents has same number of keys\", async () => {\n        root3.set(\"testKey3\", true);\n        await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n\n        // check the number of keys in the map (2 keys set  + insights key = 3)\n        expectAllSize(3);\n    });\n\n    it(\"Should update value and trigger onValueChanged on other two documents\", async () => {\n        let user1ValueChangedCount: number = 0;\n        let user2ValueChangedCount: number = 0;\n        let user3ValueChangedCount: number = 0;\n        root1.on(\"valueChanged\", (changed, local, msg) => {\n            if (!local) {\n                if (msg.type === MessageType.Operation) {\n                    assert.equal(changed.key, \"testKey1\", \"Incorrect value for testKey1 in document 1\");\n                    user1ValueChangedCount = user1ValueChangedCount + 1;\n                }\n            }\n        });\n        root2.on(\"valueChanged\", (changed, local, msg) => {\n            if (!local) {\n                if (msg.type === MessageType.Operation) {\n                    assert.equal(changed.key, \"testKey1\", \"Incorrect value for testKey1 in document 2\");\n                    user2ValueChangedCount = user2ValueChangedCount + 1;\n                }\n            }\n        });\n        root3.on(\"valueChanged\", (changed, local, msg) => {\n            if (!local) {\n                if (msg.type === MessageType.Operation) {\n                    assert.equal(changed.key, \"testKey1\", \"Incorrect value for testKey1 in document 3\");\n                    user3ValueChangedCount = user3ValueChangedCount + 1;\n                }\n            }\n        });\n\n        root1.set(\"testKey1\", \"updatedValue\");\n\n        await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n\n        assert.equal(user1ValueChangedCount, 0, \"Incorrect number of valueChanged op received in document 1\");\n        assert.equal(user2ValueChangedCount, 1, \"Incorrect number of valueChanged op received in document 2\");\n        assert.equal(user3ValueChangedCount, 1, \"Incorrect number of valueChanged op received in document 3\");\n\n        expectAllAfterValues(\"testKey1\", \"updatedValue\");\n    });\n\n    it(\"Simultaneous set should reach eventual consistency with the same value\", async () => {\n        root1.set(\"testKey1\", \"value1\");\n        root2.set(\"testKey1\", \"value2\");\n        root3.set(\"testKey1\", \"value0\");\n        root3.set(\"testKey1\", \"value3\");\n\n        expectAllBeforeValues(\"testKey1\", \"value1\", \"value2\", \"value3\");\n        await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n        expectAllAfterValues(\"testKey1\", \"value3\");\n    });\n\n    it(\"Simultaneous delete/set should reach eventual consistency with the same value\", async () => {\n        // set after delete\n        root1.set(\"testKey1\", \"value1.1\");\n        root2.delete(\"testKey1\");\n        root3.set(\"testKey1\", \"value1.3\");\n\n        expectAllBeforeValues(\"testKey1\", \"value1.1\", undefined, \"value1.3\");\n        await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n        expectAllAfterValues(\"testKey1\", \"value1.3\");\n    });\n\n    it(\"Simultaneous delete/set on same map should reach eventual consistency with the same value\", async () => {\n        // delete and then set on the same map\n        root1.set(\"testKey2\", \"value2.1\");\n        root2.delete(\"testKey2\");\n        root3.set(\"testKey2\", \"value2.3\");\n        // drain the outgoing so that the next set will come after\n        await documentDeltaEventManager.processOutgoing(user1Document, user2Document, user3Document);\n        root2.set(\"testKey2\", \"value2.2\");\n\n        expectAllBeforeValues(\"testKey2\", \"value2.1\", \"value2.2\", \"value2.3\");\n        await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n        expectAllAfterValues(\"testKey2\", \"value2.2\");\n\n    });\n\n    it(\"Simultaneous set/delete should reach eventual consistency with the same value\", async () => {\n        // delete after set\n        root1.set(\"testKey3\", \"value3.1\");\n        root2.set(\"testKey3\", \"value3.2\");\n        root3.delete(\"testKey3\");\n\n        expectAllBeforeValues(\"testKey3\", \"value3.1\", \"value3.2\", undefined);\n        await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n        expectAllAfterValues(\"testKey3\", undefined);\n    });\n\n    it(\"Simultaneous set/clear on a key should reach eventual consistency with the same value\", async () => {\n        // clear after set\n        root1.set(\"testKey1\", \"value1.1\");\n        root2.set(\"testKey1\", \"value1.2\");\n        root3.clear();\n        expectAllBeforeValues(\"testKey1\", \"value1.1\", \"value1.2\", undefined);\n        assert.equal(root3.size, 0, \"Incorrect map size after clear\");\n        await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n        expectAllAfterValues(\"testKey1\", undefined);\n        expectAllSize(0);\n    });\n\n    it(\"Simultaneous clear/set on same map should reach eventual consistency with the same value\", async () => {\n        // set after clear on the same map\n        root1.set(\"testKey2\", \"value2.1\");\n        root2.clear();\n        root3.set(\"testKey2\", \"value2.3\");\n        // drain the outgoing so that the next set will come after\n        await documentDeltaEventManager.processOutgoing(user1Document, user2Document, user3Document);\n        root2.set(\"testKey2\", \"value2.2\");\n        expectAllBeforeValues(\"testKey2\", \"value2.1\", \"value2.2\", \"value2.3\");\n        await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n        expectAllAfterValues(\"testKey2\", \"value2.2\");\n        expectAllSize(1);\n    });\n\n    it(\"Simultaneous clear/set should reach eventual consistency and resolve to the same value\", async () => {\n        // set after clear\n        root1.set(\"testKey3\", \"value3.1\");\n        root2.clear();\n        root3.set(\"testKey3\", \"value3.3\");\n        expectAllBeforeValues(\"testKey3\", \"value3.1\", undefined, \"value3.3\");\n        await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n        expectAllAfterValues(\"testKey3\", \"value3.3\");\n        expectAllSize(1);\n    });\n\n    afterEach(async () => {\n        await Promise.all([\n            user1Document.close(),\n            user2Document.close(),\n            user3Document.close(),\n        ]);\n        await testDeltaConnectionServer.webSocketServer.close();\n    });\n});\n"]}