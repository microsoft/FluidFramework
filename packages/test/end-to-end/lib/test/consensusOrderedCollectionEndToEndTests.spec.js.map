{"version":3,"file":"consensusOrderedCollectionEndToEndTests.spec.js","sourceRoot":"","sources":["../../src/test/consensusOrderedCollectionEndToEndTests.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport * as api from \"@fluid-internal/client-api\";\nimport { IComponentHandle } from \"@microsoft/fluid-component-core-interfaces\";\nimport { ISharedMap } from \"@microsoft/fluid-map\";\nimport { ConsensusQueue, ConsensusStack, IConsensusOrderedCollection } from \"@microsoft/fluid-ordered-collection\";\nimport { IComponentRuntime } from \"@microsoft/fluid-runtime-definitions\";\nimport * as assert from \"assert\";\nimport {\n    DocumentDeltaEventManager,\n    ITestDeltaConnectionServer,\n    TestDeltaConnectionServer,\n    TestDocumentServiceFactory,\n    TestResolver,\n} from \"@microsoft/fluid-local-test-server\";\n\ninterface ISharedObjectConstructor<T> {\n    create(runtime: IComponentRuntime, id?: string): T;\n}\n\ngenerate(\"ConsensusQueue\", ConsensusQueue, [1, 2, 3], [1, 2, 3]);\ngenerate(\"ConsensusStack\", ConsensusStack, [1, 2, 3], [3, 2, 1]);\nfunction generate(\n    name: string, ctor: ISharedObjectConstructor<IConsensusOrderedCollection>,\n    input: any[], output: any[]) {\n\n    describe(name, () => {\n        const id = \"fluid://test.com/test/test\";\n\n        let testDeltaConnectionServer: ITestDeltaConnectionServer;\n        let documentDeltaEventManager: DocumentDeltaEventManager;\n        let user1Document: api.Document;\n        let user2Document: api.Document;\n        let user3Document: api.Document;\n        let root1: ISharedMap;\n        let root2: ISharedMap;\n        let root3: ISharedMap;\n\n        beforeEach(async () => {\n            testDeltaConnectionServer = TestDeltaConnectionServer.create();\n            documentDeltaEventManager = new DocumentDeltaEventManager(testDeltaConnectionServer);\n            const documentService = new TestDocumentServiceFactory(testDeltaConnectionServer);\n            const resolver = new TestResolver();\n            user1Document = await api.load(\n                id, { resolver }, {}, documentService);\n            documentDeltaEventManager.registerDocuments(user1Document);\n\n            user2Document = await api.load(\n                id, { resolver }, {}, documentService);\n            documentDeltaEventManager.registerDocuments(user2Document);\n\n            user3Document = await api.load(\n                id, { resolver }, {}, documentService);\n            documentDeltaEventManager.registerDocuments(user3Document);\n            root1 = user1Document.getRoot();\n            root2 = user2Document.getRoot();\n            root3 = user3Document.getRoot();\n        });\n\n        it(\"Should initialize after attach\", async () => {\n            const collection1 = ctor.create(user1Document.runtime);\n            for (const item of input) {\n                await collection1.add(item);\n            }\n            root1.set(\"collection\", collection1.handle);\n\n            const [collection2Handle, collection3Handle] = await Promise.all([\n                root2.wait<IComponentHandle>(\"collection\"),\n                root3.wait<IComponentHandle>(\"collection\"),\n            ]);\n            const collection2 = await collection2Handle.get<IConsensusOrderedCollection>();\n            const collection3 = await collection3Handle.get<IConsensusOrderedCollection>();\n\n            assert.strictEqual(await collection1.remove(), output[0], \"Collection not initialize in document 1\");\n            assert.strictEqual(await collection2.remove(), output[1], \"Collection not initialize in document 2\");\n            assert.strictEqual(await collection3.remove(), output[2], \"Collection not initialize in document 3\");\n\n            assert.strictEqual(await collection3.remove(), undefined, \"Remove of empty collection should be undefined\");\n        });\n\n        it(\"Simultaneous add and remove should be ordered and value return to only one client\", async () => {\n            const collection1 = ctor.create(user1Document.runtime);\n            root1.set(\"collection\", collection1.handle);\n\n            const [collection2Handle, collection3Handle] = await Promise.all([\n                root2.wait<IComponentHandle>(\"collection\"),\n                root3.wait<IComponentHandle>(\"collection\"),\n            ]);\n            const collection2 = await collection2Handle.get<IConsensusOrderedCollection>();\n            const collection3 = await collection3Handle.get<IConsensusOrderedCollection>();\n\n            await documentDeltaEventManager.pauseProcessing();\n\n            const addP = [];\n            for (const item of input) {\n                addP.push(collection1.add(item));\n            }\n            await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n            await Promise.all(addP);\n\n            const removeP1 = collection3.remove();\n            // drain the outgoing so that the next set will come after\n            await documentDeltaEventManager.processOutgoing(user1Document, user2Document, user3Document);\n            const removeP2 = collection2.remove();\n            // drain the outgoing so that the next set will come after\n            await documentDeltaEventManager.processOutgoing(user1Document, user2Document, user3Document);\n            const removeP3 = collection1.remove();\n\n            const removeEmptyP = collection1.remove();\n\n            // Now process all the incoming and outgoing\n            await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n\n            // Verify the value is in the correct order\n            assert.strictEqual(await removeP1, output[0], \"Unexpected value in document 1\");\n            assert.strictEqual(await removeP2, output[1], \"Unexpected value in document 2\");\n            assert.strictEqual(await removeP3, output[2], \"Unexpected value in document 3\");\n            assert.strictEqual(await removeEmptyP, undefined, \"Remove of empty collection should be undefined\");\n        });\n\n        it(\"Wait resolves\", async () => {\n            const collection1 = ctor.create(user1Document.runtime);\n            root1.set(\"collection\", collection1.handle);\n\n            const [collection2Handle, collection3Handle] = await Promise.all([\n                root2.wait<IComponentHandle>(\"collection\"),\n                root3.wait<IComponentHandle>(\"collection\"),\n            ]);\n            const collection2 = await collection2Handle.get<IConsensusOrderedCollection>();\n            const collection3 = await collection3Handle.get<IConsensusOrderedCollection>();\n\n            await documentDeltaEventManager.pauseProcessing();\n\n            const waitOn2P = collection2.waitAndRemove();\n            await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n            let added = false;\n            waitOn2P.then(\n                (value) => {\n                    assert(added, \"Wait resolved before value is added\");\n                })\n                .catch((reason) => {\n                    assert(false, \"Unexpected promise rejection\");\n                });\n\n            const addP1 = collection1.add(input[0]);\n            // drain the outgoing so that the next set will come after\n            await documentDeltaEventManager.processOutgoing(user1Document, user2Document, user3Document);\n            const addP2 = collection3.add(input[1]);\n            // drain the outgoing so that the next set will come after\n            await documentDeltaEventManager.processOutgoing(user1Document, user2Document, user3Document);\n            const addP3 = collection2.add(input[2]);\n            // drain the outgoing so that the next set will come after\n            await documentDeltaEventManager.processOutgoing(user1Document, user2Document, user3Document);\n            added = true;\n\n            // Now process the incoming\n            await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n            await Promise.all([addP1, addP2, addP3]);\n            assert.strictEqual(await waitOn2P, output[0],\n                \"Unexpected wait before add resolved value in document 2 added in document 1\");\n\n            const waitOn1P = collection1.waitAndRemove();\n            await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n            assert.strictEqual(await waitOn1P, output[1],\n                \"Unexpected wait after add resolved value in document 1 added in document 3\");\n\n            const waitOn3P = collection3.waitAndRemove();\n            await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n            assert.strictEqual(await waitOn3P, output[2],\n                \"Unexpected wait after add resolved value in document 13added in document 2\");\n        });\n\n        it(\"Events\", async () => {\n            const collection1 = ctor.create(user1Document.runtime);\n            root1.set(\"collection\", collection1.handle);\n            const [collection2Handle, collection3Handle] = await Promise.all([\n                root2.wait<IComponentHandle>(\"collection\"),\n                root3.wait<IComponentHandle>(\"collection\"),\n            ]);\n            const collection2 = await collection2Handle.get<IConsensusOrderedCollection>();\n            const collection3 = await collection3Handle.get<IConsensusOrderedCollection>();\n            await documentDeltaEventManager.pauseProcessing();\n\n            let addCount1 = 0;\n            let addCount2 = 0;\n            let addCount3 = 0;\n\n            let removeCount1 = 0;\n            let removeCount2 = 0;\n            let removeCount3 = 0;\n            collection1.on(\"add\", (value) => {\n                assert.strictEqual(value, input[addCount1], \"Added value not match in document 1\");\n                addCount1 += 1;\n            });\n            collection2.on(\"add\", (value) => {\n                assert.strictEqual(value, input[addCount2], \"Added value not match in document 2\");\n                addCount2 += 1;\n            });\n            collection3.on(\"add\", (value) => {\n                assert.strictEqual(value, input[addCount3], \"Added value not match in document 3\");\n                addCount3 += 1;\n            });\n\n            collection1.on(\"remove\", (value) => {\n                assert.strictEqual(value, output[removeCount1], \"Removed value not match in document 1\");\n                removeCount1 += 1;\n            });\n            collection2.on(\"remove\", (value) => {\n                assert.strictEqual(value, output[removeCount2], \"Removed value not match in document 2\");\n                removeCount2 += 1;\n            });\n            collection3.on(\"remove\", (value) => {\n                assert.strictEqual(value, output[removeCount3], \"Removed value not match in document 3\");\n                removeCount3 += 1;\n            });\n\n            const p = [];\n            p.push(collection1.add(input[0]));\n            // drain the outgoing so that the next set will come after\n            await documentDeltaEventManager.processOutgoing(user1Document, user2Document, user3Document);\n            p.push(collection2.add(input[1]));\n            // drain the outgoing so that the next set will come after\n            await documentDeltaEventManager.processOutgoing(user1Document, user2Document, user3Document);\n            p.push(collection3.add(input[2]));\n            // drain the outgoing so that the next set will come after\n            await documentDeltaEventManager.processOutgoing(user1Document, user2Document, user3Document);\n            p.push(collection2.remove());\n            // drain the outgoing so that the next set will come after\n            await documentDeltaEventManager.processOutgoing(user1Document, user2Document, user3Document);\n            p.push(collection3.remove());\n            // drain the outgoing so that the next set will come after\n            await documentDeltaEventManager.processOutgoing(user1Document, user2Document, user3Document);\n            p.push(collection1.remove());\n            // drain the outgoing so that the next set will come after\n            await documentDeltaEventManager.processOutgoing(user1Document, user2Document, user3Document);\n            const removeEmptyP = collection1.remove();\n\n            // Now process all\n            await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n            await Promise.all(p);\n            assert.strictEqual(await removeEmptyP, undefined, \"Remove of empty collection should be undefined\");\n            assert.strictEqual(addCount1, 3, \"Incorrect number add events in document 1\");\n            assert.strictEqual(addCount2, 3, \"Incorrect number add events in document 2\");\n            assert.strictEqual(addCount3, 3, \"Incorrect number add events in document 3\");\n            assert.strictEqual(removeCount1, 3, \"Incorrect number remove events in document 1\");\n            assert.strictEqual(removeCount2, 3, \"Incorrect number remove events in document 2\");\n            assert.strictEqual(removeCount3, 3, \"Incorrect number remove events in document 3\");\n        });\n\n        afterEach(async () => {\n            await Promise.all([\n                user1Document.close(),\n                user2Document.close(),\n                user3Document.close(),\n            ]);\n            await testDeltaConnectionServer.webSocketServer.close();\n        });\n    });\n}\n"]}