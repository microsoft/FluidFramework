{"version":3,"file":"cellEndToEndTests.spec.js","sourceRoot":"","sources":["../../src/test/cellEndToEndTests.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport * as api from \"@fluid-internal/client-api\";\nimport { ISharedCell } from \"@microsoft/fluid-cell\";\nimport { IComponentHandle } from \"@microsoft/fluid-component-core-interfaces\";\nimport { ISharedMap } from \"@microsoft/fluid-map\";\nimport * as assert from \"assert\";\nimport {\n    DocumentDeltaEventManager,\n    ITestDeltaConnectionServer,\n    TestDeltaConnectionServer,\n    TestDocumentServiceFactory,\n    TestResolver,\n} from \"@microsoft/fluid-local-test-server\";\n\ndescribe(\"Cell\", () => {\n    const id = \"fluid://test.com/test/test\";\n    const cellId = \"cellKey\";\n    const initialCellValue = \"Initial cell value\";\n    const newCellValue = \"A new cell value\";\n\n    let testDeltaConnectionServer: ITestDeltaConnectionServer;\n    let documentDeltaEventManager: DocumentDeltaEventManager;\n    let user1Document: api.Document;\n    let user2Document: api.Document;\n    let user3Document: api.Document;\n    let root1: ISharedMap;\n    let root2: ISharedMap;\n    let root3: ISharedMap;\n    let root1Cell: ISharedCell;\n    let root2Cell: ISharedCell;\n    let root3Cell: ISharedCell;\n\n    beforeEach(async () => {\n        testDeltaConnectionServer = TestDeltaConnectionServer.create();\n        documentDeltaEventManager = new DocumentDeltaEventManager(testDeltaConnectionServer);\n        const serviceFactory = new TestDocumentServiceFactory(testDeltaConnectionServer);\n        const resolver = new TestResolver();\n\n        user1Document = await api.load(\n            id, { resolver }, {}, serviceFactory);\n        documentDeltaEventManager.registerDocuments(user1Document);\n\n        user2Document = await api.load(\n            id, { resolver }, {}, serviceFactory);\n        documentDeltaEventManager.registerDocuments(user2Document);\n\n        user3Document = await api.load(\n            id, { resolver }, {}, serviceFactory);\n        documentDeltaEventManager.registerDocuments(user3Document);\n\n        root1 = user1Document.getRoot();\n        root2 = user2Document.getRoot();\n        root3 = user3Document.getRoot();\n        await documentDeltaEventManager.pauseProcessing();\n\n        // Create a cell on the root and propagate it to other documents\n        root1.set(cellId, user1Document.createCell().handle);\n        await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n\n        root1Cell = await root1.get<IComponentHandle>(cellId).get<ISharedCell>();\n        root2Cell = await root2.get<IComponentHandle>(cellId).get<ISharedCell>();\n        root3Cell = await root3.get<IComponentHandle>(cellId).get<ISharedCell>();\n\n        // Set a starting value in the cell\n        root1Cell.set(initialCellValue);\n        await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n    });\n\n    function verifyCellValue(cell: ISharedCell, expectedValue, index: number) {\n        const userValue = cell.get();\n        assert.equal(userValue, expectedValue,\n            `Incorrect value ${userValue} instead of ${expectedValue} in document ${index}`);\n    }\n\n    function verifyCellValues(value1, value2, value3) {\n        verifyCellValue(root1Cell, value1, 1);\n        verifyCellValue(root2Cell, value2, 2);\n        verifyCellValue(root3Cell, value3, 3);\n    }\n\n    function verifyCellEmpty(value1: boolean, value2: boolean, value3: boolean) {\n        const user1Empty = root1Cell.empty();\n        assert.equal(user1Empty, value1, `Incorrect value ${user1Empty} instead of ${value1} in document1`);\n        const user2Empty = root2Cell.empty();\n        assert.equal(user2Empty, value2, `Incorrect value ${user2Empty} instead of ${value2} in document2`);\n        const user3Empty = root3Cell.empty();\n        assert.equal(user3Empty, value3, `Incorrect value ${user3Empty} instead of ${value3} in document3`);\n    }\n\n    it(\"can create the cell in 3 documents correctly\", async () => {\n        // Cell was created and populated in beforeEach\n        assert.ok(root1Cell, `Couldn't find the cell in root1, instead got ${root1Cell}`);\n        assert.ok(root2Cell, `Couldn't find the cell in root2, instead got ${root2Cell}`);\n        assert.ok(root3Cell, `Couldn't find the cell in root3, instead got ${root3Cell}`);\n    });\n\n    it(\"can get cell data in 3 documents correctly\", async () => {\n        // Cell was created and populated in beforeEach\n        verifyCellValues(initialCellValue, initialCellValue, initialCellValue);\n    });\n\n    it(\"can set and get cell data in 3 documents correctly\", async () => {\n        root2Cell.set(newCellValue);\n        await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n\n        verifyCellValues(newCellValue, newCellValue, newCellValue);\n    });\n\n    it(\"can delete cell data in 3 documents correctly\", async () => {\n        root3Cell.delete();\n        await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n\n        verifyCellEmpty(true, true, true);\n    });\n\n    it(\"can update value and trigger onValueChanged on other two documents\", async () => {\n        let user1ValueChangedCount: number = 0;\n        let user2ValueChangedCount: number = 0;\n        let user3ValueChangedCount: number = 0;\n\n        // Set up event listeners for the valueChanged that will count calls and check values\n        root1Cell.on(\"valueChanged\", (newValue) => {\n            assert.equal(newValue, newCellValue, `Incorrect value for changed in document 1: ${newValue}`);\n            user1ValueChangedCount = user1ValueChangedCount + 1;\n        });\n        root2Cell.on(\"valueChanged\", (newValue) => {\n            assert.equal(newValue, newCellValue, `Incorrect value for changed in document 2: ${newValue}`);\n            user2ValueChangedCount = user2ValueChangedCount + 1;\n        });\n        root3Cell.on(\"valueChanged\", (newValue) => {\n            assert.equal(newValue, newCellValue, `Incorrect value for changed in document 3: ${newValue}`);\n            user3ValueChangedCount = user3ValueChangedCount + 1;\n        });\n\n        root1Cell.set(newCellValue);\n\n        await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n\n        assert.equal(user1ValueChangedCount, 1, \"Incorrect number of valueChanged op received in document 1\");\n        assert.equal(user2ValueChangedCount, 1, \"Incorrect number of valueChanged op received in document 2\");\n        assert.equal(user3ValueChangedCount, 1, \"Incorrect number of valueChanged op received in document 3\");\n\n        verifyCellValues(newCellValue, newCellValue, newCellValue);\n    });\n\n    it(\"Simultaneous set should reach eventual consistency with the same value\", async () => {\n        root1Cell.set(\"value1\");\n        root2Cell.set(\"value2\");\n        root3Cell.set(\"value0\");\n        root3Cell.set(\"value3\");\n\n        verifyCellValues(\"value1\", \"value2\", \"value3\");\n        await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n        verifyCellValues(\"value3\", \"value3\", \"value3\");\n    });\n\n    it(\"Simultaneous delete/set should reach eventual consistency with the same value\", async () => {\n        // set after delete\n        root1Cell.set(\"value1.1\");\n        root2Cell.delete();\n        root3Cell.set(\"value1.3\");\n\n        verifyCellValues(\"value1.1\", undefined, \"value1.3\");\n        await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n        verifyCellValues(\"value1.3\", \"value1.3\", \"value1.3\");\n    });\n\n    it(\"Simultaneous delete/set on same cell should reach eventual consistency with the same value\", async () => {\n        // delete and then set on the same cell\n        root1Cell.set(\"value2.1\");\n        root2Cell.delete();\n        root3Cell.set(\"value2.3\");\n        // drain the outgoing so that the next set will come after\n        await documentDeltaEventManager.processOutgoing(user1Document, user2Document, user3Document);\n        root2Cell.set(\"value2.2\");\n\n        verifyCellValues(\"value2.1\", \"value2.2\", \"value2.3\");\n        await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n        verifyCellValues(\"value2.2\", \"value2.2\", \"value2.2\");\n    });\n\n    it(\"Simultaneous set/delete should reach eventual consistency with the same value\", async () => {\n        // delete after set\n        root1Cell.set(\"value3.1\");\n        root2Cell.set(\"value3.2\");\n        root3Cell.delete();\n\n        verifyCellValues(\"value3.1\", \"value3.2\", undefined);\n        verifyCellEmpty(false, false, true);\n        await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n        verifyCellValues(undefined, undefined, undefined);\n        verifyCellEmpty(true, true, true);\n    });\n\n    it(\"registers data if data is a shared object\", async () => {\n        const detachedCell1: ISharedCell = user1Document.createCell();\n        const detachedCell2: ISharedCell = user1Document.createCell();\n        const cellValue = \"cell cell cell cell\";\n        detachedCell2.set(cellValue);\n        detachedCell1.set(detachedCell2.handle);\n        assert(!detachedCell2.isRegistered());\n\n        root1Cell.set(detachedCell1.handle);\n        assert(detachedCell2.isRegistered());\n\n        await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n\n        async function getCellComponent(cellP: Promise<ISharedCell>): Promise<ISharedCell> {\n            const cell = await cellP;\n            const handle = cell.get() as IComponentHandle;\n            return handle.get<ISharedCell>();\n        }\n\n        // tslint:disable:no-unsafe-any\n        verifyCellValue(await getCellComponent(getCellComponent(Promise.resolve(root2Cell))), cellValue, 2);\n        verifyCellValue(await getCellComponent(getCellComponent(Promise.resolve(root3Cell))), cellValue, 3);\n    });\n\n    afterEach(async () => {\n        // tslint:disable-next-line: array-type\n        const closeP: Promise<void>[] = [];\n        if (user1Document) { closeP.push(user1Document.close()); }\n        if (user2Document) { closeP.push(user2Document.close()); }\n        if (user3Document) { closeP.push(user3Document.close()); }\n        await Promise.all(closeP);\n        await testDeltaConnectionServer.webSocketServer.close();\n    });\n});\n"]}