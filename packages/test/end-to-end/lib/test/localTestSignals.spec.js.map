{"version":3,"file":"localTestSignals.spec.js","sourceRoot":"","sources":["../../src/test/localTestSignals.spec.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,EAAY,IAAI,EAAE,MAAM,4BAA4B,CAAC;AAE5D,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAC;AACjC,OAAO,EACH,yBAAyB,EAEzB,yBAAyB,EACzB,0BAA0B,EAC1B,YAAY,GACf,MAAM,oCAAoC,CAAC;AAE5C,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IACzB,MAAM,EAAE,GAAG,iCAAiC,CAAC;IAE7C,IAAI,yBAAqD,CAAC;IAC1D,IAAI,yBAAoD,CAAC;IACzD,IAAI,aAAuB,CAAC;IAC5B,IAAI,aAAuB,CAAC;IAE5B,UAAU,CAAC,KAAK,IAAI,EAAE;QAClB,yBAAyB,GAAG,yBAAyB,CAAC,MAAM,EAAE,CAAC;QAC/D,yBAAyB,GAAG,IAAI,yBAAyB,CAAC,yBAAyB,CAAC,CAAC;QAErF,MAAM,QAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;QACpC,MAAM,cAAc,GAAG,IAAI,0BAA0B,CAAC,yBAAyB,CAAC,CAAC;QACjF,aAAa,GAAG,MAAM,IAAI,CACtB,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,EAAE,cAAc,CAAC,CAAC;QAE1C,aAAa,GAAG,MAAM,IAAI,CACtB,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,EAAE,cAAc,CAAC,CAAC;QAC1C,yBAAyB,CAAC,iBAAiB,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;IAC9E,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wCAAwC,EAAE,GAAG,EAAE;QACpD,EAAE,CAAC,kBAAkB,EAAE,KAAK,IAAI,EAAE;YAC9B,IAAI,wBAAwB,GAAG,CAAC,CAAC;YACjC,IAAI,wBAAwB,GAAG,CAAC,CAAC;YAEjC,aAAa,CAAC,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,OAA8B,EAAE,KAAc,EAAE,EAAE;gBAClF,IAAI,OAAO,CAAC,IAAI,KAAK,YAAY,EAAE;oBAC/B,wBAAwB,IAAI,CAAC,CAAC;iBACjC;YACL,CAAC,CAAC,CAAC;YAEH,aAAa,CAAC,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,OAA8B,EAAE,KAAc,EAAE,EAAE;gBAClF,IAAI,OAAO,CAAC,IAAI,KAAK,YAAY,EAAE;oBAC/B,wBAAwB,IAAI,CAAC,CAAC;iBACjC;YACL,CAAC,CAAC,CAAC;YAEH,aAAa,CAAC,OAAO,CAAC,YAAY,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YACvD,MAAM,CAAC,KAAK,CAAC,wBAAwB,EAAE,CAAC,EAAE,kCAAkC,CAAC,CAAC;YAC9E,MAAM,CAAC,KAAK,CAAC,wBAAwB,EAAE,CAAC,EAAE,kCAAkC,CAAC,CAAC;YAE9E,aAAa,CAAC,OAAO,CAAC,YAAY,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YACvD,MAAM,CAAC,KAAK,CAAC,wBAAwB,EAAE,CAAC,EAAE,kCAAkC,CAAC,CAAC;YAC9E,MAAM,CAAC,KAAK,CAAC,wBAAwB,EAAE,CAAC,EAAE,kCAAkC,CAAC,CAAC;QAElF,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,KAAK,IAAI,EAAE;QACjB,MAAM,OAAO,CAAC,GAAG,CAAC;YACd,aAAa,CAAC,KAAK,EAAE;YACrB,aAAa,CAAC,KAAK,EAAE;SACxB,CAAC,CAAC;QACH,MAAM,yBAAyB,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;IAC5D,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Document, load } from \"@fluid-internal/client-api\";\nimport { IInboundSignalMessage } from \"@microsoft/fluid-runtime-definitions\";\nimport * as assert from \"assert\";\nimport {\n    DocumentDeltaEventManager,\n    ITestDeltaConnectionServer,\n    TestDeltaConnectionServer,\n    TestDocumentServiceFactory,\n    TestResolver,\n} from \"@microsoft/fluid-local-test-server\";\n\ndescribe(\"TestSignals\", () => {\n    const id = \"fluid-test://test.com/test/test\";\n\n    let testDeltaConnectionServer: ITestDeltaConnectionServer;\n    let documentDeltaEventManager: DocumentDeltaEventManager;\n    let user1Document: Document;\n    let user2Document: Document;\n\n    beforeEach(async () => {\n        testDeltaConnectionServer = TestDeltaConnectionServer.create();\n        documentDeltaEventManager = new DocumentDeltaEventManager(testDeltaConnectionServer);\n\n        const resolver = new TestResolver();\n        const serviceFactory = new TestDocumentServiceFactory(testDeltaConnectionServer);\n        user1Document = await load(\n            id, { resolver }, {}, serviceFactory);\n\n        user2Document = await load(\n            id, { resolver }, {}, serviceFactory);\n        documentDeltaEventManager.registerDocuments(user1Document, user2Document);\n    });\n\n    describe(\"Attach signal Handlers on Both Clients\", () => {\n        it(\"Validate signals\", async () => {\n            let user1SignalReceivedCount = 0;\n            let user2SignalReceivedCount = 0;\n\n            user1Document.runtime.on(\"signal\", (message: IInboundSignalMessage, local: boolean) => {\n                if (message.type === \"TestSignal\") {\n                    user1SignalReceivedCount += 1;\n                }\n            });\n\n            user2Document.runtime.on(\"signal\", (message: IInboundSignalMessage, local: boolean) => {\n                if (message.type === \"TestSignal\") {\n                    user2SignalReceivedCount += 1;\n                }\n            });\n\n            user1Document.runtime.submitSignal(\"TestSignal\", true);\n            assert.equal(user1SignalReceivedCount, 1, \"client 1 did not received signal\");\n            assert.equal(user2SignalReceivedCount, 1, \"client 2 did not received signal\");\n\n            user2Document.runtime.submitSignal(\"TestSignal\", true);\n            assert.equal(user1SignalReceivedCount, 2, \"client 1 did not received signal\");\n            assert.equal(user2SignalReceivedCount, 2, \"client 2 did not received signal\");\n\n        });\n    });\n\n    afterEach(async () => {\n        await Promise.all([\n            user1Document.close(),\n            user2Document.close(),\n        ]);\n        await testDeltaConnectionServer.webSocketServer.close();\n    });\n});\n"]}