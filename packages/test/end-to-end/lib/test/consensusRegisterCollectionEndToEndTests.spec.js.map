{"version":3,"file":"consensusRegisterCollectionEndToEndTests.spec.js","sourceRoot":"","sources":["../../src/test/consensusRegisterCollectionEndToEndTests.spec.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,GAAG,MAAM,4BAA4B,CAAC;AAGlD,OAAO,EACH,2BAA2B,EAE3B,UAAU,GACb,MAAM,sCAAsC,CAAC;AAE9C,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAC;AACjC,OAAO,EACH,yBAAyB,EAEzB,yBAAyB,EACzB,0BAA0B,EAC1B,YAAY,GACf,MAAM,oCAAoC,CAAC;AAM5C,QAAQ,CAAC,6BAA6B,EAAE,2BAA2B,CAAC,CAAC;AACrE,SAAS,QAAQ,CAAC,IAAY,EAAE,IAA4D;IACxF,QAAQ,CAAC,IAAI,EAAE,GAAG,EAAE;QAChB,MAAM,EAAE,GAAG,4BAA4B,CAAC;QAExC,IAAI,yBAAqD,CAAC;QAC1D,IAAI,yBAAoD,CAAC;QACzD,IAAI,aAA2B,CAAC;QAChC,IAAI,aAA2B,CAAC;QAChC,IAAI,aAA2B,CAAC;QAChC,IAAI,KAAiB,CAAC;QACtB,IAAI,KAAiB,CAAC;QACtB,IAAI,KAAiB,CAAC;QAEtB,UAAU,CAAC,KAAK,IAAI,EAAE;YAClB,yBAAyB,GAAG,yBAAyB,CAAC,MAAM,EAAE,CAAC;YAC/D,yBAAyB,GAAG,IAAI,yBAAyB,CAAC,yBAAyB,CAAC,CAAC;YACrF,MAAM,eAAe,GAAG,IAAI,0BAA0B,CAAC,yBAAyB,CAAC,CAAC;YAClF,MAAM,QAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;YACpC,aAAa,GAAG,MAAM,GAAG,CAAC,IAAI,CAC1B,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,EAAE,eAAe,CAAC,CAAC;YAC3C,yBAAyB,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;YAE3D,aAAa,GAAG,MAAM,GAAG,CAAC,IAAI,CAC1B,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,EAAE,eAAe,CAAC,CAAC;YAC3C,yBAAyB,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;YAE3D,aAAa,GAAG,MAAM,GAAG,CAAC,IAAI,CAC1B,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,EAAE,eAAe,CAAC,CAAC;YAC3C,yBAAyB,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;YAC3D,KAAK,GAAG,aAAa,CAAC,OAAO,EAAE,CAAC;YAChC,KAAK,GAAG,aAAa,CAAC,OAAO,EAAE,CAAC;YAChC,KAAK,GAAG,aAAa,CAAC,OAAO,EAAE,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC3C,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YACvD,WAAW,CAAC,KAAK,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;gBAClD,MAAM,CAAC,KAAK,EAAE,+BAA+B,CAAC,CAAC;YACnD,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,EAAE;gBAChB,MAAM,CAAC,IAAI,EAAE,8BAA8B,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;YACtC,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YACvD,KAAK,CAAC,GAAG,CAAC,YAAY,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;YAC5C,MAAM,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YAC1C,MAAM,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YAE1C,MAAM,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBAC7D,KAAK,CAAC,IAAI,CAAmB,YAAY,CAAC;gBAC1C,KAAK,CAAC,IAAI,CAAmB,YAAY,CAAC;aAC7C,CAAC,CAAC;YACH,MAAM,WAAW,GAAG,MAAM,iBAAiB,CAAC,GAAG,EAAgC,CAAC;YAChF,MAAM,WAAW,GAAG,MAAM,iBAAiB,CAAC,GAAG,EAAgC,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,yCAAyC,CAAC,CAAC;YAClG,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,yCAAyC,CAAC,CAAC;YAClG,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,yCAAyC,CAAC,CAAC;YAClG,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,yCAAyC,CAAC,CAAC;YAClG,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,yCAAyC,CAAC,CAAC;YAClG,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,yCAAyC,CAAC,CAAC;YAElG,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,8CAA8C,CAAC,CAAC;YACxG,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,8CAA8C,CAAC,CAAC;YACxG,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,8CAA8C,CAAC,CAAC;QAC5G,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kEAAkE,EAAE,KAAK,IAAI,EAAE;YAC9E,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YACvD,KAAK,CAAC,GAAG,CAAC,YAAY,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;YAE5C,MAAM,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBAC7D,KAAK,CAAC,IAAI,CAAmB,YAAY,CAAC;gBAC1C,KAAK,CAAC,IAAI,CAAmB,YAAY,CAAC;aAC7C,CAAC,CAAC;YACH,MAAM,WAAW,GAAG,MAAM,iBAAiB,CAAC,GAAG,EAAgC,CAAC;YAChF,MAAM,WAAW,GAAG,MAAM,iBAAiB,CAAC,GAAG,EAAgC,CAAC;YAEhF,MAAM,OAAO,GAAG,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YACpD,MAAM,OAAO,GAAG,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YACpD,MAAM,OAAO,GAAG,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YACpD,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;YAC/C,MAAM,QAAQ,GAAG,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YAClD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,uCAAuC,CAAC,CAAC;YAChF,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,2BAA2B,CAAC,CAAC;YACvE,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,2BAA2B,CAAC,CAAC;YACvE,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,2BAA2B,CAAC,CAAC;YAEvE,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,+BAA+B,CAAC,CAAC;YACxF,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,2BAA2B,CAAC,CAAC;YACvG,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,GAAG,CAAC,EAAE,QAAQ,EAAE,wBAAwB,CAAC,CAAC;QACrG,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;YACvE,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YACvD,KAAK,CAAC,GAAG,CAAC,YAAY,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;YAE5C,MAAM,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBAC7D,KAAK,CAAC,IAAI,CAAmB,YAAY,CAAC;gBAC1C,KAAK,CAAC,IAAI,CAAmB,YAAY,CAAC;aAC7C,CAAC,CAAC;YACH,MAAM,WAAW,GAAG,MAAM,iBAAiB,CAAC,GAAG,EAAgC,CAAC;YAChF,MAAM,WAAW,GAAG,MAAM,iBAAiB,CAAC,GAAG,EAAgC,CAAC;YAEhF,MAAM,OAAO,GAAG,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YACpD,MAAM,OAAO,GAAG,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YACpD,MAAM,OAAO,GAAG,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YACpD,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;YAC/C,MAAM,QAAQ,GAAG,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YAClD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,uCAAuC,CAAC,CAAC;YAEhF,MAAM,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YAC1C,MAAM,SAAS,GAAG,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YACnD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,wCAAwC,CAAC,CAAC;YAClF,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,wCAAwC,CAAC,CAAC;YAErF,MAAM,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YAC1C,MAAM,SAAS,GAAG,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YACnD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,wCAAwC,CAAC,CAAC;YAClF,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,wCAAwC,CAAC,CAAC;YAErF,MAAM,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YAC1C,MAAM,SAAS,GAAG,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YACnD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,wCAAwC,CAAC,CAAC;YAClF,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,wCAAwC,CAAC,CAAC;YAErF,MAAM,OAAO,GAAG,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YACpD,MAAM,OAAO,GAAG,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YACpD,MAAM,OAAO,GAAG,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YACpD,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;YAC/C,MAAM,SAAS,GAAG,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YACnD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,iEAAiE,CAAC,CAAC;YAC3G,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,2BAA2B,CAAC,CAAC;YACxE,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,2BAA2B,CAAC,CAAC;YACxE,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,2BAA2B,CAAC,CAAC;YAExE,MAAM,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YAC3C,MAAM,SAAS,GAAG,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YACnD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,wCAAwC,CAAC,CAAC;YAClF,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,wCAAwC,CAAC,CAAC;QAC1F,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC,KAAK,IAAI,EAAE;YACjB,MAAM,OAAO,CAAC,GAAG,CAAC;gBACd,aAAa,CAAC,KAAK,EAAE;gBACrB,aAAa,CAAC,KAAK,EAAE;gBACrB,aAAa,CAAC,KAAK,EAAE;aACxB,CAAC,CAAC;YACH,MAAM,yBAAyB,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;QAC5D,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport * as api from \"@fluid-internal/client-api\";\nimport { IComponentHandle } from \"@microsoft/fluid-component-core-interfaces\";\nimport { ISharedMap } from \"@microsoft/fluid-map\";\nimport {\n    ConsensusRegisterCollection,\n    IConsensusRegisterCollection,\n    ReadPolicy,\n} from \"@microsoft/fluid-register-collection\";\nimport { IComponentRuntime } from \"@microsoft/fluid-runtime-definitions\";\nimport * as assert from \"assert\";\nimport {\n    DocumentDeltaEventManager,\n    ITestDeltaConnectionServer,\n    TestDeltaConnectionServer,\n    TestDocumentServiceFactory,\n    TestResolver,\n} from \"@microsoft/fluid-local-test-server\";\n\ninterface ISharedObjectConstructor<T> {\n    create(runtime: IComponentRuntime, id?: string): T;\n}\n\ngenerate(\"ConsensusRegisterCollection\", ConsensusRegisterCollection);\nfunction generate(name: string, ctor: ISharedObjectConstructor<IConsensusRegisterCollection>) {\n    describe(name, () => {\n        const id = \"fluid://test.com/test/test\";\n\n        let testDeltaConnectionServer: ITestDeltaConnectionServer;\n        let documentDeltaEventManager: DocumentDeltaEventManager;\n        let user1Document: api.Document;\n        let user2Document: api.Document;\n        let user3Document: api.Document;\n        let root1: ISharedMap;\n        let root2: ISharedMap;\n        let root3: ISharedMap;\n\n        beforeEach(async () => {\n            testDeltaConnectionServer = TestDeltaConnectionServer.create();\n            documentDeltaEventManager = new DocumentDeltaEventManager(testDeltaConnectionServer);\n            const documentService = new TestDocumentServiceFactory(testDeltaConnectionServer);\n            const resolver = new TestResolver();\n            user1Document = await api.load(\n                id, { resolver }, {}, documentService);\n            documentDeltaEventManager.registerDocuments(user1Document);\n\n            user2Document = await api.load(\n                id, { resolver }, {}, documentService);\n            documentDeltaEventManager.registerDocuments(user2Document);\n\n            user3Document = await api.load(\n                id, { resolver }, {}, documentService);\n            documentDeltaEventManager.registerDocuments(user3Document);\n            root1 = user1Document.getRoot();\n            root2 = user2Document.getRoot();\n            root3 = user3Document.getRoot();\n        });\n\n        it(\"Should not work before attach\", async () => {\n            const collection1 = ctor.create(user1Document.runtime);\n            collection1.write(\"test-key\", \"test-value\").then(() => {\n                assert(false, \"Writing to local did not fail\");\n            }).catch((reason) => {\n                assert(true, \"Writing to local should fail\");\n            });\n        });\n\n        it(\"Should work after attach\", async () => {\n            const collection1 = ctor.create(user1Document.runtime);\n            root1.set(\"collection\", collection1.handle);\n            await collection1.write(\"key1\", \"value1\");\n            await collection1.write(\"key2\", \"value2\");\n\n            const [collection2Handle, collection3Handle] = await Promise.all([\n                root2.wait<IComponentHandle>(\"collection\"),\n                root3.wait<IComponentHandle>(\"collection\"),\n            ]);\n            const collection2 = await collection2Handle.get<IConsensusRegisterCollection>();\n            const collection3 = await collection3Handle.get<IConsensusRegisterCollection>();\n\n            assert.strictEqual(collection1.read(\"key1\"), \"value1\", \"Collection not initialize in document 1\");\n            assert.strictEqual(collection2.read(\"key1\"), \"value1\", \"Collection not initialize in document 2\");\n            assert.strictEqual(collection3.read(\"key1\"), \"value1\", \"Collection not initialize in document 3\");\n            assert.strictEqual(collection1.read(\"key2\"), \"value2\", \"Collection not initialize in document 1\");\n            assert.strictEqual(collection2.read(\"key2\"), \"value2\", \"Collection not initialize in document 2\");\n            assert.strictEqual(collection3.read(\"key2\"), \"value2\", \"Collection not initialize in document 3\");\n\n            assert.strictEqual(collection1.read(\"key3\"), undefined, \"Reading non existent key should be undefined\");\n            assert.strictEqual(collection2.read(\"key3\"), undefined, \"Reading non existent key should be undefined\");\n            assert.strictEqual(collection3.read(\"key3\"), undefined, \"Reading non existent key should be undefined\");\n        });\n\n        it(\"Should store all concurrent writings on a key in sequenced order\", async () => {\n            const collection1 = ctor.create(user1Document.runtime);\n            root1.set(\"collection\", collection1.handle);\n\n            const [collection2Handle, collection3Handle] = await Promise.all([\n                root2.wait<IComponentHandle>(\"collection\"),\n                root3.wait<IComponentHandle>(\"collection\"),\n            ]);\n            const collection2 = await collection2Handle.get<IConsensusRegisterCollection>();\n            const collection3 = await collection3Handle.get<IConsensusRegisterCollection>();\n\n            const write1P = collection1.write(\"key1\", \"value1\");\n            const write2P = collection2.write(\"key1\", \"value2\");\n            const write3P = collection3.write(\"key1\", \"value3\");\n            await Promise.all([write1P, write2P, write3P]);\n            const versions = collection1.readVersions(\"key1\");\n            assert.strictEqual(versions.length, 3, \"Concurrent updates were not preserved\");\n            assert.strictEqual(versions[0], \"value1\", \"Incorrect update sequence\");\n            assert.strictEqual(versions[1], \"value2\", \"Incorrect update sequence\");\n            assert.strictEqual(versions[2], \"value3\", \"Incorrect update sequence\");\n\n            assert.strictEqual(collection1.read(\"key1\"), \"value1\", \"Default read policy is atomic\");\n            assert.strictEqual(collection1.read(\"key1\", ReadPolicy.Atomic), \"value1\", \"Atomic policy should work\");\n            assert.strictEqual(collection1.read(\"key1\", ReadPolicy.LWW), \"value3\", \"LWW policy should work\");\n        });\n\n        it(\"Happened after updates should overwrite previous versions\", async () => {\n            const collection1 = ctor.create(user1Document.runtime);\n            root1.set(\"collection\", collection1.handle);\n\n            const [collection2Handle, collection3Handle] = await Promise.all([\n                root2.wait<IComponentHandle>(\"collection\"),\n                root3.wait<IComponentHandle>(\"collection\"),\n            ]);\n            const collection2 = await collection2Handle.get<IConsensusRegisterCollection>();\n            const collection3 = await collection3Handle.get<IConsensusRegisterCollection>();\n\n            const write1P = collection1.write(\"key1\", \"value1\");\n            const write2P = collection2.write(\"key1\", \"value2\");\n            const write3P = collection3.write(\"key1\", \"value3\");\n            await Promise.all([write1P, write2P, write3P]);\n            const versions = collection1.readVersions(\"key1\");\n            assert.strictEqual(versions.length, 3, \"Concurrent updates were not preserved\");\n\n            await collection3.write(\"key1\", \"value4\");\n            const versions2 = collection1.readVersions(\"key1\");\n            assert.strictEqual(versions2.length, 1, \"Happened after value did not overwrite\");\n            assert.strictEqual(versions2[0], \"value4\", \"Happened after value did not overwrite\");\n\n            await collection2.write(\"key1\", \"value5\");\n            const versions3 = collection1.readVersions(\"key1\");\n            assert.strictEqual(versions3.length, 1, \"Happened after value did not overwrite\");\n            assert.strictEqual(versions3[0], \"value5\", \"Happened after value did not overwrite\");\n\n            await collection1.write(\"key1\", \"value6\");\n            const versions4 = collection1.readVersions(\"key1\");\n            assert.strictEqual(versions4.length, 1, \"Happened after value did not overwrite\");\n            assert.strictEqual(versions4[0], \"value6\", \"Happened after value did not overwrite\");\n\n            const write7P = collection1.write(\"key1\", \"value7\");\n            const write8P = collection2.write(\"key1\", \"value8\");\n            const write9P = collection3.write(\"key1\", \"value9\");\n            await Promise.all([write7P, write8P, write9P]);\n            const versions5 = collection3.readVersions(\"key1\");\n            assert.strictEqual(versions5.length, 3, \"Concurrent happened after updates should overwrite and preserve\");\n            assert.strictEqual(versions5[0], \"value7\", \"Incorrect update sequence\");\n            assert.strictEqual(versions5[1], \"value8\", \"Incorrect update sequence\");\n            assert.strictEqual(versions5[2], \"value9\", \"Incorrect update sequence\");\n\n            await collection2.write(\"key1\", \"value10\");\n            const versions6 = collection2.readVersions(\"key1\");\n            assert.strictEqual(versions6.length, 1, \"Happened after value did not overwrite\");\n            assert.strictEqual(versions6[0], \"value10\", \"Happened after value did not overwrite\");\n        });\n\n        afterEach(async () => {\n            await Promise.all([\n                user1Document.close(),\n                user2Document.close(),\n                user3Document.close(),\n            ]);\n            await testDeltaConnectionServer.webSocketServer.close();\n        });\n    });\n}\n"]}