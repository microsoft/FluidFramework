{"version":3,"file":"container.spec.js","sourceRoot":"","sources":["../../src/test/container.spec.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,GAAG,MAAM,4BAA4B,CAAC;AAElD,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,mCAAmC,CAAC;AAOtE,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAC;AACjC,OAAO,EAEH,yBAAyB,EACzB,0BAA0B,EAC1B,YAAY,GACf,MAAM,oCAAoC,CAAA;AAE3C,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;IACvB,IAAI,yBAAqD,CAAC;IAC1D,IAAI,YAA0B,CAAC;IAC/B,IAAI,YAA+B,CAAC;IACpC,MAAM,WAAW,GAAa,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC;IAC1C,IAAI,OAAyB,CAAC;IAC9B,IAAI,UAA0B,CAAC;IAC/B,IAAI,MAAc,CAAC;IAEnB,UAAU,CAAC,KAAK,IAAI,EAAE;QAClB,yBAAyB,GAAG,yBAAyB,CAAC,MAAM,EAAE,CAAC;QAC/D,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;QAClC,YAAY,GAAG,MAAM,YAAY,CAAC,OAAO,CAAC,WAAW,CAAsB,CAAC;QAC5E,MAAM,cAAc,GAAG,IAAI,0BAA0B,CAAC,yBAAyB,CAAC,CAAC;QACjF,OAAO,GAAG,MAAM,cAAc,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;QACnE,MAAM,IAAI,GAAG,EAAE,QAAQ,EAAE,YAAY,EAAE,CAAC;QAExC,UAAU,GAAG,IAAI,GAAG,CAAC,UAAU,CAAC,EAAE,iBAAiB,EAAE,KAAK,EAAE,CAAC,CAAC;QAC9D,MAAM,OAAO,GAAG,EAAE,CAAC;QAEnB,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,UAAU,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;IACvE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QACzC,IAAI,OAAgB,CAAC;QACrB,IAAI;YACA,MAAM,SAAS,CAAC,IAAI,CAChB,qBAAqB,EACrB,SAAS,EACT,OAAO,EACP,UAAU,EACV,EAAE,EACF,EAAE,EACF,MAAM,EACN,MAAM,EACN,WAAW,EACX,IAAI,CAAC,CAAC;YACV,OAAO,GAAG,IAAI,CAAC;SAClB;QAAC,OAAO,KAAK,EAAE;YACZ,OAAO,GAAG,KAAK,CAAC;SACnB;QACD,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC3C,IAAI,OAAO,GAAY,IAAI,CAAC;QAC5B,IAAI;YACA,OAAO,CAAC,gBAAgB,GAAG,GAAqC,EAAE;gBAC9D,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACjC,CAAC,CAAC;YACF,MAAM,SAAS,CAAC,IAAI,CAChB,qBAAqB,EACrB,SAAS,EACT,OAAO,EACP,UAAU,EACV,EAAE,EACF,EAAE,EACF,MAAM,EACN,MAAM,EACN,WAAW,EACX,IAAI,CAAC,CAAC;SACb;QAAC,OAAO,KAAK,EAAE;YACZ,OAAO,GAAG,KAAgB,CAAC;SAC9B;QACD,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;QACvC,IAAI,OAAO,GAAY,IAAI,CAAC;QAC5B,IAAI;YACA,OAAO,CAAC,qBAAqB,GAAG,KAAK,IAA2C,EAAE;gBAC9E,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACjC,CAAC,CAAC;YACF,MAAM,SAAS,CAAC,IAAI,CAChB,qBAAqB,EACrB,SAAS,EACT,OAAO,EACP,UAAU,EACV,EAAE,EACF,EAAE,EACF,MAAM,EACN,MAAM,EACN,WAAW,EACX,IAAI,CAAC,CAAC;SACb;QAAC,OAAO,KAAK,EAAE;YACZ,OAAO,GAAG,KAAgB,CAAC;SAC9B;QACD,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport * as API from \"@fluid-internal/client-api\";\nimport { IRequest } from \"@microsoft/fluid-component-core-interfaces\";\nimport { Container, Loader } from \"@microsoft/fluid-container-loader\";\nimport {\n    IDocumentDeltaStorageService,\n    IDocumentService,\n    IDocumentStorageService,\n    IFluidResolvedUrl,\n} from \"@microsoft/fluid-protocol-definitions\";\nimport * as assert from \"assert\";\nimport {\n    ITestDeltaConnectionServer,\n    TestDeltaConnectionServer,\n    TestDocumentServiceFactory,\n    TestResolver,\n} from \"@microsoft/fluid-local-test-server\"\n\ndescribe(\"Container\", () => {\n    let testDeltaConnectionServer: ITestDeltaConnectionServer;\n    let testResolver: TestResolver;\n    let testResolved: IFluidResolvedUrl;\n    const testRequest: IRequest = { url: \"\" };\n    let service: IDocumentService;\n    let codeLoader: API.CodeLoader;\n    let loader: Loader;\n\n    beforeEach(async () => {\n        testDeltaConnectionServer = TestDeltaConnectionServer.create();\n        testResolver = new TestResolver();\n        testResolved = await testResolver.resolve(testRequest) as IFluidResolvedUrl;\n        const serviceFactory = new TestDocumentServiceFactory(testDeltaConnectionServer);\n        service = await serviceFactory.createDocumentService(testResolved);\n        const host = { resolver: testResolver };\n\n        codeLoader = new API.CodeLoader({ generateSummaries: false });\n        const options = {};\n\n        loader = new Loader(host, serviceFactory, codeLoader, options, {});\n    });\n\n    it(\"Load container successfully\", async () => {\n        let success: boolean;\n        try {\n            await Container.load(\n                \"tenantId/documentId\",\n                undefined,\n                service,\n                codeLoader,\n                {},\n                {},\n                \"open\",\n                loader,\n                testRequest,\n                true);\n            success = true;\n        } catch (error) {\n            success = false;\n        }\n        assert.equal(success, true);\n    });\n\n    it(\"Load container unsuccessfully\", async () => {\n        let success: boolean = true;\n        try {\n            service.connectToStorage = (): Promise<IDocumentStorageService> => {\n                return Promise.reject(false);\n            };\n            await Container.load(\n                \"tenantId/documentId\",\n                undefined,\n                service,\n                codeLoader,\n                {},\n                {},\n                \"open\",\n                loader,\n                testRequest,\n                true);\n        } catch (error) {\n            success = error as boolean;\n        }\n        assert.equal(success, false);\n    });\n\n    it(\"Load container with error\", async () => {\n        let success: boolean = true;\n        try {\n            service.connectToDeltaStorage = async (): Promise<IDocumentDeltaStorageService> => {\n                return Promise.reject(false);\n            };\n            await Container.load(\n                \"tenantId/documentId\",\n                undefined,\n                service,\n                codeLoader,\n                {},\n                {},\n                \"open\",\n                loader,\n                testRequest,\n                true);\n        } catch (error) {\n            success = error as boolean;\n        }\n        assert.equal(success, false);\n    });\n});\n"]}