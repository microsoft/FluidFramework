{"version":3,"file":"sharedInterval.spec.js","sourceRoot":"","sources":["../../src/test/sharedInterval.spec.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,GAAG,MAAM,4BAA4B,CAAC;AAGlD,OAAO,EAAE,YAAY,EAAE,cAAc,EAAE,MAAM,6BAA6B,CAAC;AAE3E,OAAO,EAKH,mBAAmB,GACtB,MAAM,2BAA2B,CAAC;AACnC,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAC;AACjC,OAAO,EACH,yBAAyB,EAEzB,yBAAyB,EACzB,0BAA0B,EAC1B,QAAQ,EACR,YAAY,GACf,MAAM,oCAAoC,CAAC;AAE5C,MAAM,qBAAqB,GAAG,CAC1B,YAA0B,EAC1B,SAAmD,EACnD,QAAqD,EACvD,EAAE;IACA,MAAM,MAAM,GAAG,SAAS,CAAC,wBAAwB,CAAC,CAAC,EAAE,YAAY,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC;IACnF,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,EAC7C,yEAAyE,CAAC,CAAC;IAE/E,KAAK,MAAM,cAAc,IAAI,MAAM,EAAE;QACjC,MAAM,KAAK,GAAG,YAAY,CAAC,aAAa,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC/D,MAAM,GAAG,GAAG,YAAY,CAAC,aAAa,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC3D,IAAI,KAAK,GAAG,KAAK,CAAC;QAElB,iFAAiF;QAEjF,KAAK,MAAM,gBAAgB,IAAI,QAAQ,EAAE;YACrC,IAAI,gBAAgB,CAAC,KAAK,KAAK,KAAK,IAAI,gBAAgB,CAAC,GAAG,KAAK,GAAG,EAAE;gBAClE,KAAK,GAAG,IAAI,CAAC;gBACb,MAAM;aACT;SACJ;QAED,MAAM,CAAC,KAAK,EAAE,wBAAwB,KAAK,KAAK,GAAG,eAAe,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;KAClG;AACL,CAAC,CAAC;AAEF,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC5B,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QACxB,IAAI,IAAc,CAAC;QACnB,IAAI,YAA0B,CAAC;QAC/B,IAAI,SAAmD,CAAC;QAExD,MAAM,eAAe,GAAG,CAAC,QAAqD,EAAE,EAAE;YAC9E,qBAAqB,CAAC,YAAY,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QAC7D,CAAC,CAAC;QAEF,UAAU,CAAC,KAAK,IAAI,EAAE;YAClB,IAAI,GAAG,IAAI,QAAQ,CAAC,EAAE,CAAC,CAAC;YACxB,YAAY,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,mBAAmB,CAAC,IAAI,CAAC,CAAC;YACvE,YAAY,CAAC,UAAU,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAClC,SAAS,GAAG,MAAM,YAAY,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC,OAAO,EAAE,CAAC;QAChF,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC,KAAK,IAAI,EAAE;YACjB,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;YACrC,sFAAsF;YACtF,yDAAyD;YACzD,YAAY,CAAC,UAAU,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YAEhC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,aAAa,CAAC,CAAC;YAChD,eAAe,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAExC,YAAY,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;YACtC,eAAe,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC3C,yFAAyF;YACzF,yDAAyD;YACzD,MAAM,GAAG,GAAG,YAAY,CAAC,SAAS,EAAE,CAAC;YACrC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,YAAY,CAAC,aAAa,CAAC,CAAC;YACtD,eAAe,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;YAE9C,YAAY,CAAC,WAAW,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YACjC,eAAe,CAAC,CAAC,EAAE,KAAK,EAAE,cAAc,CAAC,gBAAgB,EAAE,GAAG,EAAE,cAAc,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QACxG,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;YACxC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,aAAa,CAAC,CAAC;YAChD,eAAe,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAExC,YAAY,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;YACpC,eAAe,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YAClD,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,aAAa,CAAC,CAAC;YAChD,eAAe,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAExC,YAAY,CAAC,UAAU,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YAChC,eAAe,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;YACvC,YAAY,CAAC,UAAU,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAClC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,aAAa,CAAC,CAAC;YAChD,eAAe,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAExC,YAAY,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;YACpC,eAAe,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;YACtC,YAAY,CAAC,UAAU,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAClC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,aAAa,CAAC,CAAC;YAChD,eAAe,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAExC,YAAY,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;YACpC,eAAe,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACjD,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,aAAa,CAAC,CAAC;YAChD,eAAe,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAExC,YAAY,CAAC,UAAU,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YAChC,eAAe,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACpD,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,aAAa,CAAC,CAAC;YAChD,eAAe,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAExC,YAAY,CAAC,UAAU,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YAChC,eAAe,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,eAAe,EAAE,KAAK,IAAI,EAAE;YAC3B,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,aAAa,CAAC,CAAC;YAChD,eAAe,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAExC,YAAY,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;YACpC,eAAe,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,iDAAiD;QACjD,kDAAkD;QAClD,EAAE;QACF,EAAE,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;YAClC,YAAY,CAAC,UAAU,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAClC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,aAAa,CAAC,CAAC;YAChD,eAAe,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAExC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;gBACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;oBACzB,YAAY,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;oBACpC,eAAe,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBAExC,YAAY,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;oBACpC,eAAe,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBAExC,YAAY,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;oBACpC,eAAe,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;iBAC3C;gBAED,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC7B;QACL,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YACxB,MAAM,KAAK,GAAG,IAAI,QAAQ,CAAC,EAAE,CAAC,CAAC;YAC/B,MAAM,aAAa,GAAG,MAAM,KAAK,CAAC,UAAU,CAAe,MAAM,EAAE,mBAAmB,CAAC,IAAI,CAAC,CAAC;YAC7F,aAAa,CAAC,UAAU,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;YAC1C,MAAM,UAAU,GAAG,MAAM,aAAa,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC,OAAO,EAAE,CAAC;YACpF,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,aAAa,CAAC,CAAC;YACjD,qBAAqB,CAAC,aAAa,EAAE,UAAU,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAEzE,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;YAC5B,MAAM,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAElC,MAAM,aAAa,GAAG,MAAM,KAAK,CAAC,OAAO,CAAe,MAAM,CAAC,CAAC;YAChE,MAAM,UAAU,GAAG,MAAM,aAAa,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC,OAAO,EAAE,CAAC;YACpF,qBAAqB,CAAC,aAAa,EAAE,UAAU,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAEzE,aAAa,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAChC,qBAAqB,CAAC,aAAa,EAAE,UAAU,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAEzE,aAAa,CAAC,UAAU,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YACjC,qBAAqB,CAAC,aAAa,EAAE,UAAU,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAEzE,MAAM,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAClC,qBAAqB,CAAC,aAAa,EAAE,UAAU,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC7E,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACpC,MAAM,EAAE,GAAG,4BAA4B,CAAC;QAExC,IAAI,yBAAqD,CAAC;QAC1D,IAAI,yBAAoD,CAAC;QACzD,IAAI,aAA2B,CAAC;QAChC,IAAI,aAA2B,CAAC;QAChC,IAAI,aAA2B,CAAC;QAChC,IAAI,KAAiB,CAAC;QACtB,IAAI,KAAiB,CAAC;QACtB,IAAI,KAAiB,CAAC;QAEtB,UAAU,CAAC,KAAK,IAAI,EAAE;YAClB,yBAAyB,GAAG,yBAAyB,CAAC,MAAM,EAAE,CAAC;YAC/D,yBAAyB,GAAG,IAAI,yBAAyB,CAAC,yBAAyB,CAAC,CAAC;YACrF,MAAM,cAAc,GAAG,IAAI,0BAA0B,CAAC,yBAAyB,CAAC,CAAC;YACjF,MAAM,QAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;YACpC,aAAa,GAAG,MAAM,GAAG,CAAC,IAAI,CAC1B,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,EAAE,cAAc,CAAC,CAAC;YAC1C,yBAAyB,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;YAE3D,aAAa,GAAG,MAAM,GAAG,CAAC,IAAI,CAC1B,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,EAAE,cAAc,CAAC,CAAC;YAC1C,yBAAyB,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;YAE3D,aAAa,GAAG,MAAM,GAAG,CAAC,IAAI,CAC1B,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,EAAE,cAAc,CAAC,CAAC;YAC1C,yBAAyB,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;YAC3D,KAAK,GAAG,aAAa,CAAC,OAAO,EAAE,CAAC;YAChC,KAAK,GAAG,aAAa,CAAC,OAAO,EAAE,CAAC;YAChC,KAAK,GAAG,aAAa,CAAC,OAAO,EAAE,CAAC;YAChC,MAAM,yBAAyB,CAAC,eAAe,EAAE,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,iFAAiF;QACjF,EAAE,CAAC,kFAAkF,EAAE,KAAK,IAAI,EAAE;YAC9F,KAAK,CAAC,GAAG,CAAC,aAAa,EAAE,aAAa,CAAC,YAAY,EAAE,CAAC,MAAM,CAAC,CAAC;YAC9D,MAAM,yBAAyB,CAAC,OAAO,CAAC,aAAa,EAAE,aAAa,EAAE,aAAa,CAAC,CAAC;YAErF,MAAM,YAAY,GAAG,MAAM,KAAK,CAAC,GAAG,CAAmB,aAAa,CAAC,CAAC,GAAG,EAAgB,CAAC;YAC1F,MAAM,YAAY,GAAG,MAAM,KAAK,CAAC,GAAG,CAAmB,aAAa,CAAC,CAAC,GAAG,EAAgB,CAAC;YAC1F,MAAM,YAAY,GAAG,MAAM,KAAK,CAAC,GAAG,CAAmB,aAAa,CAAC,CAAC,GAAG,EAAgB,CAAC;YAC1F,MAAM,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC;YACxB,MAAM,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC;YACxB,MAAM,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC;YAExB,YAAY,CAAC,UAAU,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC;YAE3C,MAAM,mBAAmB,GAAG,YAAY,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;YAC3E,MAAM,yBAAyB,CAAC,OAAO,CAAC,aAAa,EAAE,aAAa,EAAE,aAAa,CAAC,CAAC;YAErF,MAAM,mBAAmB,GAAG,YAAY,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;YAC3E,MAAM,mBAAmB,GAAG,YAAY,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;YAC3E,MAAM,CAAC,EAAE,CAAC,mBAAmB,CAAC,CAAC;YAC/B,MAAM,CAAC,EAAE,CAAC,mBAAmB,CAAC,CAAC;YAC/B,MAAM,CAAC,EAAE,CAAC,mBAAmB,CAAC,CAAC;YAE/B,MAAM,YAAY,GAAG,aAAa,CAAC,YAAY,EAAE,CAAC;YAClD,YAAY,CAAC,UAAU,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC;YAC3C,mBAAmB,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,aAAa,EAAE,EAAE,KAAK,EAAE,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC;YAC1F,MAAM,YAAY,GAAG,aAAa,CAAC,YAAY,EAAE,CAAC;YAClD,YAAY,CAAC,UAAU,CAAC,CAAC,EAAE,oBAAoB,CAAC,CAAC;YACjD,mBAAmB,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,aAAa,EAAE,EAAE,KAAK,EAAE,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC;YAC1F,MAAM,SAAS,GAAG,aAAa,CAAC,SAAS,EAAE,CAAC;YAC5C,SAAS,CAAC,GAAG,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;YAC1C,mBAAmB,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,aAAa,EAAE,EAAE,KAAK,EAAE,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC;YACvF,MAAM,yBAAyB,CAAC,OAAO,CAAC,aAAa,EAAE,aAAa,EAAE,aAAa,CAAC,CAAC;YAErF,MAAM,WAAW,GAAG,mBAAmB,CAAC,iBAAiB,EAAE,CAAC;YAC5D,MAAM,WAAW,GAAG,mBAAmB,CAAC,iBAAiB,EAAE,CAAC;YAC5D,MAAM,WAAW,GAAG,mBAAmB,CAAC,iBAAiB,EAAE,CAAC;YAC5D,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAEpC,MAAM,cAAc,GAAG,WAAW,CAAC,CAAC,CAAwB,CAAC;YAC7D,MAAM,aAAa,GAAG,MAAO,cAAc,CAAC,UAAU,CAAC,KAA0B,CAAC,GAAG,EAAgB,CAAC;YACtG,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,cAAc,CAAC,CAAC;YAC3D,MAAM,cAAc,GAAG,WAAW,CAAC,CAAC,CAAwB,CAAC;YAC7D,MAAM,QAAQ,GAAG,MAAO,cAAc,CAAC,UAAU,CAAC,KAA0B,CAAC,GAAG,EAAa,CAAC;YAC9F,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,aAAa,CAAC,CAAC;YAEvD,mCAAmC;YACnC,MAAM,YAAY,GAAG,YAAY,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAc,CAAC;YACvE,0DAA0D;YAC1D,sDAAsD;YACtD,MAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YACzD,qGAAqG;YACrG,MAAM,+BAA+B;YACjC,0CAA0C;YACzC,cAAc,CAAC,QAAQ,CAAC,KAA+B,CAAC,CAAC,CAAC,CAAC;YAChE,4EAA4E;YAC5E,MAAM,4BAA4B,GAAG,+BAA+B,CAAC,UAAU,CAAC,KAAyB,CAAC;YAC1G,MAAM,CAAC,KAAK,CAAC,4BAA4B,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC,KAAK,IAAI,EAAE;YACjB,MAAM,OAAO,CAAC,GAAG,CAAC;gBACd,aAAa,CAAC,KAAK,EAAE;gBACrB,aAAa,CAAC,KAAK,EAAE;gBACrB,aAAa,CAAC,KAAK,EAAE;aACxB,CAAC,CAAC;YACH,MAAM,yBAAyB,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;QAC5D,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport * as api from \"@fluid-internal/client-api\";\nimport { IComponentHandle } from \"@microsoft/fluid-component-core-interfaces\";\nimport { ISharedMap, SharedMap } from \"@microsoft/fluid-map\";\nimport { IntervalType, LocalReference } from \"@microsoft/fluid-merge-tree\";\nimport { IBlob } from \"@microsoft/fluid-protocol-definitions\";\nimport {\n    IntervalCollectionView,\n    ISerializedInterval,\n    SequenceInterval,\n    SharedString,\n    SharedStringFactory,\n} from \"@microsoft/fluid-sequence\";\nimport * as assert from \"assert\";\nimport {\n    DocumentDeltaEventManager,\n    ITestDeltaConnectionServer,\n    TestDeltaConnectionServer,\n    TestDocumentServiceFactory,\n    TestHost,\n    TestResolver,\n} from \"@microsoft/fluid-local-test-server\";\n\nconst assertIntervalsHelper = (\n    sharedString: SharedString,\n    intervals: IntervalCollectionView<SequenceInterval>,\n    expected: ReadonlyArray<{start: number; end: number}>,\n) => {\n    const actual = intervals.findOverlappingIntervals(0, sharedString.getLength() - 1);\n    assert.strictEqual(actual.length, expected.length,\n        `findOverlappingIntervals() must return the expected number of intervals`);\n\n    for (const actualInterval of actual) {\n        const start = sharedString.localRefToPos(actualInterval.start);\n        const end = sharedString.localRefToPos(actualInterval.end);\n        let found = false;\n\n        // console.log(`[${start},${end}): ${sharedString.getText().slice(start, end)}`);\n\n        for (const expectedInterval of expected) {\n            if (expectedInterval.start === start && expectedInterval.end === end) {\n                found = true;\n                break;\n            }\n        }\n\n        assert(found, `Unexpected interval [${start}..${end}) (expected ${JSON.stringify(expected)})`);\n    }\n};\n\ndescribe(\"SharedInterval\", () => {\n    describe(\"one client\", () => {\n        let host: TestHost;\n        let sharedString: SharedString;\n        let intervals: IntervalCollectionView<SequenceInterval>;\n\n        const assertIntervals = (expected: ReadonlyArray<{start: number; end: number}>) => {\n            assertIntervalsHelper(sharedString, intervals, expected);\n        };\n\n        beforeEach(async () => {\n            host = new TestHost([]);\n            sharedString = await host.createType(\"text\", SharedStringFactory.Type);\n            sharedString.insertText(0, \"012\");\n            intervals = await sharedString.getIntervalCollection(\"intervals\").getView();\n        });\n\n        afterEach(async () => {\n            await host.close();\n        });\n\n        it(\"replace all is included\", async () => {\n            // Temporarily, append a padding character to the initial string to work around #1761:\n            // (See: https://github.com/Microsoft/Prague/issues/1761)\n            sharedString.insertText(3, \".\");\n\n            intervals.add(0, 3, IntervalType.SlideOnRemove);\n            assertIntervals([{ start: 0, end: 3 }]);\n\n            sharedString.replaceText(0, 3, `xxx`);\n            assertIntervals([{ start: 0, end: 3 }]);\n        });\n\n        it(\"remove all yields empty range\", async () => {\n            // Temporarily, appending a padding character to the initial string to work around #1761:\n            // (See: https://github.com/Microsoft/Prague/issues/1761)\n            const len = sharedString.getLength();\n            intervals.add(0, len - 1, IntervalType.SlideOnRemove);\n            assertIntervals([{ start: 0, end: len - 1 }]);\n\n            sharedString.removeRange(0, len);\n            assertIntervals([{ start: LocalReference.DetachedPosition, end: LocalReference.DetachedPosition }]);\n        });\n\n        it(\"replace before is excluded\", async () => {\n            intervals.add(1, 2, IntervalType.SlideOnRemove);\n            assertIntervals([{ start: 1, end: 2 }]);\n\n            sharedString.replaceText(0, 1, `x`);\n            assertIntervals([{ start: 1, end: 2 }]);\n        });\n\n        it(\"insert at first position is excluded\", async () => {\n            intervals.add(0, 2, IntervalType.SlideOnRemove);\n            assertIntervals([{ start: 0, end: 2 }]);\n\n            sharedString.insertText(0, \".\");\n            assertIntervals([{ start: 1, end: 3 }]);\n        });\n\n        it(\"replace first is included\", async () => {\n            sharedString.insertText(0, \"012\");\n            intervals.add(0, 2, IntervalType.SlideOnRemove);\n            assertIntervals([{ start: 0, end: 2 }]);\n\n            sharedString.replaceText(0, 1, `x`);\n            assertIntervals([{ start: 0, end: 2 }]);\n        });\n\n        it(\"replace last is included\", async () => {\n            sharedString.insertText(0, \"012\");\n            intervals.add(0, 2, IntervalType.SlideOnRemove);\n            assertIntervals([{ start: 0, end: 2 }]);\n\n            sharedString.replaceText(1, 2, `x`);\n            assertIntervals([{ start: 0, end: 2 }]);\n        });\n\n        it(\"insert at last position is included\", async () => {\n            intervals.add(0, 2, IntervalType.SlideOnRemove);\n            assertIntervals([{ start: 0, end: 2 }]);\n\n            sharedString.insertText(2, \".\");\n            assertIntervals([{ start: 0, end: 3 }]);\n        });\n\n        it(\"insert after last position is excluded\", async () => {\n            intervals.add(0, 2, IntervalType.SlideOnRemove);\n            assertIntervals([{ start: 0, end: 2 }]);\n\n            sharedString.insertText(3, \".\");\n            assertIntervals([{ start: 0, end: 2 }]);\n        });\n\n        it(\"replace after\", async () => {\n            intervals.add(0, 1, IntervalType.SlideOnRemove);\n            assertIntervals([{ start: 0, end: 1 }]);\n\n            sharedString.replaceText(1, 2, `x`);\n            assertIntervals([{ start: 0, end: 1 }]);\n        });\n\n        // Uncomment below test to reproduce issue #2479:\n        // https://github.com/microsoft/Prague/issues/2479\n        //\n        it(\"repeated replacement\", async () => {\n            sharedString.insertText(0, \"012\");\n            intervals.add(0, 2, IntervalType.SlideOnRemove);\n            assertIntervals([{ start: 0, end: 2 }]);\n\n            for (let j = 0; j < 10; j++) {\n                for (let i = 0; i < 10; i++) {\n                    sharedString.replaceText(0, 1, `x`);\n                    assertIntervals([{ start: 0, end: 2 }]);\n\n                    sharedString.replaceText(1, 2, `x`);\n                    assertIntervals([{ start: 0, end: 2 }]);\n\n                    sharedString.replaceText(2, 3, `x`);\n                    assertIntervals([{ start: 0, end: 2 }]);\n                }\n\n                await TestHost.sync(host);\n            }\n        });\n    });\n\n    describe(\"multiple clients\", () => {\n        it(\"propagates\", async () => {\n            const host1 = new TestHost([]);\n            const sharedString1 = await host1.createType<SharedString>(\"text\", SharedStringFactory.Type);\n            sharedString1.insertText(0, \"0123456789\");\n            const intervals1 = await sharedString1.getIntervalCollection(\"intervals\").getView();\n            intervals1.add(1, 7, IntervalType.SlideOnRemove);\n            assertIntervalsHelper(sharedString1, intervals1, [{ start: 1, end: 7 }]);\n\n            const host2 = host1.clone();\n            await TestHost.sync(host1, host2);\n\n            const sharedString2 = await host2.getType<SharedString>(\"text\");\n            const intervals2 = await sharedString2.getIntervalCollection(\"intervals\").getView();\n            assertIntervalsHelper(sharedString2, intervals2, [{ start: 1, end: 7 }]);\n\n            sharedString2.removeRange(4, 5);\n            assertIntervalsHelper(sharedString2, intervals2, [{ start: 1, end: 6 }]);\n\n            sharedString2.insertText(4, \"x\");\n            assertIntervalsHelper(sharedString2, intervals2, [{ start: 1, end: 7 }]);\n\n            await TestHost.sync(host1, host2);\n            assertIntervalsHelper(sharedString1, intervals1, [{ start: 1, end: 7 }]);\n        });\n    });\n\n    describe(\"Handles in value types\", () => {\n        const id = \"fluid://test.com/test/test\";\n\n        let testDeltaConnectionServer: ITestDeltaConnectionServer;\n        let documentDeltaEventManager: DocumentDeltaEventManager;\n        let user1Document: api.Document;\n        let user2Document: api.Document;\n        let user3Document: api.Document;\n        let root1: ISharedMap;\n        let root2: ISharedMap;\n        let root3: ISharedMap;\n\n        beforeEach(async () => {\n            testDeltaConnectionServer = TestDeltaConnectionServer.create();\n            documentDeltaEventManager = new DocumentDeltaEventManager(testDeltaConnectionServer);\n            const serviceFactory = new TestDocumentServiceFactory(testDeltaConnectionServer);\n            const resolver = new TestResolver();\n            user1Document = await api.load(\n                id, { resolver }, {}, serviceFactory);\n            documentDeltaEventManager.registerDocuments(user1Document);\n\n            user2Document = await api.load(\n                id, { resolver }, {}, serviceFactory);\n            documentDeltaEventManager.registerDocuments(user2Document);\n\n            user3Document = await api.load(\n                id, { resolver }, {}, serviceFactory);\n            documentDeltaEventManager.registerDocuments(user3Document);\n            root1 = user1Document.getRoot();\n            root2 = user2Document.getRoot();\n            root3 = user3Document.getRoot();\n            await documentDeltaEventManager.pauseProcessing();\n        });\n\n        // This functionality is used in Word and FlowView's \"add comment\" functionality.\n        it(\"Can store shared objects in a shared string's interval collection via properties\", async () => {\n            root1.set(\"outerString\", user1Document.createString().handle);\n            await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n\n            const outerString1 = await root1.get<IComponentHandle>(\"outerString\").get<SharedString>();\n            const outerString2 = await root2.get<IComponentHandle>(\"outerString\").get<SharedString>();\n            const outerString3 = await root3.get<IComponentHandle>(\"outerString\").get<SharedString>();\n            assert.ok(outerString1);\n            assert.ok(outerString2);\n            assert.ok(outerString3);\n\n            outerString1.insertText(0, \"outer string\");\n\n            const intervalCollection1 = outerString1.getIntervalCollection(\"comments\");\n            await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n\n            const intervalCollection2 = outerString2.getIntervalCollection(\"comments\");\n            const intervalCollection3 = outerString3.getIntervalCollection(\"comments\");\n            assert.ok(intervalCollection1);\n            assert.ok(intervalCollection2);\n            assert.ok(intervalCollection3);\n\n            const comment1Text = user1Document.createString();\n            comment1Text.insertText(0, \"a comment...\");\n            intervalCollection1.add(0, 3, IntervalType.SlideOnRemove, { story: comment1Text.handle });\n            const comment2Text = user1Document.createString();\n            comment2Text.insertText(0, \"another comment...\");\n            intervalCollection1.add(5, 7, IntervalType.SlideOnRemove, { story: comment2Text.handle });\n            const nestedMap = user1Document.createMap();\n            nestedMap.set(\"nestedKey\", \"nestedValue\");\n            intervalCollection1.add(8, 9, IntervalType.SlideOnRemove, { story: nestedMap.handle });\n            await documentDeltaEventManager.process(user1Document, user2Document, user3Document);\n\n            const serialized1 = intervalCollection1.serializeInternal();\n            const serialized2 = intervalCollection2.serializeInternal();\n            const serialized3 = intervalCollection3.serializeInternal();\n            assert.equal(serialized1.length, 3);\n            assert.equal(serialized2.length, 3);\n            assert.equal(serialized3.length, 3);\n\n            const interval1From3 = serialized3[0] as ISerializedInterval;\n            const comment1From3 = await (interval1From3.properties.story as IComponentHandle).get<SharedString>();\n            assert.equal(comment1From3.getText(0, 12), \"a comment...\");\n            const interval3From3 = serialized3[2] as ISerializedInterval;\n            const mapFrom3 = await (interval3From3.properties.story as IComponentHandle).get<SharedMap>();\n            assert.equal(mapFrom3.get(\"nestedKey\"), \"nestedValue\");\n\n            // SharedString snapshots as a blob\n            const snapshotBlob = outerString2.snapshot().entries[0].value as IBlob;\n            // Since it's based on a map kernel, its contents parse as\n            // an IMapDataObject with the \"comments\" member we set\n            const parsedSnapshot = JSON.parse(snapshotBlob.contents);\n            // LocalIntervalCollection serializes as an array of ISerializedInterval, let's get the first comment\n            const serializedInterval1FromSnapshot =\n                // tslint:disable-next-line: no-unsafe-any\n                (parsedSnapshot.comments.value as ISerializedInterval[])[0];\n            // The \"story\" is the ILocalValue of the handle pointing to the SharedString\n            const handleLocalValueFromSnapshot = serializedInterval1FromSnapshot.properties.story as { type: string };\n            assert.equal(handleLocalValueFromSnapshot.type, \"__fluid_handle__\");\n        });\n\n        afterEach(async () => {\n            await Promise.all([\n                user1Document.close(),\n                user2Document.close(),\n                user3Document.close(),\n            ]);\n            await testDeltaConnectionServer.webSocketServer.close();\n        });\n    });\n});\n"]}