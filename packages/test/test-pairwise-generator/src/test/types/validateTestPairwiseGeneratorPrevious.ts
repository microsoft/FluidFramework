/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-validator in @fluidframework/build-tools.
 */
import * as old from "@fluidframework/test-pairwise-generator-previous";
import * as current from "../../index";

type TypeOnly<T> = {
    [P in keyof T]: TypeOnly<T[P]>;
};

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_booleanCases": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_booleanCases():
    TypeOnly<typeof old.booleanCases>;
declare function use_current_VariableDeclaration_booleanCases(
    use: TypeOnly<typeof current.booleanCases>);
use_current_VariableDeclaration_booleanCases(
    get_old_VariableDeclaration_booleanCases());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_booleanCases": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_booleanCases():
    TypeOnly<typeof current.booleanCases>;
declare function use_old_VariableDeclaration_booleanCases(
    use: TypeOnly<typeof old.booleanCases>);
use_old_VariableDeclaration_booleanCases(
    get_current_VariableDeclaration_booleanCases());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_generatePairwiseOptions": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_generatePairwiseOptions():
    TypeOnly<typeof old.generatePairwiseOptions>;
declare function use_current_FunctionDeclaration_generatePairwiseOptions(
    use: TypeOnly<typeof current.generatePairwiseOptions>);
use_current_FunctionDeclaration_generatePairwiseOptions(
    get_old_FunctionDeclaration_generatePairwiseOptions());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_generatePairwiseOptions": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_generatePairwiseOptions():
    TypeOnly<typeof current.generatePairwiseOptions>;
declare function use_old_FunctionDeclaration_generatePairwiseOptions(
    use: TypeOnly<typeof old.generatePairwiseOptions>);
use_old_FunctionDeclaration_generatePairwiseOptions(
    get_current_FunctionDeclaration_generatePairwiseOptions());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_numberCases": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_numberCases():
    TypeOnly<typeof old.numberCases>;
declare function use_current_VariableDeclaration_numberCases(
    use: TypeOnly<typeof current.numberCases>);
use_current_VariableDeclaration_numberCases(
    get_old_VariableDeclaration_numberCases());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_numberCases": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_numberCases():
    TypeOnly<typeof current.numberCases>;
declare function use_old_VariableDeclaration_numberCases(
    use: TypeOnly<typeof old.numberCases>);
use_old_VariableDeclaration_numberCases(
    get_current_VariableDeclaration_numberCases());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_OptionsMatrix": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_OptionsMatrix():
    TypeOnly<old.OptionsMatrix<any>>;
declare function use_current_TypeAliasDeclaration_OptionsMatrix(
    use: TypeOnly<current.OptionsMatrix<any>>);
use_current_TypeAliasDeclaration_OptionsMatrix(
    get_old_TypeAliasDeclaration_OptionsMatrix());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_OptionsMatrix": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_OptionsMatrix():
    TypeOnly<current.OptionsMatrix<any>>;
declare function use_old_TypeAliasDeclaration_OptionsMatrix(
    use: TypeOnly<old.OptionsMatrix<any>>);
use_old_TypeAliasDeclaration_OptionsMatrix(
    get_current_TypeAliasDeclaration_OptionsMatrix());
