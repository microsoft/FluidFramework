/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType, requireAssignableTo } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/test-drivers-previous";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current | requireAssignableTo<true, true>;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_LocalServerTestDriver": {"forwardCompat": false}
 */
declare type old_as_current_for_Class_LocalServerTestDriver = requireAssignableTo<TypeOnly<old.LocalServerTestDriver>, TypeOnly<current.LocalServerTestDriver>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_LocalServerTestDriver": {"backCompat": false}
 */
declare type current_as_old_for_Class_LocalServerTestDriver = requireAssignableTo<TypeOnly<current.LocalServerTestDriver>, TypeOnly<old.LocalServerTestDriver>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_OdspTestDriver": {"forwardCompat": false}
 */
declare type old_as_current_for_Class_OdspTestDriver = requireAssignableTo<TypeOnly<old.OdspTestDriver>, TypeOnly<current.OdspTestDriver>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_OdspTestDriver": {"backCompat": false}
 */
declare type current_as_old_for_Class_OdspTestDriver = requireAssignableTo<TypeOnly<current.OdspTestDriver>, TypeOnly<old.OdspTestDriver>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_RouterliciousTestDriver": {"forwardCompat": false}
 */
declare type old_as_current_for_Class_RouterliciousTestDriver = requireAssignableTo<TypeOnly<old.RouterliciousTestDriver>, TypeOnly<current.RouterliciousTestDriver>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_RouterliciousTestDriver": {"backCompat": false}
 */
declare type current_as_old_for_Class_RouterliciousTestDriver = requireAssignableTo<TypeOnly<current.RouterliciousTestDriver>, TypeOnly<old.RouterliciousTestDriver>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_TinyliciousTestDriver": {"forwardCompat": false}
 */
declare type old_as_current_for_Class_TinyliciousTestDriver = requireAssignableTo<TypeOnly<old.TinyliciousTestDriver>, TypeOnly<current.TinyliciousTestDriver>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_TinyliciousTestDriver": {"backCompat": false}
 */
declare type current_as_old_for_Class_TinyliciousTestDriver = requireAssignableTo<TypeOnly<current.TinyliciousTestDriver>, TypeOnly<old.TinyliciousTestDriver>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_LocalServerTestDriver": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_LocalServerTestDriver = requireAssignableTo<TypeOnly<typeof current.LocalServerTestDriver>, TypeOnly<typeof old.LocalServerTestDriver>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_OdspTestDriver": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_OdspTestDriver = requireAssignableTo<TypeOnly<typeof current.OdspTestDriver>, TypeOnly<typeof old.OdspTestDriver>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_RouterliciousTestDriver": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_RouterliciousTestDriver = requireAssignableTo<TypeOnly<typeof current.RouterliciousTestDriver>, TypeOnly<typeof old.RouterliciousTestDriver>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_TinyliciousTestDriver": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_TinyliciousTestDriver = requireAssignableTo<TypeOnly<typeof current.TinyliciousTestDriver>, TypeOnly<typeof old.TinyliciousTestDriver>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Function_assertOdspEndpoint": {"backCompat": false}
 */
declare type current_as_old_for_Function_assertOdspEndpoint = requireAssignableTo<TypeOnly<typeof current.assertOdspEndpoint>, TypeOnly<typeof old.assertOdspEndpoint>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Function_assertRouterliciousEndpoint": {"backCompat": false}
 */
declare type current_as_old_for_Function_assertRouterliciousEndpoint = requireAssignableTo<TypeOnly<typeof current.assertRouterliciousEndpoint>, TypeOnly<typeof old.assertRouterliciousEndpoint>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Function_createFluidTestDriver": {"backCompat": false}
 */
declare type current_as_old_for_Function_createFluidTestDriver = requireAssignableTo<TypeOnly<typeof current.createFluidTestDriver>, TypeOnly<typeof old.createFluidTestDriver>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_DriverApiType": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_DriverApiType = requireAssignableTo<TypeOnly<old.DriverApiType>, TypeOnly<current.DriverApiType>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_DriverApiType": {"backCompat": false}
 */
declare type current_as_old_for_Interface_DriverApiType = requireAssignableTo<TypeOnly<current.DriverApiType>, TypeOnly<old.DriverApiType>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_FluidTestDriverConfig": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_FluidTestDriverConfig = requireAssignableTo<TypeOnly<old.FluidTestDriverConfig>, TypeOnly<current.FluidTestDriverConfig>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_FluidTestDriverConfig": {"backCompat": false}
 */
declare type current_as_old_for_Interface_FluidTestDriverConfig = requireAssignableTo<TypeOnly<current.FluidTestDriverConfig>, TypeOnly<old.FluidTestDriverConfig>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_CreateFromEnvConfigParam": {"forwardCompat": false}
 */
declare type old_as_current_for_TypeAlias_CreateFromEnvConfigParam = requireAssignableTo<TypeOnly<old.CreateFromEnvConfigParam<never>>, TypeOnly<current.CreateFromEnvConfigParam<never>>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_CreateFromEnvConfigParam": {"backCompat": false}
 */
declare type current_as_old_for_TypeAlias_CreateFromEnvConfigParam = requireAssignableTo<TypeOnly<current.CreateFromEnvConfigParam<never>>, TypeOnly<old.CreateFromEnvConfigParam<never>>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_LocalDriverApiType": {"forwardCompat": false}
 */
declare type old_as_current_for_TypeAlias_LocalDriverApiType = requireAssignableTo<TypeOnly<old.LocalDriverApiType>, TypeOnly<current.LocalDriverApiType>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_LocalDriverApiType": {"backCompat": false}
 */
declare type current_as_old_for_TypeAlias_LocalDriverApiType = requireAssignableTo<TypeOnly<current.LocalDriverApiType>, TypeOnly<old.LocalDriverApiType>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_OdspDriverApiType": {"forwardCompat": false}
 */
declare type old_as_current_for_TypeAlias_OdspDriverApiType = requireAssignableTo<TypeOnly<old.OdspDriverApiType>, TypeOnly<current.OdspDriverApiType>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_OdspDriverApiType": {"backCompat": false}
 */
declare type current_as_old_for_TypeAlias_OdspDriverApiType = requireAssignableTo<TypeOnly<current.OdspDriverApiType>, TypeOnly<old.OdspDriverApiType>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_RouterliciousDriverApiType": {"forwardCompat": false}
 */
declare type old_as_current_for_TypeAlias_RouterliciousDriverApiType = requireAssignableTo<TypeOnly<old.RouterliciousDriverApiType>, TypeOnly<current.RouterliciousDriverApiType>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_RouterliciousDriverApiType": {"backCompat": false}
 */
declare type current_as_old_for_TypeAlias_RouterliciousDriverApiType = requireAssignableTo<TypeOnly<current.RouterliciousDriverApiType>, TypeOnly<old.RouterliciousDriverApiType>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Variable_DriverApi": {"backCompat": false}
 */
declare type current_as_old_for_Variable_DriverApi = requireAssignableTo<TypeOnly<typeof current.DriverApi>, TypeOnly<typeof old.DriverApi>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Variable_generateOdspHostStoragePolicy": {"backCompat": false}
 */
declare type current_as_old_for_Variable_generateOdspHostStoragePolicy = requireAssignableTo<TypeOnly<typeof current.generateOdspHostStoragePolicy>, TypeOnly<typeof old.generateOdspHostStoragePolicy>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Variable_LocalDriverApi": {"backCompat": false}
 */
declare type current_as_old_for_Variable_LocalDriverApi = requireAssignableTo<TypeOnly<typeof current.LocalDriverApi>, TypeOnly<typeof old.LocalDriverApi>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Variable_OdspDriverApi": {"backCompat": false}
 */
declare type current_as_old_for_Variable_OdspDriverApi = requireAssignableTo<TypeOnly<typeof current.OdspDriverApi>, TypeOnly<typeof old.OdspDriverApi>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Variable_RouterliciousDriverApi": {"backCompat": false}
 */
declare type current_as_old_for_Variable_RouterliciousDriverApi = requireAssignableTo<TypeOnly<typeof current.RouterliciousDriverApi>, TypeOnly<typeof old.RouterliciousDriverApi>>
