/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-validator in @fluidframework/build-tools.
 */
import * as old from "@fluidframework/test-drivers-previous";
import * as current from "../../index";

type TypeOnly<T> = {
    [P in keyof T]: TypeOnly<T[P]>;
};

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_assertOdspEndpoint": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_assertOdspEndpoint():
    TypeOnly<typeof old.assertOdspEndpoint>;
declare function use_current_FunctionDeclaration_assertOdspEndpoint(
    use: TypeOnly<typeof current.assertOdspEndpoint>);
use_current_FunctionDeclaration_assertOdspEndpoint(
    get_old_FunctionDeclaration_assertOdspEndpoint());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_assertOdspEndpoint": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_assertOdspEndpoint():
    TypeOnly<typeof current.assertOdspEndpoint>;
declare function use_old_FunctionDeclaration_assertOdspEndpoint(
    use: TypeOnly<typeof old.assertOdspEndpoint>);
use_old_FunctionDeclaration_assertOdspEndpoint(
    get_current_FunctionDeclaration_assertOdspEndpoint());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_assertRouterliciousEndpoint": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_assertRouterliciousEndpoint():
    TypeOnly<typeof old.assertRouterliciousEndpoint>;
declare function use_current_FunctionDeclaration_assertRouterliciousEndpoint(
    use: TypeOnly<typeof current.assertRouterliciousEndpoint>);
use_current_FunctionDeclaration_assertRouterliciousEndpoint(
    get_old_FunctionDeclaration_assertRouterliciousEndpoint());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_assertRouterliciousEndpoint": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_assertRouterliciousEndpoint():
    TypeOnly<typeof current.assertRouterliciousEndpoint>;
declare function use_old_FunctionDeclaration_assertRouterliciousEndpoint(
    use: TypeOnly<typeof old.assertRouterliciousEndpoint>);
use_old_FunctionDeclaration_assertRouterliciousEndpoint(
    get_current_FunctionDeclaration_assertRouterliciousEndpoint());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_createFluidTestDriver": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_createFluidTestDriver():
    TypeOnly<typeof old.createFluidTestDriver>;
declare function use_current_FunctionDeclaration_createFluidTestDriver(
    use: TypeOnly<typeof current.createFluidTestDriver>);
use_current_FunctionDeclaration_createFluidTestDriver(
    get_old_FunctionDeclaration_createFluidTestDriver());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_createFluidTestDriver": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_createFluidTestDriver():
    TypeOnly<typeof current.createFluidTestDriver>;
declare function use_old_FunctionDeclaration_createFluidTestDriver(
    use: TypeOnly<typeof old.createFluidTestDriver>);
use_old_FunctionDeclaration_createFluidTestDriver(
    get_current_FunctionDeclaration_createFluidTestDriver());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_CreateFromEnvConfigParam": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_CreateFromEnvConfigParam():
    TypeOnly<old.CreateFromEnvConfigParam<any>>;
declare function use_current_TypeAliasDeclaration_CreateFromEnvConfigParam(
    use: TypeOnly<current.CreateFromEnvConfigParam<any>>);
use_current_TypeAliasDeclaration_CreateFromEnvConfigParam(
    get_old_TypeAliasDeclaration_CreateFromEnvConfigParam());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_CreateFromEnvConfigParam": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_CreateFromEnvConfigParam():
    TypeOnly<current.CreateFromEnvConfigParam<any>>;
declare function use_old_TypeAliasDeclaration_CreateFromEnvConfigParam(
    use: TypeOnly<old.CreateFromEnvConfigParam<any>>);
use_old_TypeAliasDeclaration_CreateFromEnvConfigParam(
    get_current_TypeAliasDeclaration_CreateFromEnvConfigParam());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_DriverApi": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_DriverApi():
    TypeOnly<typeof old.DriverApi>;
declare function use_current_VariableDeclaration_DriverApi(
    use: TypeOnly<typeof current.DriverApi>);
use_current_VariableDeclaration_DriverApi(
    get_old_VariableDeclaration_DriverApi());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_DriverApi": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_DriverApi():
    TypeOnly<typeof current.DriverApi>;
declare function use_old_VariableDeclaration_DriverApi(
    use: TypeOnly<typeof old.DriverApi>);
use_old_VariableDeclaration_DriverApi(
    get_current_VariableDeclaration_DriverApi());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_DriverApiType": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_DriverApiType():
    TypeOnly<old.DriverApiType>;
declare function use_current_InterfaceDeclaration_DriverApiType(
    use: TypeOnly<current.DriverApiType>);
use_current_InterfaceDeclaration_DriverApiType(
    get_old_InterfaceDeclaration_DriverApiType());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_DriverApiType": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_DriverApiType():
    TypeOnly<current.DriverApiType>;
declare function use_old_InterfaceDeclaration_DriverApiType(
    use: TypeOnly<old.DriverApiType>);
use_old_InterfaceDeclaration_DriverApiType(
    get_current_InterfaceDeclaration_DriverApiType());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_FluidTestDriverConfig": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_FluidTestDriverConfig():
    TypeOnly<old.FluidTestDriverConfig>;
declare function use_current_InterfaceDeclaration_FluidTestDriverConfig(
    use: TypeOnly<current.FluidTestDriverConfig>);
use_current_InterfaceDeclaration_FluidTestDriverConfig(
    get_old_InterfaceDeclaration_FluidTestDriverConfig());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_FluidTestDriverConfig": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_FluidTestDriverConfig():
    TypeOnly<current.FluidTestDriverConfig>;
declare function use_old_InterfaceDeclaration_FluidTestDriverConfig(
    use: TypeOnly<old.FluidTestDriverConfig>);
use_old_InterfaceDeclaration_FluidTestDriverConfig(
    get_current_InterfaceDeclaration_FluidTestDriverConfig());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_generateOdspHostStoragePolicy": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_generateOdspHostStoragePolicy():
    TypeOnly<typeof old.generateOdspHostStoragePolicy>;
declare function use_current_VariableDeclaration_generateOdspHostStoragePolicy(
    use: TypeOnly<typeof current.generateOdspHostStoragePolicy>);
use_current_VariableDeclaration_generateOdspHostStoragePolicy(
    get_old_VariableDeclaration_generateOdspHostStoragePolicy());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_generateOdspHostStoragePolicy": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_generateOdspHostStoragePolicy():
    TypeOnly<typeof current.generateOdspHostStoragePolicy>;
declare function use_old_VariableDeclaration_generateOdspHostStoragePolicy(
    use: TypeOnly<typeof old.generateOdspHostStoragePolicy>);
use_old_VariableDeclaration_generateOdspHostStoragePolicy(
    get_current_VariableDeclaration_generateOdspHostStoragePolicy());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_LocalDriverApi": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_LocalDriverApi():
    TypeOnly<typeof old.LocalDriverApi>;
declare function use_current_VariableDeclaration_LocalDriverApi(
    use: TypeOnly<typeof current.LocalDriverApi>);
use_current_VariableDeclaration_LocalDriverApi(
    get_old_VariableDeclaration_LocalDriverApi());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_LocalDriverApi": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_LocalDriverApi():
    TypeOnly<typeof current.LocalDriverApi>;
declare function use_old_VariableDeclaration_LocalDriverApi(
    use: TypeOnly<typeof old.LocalDriverApi>);
use_old_VariableDeclaration_LocalDriverApi(
    get_current_VariableDeclaration_LocalDriverApi());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_LocalDriverApiType": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_LocalDriverApiType():
    TypeOnly<old.LocalDriverApiType>;
declare function use_current_TypeAliasDeclaration_LocalDriverApiType(
    use: TypeOnly<current.LocalDriverApiType>);
use_current_TypeAliasDeclaration_LocalDriverApiType(
    get_old_TypeAliasDeclaration_LocalDriverApiType());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_LocalDriverApiType": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_LocalDriverApiType():
    TypeOnly<current.LocalDriverApiType>;
declare function use_old_TypeAliasDeclaration_LocalDriverApiType(
    use: TypeOnly<old.LocalDriverApiType>);
use_old_TypeAliasDeclaration_LocalDriverApiType(
    get_current_TypeAliasDeclaration_LocalDriverApiType());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_LocalServerTestDriver": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_LocalServerTestDriver():
    TypeOnly<old.LocalServerTestDriver>;
declare function use_current_ClassDeclaration_LocalServerTestDriver(
    use: TypeOnly<current.LocalServerTestDriver>);
use_current_ClassDeclaration_LocalServerTestDriver(
    get_old_ClassDeclaration_LocalServerTestDriver());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_LocalServerTestDriver": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_LocalServerTestDriver():
    TypeOnly<current.LocalServerTestDriver>;
declare function use_old_ClassDeclaration_LocalServerTestDriver(
    use: TypeOnly<old.LocalServerTestDriver>);
use_old_ClassDeclaration_LocalServerTestDriver(
    get_current_ClassDeclaration_LocalServerTestDriver());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_OdspDriverApi": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_OdspDriverApi():
    TypeOnly<typeof old.OdspDriverApi>;
declare function use_current_VariableDeclaration_OdspDriverApi(
    use: TypeOnly<typeof current.OdspDriverApi>);
use_current_VariableDeclaration_OdspDriverApi(
    get_old_VariableDeclaration_OdspDriverApi());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_OdspDriverApi": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_OdspDriverApi():
    TypeOnly<typeof current.OdspDriverApi>;
declare function use_old_VariableDeclaration_OdspDriverApi(
    use: TypeOnly<typeof old.OdspDriverApi>);
use_old_VariableDeclaration_OdspDriverApi(
    get_current_VariableDeclaration_OdspDriverApi());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_OdspDriverApiType": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_OdspDriverApiType():
    TypeOnly<old.OdspDriverApiType>;
declare function use_current_TypeAliasDeclaration_OdspDriverApiType(
    use: TypeOnly<current.OdspDriverApiType>);
use_current_TypeAliasDeclaration_OdspDriverApiType(
    get_old_TypeAliasDeclaration_OdspDriverApiType());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_OdspDriverApiType": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_OdspDriverApiType():
    TypeOnly<current.OdspDriverApiType>;
declare function use_old_TypeAliasDeclaration_OdspDriverApiType(
    use: TypeOnly<old.OdspDriverApiType>);
use_old_TypeAliasDeclaration_OdspDriverApiType(
    get_current_TypeAliasDeclaration_OdspDriverApiType());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_OdspTestDriver": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_OdspTestDriver():
    TypeOnly<old.OdspTestDriver>;
declare function use_current_ClassDeclaration_OdspTestDriver(
    use: TypeOnly<current.OdspTestDriver>);
use_current_ClassDeclaration_OdspTestDriver(
    get_old_ClassDeclaration_OdspTestDriver());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_OdspTestDriver": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_OdspTestDriver():
    TypeOnly<current.OdspTestDriver>;
declare function use_old_ClassDeclaration_OdspTestDriver(
    use: TypeOnly<old.OdspTestDriver>);
use_old_ClassDeclaration_OdspTestDriver(
    get_current_ClassDeclaration_OdspTestDriver());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_RouterliciousDriverApi": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_RouterliciousDriverApi():
    TypeOnly<typeof old.RouterliciousDriverApi>;
declare function use_current_VariableDeclaration_RouterliciousDriverApi(
    use: TypeOnly<typeof current.RouterliciousDriverApi>);
use_current_VariableDeclaration_RouterliciousDriverApi(
    get_old_VariableDeclaration_RouterliciousDriverApi());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_RouterliciousDriverApi": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_RouterliciousDriverApi():
    TypeOnly<typeof current.RouterliciousDriverApi>;
declare function use_old_VariableDeclaration_RouterliciousDriverApi(
    use: TypeOnly<typeof old.RouterliciousDriverApi>);
use_old_VariableDeclaration_RouterliciousDriverApi(
    get_current_VariableDeclaration_RouterliciousDriverApi());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_RouterliciousDriverApiType": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_RouterliciousDriverApiType():
    TypeOnly<old.RouterliciousDriverApiType>;
declare function use_current_TypeAliasDeclaration_RouterliciousDriverApiType(
    use: TypeOnly<current.RouterliciousDriverApiType>);
use_current_TypeAliasDeclaration_RouterliciousDriverApiType(
    get_old_TypeAliasDeclaration_RouterliciousDriverApiType());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_RouterliciousDriverApiType": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_RouterliciousDriverApiType():
    TypeOnly<current.RouterliciousDriverApiType>;
declare function use_old_TypeAliasDeclaration_RouterliciousDriverApiType(
    use: TypeOnly<old.RouterliciousDriverApiType>);
use_old_TypeAliasDeclaration_RouterliciousDriverApiType(
    get_current_TypeAliasDeclaration_RouterliciousDriverApiType());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_RouterliciousTestDriver": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_RouterliciousTestDriver():
    TypeOnly<old.RouterliciousTestDriver>;
declare function use_current_ClassDeclaration_RouterliciousTestDriver(
    use: TypeOnly<current.RouterliciousTestDriver>);
use_current_ClassDeclaration_RouterliciousTestDriver(
    get_old_ClassDeclaration_RouterliciousTestDriver());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_RouterliciousTestDriver": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_RouterliciousTestDriver():
    TypeOnly<current.RouterliciousTestDriver>;
declare function use_old_ClassDeclaration_RouterliciousTestDriver(
    use: TypeOnly<old.RouterliciousTestDriver>);
use_old_ClassDeclaration_RouterliciousTestDriver(
    get_current_ClassDeclaration_RouterliciousTestDriver());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_TinyliciousTestDriver": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_TinyliciousTestDriver():
    TypeOnly<old.TinyliciousTestDriver>;
declare function use_current_ClassDeclaration_TinyliciousTestDriver(
    use: TypeOnly<current.TinyliciousTestDriver>);
use_current_ClassDeclaration_TinyliciousTestDriver(
    get_old_ClassDeclaration_TinyliciousTestDriver());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_TinyliciousTestDriver": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_TinyliciousTestDriver():
    TypeOnly<current.TinyliciousTestDriver>;
declare function use_old_ClassDeclaration_TinyliciousTestDriver(
    use: TypeOnly<old.TinyliciousTestDriver>);
use_old_ClassDeclaration_TinyliciousTestDriver(
    get_current_ClassDeclaration_TinyliciousTestDriver());
