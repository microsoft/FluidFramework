/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType, requireAssignableTo } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/test-driver-definitions-previous";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current | requireAssignableTo<true, true>;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ITelemetryBufferedLogger": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ITelemetryBufferedLogger = requireAssignableTo<TypeOnly<old.ITelemetryBufferedLogger>, TypeOnly<current.ITelemetryBufferedLogger>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ITelemetryBufferedLogger": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ITelemetryBufferedLogger = requireAssignableTo<TypeOnly<current.ITelemetryBufferedLogger>, TypeOnly<old.ITelemetryBufferedLogger>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ITestDriver": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ITestDriver = requireAssignableTo<TypeOnly<old.ITestDriver>, TypeOnly<current.ITestDriver>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ITestDriver": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ITestDriver = requireAssignableTo<TypeOnly<current.ITestDriver>, TypeOnly<old.ITestDriver>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_DriverEndpoint": {"forwardCompat": false}
 */
declare type old_as_current_for_TypeAlias_DriverEndpoint = requireAssignableTo<TypeOnly<old.DriverEndpoint>, TypeOnly<current.DriverEndpoint>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_DriverEndpoint": {"backCompat": false}
 */
declare type current_as_old_for_TypeAlias_DriverEndpoint = requireAssignableTo<TypeOnly<current.DriverEndpoint>, TypeOnly<old.DriverEndpoint>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_OdspEndpoint": {"forwardCompat": false}
 */
declare type old_as_current_for_TypeAlias_OdspEndpoint = requireAssignableTo<TypeOnly<old.OdspEndpoint>, TypeOnly<current.OdspEndpoint>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_OdspEndpoint": {"backCompat": false}
 */
declare type current_as_old_for_TypeAlias_OdspEndpoint = requireAssignableTo<TypeOnly<current.OdspEndpoint>, TypeOnly<old.OdspEndpoint>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_RouterliciousEndpoint": {"forwardCompat": false}
 */
declare type old_as_current_for_TypeAlias_RouterliciousEndpoint = requireAssignableTo<TypeOnly<old.RouterliciousEndpoint>, TypeOnly<current.RouterliciousEndpoint>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_RouterliciousEndpoint": {"backCompat": false}
 */
declare type current_as_old_for_TypeAlias_RouterliciousEndpoint = requireAssignableTo<TypeOnly<current.RouterliciousEndpoint>, TypeOnly<old.RouterliciousEndpoint>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_TestDriverTypes": {"forwardCompat": false}
 */
declare type old_as_current_for_TypeAlias_TestDriverTypes = requireAssignableTo<TypeOnly<old.TestDriverTypes>, TypeOnly<current.TestDriverTypes>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_TestDriverTypes": {"backCompat": false}
 */
declare type current_as_old_for_TypeAlias_TestDriverTypes = requireAssignableTo<TypeOnly<current.TestDriverTypes>, TypeOnly<old.TestDriverTypes>>
