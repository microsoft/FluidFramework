/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/tinylicious-client-previous/internal";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_CompatibilityMode": {"forwardCompat": false}
 */
declare function get_old_TypeAliasDeclaration_CompatibilityMode():
    TypeOnly<old.CompatibilityMode>;
declare function use_current_TypeAliasDeclaration_CompatibilityMode(
    use: TypeOnly<current.CompatibilityMode>): void;
use_current_TypeAliasDeclaration_CompatibilityMode(
    get_old_TypeAliasDeclaration_CompatibilityMode());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_CompatibilityMode": {"backCompat": false}
 */
declare function get_current_TypeAliasDeclaration_CompatibilityMode():
    TypeOnly<current.CompatibilityMode>;
declare function use_old_TypeAliasDeclaration_CompatibilityMode(
    use: TypeOnly<old.CompatibilityMode>): void;
use_old_TypeAliasDeclaration_CompatibilityMode(
    get_current_TypeAliasDeclaration_CompatibilityMode());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_ITinyliciousAudience": {"forwardCompat": false}
 */
declare function get_old_TypeAliasDeclaration_ITinyliciousAudience():
    TypeOnly<old.ITinyliciousAudience>;
declare function use_current_TypeAliasDeclaration_ITinyliciousAudience(
    use: TypeOnly<current.ITinyliciousAudience>): void;
use_current_TypeAliasDeclaration_ITinyliciousAudience(
    get_old_TypeAliasDeclaration_ITinyliciousAudience());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_ITinyliciousAudience": {"backCompat": false}
 */
declare function get_current_TypeAliasDeclaration_ITinyliciousAudience():
    TypeOnly<current.ITinyliciousAudience>;
declare function use_old_TypeAliasDeclaration_ITinyliciousAudience(
    use: TypeOnly<old.ITinyliciousAudience>): void;
use_old_TypeAliasDeclaration_ITinyliciousAudience(
    get_current_TypeAliasDeclaration_ITinyliciousAudience());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_TinyliciousClient": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_TinyliciousClient():
    TypeOnly<current.TinyliciousClient>;
declare function use_old_ClassDeclaration_TinyliciousClient(
    use: TypeOnly<old.TinyliciousClient>): void;
use_old_ClassDeclaration_TinyliciousClient(
    get_current_ClassDeclaration_TinyliciousClient());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_TinyliciousClientProps": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_TinyliciousClientProps():
    TypeOnly<old.TinyliciousClientProps>;
declare function use_current_InterfaceDeclaration_TinyliciousClientProps(
    use: TypeOnly<current.TinyliciousClientProps>): void;
use_current_InterfaceDeclaration_TinyliciousClientProps(
    get_old_InterfaceDeclaration_TinyliciousClientProps());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_TinyliciousClientProps": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_TinyliciousClientProps():
    TypeOnly<current.TinyliciousClientProps>;
declare function use_old_InterfaceDeclaration_TinyliciousClientProps(
    use: TypeOnly<old.TinyliciousClientProps>): void;
use_old_InterfaceDeclaration_TinyliciousClientProps(
    get_current_InterfaceDeclaration_TinyliciousClientProps());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_TinyliciousConnectionConfig": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_TinyliciousConnectionConfig():
    TypeOnly<old.TinyliciousConnectionConfig>;
declare function use_current_InterfaceDeclaration_TinyliciousConnectionConfig(
    use: TypeOnly<current.TinyliciousConnectionConfig>): void;
use_current_InterfaceDeclaration_TinyliciousConnectionConfig(
    get_old_InterfaceDeclaration_TinyliciousConnectionConfig());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_TinyliciousConnectionConfig": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_TinyliciousConnectionConfig():
    TypeOnly<current.TinyliciousConnectionConfig>;
declare function use_old_InterfaceDeclaration_TinyliciousConnectionConfig(
    use: TypeOnly<old.TinyliciousConnectionConfig>): void;
use_old_InterfaceDeclaration_TinyliciousConnectionConfig(
    get_current_InterfaceDeclaration_TinyliciousConnectionConfig());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_TinyliciousContainerServices": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_TinyliciousContainerServices():
    TypeOnly<old.TinyliciousContainerServices>;
declare function use_current_InterfaceDeclaration_TinyliciousContainerServices(
    use: TypeOnly<current.TinyliciousContainerServices>): void;
use_current_InterfaceDeclaration_TinyliciousContainerServices(
    get_old_InterfaceDeclaration_TinyliciousContainerServices());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_TinyliciousContainerServices": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_TinyliciousContainerServices():
    TypeOnly<current.TinyliciousContainerServices>;
declare function use_old_InterfaceDeclaration_TinyliciousContainerServices(
    use: TypeOnly<old.TinyliciousContainerServices>): void;
use_old_InterfaceDeclaration_TinyliciousContainerServices(
    get_current_InterfaceDeclaration_TinyliciousContainerServices());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_TinyliciousMember": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_TinyliciousMember():
    TypeOnly<old.TinyliciousMember>;
declare function use_current_InterfaceDeclaration_TinyliciousMember(
    use: TypeOnly<current.TinyliciousMember>): void;
use_current_InterfaceDeclaration_TinyliciousMember(
    get_old_InterfaceDeclaration_TinyliciousMember());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_TinyliciousMember": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_TinyliciousMember():
    TypeOnly<current.TinyliciousMember>;
declare function use_old_InterfaceDeclaration_TinyliciousMember(
    use: TypeOnly<old.TinyliciousMember>): void;
use_old_InterfaceDeclaration_TinyliciousMember(
    get_current_InterfaceDeclaration_TinyliciousMember());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_TinyliciousUser": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_TinyliciousUser():
    TypeOnly<old.TinyliciousUser>;
declare function use_current_InterfaceDeclaration_TinyliciousUser(
    use: TypeOnly<current.TinyliciousUser>): void;
use_current_InterfaceDeclaration_TinyliciousUser(
    get_old_InterfaceDeclaration_TinyliciousUser());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_TinyliciousUser": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_TinyliciousUser():
    TypeOnly<current.TinyliciousUser>;
declare function use_old_InterfaceDeclaration_TinyliciousUser(
    use: TypeOnly<old.TinyliciousUser>): void;
use_old_InterfaceDeclaration_TinyliciousUser(
    get_current_InterfaceDeclaration_TinyliciousUser());
