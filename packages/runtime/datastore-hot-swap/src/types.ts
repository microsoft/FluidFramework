/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

import { IChannel } from "@fluidframework/datastore-definitions";
import { ISequencedDocumentMessage } from "@fluidframework/protocol-definitions";
import {
	ITelemetryContext,
	ISummarizeResult,
	IGarbageCollectionData,
	IFluidDataStoreContext,
	ISummarizerNodeWithGC,
} from "@fluidframework/runtime-definitions";

export interface ILocalChannelContext {
	channel: IChannel;
	getChannel(): Promise<IChannel>;

	setConnectionState(connected: boolean, clientId?: string);

	processOp(message: ISequencedDocumentMessage, local: boolean, localOpMetadata?: unknown): void;

	summarize(
		fullTree?: boolean,
		trackState?: boolean,
		telemetryContext?: ITelemetryContext,
	): Promise<ISummarizeResult>;

	reSubmit(content: any, localOpMetadata: unknown): void;

	applyStashedOp(content: any): unknown;

	rollback(message: any, localOpMetadata: unknown): void;

	/**
	 * Returns the data used for garbage collection. This includes a list of GC nodes that represent this context
	 * including any of its children. Each node has a set of outbound routes to other GC nodes in the document.
	 * @param fullGC - true to bypass optimizations and force full generation of GC data.
	 */
	getGCData(fullGC?: boolean): Promise<IGarbageCollectionData>;

	/**
	 * After GC has run, called to notify this context of routes that are used in it. These are used for the following:
	 * 1. To identify if this context is being referenced in the document or not.
	 * 2. To identify if this context or any of its children's used routes changed since last summary.
	 * 3. They are added to the summary generated by this context.
	 */
	updateUsedRoutes(usedRoutes: string[]): void;

	makeVisible(): void;
}

export interface IModifiableFluidDataStoreContext extends IFluidDataStoreContext {
	summarizerNode: ISummarizerNodeWithGC;
}
