/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-validator in @fluidframework/build-tools.
 */
import * as old from "@fluidframework/datastore-definitions-0.55.0";
import * as current from "../../index";

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.55.0:
* "InterfaceDeclaration_IChannel": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IChannel():
    old.IChannel;
declare function use_current_InterfaceDeclaration_IChannel(
    use: current.IChannel);
use_current_InterfaceDeclaration_IChannel(
    // @ts-expect-error compatibility expected to be broken
    get_old_InterfaceDeclaration_IChannel());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.55.0:
* "InterfaceDeclaration_IChannel": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IChannel():
    current.IChannel;
declare function use_old_InterfaceDeclaration_IChannel(
    use: old.IChannel);
use_old_InterfaceDeclaration_IChannel(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IChannel());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.55.0:
* "InterfaceDeclaration_IChannelAttributes": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IChannelAttributes():
    old.IChannelAttributes;
declare function use_current_InterfaceDeclaration_IChannelAttributes(
    use: current.IChannelAttributes);
use_current_InterfaceDeclaration_IChannelAttributes(
    get_old_InterfaceDeclaration_IChannelAttributes());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.55.0:
* "InterfaceDeclaration_IChannelAttributes": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IChannelAttributes():
    current.IChannelAttributes;
declare function use_old_InterfaceDeclaration_IChannelAttributes(
    use: old.IChannelAttributes);
use_old_InterfaceDeclaration_IChannelAttributes(
    get_current_InterfaceDeclaration_IChannelAttributes());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.55.0:
* "InterfaceDeclaration_IChannelFactory": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IChannelFactory():
    old.IChannelFactory;
declare function use_current_InterfaceDeclaration_IChannelFactory(
    use: current.IChannelFactory);
use_current_InterfaceDeclaration_IChannelFactory(
    // @ts-expect-error compatibility expected to be broken
    get_old_InterfaceDeclaration_IChannelFactory());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.55.0:
* "InterfaceDeclaration_IChannelFactory": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IChannelFactory():
    current.IChannelFactory;
declare function use_old_InterfaceDeclaration_IChannelFactory(
    use: old.IChannelFactory);
use_old_InterfaceDeclaration_IChannelFactory(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IChannelFactory());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.55.0:
* "InterfaceDeclaration_IChannelServices": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IChannelServices():
    old.IChannelServices;
declare function use_current_InterfaceDeclaration_IChannelServices(
    use: current.IChannelServices);
use_current_InterfaceDeclaration_IChannelServices(
    // @ts-expect-error compatibility expected to be broken
    get_old_InterfaceDeclaration_IChannelServices());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.55.0:
* "InterfaceDeclaration_IChannelServices": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IChannelServices():
    current.IChannelServices;
declare function use_old_InterfaceDeclaration_IChannelServices(
    use: old.IChannelServices);
use_old_InterfaceDeclaration_IChannelServices(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IChannelServices());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.55.0:
* "InterfaceDeclaration_IChannelStorageService": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IChannelStorageService():
    old.IChannelStorageService;
declare function use_current_InterfaceDeclaration_IChannelStorageService(
    use: current.IChannelStorageService);
use_current_InterfaceDeclaration_IChannelStorageService(
    get_old_InterfaceDeclaration_IChannelStorageService());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.55.0:
* "InterfaceDeclaration_IChannelStorageService": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IChannelStorageService():
    current.IChannelStorageService;
declare function use_old_InterfaceDeclaration_IChannelStorageService(
    use: old.IChannelStorageService);
use_old_InterfaceDeclaration_IChannelStorageService(
    get_current_InterfaceDeclaration_IChannelStorageService());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.55.0:
* "InterfaceDeclaration_IDeltaConnection": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IDeltaConnection():
    old.IDeltaConnection;
declare function use_current_InterfaceDeclaration_IDeltaConnection(
    use: current.IDeltaConnection);
use_current_InterfaceDeclaration_IDeltaConnection(
    // @ts-expect-error compatibility expected to be broken
    get_old_InterfaceDeclaration_IDeltaConnection());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.55.0:
* "InterfaceDeclaration_IDeltaConnection": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IDeltaConnection():
    current.IDeltaConnection;
declare function use_old_InterfaceDeclaration_IDeltaConnection(
    use: old.IDeltaConnection);
use_old_InterfaceDeclaration_IDeltaConnection(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IDeltaConnection());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.55.0:
* "InterfaceDeclaration_IDeltaHandler": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IDeltaHandler():
    old.IDeltaHandler;
declare function use_current_InterfaceDeclaration_IDeltaHandler(
    use: current.IDeltaHandler);
use_current_InterfaceDeclaration_IDeltaHandler(
    get_old_InterfaceDeclaration_IDeltaHandler());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.55.0:
* "InterfaceDeclaration_IDeltaHandler": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IDeltaHandler():
    current.IDeltaHandler;
declare function use_old_InterfaceDeclaration_IDeltaHandler(
    use: old.IDeltaHandler);
use_old_InterfaceDeclaration_IDeltaHandler(
    get_current_InterfaceDeclaration_IDeltaHandler());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.55.0:
* "InterfaceDeclaration_IFluidDataStoreRuntime": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidDataStoreRuntime():
    old.IFluidDataStoreRuntime;
declare function use_current_InterfaceDeclaration_IFluidDataStoreRuntime(
    use: current.IFluidDataStoreRuntime);
use_current_InterfaceDeclaration_IFluidDataStoreRuntime(
    // @ts-expect-error compatibility expected to be broken
    get_old_InterfaceDeclaration_IFluidDataStoreRuntime());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.55.0:
* "InterfaceDeclaration_IFluidDataStoreRuntime": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidDataStoreRuntime():
    current.IFluidDataStoreRuntime;
declare function use_old_InterfaceDeclaration_IFluidDataStoreRuntime(
    use: old.IFluidDataStoreRuntime);
use_old_InterfaceDeclaration_IFluidDataStoreRuntime(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IFluidDataStoreRuntime());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.55.0:
* "InterfaceDeclaration_IFluidDataStoreRuntimeEvents": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidDataStoreRuntimeEvents():
    old.IFluidDataStoreRuntimeEvents;
declare function use_current_InterfaceDeclaration_IFluidDataStoreRuntimeEvents(
    use: current.IFluidDataStoreRuntimeEvents);
use_current_InterfaceDeclaration_IFluidDataStoreRuntimeEvents(
    get_old_InterfaceDeclaration_IFluidDataStoreRuntimeEvents());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.55.0:
* "InterfaceDeclaration_IFluidDataStoreRuntimeEvents": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidDataStoreRuntimeEvents():
    current.IFluidDataStoreRuntimeEvents;
declare function use_old_InterfaceDeclaration_IFluidDataStoreRuntimeEvents(
    use: old.IFluidDataStoreRuntimeEvents);
use_old_InterfaceDeclaration_IFluidDataStoreRuntimeEvents(
    get_current_InterfaceDeclaration_IFluidDataStoreRuntimeEvents());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.55.0:
* "TypeAliasDeclaration_Jsonable": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_Jsonable():
    old.Jsonable;
declare function use_current_TypeAliasDeclaration_Jsonable(
    use: current.Jsonable);
use_current_TypeAliasDeclaration_Jsonable(
    get_old_TypeAliasDeclaration_Jsonable());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.55.0:
* "TypeAliasDeclaration_Jsonable": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_Jsonable():
    current.Jsonable;
declare function use_old_TypeAliasDeclaration_Jsonable(
    use: old.Jsonable);
use_old_TypeAliasDeclaration_Jsonable(
    get_current_TypeAliasDeclaration_Jsonable());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.55.0:
* "TypeAliasDeclaration_Serializable": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_Serializable():
    old.Serializable;
declare function use_current_TypeAliasDeclaration_Serializable(
    use: current.Serializable);
use_current_TypeAliasDeclaration_Serializable(
    get_old_TypeAliasDeclaration_Serializable());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.55.0:
* "TypeAliasDeclaration_Serializable": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_Serializable():
    current.Serializable;
declare function use_old_TypeAliasDeclaration_Serializable(
    use: old.Serializable);
use_old_TypeAliasDeclaration_Serializable(
    get_current_TypeAliasDeclaration_Serializable());
