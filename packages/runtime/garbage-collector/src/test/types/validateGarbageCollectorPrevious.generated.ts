/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-validator in @fluidframework/build-tools.
 */
import * as old from "@fluidframework/garbage-collector-previous";
import * as current from "../../index";

type TypeOnly<T> = {
    [P in keyof T]: TypeOnly<T[P]>;
};

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_cloneGCData": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_cloneGCData():
    TypeOnly<typeof old.cloneGCData>;
declare function use_current_FunctionDeclaration_cloneGCData(
    use: TypeOnly<typeof current.cloneGCData>);
use_current_FunctionDeclaration_cloneGCData(
    get_old_FunctionDeclaration_cloneGCData());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_cloneGCData": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_cloneGCData():
    TypeOnly<typeof current.cloneGCData>;
declare function use_old_FunctionDeclaration_cloneGCData(
    use: TypeOnly<typeof old.cloneGCData>);
use_old_FunctionDeclaration_cloneGCData(
    get_current_FunctionDeclaration_cloneGCData());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_concatGarbageCollectionData": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_concatGarbageCollectionData():
    TypeOnly<typeof old.concatGarbageCollectionData>;
declare function use_current_FunctionDeclaration_concatGarbageCollectionData(
    use: TypeOnly<typeof current.concatGarbageCollectionData>);
use_current_FunctionDeclaration_concatGarbageCollectionData(
    get_old_FunctionDeclaration_concatGarbageCollectionData());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_concatGarbageCollectionData": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_concatGarbageCollectionData():
    TypeOnly<typeof current.concatGarbageCollectionData>;
declare function use_old_FunctionDeclaration_concatGarbageCollectionData(
    use: TypeOnly<typeof old.concatGarbageCollectionData>);
use_old_FunctionDeclaration_concatGarbageCollectionData(
    get_current_FunctionDeclaration_concatGarbageCollectionData());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_concatGarbageCollectionStates": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_concatGarbageCollectionStates():
    TypeOnly<typeof old.concatGarbageCollectionStates>;
declare function use_current_FunctionDeclaration_concatGarbageCollectionStates(
    use: TypeOnly<typeof current.concatGarbageCollectionStates>);
use_current_FunctionDeclaration_concatGarbageCollectionStates(
    get_old_FunctionDeclaration_concatGarbageCollectionStates());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_concatGarbageCollectionStates": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_concatGarbageCollectionStates():
    TypeOnly<typeof current.concatGarbageCollectionStates>;
declare function use_old_FunctionDeclaration_concatGarbageCollectionStates(
    use: TypeOnly<typeof old.concatGarbageCollectionStates>);
use_old_FunctionDeclaration_concatGarbageCollectionStates(
    get_current_FunctionDeclaration_concatGarbageCollectionStates());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_GCDataBuilder": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_GCDataBuilder():
    TypeOnly<old.GCDataBuilder>;
declare function use_current_ClassDeclaration_GCDataBuilder(
    use: TypeOnly<current.GCDataBuilder>);
use_current_ClassDeclaration_GCDataBuilder(
    get_old_ClassDeclaration_GCDataBuilder());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_GCDataBuilder": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_GCDataBuilder():
    TypeOnly<current.GCDataBuilder>;
declare function use_old_ClassDeclaration_GCDataBuilder(
    use: TypeOnly<old.GCDataBuilder>);
use_old_ClassDeclaration_GCDataBuilder(
    get_current_ClassDeclaration_GCDataBuilder());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IGCResult": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IGCResult():
    TypeOnly<old.IGCResult>;
declare function use_current_InterfaceDeclaration_IGCResult(
    use: TypeOnly<current.IGCResult>);
use_current_InterfaceDeclaration_IGCResult(
    get_old_InterfaceDeclaration_IGCResult());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IGCResult": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IGCResult():
    TypeOnly<current.IGCResult>;
declare function use_old_InterfaceDeclaration_IGCResult(
    use: TypeOnly<old.IGCResult>);
use_old_InterfaceDeclaration_IGCResult(
    get_current_InterfaceDeclaration_IGCResult());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_removeRouteFromAllNodes": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_removeRouteFromAllNodes():
    TypeOnly<typeof old.removeRouteFromAllNodes>;
declare function use_current_FunctionDeclaration_removeRouteFromAllNodes(
    use: TypeOnly<typeof current.removeRouteFromAllNodes>);
use_current_FunctionDeclaration_removeRouteFromAllNodes(
    get_old_FunctionDeclaration_removeRouteFromAllNodes());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_removeRouteFromAllNodes": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_removeRouteFromAllNodes():
    TypeOnly<typeof current.removeRouteFromAllNodes>;
declare function use_old_FunctionDeclaration_removeRouteFromAllNodes(
    use: TypeOnly<typeof old.removeRouteFromAllNodes>);
use_old_FunctionDeclaration_removeRouteFromAllNodes(
    get_current_FunctionDeclaration_removeRouteFromAllNodes());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_runGarbageCollection": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_runGarbageCollection():
    TypeOnly<typeof old.runGarbageCollection>;
declare function use_current_FunctionDeclaration_runGarbageCollection(
    use: TypeOnly<typeof current.runGarbageCollection>);
use_current_FunctionDeclaration_runGarbageCollection(
    get_old_FunctionDeclaration_runGarbageCollection());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_runGarbageCollection": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_runGarbageCollection():
    TypeOnly<typeof current.runGarbageCollection>;
declare function use_old_FunctionDeclaration_runGarbageCollection(
    use: TypeOnly<typeof old.runGarbageCollection>);
use_old_FunctionDeclaration_runGarbageCollection(
    get_current_FunctionDeclaration_runGarbageCollection());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_trimLeadingAndTrailingSlashes": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_trimLeadingAndTrailingSlashes():
    TypeOnly<typeof old.trimLeadingAndTrailingSlashes>;
declare function use_current_FunctionDeclaration_trimLeadingAndTrailingSlashes(
    use: TypeOnly<typeof current.trimLeadingAndTrailingSlashes>);
use_current_FunctionDeclaration_trimLeadingAndTrailingSlashes(
    get_old_FunctionDeclaration_trimLeadingAndTrailingSlashes());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_trimLeadingAndTrailingSlashes": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_trimLeadingAndTrailingSlashes():
    TypeOnly<typeof current.trimLeadingAndTrailingSlashes>;
declare function use_old_FunctionDeclaration_trimLeadingAndTrailingSlashes(
    use: TypeOnly<typeof old.trimLeadingAndTrailingSlashes>);
use_old_FunctionDeclaration_trimLeadingAndTrailingSlashes(
    get_current_FunctionDeclaration_trimLeadingAndTrailingSlashes());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_trimLeadingSlashes": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_trimLeadingSlashes():
    TypeOnly<typeof old.trimLeadingSlashes>;
declare function use_current_FunctionDeclaration_trimLeadingSlashes(
    use: TypeOnly<typeof current.trimLeadingSlashes>);
use_current_FunctionDeclaration_trimLeadingSlashes(
    get_old_FunctionDeclaration_trimLeadingSlashes());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_trimLeadingSlashes": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_trimLeadingSlashes():
    TypeOnly<typeof current.trimLeadingSlashes>;
declare function use_old_FunctionDeclaration_trimLeadingSlashes(
    use: TypeOnly<typeof old.trimLeadingSlashes>);
use_old_FunctionDeclaration_trimLeadingSlashes(
    get_current_FunctionDeclaration_trimLeadingSlashes());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_trimTrailingSlashes": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_trimTrailingSlashes():
    TypeOnly<typeof old.trimTrailingSlashes>;
declare function use_current_FunctionDeclaration_trimTrailingSlashes(
    use: TypeOnly<typeof current.trimTrailingSlashes>);
use_current_FunctionDeclaration_trimTrailingSlashes(
    get_old_FunctionDeclaration_trimTrailingSlashes());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_trimTrailingSlashes": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_trimTrailingSlashes():
    TypeOnly<typeof current.trimTrailingSlashes>;
declare function use_old_FunctionDeclaration_trimTrailingSlashes(
    use: TypeOnly<typeof old.trimTrailingSlashes>);
use_old_FunctionDeclaration_trimTrailingSlashes(
    get_current_FunctionDeclaration_trimTrailingSlashes());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_unpackChildNodesGCDetails": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_unpackChildNodesGCDetails():
    TypeOnly<typeof old.unpackChildNodesGCDetails>;
declare function use_current_FunctionDeclaration_unpackChildNodesGCDetails(
    use: TypeOnly<typeof current.unpackChildNodesGCDetails>);
use_current_FunctionDeclaration_unpackChildNodesGCDetails(
    get_old_FunctionDeclaration_unpackChildNodesGCDetails());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_unpackChildNodesGCDetails": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_unpackChildNodesGCDetails():
    TypeOnly<typeof current.unpackChildNodesGCDetails>;
declare function use_old_FunctionDeclaration_unpackChildNodesGCDetails(
    use: TypeOnly<typeof old.unpackChildNodesGCDetails>);
use_old_FunctionDeclaration_unpackChildNodesGCDetails(
    get_current_FunctionDeclaration_unpackChildNodesGCDetails());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_unpackChildNodesUsedRoutes": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_unpackChildNodesUsedRoutes():
    TypeOnly<typeof old.unpackChildNodesUsedRoutes>;
declare function use_current_FunctionDeclaration_unpackChildNodesUsedRoutes(
    use: TypeOnly<typeof current.unpackChildNodesUsedRoutes>);
use_current_FunctionDeclaration_unpackChildNodesUsedRoutes(
    get_old_FunctionDeclaration_unpackChildNodesUsedRoutes());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_unpackChildNodesUsedRoutes": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_unpackChildNodesUsedRoutes():
    TypeOnly<typeof current.unpackChildNodesUsedRoutes>;
declare function use_old_FunctionDeclaration_unpackChildNodesUsedRoutes(
    use: TypeOnly<typeof old.unpackChildNodesUsedRoutes>);
use_old_FunctionDeclaration_unpackChildNodesUsedRoutes(
    get_current_FunctionDeclaration_unpackChildNodesUsedRoutes());
