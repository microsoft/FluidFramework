/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType, requireAssignableTo } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/garbage-collector-previous";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current | requireAssignableTo<true, true>;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_GCDataBuilder": {"forwardCompat": false}
 */
declare type old_as_current_for_Class_GCDataBuilder = requireAssignableTo<TypeOnly<old.GCDataBuilder>, TypeOnly<current.GCDataBuilder>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_GCDataBuilder": {"backCompat": false}
 */
declare type current_as_old_for_Class_GCDataBuilder = requireAssignableTo<TypeOnly<current.GCDataBuilder>, TypeOnly<old.GCDataBuilder>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_GCDataBuilder": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_GCDataBuilder = requireAssignableTo<TypeOnly<typeof current.GCDataBuilder>, TypeOnly<typeof old.GCDataBuilder>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Function_cloneGCData": {"backCompat": false}
 */
declare type current_as_old_for_Function_cloneGCData = requireAssignableTo<TypeOnly<typeof current.cloneGCData>, TypeOnly<typeof old.cloneGCData>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Function_concatGarbageCollectionData": {"backCompat": false}
 */
declare type current_as_old_for_Function_concatGarbageCollectionData = requireAssignableTo<TypeOnly<typeof current.concatGarbageCollectionData>, TypeOnly<typeof old.concatGarbageCollectionData>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Function_concatGarbageCollectionStates": {"backCompat": false}
 */
declare type current_as_old_for_Function_concatGarbageCollectionStates = requireAssignableTo<TypeOnly<typeof current.concatGarbageCollectionStates>, TypeOnly<typeof old.concatGarbageCollectionStates>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Function_removeRouteFromAllNodes": {"backCompat": false}
 */
declare type current_as_old_for_Function_removeRouteFromAllNodes = requireAssignableTo<TypeOnly<typeof current.removeRouteFromAllNodes>, TypeOnly<typeof old.removeRouteFromAllNodes>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Function_runGarbageCollection": {"backCompat": false}
 */
declare type current_as_old_for_Function_runGarbageCollection = requireAssignableTo<TypeOnly<typeof current.runGarbageCollection>, TypeOnly<typeof old.runGarbageCollection>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Function_trimLeadingAndTrailingSlashes": {"backCompat": false}
 */
declare type current_as_old_for_Function_trimLeadingAndTrailingSlashes = requireAssignableTo<TypeOnly<typeof current.trimLeadingAndTrailingSlashes>, TypeOnly<typeof old.trimLeadingAndTrailingSlashes>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Function_trimLeadingSlashes": {"backCompat": false}
 */
declare type current_as_old_for_Function_trimLeadingSlashes = requireAssignableTo<TypeOnly<typeof current.trimLeadingSlashes>, TypeOnly<typeof old.trimLeadingSlashes>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Function_trimTrailingSlashes": {"backCompat": false}
 */
declare type current_as_old_for_Function_trimTrailingSlashes = requireAssignableTo<TypeOnly<typeof current.trimTrailingSlashes>, TypeOnly<typeof old.trimTrailingSlashes>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Function_unpackChildNodesGCDetails": {"backCompat": false}
 */
declare type current_as_old_for_Function_unpackChildNodesGCDetails = requireAssignableTo<TypeOnly<typeof current.unpackChildNodesGCDetails>, TypeOnly<typeof old.unpackChildNodesGCDetails>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Function_unpackChildNodesUsedRoutes": {"backCompat": false}
 */
declare type current_as_old_for_Function_unpackChildNodesUsedRoutes = requireAssignableTo<TypeOnly<typeof current.unpackChildNodesUsedRoutes>, TypeOnly<typeof old.unpackChildNodesUsedRoutes>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IGCResult": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IGCResult = requireAssignableTo<TypeOnly<old.IGCResult>, TypeOnly<current.IGCResult>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IGCResult": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IGCResult = requireAssignableTo<TypeOnly<current.IGCResult>, TypeOnly<old.IGCResult>>
