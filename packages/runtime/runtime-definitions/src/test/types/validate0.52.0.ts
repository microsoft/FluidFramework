/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-validator in @fluidframework/build-tools.
 */
import * as old from "@fluidframework/runtime-definitions-0.52.0";
import * as current from "../../index";

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "VariableDeclaration_channelsTreeName": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_channelsTreeName():
    typeof old.channelsTreeName;
declare function use_current_VariableDeclaration_channelsTreeName(
    use: typeof current.channelsTreeName);
use_current_VariableDeclaration_channelsTreeName(
    get_old_VariableDeclaration_channelsTreeName());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "VariableDeclaration_channelsTreeName": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_channelsTreeName():
    typeof current.channelsTreeName;
declare function use_old_VariableDeclaration_channelsTreeName(
    use: typeof old.channelsTreeName);
use_old_VariableDeclaration_channelsTreeName(
    get_current_VariableDeclaration_channelsTreeName());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "TypeAliasDeclaration_CreateChildSummarizerNodeFn": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_CreateChildSummarizerNodeFn():
    old.CreateChildSummarizerNodeFn;
declare function use_current_TypeAliasDeclaration_CreateChildSummarizerNodeFn(
    use: current.CreateChildSummarizerNodeFn);
use_current_TypeAliasDeclaration_CreateChildSummarizerNodeFn(
    get_old_TypeAliasDeclaration_CreateChildSummarizerNodeFn());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "TypeAliasDeclaration_CreateChildSummarizerNodeFn": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_CreateChildSummarizerNodeFn():
    current.CreateChildSummarizerNodeFn;
declare function use_old_TypeAliasDeclaration_CreateChildSummarizerNodeFn(
    use: old.CreateChildSummarizerNodeFn);
use_old_TypeAliasDeclaration_CreateChildSummarizerNodeFn(
    get_current_TypeAliasDeclaration_CreateChildSummarizerNodeFn());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "TypeAliasDeclaration_CreateChildSummarizerNodeParam": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_CreateChildSummarizerNodeParam():
    old.CreateChildSummarizerNodeParam;
declare function use_current_TypeAliasDeclaration_CreateChildSummarizerNodeParam(
    use: current.CreateChildSummarizerNodeParam);
use_current_TypeAliasDeclaration_CreateChildSummarizerNodeParam(
    get_old_TypeAliasDeclaration_CreateChildSummarizerNodeParam());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "TypeAliasDeclaration_CreateChildSummarizerNodeParam": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_CreateChildSummarizerNodeParam():
    current.CreateChildSummarizerNodeParam;
declare function use_old_TypeAliasDeclaration_CreateChildSummarizerNodeParam(
    use: old.CreateChildSummarizerNodeParam);
use_old_TypeAliasDeclaration_CreateChildSummarizerNodeParam(
    get_current_TypeAliasDeclaration_CreateChildSummarizerNodeParam());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "EnumDeclaration_CreateSummarizerNodeSource": {"forwardCompat": false}
*/
declare function get_old_EnumDeclaration_CreateSummarizerNodeSource():
    old.CreateSummarizerNodeSource;
declare function use_current_EnumDeclaration_CreateSummarizerNodeSource(
    use: current.CreateSummarizerNodeSource);
use_current_EnumDeclaration_CreateSummarizerNodeSource(
    get_old_EnumDeclaration_CreateSummarizerNodeSource());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "EnumDeclaration_CreateSummarizerNodeSource": {"backCompat": false}
*/
declare function get_current_EnumDeclaration_CreateSummarizerNodeSource():
    current.CreateSummarizerNodeSource;
declare function use_old_EnumDeclaration_CreateSummarizerNodeSource(
    use: old.CreateSummarizerNodeSource);
use_old_EnumDeclaration_CreateSummarizerNodeSource(
    get_current_EnumDeclaration_CreateSummarizerNodeSource());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "TypeAliasDeclaration_FluidDataStoreRegistryEntry": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_FluidDataStoreRegistryEntry():
    old.FluidDataStoreRegistryEntry;
declare function use_current_TypeAliasDeclaration_FluidDataStoreRegistryEntry(
    use: current.FluidDataStoreRegistryEntry);
use_current_TypeAliasDeclaration_FluidDataStoreRegistryEntry(
    // @ts-expect-error compatibility expected to be broken
    get_old_TypeAliasDeclaration_FluidDataStoreRegistryEntry());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "TypeAliasDeclaration_FluidDataStoreRegistryEntry": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_FluidDataStoreRegistryEntry():
    current.FluidDataStoreRegistryEntry;
declare function use_old_TypeAliasDeclaration_FluidDataStoreRegistryEntry(
    use: old.FluidDataStoreRegistryEntry);
use_old_TypeAliasDeclaration_FluidDataStoreRegistryEntry(
    // @ts-expect-error compatibility expected to be broken
    get_current_TypeAliasDeclaration_FluidDataStoreRegistryEntry());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "EnumDeclaration_FlushMode": {"forwardCompat": false}
*/
declare function get_old_EnumDeclaration_FlushMode():
    old.FlushMode;
declare function use_current_EnumDeclaration_FlushMode(
    use: current.FlushMode);
use_current_EnumDeclaration_FlushMode(
    get_old_EnumDeclaration_FlushMode());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "EnumDeclaration_FlushMode": {"backCompat": false}
*/
declare function get_current_EnumDeclaration_FlushMode():
    current.FlushMode;
declare function use_old_EnumDeclaration_FlushMode(
    use: old.FlushMode);
use_old_EnumDeclaration_FlushMode(
    get_current_EnumDeclaration_FlushMode());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "VariableDeclaration_gcBlobKey": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_gcBlobKey():
    typeof old.gcBlobKey;
declare function use_current_VariableDeclaration_gcBlobKey(
    use: typeof current.gcBlobKey);
use_current_VariableDeclaration_gcBlobKey(
    get_old_VariableDeclaration_gcBlobKey());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "VariableDeclaration_gcBlobKey": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_gcBlobKey():
    typeof current.gcBlobKey;
declare function use_old_VariableDeclaration_gcBlobKey(
    use: typeof old.gcBlobKey);
use_old_VariableDeclaration_gcBlobKey(
    get_current_VariableDeclaration_gcBlobKey());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IAttachMessage": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IAttachMessage():
    old.IAttachMessage;
declare function use_current_InterfaceDeclaration_IAttachMessage(
    use: current.IAttachMessage);
use_current_InterfaceDeclaration_IAttachMessage(
    get_old_InterfaceDeclaration_IAttachMessage());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IAttachMessage": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IAttachMessage():
    current.IAttachMessage;
declare function use_old_InterfaceDeclaration_IAttachMessage(
    use: old.IAttachMessage);
use_old_InterfaceDeclaration_IAttachMessage(
    get_current_InterfaceDeclaration_IAttachMessage());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IContainerRuntimeBase": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IContainerRuntimeBase():
    old.IContainerRuntimeBase;
declare function use_current_InterfaceDeclaration_IContainerRuntimeBase(
    use: current.IContainerRuntimeBase);
use_current_InterfaceDeclaration_IContainerRuntimeBase(
    // @ts-expect-error compatibility expected to be broken
    get_old_InterfaceDeclaration_IContainerRuntimeBase());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IContainerRuntimeBase": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IContainerRuntimeBase():
    current.IContainerRuntimeBase;
declare function use_old_InterfaceDeclaration_IContainerRuntimeBase(
    use: old.IContainerRuntimeBase);
use_old_InterfaceDeclaration_IContainerRuntimeBase(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IContainerRuntimeBase());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IContainerRuntimeBaseEvents": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IContainerRuntimeBaseEvents():
    old.IContainerRuntimeBaseEvents;
declare function use_current_InterfaceDeclaration_IContainerRuntimeBaseEvents(
    use: current.IContainerRuntimeBaseEvents);
use_current_InterfaceDeclaration_IContainerRuntimeBaseEvents(
    get_old_InterfaceDeclaration_IContainerRuntimeBaseEvents());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IContainerRuntimeBaseEvents": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IContainerRuntimeBaseEvents():
    current.IContainerRuntimeBaseEvents;
declare function use_old_InterfaceDeclaration_IContainerRuntimeBaseEvents(
    use: old.IContainerRuntimeBaseEvents);
use_old_InterfaceDeclaration_IContainerRuntimeBaseEvents(
    get_current_InterfaceDeclaration_IContainerRuntimeBaseEvents());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IEnvelope": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IEnvelope():
    old.IEnvelope;
declare function use_current_InterfaceDeclaration_IEnvelope(
    use: current.IEnvelope);
use_current_InterfaceDeclaration_IEnvelope(
    get_old_InterfaceDeclaration_IEnvelope());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IEnvelope": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IEnvelope():
    current.IEnvelope;
declare function use_old_InterfaceDeclaration_IEnvelope(
    use: old.IEnvelope);
use_old_InterfaceDeclaration_IEnvelope(
    get_current_InterfaceDeclaration_IEnvelope());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IFluidDataStoreChannel": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidDataStoreChannel():
    old.IFluidDataStoreChannel;
declare function use_current_InterfaceDeclaration_IFluidDataStoreChannel(
    use: current.IFluidDataStoreChannel);
use_current_InterfaceDeclaration_IFluidDataStoreChannel(
    get_old_InterfaceDeclaration_IFluidDataStoreChannel());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IFluidDataStoreChannel": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidDataStoreChannel():
    current.IFluidDataStoreChannel;
declare function use_old_InterfaceDeclaration_IFluidDataStoreChannel(
    use: old.IFluidDataStoreChannel);
use_old_InterfaceDeclaration_IFluidDataStoreChannel(
    get_current_InterfaceDeclaration_IFluidDataStoreChannel());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IFluidDataStoreContext": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidDataStoreContext():
    old.IFluidDataStoreContext;
declare function use_current_InterfaceDeclaration_IFluidDataStoreContext(
    use: current.IFluidDataStoreContext);
use_current_InterfaceDeclaration_IFluidDataStoreContext(
    // @ts-expect-error compatibility expected to be broken
    get_old_InterfaceDeclaration_IFluidDataStoreContext());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IFluidDataStoreContext": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidDataStoreContext():
    current.IFluidDataStoreContext;
declare function use_old_InterfaceDeclaration_IFluidDataStoreContext(
    use: old.IFluidDataStoreContext);
use_old_InterfaceDeclaration_IFluidDataStoreContext(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IFluidDataStoreContext());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IFluidDataStoreContextDetached": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidDataStoreContextDetached():
    old.IFluidDataStoreContextDetached;
declare function use_current_InterfaceDeclaration_IFluidDataStoreContextDetached(
    use: current.IFluidDataStoreContextDetached);
use_current_InterfaceDeclaration_IFluidDataStoreContextDetached(
    // @ts-expect-error compatibility expected to be broken
    get_old_InterfaceDeclaration_IFluidDataStoreContextDetached());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IFluidDataStoreContextDetached": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidDataStoreContextDetached():
    current.IFluidDataStoreContextDetached;
declare function use_old_InterfaceDeclaration_IFluidDataStoreContextDetached(
    use: old.IFluidDataStoreContextDetached);
use_old_InterfaceDeclaration_IFluidDataStoreContextDetached(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IFluidDataStoreContextDetached());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IFluidDataStoreContextEvents": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidDataStoreContextEvents():
    old.IFluidDataStoreContextEvents;
declare function use_current_InterfaceDeclaration_IFluidDataStoreContextEvents(
    use: current.IFluidDataStoreContextEvents);
use_current_InterfaceDeclaration_IFluidDataStoreContextEvents(
    get_old_InterfaceDeclaration_IFluidDataStoreContextEvents());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IFluidDataStoreContextEvents": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidDataStoreContextEvents():
    current.IFluidDataStoreContextEvents;
declare function use_old_InterfaceDeclaration_IFluidDataStoreContextEvents(
    use: old.IFluidDataStoreContextEvents);
use_old_InterfaceDeclaration_IFluidDataStoreContextEvents(
    get_current_InterfaceDeclaration_IFluidDataStoreContextEvents());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "VariableDeclaration_IFluidDataStoreFactory": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_IFluidDataStoreFactory():
    typeof old.IFluidDataStoreFactory;
declare function use_current_VariableDeclaration_IFluidDataStoreFactory(
    use: typeof current.IFluidDataStoreFactory);
use_current_VariableDeclaration_IFluidDataStoreFactory(
    get_old_VariableDeclaration_IFluidDataStoreFactory());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "VariableDeclaration_IFluidDataStoreFactory": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_IFluidDataStoreFactory():
    typeof current.IFluidDataStoreFactory;
declare function use_old_VariableDeclaration_IFluidDataStoreFactory(
    use: typeof old.IFluidDataStoreFactory);
use_old_VariableDeclaration_IFluidDataStoreFactory(
    get_current_VariableDeclaration_IFluidDataStoreFactory());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IFluidDataStoreFactory": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidDataStoreFactory():
    old.IFluidDataStoreFactory;
declare function use_current_InterfaceDeclaration_IFluidDataStoreFactory(
    use: current.IFluidDataStoreFactory);
use_current_InterfaceDeclaration_IFluidDataStoreFactory(
    // @ts-expect-error compatibility expected to be broken
    get_old_InterfaceDeclaration_IFluidDataStoreFactory());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IFluidDataStoreFactory": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidDataStoreFactory():
    current.IFluidDataStoreFactory;
declare function use_old_InterfaceDeclaration_IFluidDataStoreFactory(
    use: old.IFluidDataStoreFactory);
use_old_InterfaceDeclaration_IFluidDataStoreFactory(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IFluidDataStoreFactory());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "VariableDeclaration_IFluidDataStoreRegistry": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_IFluidDataStoreRegistry():
    typeof old.IFluidDataStoreRegistry;
declare function use_current_VariableDeclaration_IFluidDataStoreRegistry(
    use: typeof current.IFluidDataStoreRegistry);
use_current_VariableDeclaration_IFluidDataStoreRegistry(
    get_old_VariableDeclaration_IFluidDataStoreRegistry());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "VariableDeclaration_IFluidDataStoreRegistry": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_IFluidDataStoreRegistry():
    typeof current.IFluidDataStoreRegistry;
declare function use_old_VariableDeclaration_IFluidDataStoreRegistry(
    use: typeof old.IFluidDataStoreRegistry);
use_old_VariableDeclaration_IFluidDataStoreRegistry(
    get_current_VariableDeclaration_IFluidDataStoreRegistry());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IFluidDataStoreRegistry": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidDataStoreRegistry():
    old.IFluidDataStoreRegistry;
declare function use_current_InterfaceDeclaration_IFluidDataStoreRegistry(
    use: current.IFluidDataStoreRegistry);
use_current_InterfaceDeclaration_IFluidDataStoreRegistry(
    // @ts-expect-error compatibility expected to be broken
    get_old_InterfaceDeclaration_IFluidDataStoreRegistry());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IFluidDataStoreRegistry": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidDataStoreRegistry():
    current.IFluidDataStoreRegistry;
declare function use_old_InterfaceDeclaration_IFluidDataStoreRegistry(
    use: old.IFluidDataStoreRegistry);
use_old_InterfaceDeclaration_IFluidDataStoreRegistry(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IFluidDataStoreRegistry());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IGarbageCollectionData": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IGarbageCollectionData():
    old.IGarbageCollectionData;
declare function use_current_InterfaceDeclaration_IGarbageCollectionData(
    use: current.IGarbageCollectionData);
use_current_InterfaceDeclaration_IGarbageCollectionData(
    get_old_InterfaceDeclaration_IGarbageCollectionData());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IGarbageCollectionData": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IGarbageCollectionData():
    current.IGarbageCollectionData;
declare function use_old_InterfaceDeclaration_IGarbageCollectionData(
    use: old.IGarbageCollectionData);
use_old_InterfaceDeclaration_IGarbageCollectionData(
    get_current_InterfaceDeclaration_IGarbageCollectionData());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "RemovedInterfaceDeclaration_IGarbageCollectionSummaryDetails": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IGarbageCollectionSummaryDetails():
    old.IGarbageCollectionSummaryDetails;
declare function use_current_RemovedInterfaceDeclaration_IGarbageCollectionSummaryDetails(
    use: current.IGarbageCollectionSummaryDetails);
use_current_RemovedInterfaceDeclaration_IGarbageCollectionSummaryDetails(
    get_old_InterfaceDeclaration_IGarbageCollectionSummaryDetails());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "RemovedInterfaceDeclaration_IGarbageCollectionSummaryDetails": {"backCompat": false}
*/
declare function get_current_RemovedInterfaceDeclaration_IGarbageCollectionSummaryDetails():
    current.IGarbageCollectionSummaryDetails;
declare function use_old_InterfaceDeclaration_IGarbageCollectionSummaryDetails(
    use: old.IGarbageCollectionSummaryDetails);
use_old_InterfaceDeclaration_IGarbageCollectionSummaryDetails(
    get_current_RemovedInterfaceDeclaration_IGarbageCollectionSummaryDetails());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IInboundSignalMessage": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IInboundSignalMessage():
    old.IInboundSignalMessage;
declare function use_current_InterfaceDeclaration_IInboundSignalMessage(
    use: current.IInboundSignalMessage);
use_current_InterfaceDeclaration_IInboundSignalMessage(
    get_old_InterfaceDeclaration_IInboundSignalMessage());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IInboundSignalMessage": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IInboundSignalMessage():
    current.IInboundSignalMessage;
declare function use_old_InterfaceDeclaration_IInboundSignalMessage(
    use: old.IInboundSignalMessage);
use_old_InterfaceDeclaration_IInboundSignalMessage(
    get_current_InterfaceDeclaration_IInboundSignalMessage());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "TypeAliasDeclaration_InboundAttachMessage": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_InboundAttachMessage():
    old.InboundAttachMessage;
declare function use_current_TypeAliasDeclaration_InboundAttachMessage(
    use: current.InboundAttachMessage);
use_current_TypeAliasDeclaration_InboundAttachMessage(
    get_old_TypeAliasDeclaration_InboundAttachMessage());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "TypeAliasDeclaration_InboundAttachMessage": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_InboundAttachMessage():
    current.InboundAttachMessage;
declare function use_old_TypeAliasDeclaration_InboundAttachMessage(
    use: old.InboundAttachMessage);
use_old_TypeAliasDeclaration_InboundAttachMessage(
    get_current_TypeAliasDeclaration_InboundAttachMessage());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IProvideFluidDataStoreFactory": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IProvideFluidDataStoreFactory():
    old.IProvideFluidDataStoreFactory;
declare function use_current_InterfaceDeclaration_IProvideFluidDataStoreFactory(
    use: current.IProvideFluidDataStoreFactory);
use_current_InterfaceDeclaration_IProvideFluidDataStoreFactory(
    // @ts-expect-error compatibility expected to be broken
    get_old_InterfaceDeclaration_IProvideFluidDataStoreFactory());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IProvideFluidDataStoreFactory": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IProvideFluidDataStoreFactory():
    current.IProvideFluidDataStoreFactory;
declare function use_old_InterfaceDeclaration_IProvideFluidDataStoreFactory(
    use: old.IProvideFluidDataStoreFactory);
use_old_InterfaceDeclaration_IProvideFluidDataStoreFactory(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IProvideFluidDataStoreFactory());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IProvideFluidDataStoreRegistry": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IProvideFluidDataStoreRegistry():
    old.IProvideFluidDataStoreRegistry;
declare function use_current_InterfaceDeclaration_IProvideFluidDataStoreRegistry(
    use: current.IProvideFluidDataStoreRegistry);
use_current_InterfaceDeclaration_IProvideFluidDataStoreRegistry(
    // @ts-expect-error compatibility expected to be broken
    get_old_InterfaceDeclaration_IProvideFluidDataStoreRegistry());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_IProvideFluidDataStoreRegistry": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IProvideFluidDataStoreRegistry():
    current.IProvideFluidDataStoreRegistry;
declare function use_old_InterfaceDeclaration_IProvideFluidDataStoreRegistry(
    use: old.IProvideFluidDataStoreRegistry);
use_old_InterfaceDeclaration_IProvideFluidDataStoreRegistry(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IProvideFluidDataStoreRegistry());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_ISignalEnvelope": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISignalEnvelope():
    old.ISignalEnvelope;
declare function use_current_InterfaceDeclaration_ISignalEnvelope(
    use: current.ISignalEnvelope);
use_current_InterfaceDeclaration_ISignalEnvelope(
    get_old_InterfaceDeclaration_ISignalEnvelope());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_ISignalEnvelope": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISignalEnvelope():
    current.ISignalEnvelope;
declare function use_old_InterfaceDeclaration_ISignalEnvelope(
    use: old.ISignalEnvelope);
use_old_InterfaceDeclaration_ISignalEnvelope(
    get_current_InterfaceDeclaration_ISignalEnvelope());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_ISummarizeInternalResult": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISummarizeInternalResult():
    old.ISummarizeInternalResult;
declare function use_current_InterfaceDeclaration_ISummarizeInternalResult(
    use: current.ISummarizeInternalResult);
use_current_InterfaceDeclaration_ISummarizeInternalResult(
    get_old_InterfaceDeclaration_ISummarizeInternalResult());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_ISummarizeInternalResult": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISummarizeInternalResult():
    current.ISummarizeInternalResult;
declare function use_old_InterfaceDeclaration_ISummarizeInternalResult(
    use: old.ISummarizeInternalResult);
use_old_InterfaceDeclaration_ISummarizeInternalResult(
    get_current_InterfaceDeclaration_ISummarizeInternalResult());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_ISummarizeResult": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISummarizeResult():
    old.ISummarizeResult;
declare function use_current_InterfaceDeclaration_ISummarizeResult(
    use: current.ISummarizeResult);
use_current_InterfaceDeclaration_ISummarizeResult(
    get_old_InterfaceDeclaration_ISummarizeResult());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_ISummarizeResult": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISummarizeResult():
    current.ISummarizeResult;
declare function use_old_InterfaceDeclaration_ISummarizeResult(
    use: old.ISummarizeResult);
use_old_InterfaceDeclaration_ISummarizeResult(
    get_current_InterfaceDeclaration_ISummarizeResult());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_ISummarizerNode": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISummarizerNode():
    old.ISummarizerNode;
declare function use_current_InterfaceDeclaration_ISummarizerNode(
    use: current.ISummarizerNode);
use_current_InterfaceDeclaration_ISummarizerNode(
    get_old_InterfaceDeclaration_ISummarizerNode());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_ISummarizerNode": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISummarizerNode():
    current.ISummarizerNode;
declare function use_old_InterfaceDeclaration_ISummarizerNode(
    use: old.ISummarizerNode);
use_old_InterfaceDeclaration_ISummarizerNode(
    get_current_InterfaceDeclaration_ISummarizerNode());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_ISummarizerNodeConfig": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISummarizerNodeConfig():
    old.ISummarizerNodeConfig;
declare function use_current_InterfaceDeclaration_ISummarizerNodeConfig(
    use: current.ISummarizerNodeConfig);
use_current_InterfaceDeclaration_ISummarizerNodeConfig(
    get_old_InterfaceDeclaration_ISummarizerNodeConfig());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_ISummarizerNodeConfig": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISummarizerNodeConfig():
    current.ISummarizerNodeConfig;
declare function use_old_InterfaceDeclaration_ISummarizerNodeConfig(
    use: old.ISummarizerNodeConfig);
use_old_InterfaceDeclaration_ISummarizerNodeConfig(
    get_current_InterfaceDeclaration_ISummarizerNodeConfig());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_ISummarizerNodeConfigWithGC": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISummarizerNodeConfigWithGC():
    old.ISummarizerNodeConfigWithGC;
declare function use_current_InterfaceDeclaration_ISummarizerNodeConfigWithGC(
    use: current.ISummarizerNodeConfigWithGC);
use_current_InterfaceDeclaration_ISummarizerNodeConfigWithGC(
    get_old_InterfaceDeclaration_ISummarizerNodeConfigWithGC());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_ISummarizerNodeConfigWithGC": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISummarizerNodeConfigWithGC():
    current.ISummarizerNodeConfigWithGC;
declare function use_old_InterfaceDeclaration_ISummarizerNodeConfigWithGC(
    use: old.ISummarizerNodeConfigWithGC);
use_old_InterfaceDeclaration_ISummarizerNodeConfigWithGC(
    get_current_InterfaceDeclaration_ISummarizerNodeConfigWithGC());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_ISummarizerNodeWithGC": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISummarizerNodeWithGC():
    old.ISummarizerNodeWithGC;
declare function use_current_InterfaceDeclaration_ISummarizerNodeWithGC(
    use: current.ISummarizerNodeWithGC);
use_current_InterfaceDeclaration_ISummarizerNodeWithGC(
    get_old_InterfaceDeclaration_ISummarizerNodeWithGC());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_ISummarizerNodeWithGC": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISummarizerNodeWithGC():
    current.ISummarizerNodeWithGC;
declare function use_old_InterfaceDeclaration_ISummarizerNodeWithGC(
    use: old.ISummarizerNodeWithGC);
use_old_InterfaceDeclaration_ISummarizerNodeWithGC(
    get_current_InterfaceDeclaration_ISummarizerNodeWithGC());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_ISummaryStats": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISummaryStats():
    old.ISummaryStats;
declare function use_current_InterfaceDeclaration_ISummaryStats(
    use: current.ISummaryStats);
use_current_InterfaceDeclaration_ISummaryStats(
    get_old_InterfaceDeclaration_ISummaryStats());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_ISummaryStats": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISummaryStats():
    current.ISummaryStats;
declare function use_old_InterfaceDeclaration_ISummaryStats(
    use: old.ISummaryStats);
use_old_InterfaceDeclaration_ISummaryStats(
    get_current_InterfaceDeclaration_ISummaryStats());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_ISummaryTreeWithStats": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISummaryTreeWithStats():
    old.ISummaryTreeWithStats;
declare function use_current_InterfaceDeclaration_ISummaryTreeWithStats(
    use: current.ISummaryTreeWithStats);
use_current_InterfaceDeclaration_ISummaryTreeWithStats(
    get_old_InterfaceDeclaration_ISummaryTreeWithStats());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "InterfaceDeclaration_ISummaryTreeWithStats": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISummaryTreeWithStats():
    current.ISummaryTreeWithStats;
declare function use_old_InterfaceDeclaration_ISummaryTreeWithStats(
    use: old.ISummaryTreeWithStats);
use_old_InterfaceDeclaration_ISummaryTreeWithStats(
    get_current_InterfaceDeclaration_ISummaryTreeWithStats());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "TypeAliasDeclaration_NamedFluidDataStoreRegistryEntries": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_NamedFluidDataStoreRegistryEntries():
    old.NamedFluidDataStoreRegistryEntries;
declare function use_current_TypeAliasDeclaration_NamedFluidDataStoreRegistryEntries(
    use: current.NamedFluidDataStoreRegistryEntries);
use_current_TypeAliasDeclaration_NamedFluidDataStoreRegistryEntries(
    // @ts-expect-error compatibility expected to be broken
    get_old_TypeAliasDeclaration_NamedFluidDataStoreRegistryEntries());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "TypeAliasDeclaration_NamedFluidDataStoreRegistryEntries": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_NamedFluidDataStoreRegistryEntries():
    current.NamedFluidDataStoreRegistryEntries;
declare function use_old_TypeAliasDeclaration_NamedFluidDataStoreRegistryEntries(
    use: old.NamedFluidDataStoreRegistryEntries);
use_old_TypeAliasDeclaration_NamedFluidDataStoreRegistryEntries(
    // @ts-expect-error compatibility expected to be broken
    get_current_TypeAliasDeclaration_NamedFluidDataStoreRegistryEntries());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "TypeAliasDeclaration_NamedFluidDataStoreRegistryEntry": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_NamedFluidDataStoreRegistryEntry():
    old.NamedFluidDataStoreRegistryEntry;
declare function use_current_TypeAliasDeclaration_NamedFluidDataStoreRegistryEntry(
    use: current.NamedFluidDataStoreRegistryEntry);
use_current_TypeAliasDeclaration_NamedFluidDataStoreRegistryEntry(
    // @ts-expect-error compatibility expected to be broken
    get_old_TypeAliasDeclaration_NamedFluidDataStoreRegistryEntry());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "TypeAliasDeclaration_NamedFluidDataStoreRegistryEntry": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_NamedFluidDataStoreRegistryEntry():
    current.NamedFluidDataStoreRegistryEntry;
declare function use_old_TypeAliasDeclaration_NamedFluidDataStoreRegistryEntry(
    use: old.NamedFluidDataStoreRegistryEntry);
use_old_TypeAliasDeclaration_NamedFluidDataStoreRegistryEntry(
    // @ts-expect-error compatibility expected to be broken
    get_current_TypeAliasDeclaration_NamedFluidDataStoreRegistryEntry());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "TypeAliasDeclaration_SummarizeInternalFn": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_SummarizeInternalFn():
    old.SummarizeInternalFn;
declare function use_current_TypeAliasDeclaration_SummarizeInternalFn(
    use: current.SummarizeInternalFn);
use_current_TypeAliasDeclaration_SummarizeInternalFn(
    get_old_TypeAliasDeclaration_SummarizeInternalFn());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.52.0:
* "TypeAliasDeclaration_SummarizeInternalFn": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_SummarizeInternalFn():
    current.SummarizeInternalFn;
declare function use_old_TypeAliasDeclaration_SummarizeInternalFn(
    use: old.SummarizeInternalFn);
use_old_TypeAliasDeclaration_SummarizeInternalFn(
    get_current_TypeAliasDeclaration_SummarizeInternalFn());
