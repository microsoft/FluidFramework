{"version":3,"file":"summarizableObject.js","sourceRoot":"","sources":["../src/summarizableObject.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,EAAE,gBAAgB,EAAE,MAAM,+BAA+B,CAAC;AACjE,OAAO,EACH,QAAQ,EAGR,SAAS,GACZ,MAAM,uCAAuC,CAAC;AAO/C,OAAO,EAEH,YAAY,GACf,MAAM,qCAAqC,CAAC;AAE7C,OAAO,EAAE,yBAAyB,EAAE,MAAM,6BAA6B,CAAC;AAExE,MAAM,gBAAgB,GAAG,QAAQ,CAAC;AAUlC;;;GAGG;AACH,MAAM,OAAO,kBAAmB,SAAQ,YAAY;IA0BhD;;;;;;;OAOG;IACH,YAAY,EAAU,EAAE,OAA0B,EAAE,UAA8B;QAC9E,KAAK,CAAC,EAAE,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;QAdnC;;WAEG;QACc,SAAI,GAAG,IAAI,GAAG,EAAoB,CAAC;IAYpD,CAAC;IAnCD;;;;;;OAMG;IACI,MAAM,CAAC,MAAM,CAAC,OAA0B,EAAE,EAAW;QACxD,OAAO,OAAO,CAAC,aAAa,CAAC,EAAE,EAAE,yBAAyB,CAAC,IAAI,CAAuB,CAAC;IAC3F,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,UAAU;QACpB,OAAO,IAAI,yBAAyB,EAAE,CAAC;IAC3C,CAAC;IAmBD;;OAEG;IACI,GAAG,CAAC,GAAW;QAClB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC;IAED;;OAEG;IACI,GAAG,CAAC,GAAW,EAAE,KAAe;QACnC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAE1B,mEAAmE;QACnE,IAAI,CAAC,KAAK,EAAE,CAAC;IACjB,CAAC;IAED;;OAEG;IACI,QAAQ;QACX,MAAM,YAAY,GAAwC,EAAE,CAAC;QAC7D,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YAC7B,YAAY,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEH,mCAAmC;QACnC,MAAM,IAAI,GAAU;YAChB,OAAO,EAAE;gBACL;oBACI,IAAI,EAAE,QAAQ,CAAC,IAAI;oBACnB,IAAI,EAAE,gBAAgB;oBACtB,IAAI,EAAE,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC;oBAC/B,KAAK,EAAE;wBACH,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC;wBACtC,QAAQ,EAAE,OAAO;qBACpB;iBACJ;aACJ;YACD,2CAA2C;YAC3C,EAAE,EAAE,IAAI;SACX,CAAC;QAEF,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACO,KAAK,CAAC,QAAQ,CACpB,QAAgB,EAChB,OAA8B;QAE9B,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACxD,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAwC,CAAC;QAEjG,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YACjD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SAC7B;IACL,CAAC;IAED;;OAEG;IACO,SAAS,CAAC,OAAc,IAAG,CAAC;IAEtC;;OAEG;IACO,YAAY,KAAI,CAAC;IAE3B;;OAEG;IACO,YAAY,KAAI,CAAC;IAE3B;;OAEG;IACO,WAAW,CAAC,OAAkC,EAAE,KAAc;QACpE,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;IACxE,CAAC;CACJ","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { fromBase64ToUtf8 } from \"@microsoft/fluid-common-utils\";\nimport {\n    FileMode,\n    ISequencedDocumentMessage,\n    ITree,\n    TreeEntry,\n} from \"@microsoft/fluid-protocol-definitions\";\nimport {\n    IChannelAttributes,\n    IComponentRuntime,\n    IObjectStorageService,\n    Jsonable,\n} from \"@microsoft/fluid-runtime-definitions\";\nimport {\n    ISharedObjectFactory,\n    SharedObject,\n} from \"@microsoft/fluid-shared-object-base\";\nimport { ISummarizableObject } from \"./interfaces\";\nimport { SummarizableObjectFactory } from \"./summarizableObjectFactory\";\n\nconst snapshotFileName = \"header\";\n\n/**\n * Defines the in-memory object structure to be used for the conversion to/from serialized.\n * Directly used in JSON.stringify, direct result from JSON.parse.\n */\ninterface ISummarizableObjectDataSerializable {\n    [key: string]: Jsonable;\n}\n\n/**\n * Implementation of a summarizable object. It does not generate any ops. It is only part of the summary.\n * Data should be set in this object in response to a remote op.\n */\nexport class SummarizableObject extends SharedObject implements ISummarizableObject {\n    /**\n     * Create a new summarizable object\n     *\n     * @param runtime - component runtime the new summarizable object belongs to.\n     * @param id - optional name of the summarizable object.\n     * @returns newly create summarizable object (but not attached yet).\n     */\n    public static create(runtime: IComponentRuntime, id?: string) {\n        return runtime.createChannel(id, SummarizableObjectFactory.Type) as SummarizableObject;\n    }\n\n    /**\n     * Get a factory for SummarizableObject to register with the component.\n     *\n     * @returns a factory that creates and loads SummarizableObject.\n     */\n    public static getFactory(): ISharedObjectFactory {\n        return new SummarizableObjectFactory();\n    }\n\n    /**\n     * The data held by this object.\n     */\n    private readonly data = new Map<string, Jsonable>();\n\n    /**\n     * Constructs a new SummarizableObject. If the object is non-local, an id and service interfaces will\n     * be provided.\n     *\n     * @param id - optional name of the summarizable object.\n     * @param runtime - component runtime thee object belongs to.\n     * @param attributes - The attributes for the object.\n     */\n    constructor(id: string, runtime: IComponentRuntime, attributes: IChannelAttributes) {\n        super(id, runtime, attributes);\n    }\n\n    /**\n     * {@inheritDoc ISummarizableObject.get}\n     */\n    public get(key: string): Jsonable {\n        return this.data.get(key);\n    }\n\n    /**\n     * {@inheritDoc ISummarizableObject.set}\n     */\n    public set(key: string, value: Jsonable): void {\n        this.data.set(key, value);\n\n        // Set this object as dirty so that it is part of the next summary.\n        this.dirty();\n    }\n\n    /**\n     * {@inheritDoc @microsoft/fluid-shared-object-base#SharedObject.snapshot}\n     */\n    public snapshot(): ITree {\n        const contentsBlob: ISummarizableObjectDataSerializable = {};\n        this.data.forEach((value, key) => {\n            contentsBlob[key] = value;\n        });\n\n        // Construct the tree for the data.\n        const tree: ITree = {\n            entries: [\n                {\n                    mode: FileMode.File,\n                    path: snapshotFileName,\n                    type: TreeEntry[TreeEntry.Blob],\n                    value: {\n                        contents: JSON.stringify(contentsBlob),\n                        encoding: \"utf-8\",\n                    },\n                },\n            ],\n            // eslint-disable-next-line no-null/no-null\n            id: null,\n        };\n\n        return tree;\n    }\n\n    /**\n     * {@inheritDoc @microsoft/fluid-shared-object-base#SharedObject.loadCore}\n     */\n    protected async loadCore(\n        branchId: string,\n        storage: IObjectStorageService): Promise<void> {\n\n        const rawContent = await storage.read(snapshotFileName);\n        const contents = JSON.parse(fromBase64ToUtf8(rawContent)) as ISummarizableObjectDataSerializable;\n\n        for (const [key, value] of Object.entries(contents)) {\n            this.data.set(key, value);\n        }\n    }\n\n    /**\n     * {@inheritDoc @microsoft/fluid-shared-object-base#SharedObject.onConnect}\n     */\n    protected onConnect(pending: any[]) {}\n\n    /**\n     * {@inheritDoc @microsoft/fluid-shared-object-base#SharedObject.registerCore}\n     */\n    protected registerCore() {}\n\n    /**\n     * {@inheritDoc @microsoft/fluid-shared-object-base#SharedObject.onDisconnect}\n     */\n    protected onDisconnect() {}\n\n    /**\n     * {@inheritDoc @microsoft/fluid-shared-object-base#SharedObject.processCore}\n     */\n    protected processCore(message: ISequencedDocumentMessage, local: boolean) {\n        throw new Error(\"Summarizable object should not generate any ops.\");\n    }\n}\n"]}