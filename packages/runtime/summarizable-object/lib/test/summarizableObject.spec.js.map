{"version":3,"file":"summarizableObject.spec.js","sourceRoot":"","sources":["../../src/test/summarizableObject.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport * as assert from \"assert\";\nimport { IBlob } from \"@microsoft/fluid-protocol-definitions\";\nimport { MockRuntime, MockSharedObjectServices } from \"@microsoft/fluid-test-runtime-utils\";\nimport { ISummarizableObject } from \"../interfaces\";\nimport { SummarizableObjectFactory } from \"../summarizableObjectFactory\";\n\ndescribe(\"SummarizableObject\", () => {\n    let runtime: MockRuntime;\n    let factory: SummarizableObjectFactory;\n    let summarizableObject: ISummarizableObject;\n\n    beforeEach(async () => {\n        runtime = new MockRuntime();\n        factory = new SummarizableObjectFactory();\n        summarizableObject = factory.create(runtime, \"root\") as ISummarizableObject;\n    });\n\n    describe(\"Api\", () => {\n        it(\"can create a summarizable object\", () => {\n            assert.ok(summarizableObject);\n        });\n\n        it(\"can set and get summarizable object data\", async () => {\n            const key1 = \"testKey1\";\n            const value1 = \"testValue1\";\n            summarizableObject.set(key1, value1);\n            assert.equal(summarizableObject.get(key1), value1, \"The retrieved value must match the set value\");\n\n            const key2 = \"testKey2\";\n            const value2 = { value: \"testValue2\" };\n            summarizableObject.set(key2, value2);\n            assert.deepEqual(summarizableObject.get(key2), value2, \"The retrieved value must match the set value\");\n        });\n    });\n\n    describe(\"Snapshot\", () => {\n        it(\"can generate snapshot and load from snapshot of the summarizable object data\", async () => {\n            const key1 = \"testKey1\";\n            const value1 = \"testValue1\";\n            summarizableObject.set(key1, value1);\n\n            const key2 = \"testKey2\";\n            const value2 = \"testValue2\";\n            summarizableObject.set(key2, value2);\n\n            const key3 = \"testKey3\";\n            const value3 = { value: \"testValue3\" };\n            summarizableObject.set(key3, value3);\n\n            const tree = summarizableObject.snapshot();\n            const contents = JSON.stringify({\n                testKey1: value1,\n                testKey2: value2,\n                testKey3: value3,\n            });\n\n            // Verify that the generated snapshot is correct.\n            assert(tree.entries.length === 1);\n            assert(tree.entries[0].path === \"header\");\n            assert((tree.entries[0].value as IBlob).contents === contents);\n\n            const services = new MockSharedObjectServices({\n                header: contents,\n            });\n\n            // Load another object from the snapshot and ensure that it has loaded the data from the original object.\n            const summarizableObject2 =\n                await factory.load(runtime, \"mapId\", services, \"branchId\", factory.attributes) as ISummarizableObject;\n            assert.equal(summarizableObject2.get(key1), value1);\n            assert.equal(summarizableObject2.get(key2), value2);\n            assert.deepEqual(summarizableObject2.get(key3), value3);\n        });\n    });\n});\n"]}