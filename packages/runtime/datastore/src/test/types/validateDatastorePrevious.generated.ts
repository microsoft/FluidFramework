/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/datastore-previous/internal";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "EnumDeclaration_DataStoreMessageType": {"forwardCompat": false}
 */
declare function get_old_EnumDeclaration_DataStoreMessageType():
    TypeOnly<old.DataStoreMessageType>;
declare function use_current_EnumDeclaration_DataStoreMessageType(
    use: TypeOnly<current.DataStoreMessageType>): void;
use_current_EnumDeclaration_DataStoreMessageType(
    get_old_EnumDeclaration_DataStoreMessageType());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "EnumDeclaration_DataStoreMessageType": {"backCompat": false}
 */
declare function get_current_EnumDeclaration_DataStoreMessageType():
    TypeOnly<current.DataStoreMessageType>;
declare function use_old_EnumDeclaration_DataStoreMessageType(
    use: TypeOnly<old.DataStoreMessageType>): void;
use_old_EnumDeclaration_DataStoreMessageType(
    get_current_EnumDeclaration_DataStoreMessageType());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_FluidDataStoreRuntime": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_FluidDataStoreRuntime():
    TypeOnly<old.FluidDataStoreRuntime>;
declare function use_current_ClassDeclaration_FluidDataStoreRuntime(
    use: TypeOnly<current.FluidDataStoreRuntime>): void;
use_current_ClassDeclaration_FluidDataStoreRuntime(
    get_old_ClassDeclaration_FluidDataStoreRuntime());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_FluidDataStoreRuntime": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_FluidDataStoreRuntime():
    TypeOnly<current.FluidDataStoreRuntime>;
declare function use_old_ClassDeclaration_FluidDataStoreRuntime(
    use: TypeOnly<old.FluidDataStoreRuntime>): void;
use_old_ClassDeclaration_FluidDataStoreRuntime(
    get_current_ClassDeclaration_FluidDataStoreRuntime());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_FluidObjectHandle": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_FluidObjectHandle():
    TypeOnly<old.FluidObjectHandle>;
declare function use_current_ClassDeclaration_FluidObjectHandle(
    use: TypeOnly<current.FluidObjectHandle>): void;
use_current_ClassDeclaration_FluidObjectHandle(
    get_old_ClassDeclaration_FluidObjectHandle());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_FluidObjectHandle": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_FluidObjectHandle():
    TypeOnly<current.FluidObjectHandle>;
declare function use_old_ClassDeclaration_FluidObjectHandle(
    use: TypeOnly<old.FluidObjectHandle>): void;
use_old_ClassDeclaration_FluidObjectHandle(
    get_current_ClassDeclaration_FluidObjectHandle());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISharedObjectRegistry": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_ISharedObjectRegistry():
    TypeOnly<old.ISharedObjectRegistry>;
declare function use_current_InterfaceDeclaration_ISharedObjectRegistry(
    use: TypeOnly<current.ISharedObjectRegistry>): void;
use_current_InterfaceDeclaration_ISharedObjectRegistry(
    get_old_InterfaceDeclaration_ISharedObjectRegistry());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISharedObjectRegistry": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_ISharedObjectRegistry():
    TypeOnly<current.ISharedObjectRegistry>;
declare function use_old_InterfaceDeclaration_ISharedObjectRegistry(
    use: TypeOnly<old.ISharedObjectRegistry>): void;
use_old_InterfaceDeclaration_ISharedObjectRegistry(
    get_current_InterfaceDeclaration_ISharedObjectRegistry());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_mixinRequestHandler": {"forwardCompat": false}
 */
declare function get_old_VariableDeclaration_mixinRequestHandler():
    TypeOnly<typeof old.mixinRequestHandler>;
declare function use_current_VariableDeclaration_mixinRequestHandler(
    use: TypeOnly<typeof current.mixinRequestHandler>): void;
use_current_VariableDeclaration_mixinRequestHandler(
    get_old_VariableDeclaration_mixinRequestHandler());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_mixinRequestHandler": {"backCompat": false}
 */
declare function get_current_VariableDeclaration_mixinRequestHandler():
    TypeOnly<typeof current.mixinRequestHandler>;
declare function use_old_VariableDeclaration_mixinRequestHandler(
    use: TypeOnly<typeof old.mixinRequestHandler>): void;
use_old_VariableDeclaration_mixinRequestHandler(
    get_current_VariableDeclaration_mixinRequestHandler());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_mixinSummaryHandler": {"forwardCompat": false}
 */
declare function get_old_VariableDeclaration_mixinSummaryHandler():
    TypeOnly<typeof old.mixinSummaryHandler>;
declare function use_current_VariableDeclaration_mixinSummaryHandler(
    use: TypeOnly<typeof current.mixinSummaryHandler>): void;
use_current_VariableDeclaration_mixinSummaryHandler(
    get_old_VariableDeclaration_mixinSummaryHandler());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_mixinSummaryHandler": {"backCompat": false}
 */
declare function get_current_VariableDeclaration_mixinSummaryHandler():
    TypeOnly<typeof current.mixinSummaryHandler>;
declare function use_old_VariableDeclaration_mixinSummaryHandler(
    use: TypeOnly<typeof old.mixinSummaryHandler>): void;
use_old_VariableDeclaration_mixinSummaryHandler(
    get_current_VariableDeclaration_mixinSummaryHandler());
