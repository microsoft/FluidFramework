/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/runtime-utils-previous/internal";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_Factory": {"forwardCompat": false}
 */
declare function get_old_TypeAliasDeclaration_Factory():
    TypeOnly<old.Factory>;
declare function use_current_TypeAliasDeclaration_Factory(
    use: TypeOnly<current.Factory>): void;
use_current_TypeAliasDeclaration_Factory(
    get_old_TypeAliasDeclaration_Factory());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_Factory": {"backCompat": false}
 */
declare function get_current_TypeAliasDeclaration_Factory():
    TypeOnly<current.Factory>;
declare function use_old_TypeAliasDeclaration_Factory(
    use: TypeOnly<old.Factory>): void;
use_old_TypeAliasDeclaration_Factory(
    get_current_TypeAliasDeclaration_Factory());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_FluidHandleBase": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_FluidHandleBase():
    TypeOnly<old.FluidHandleBase<any>>;
declare function use_current_ClassDeclaration_FluidHandleBase(
    use: TypeOnly<current.FluidHandleBase<any>>): void;
use_current_ClassDeclaration_FluidHandleBase(
    get_old_ClassDeclaration_FluidHandleBase());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_FluidHandleBase": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_FluidHandleBase():
    TypeOnly<current.FluidHandleBase<any>>;
declare function use_old_ClassDeclaration_FluidHandleBase(
    use: TypeOnly<old.FluidHandleBase<any>>): void;
use_old_ClassDeclaration_FluidHandleBase(
    get_current_ClassDeclaration_FluidHandleBase());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_GCDataBuilder": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_GCDataBuilder():
    TypeOnly<old.GCDataBuilder>;
declare function use_current_ClassDeclaration_GCDataBuilder(
    use: TypeOnly<current.GCDataBuilder>): void;
use_current_ClassDeclaration_GCDataBuilder(
    get_old_ClassDeclaration_GCDataBuilder());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_GCDataBuilder": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_GCDataBuilder():
    TypeOnly<current.GCDataBuilder>;
declare function use_old_ClassDeclaration_GCDataBuilder(
    use: TypeOnly<old.GCDataBuilder>): void;
use_old_ClassDeclaration_GCDataBuilder(
    get_current_ClassDeclaration_GCDataBuilder());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISerializedHandle": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_ISerializedHandle():
    TypeOnly<old.ISerializedHandle>;
declare function use_current_InterfaceDeclaration_ISerializedHandle(
    use: TypeOnly<current.ISerializedHandle>): void;
use_current_InterfaceDeclaration_ISerializedHandle(
    get_old_InterfaceDeclaration_ISerializedHandle());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISerializedHandle": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_ISerializedHandle():
    TypeOnly<current.ISerializedHandle>;
declare function use_old_InterfaceDeclaration_ISerializedHandle(
    use: TypeOnly<old.ISerializedHandle>): void;
use_old_InterfaceDeclaration_ISerializedHandle(
    get_current_InterfaceDeclaration_ISerializedHandle());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_ObjectStoragePartition": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_ObjectStoragePartition():
    TypeOnly<old.ObjectStoragePartition>;
declare function use_current_ClassDeclaration_ObjectStoragePartition(
    use: TypeOnly<current.ObjectStoragePartition>): void;
use_current_ClassDeclaration_ObjectStoragePartition(
    get_old_ClassDeclaration_ObjectStoragePartition());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_ObjectStoragePartition": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_ObjectStoragePartition():
    TypeOnly<current.ObjectStoragePartition>;
declare function use_old_ClassDeclaration_ObjectStoragePartition(
    use: TypeOnly<old.ObjectStoragePartition>): void;
use_old_ClassDeclaration_ObjectStoragePartition(
    get_current_ClassDeclaration_ObjectStoragePartition());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_ReadAndParseBlob": {"forwardCompat": false}
 */
declare function get_old_TypeAliasDeclaration_ReadAndParseBlob():
    TypeOnly<old.ReadAndParseBlob>;
declare function use_current_TypeAliasDeclaration_ReadAndParseBlob(
    use: TypeOnly<current.ReadAndParseBlob>): void;
use_current_TypeAliasDeclaration_ReadAndParseBlob(
    get_old_TypeAliasDeclaration_ReadAndParseBlob());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_ReadAndParseBlob": {"backCompat": false}
 */
declare function get_current_TypeAliasDeclaration_ReadAndParseBlob():
    TypeOnly<current.ReadAndParseBlob>;
declare function use_old_TypeAliasDeclaration_ReadAndParseBlob(
    use: TypeOnly<old.ReadAndParseBlob>): void;
use_old_TypeAliasDeclaration_ReadAndParseBlob(
    get_current_TypeAliasDeclaration_ReadAndParseBlob());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_RequestParser": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_RequestParser():
    TypeOnly<old.RequestParser>;
declare function use_current_ClassDeclaration_RequestParser(
    use: TypeOnly<current.RequestParser>): void;
use_current_ClassDeclaration_RequestParser(
    get_old_ClassDeclaration_RequestParser());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_RequestParser": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_RequestParser():
    TypeOnly<current.RequestParser>;
declare function use_old_ClassDeclaration_RequestParser(
    use: TypeOnly<old.RequestParser>): void;
use_old_ClassDeclaration_RequestParser(
    get_current_ClassDeclaration_RequestParser());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_RuntimeFactoryHelper": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_RuntimeFactoryHelper():
    TypeOnly<old.RuntimeFactoryHelper>;
declare function use_current_ClassDeclaration_RuntimeFactoryHelper(
    use: TypeOnly<current.RuntimeFactoryHelper>): void;
use_current_ClassDeclaration_RuntimeFactoryHelper(
    get_old_ClassDeclaration_RuntimeFactoryHelper());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_RuntimeFactoryHelper": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_RuntimeFactoryHelper():
    TypeOnly<current.RuntimeFactoryHelper>;
declare function use_old_ClassDeclaration_RuntimeFactoryHelper(
    use: TypeOnly<old.RuntimeFactoryHelper>): void;
use_old_ClassDeclaration_RuntimeFactoryHelper(
    get_current_ClassDeclaration_RuntimeFactoryHelper());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_SummaryTreeBuilder": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_SummaryTreeBuilder():
    TypeOnly<old.SummaryTreeBuilder>;
declare function use_current_ClassDeclaration_SummaryTreeBuilder(
    use: TypeOnly<current.SummaryTreeBuilder>): void;
use_current_ClassDeclaration_SummaryTreeBuilder(
    get_old_ClassDeclaration_SummaryTreeBuilder());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_SummaryTreeBuilder": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_SummaryTreeBuilder():
    TypeOnly<current.SummaryTreeBuilder>;
declare function use_old_ClassDeclaration_SummaryTreeBuilder(
    use: TypeOnly<old.SummaryTreeBuilder>): void;
use_old_ClassDeclaration_SummaryTreeBuilder(
    get_current_ClassDeclaration_SummaryTreeBuilder());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_TelemetryContext": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_TelemetryContext():
    TypeOnly<old.TelemetryContext>;
declare function use_current_ClassDeclaration_TelemetryContext(
    use: TypeOnly<current.TelemetryContext>): void;
use_current_ClassDeclaration_TelemetryContext(
    get_old_ClassDeclaration_TelemetryContext());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_TelemetryContext": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_TelemetryContext():
    TypeOnly<current.TelemetryContext>;
declare function use_old_ClassDeclaration_TelemetryContext(
    use: TypeOnly<old.TelemetryContext>): void;
use_old_ClassDeclaration_TelemetryContext(
    get_current_ClassDeclaration_TelemetryContext());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_addBlobToSummary": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_addBlobToSummary():
    TypeOnly<typeof old.addBlobToSummary>;
declare function use_current_FunctionDeclaration_addBlobToSummary(
    use: TypeOnly<typeof current.addBlobToSummary>): void;
use_current_FunctionDeclaration_addBlobToSummary(
    get_old_FunctionDeclaration_addBlobToSummary());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_addBlobToSummary": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_addBlobToSummary():
    TypeOnly<typeof current.addBlobToSummary>;
declare function use_old_FunctionDeclaration_addBlobToSummary(
    use: TypeOnly<typeof old.addBlobToSummary>): void;
use_old_FunctionDeclaration_addBlobToSummary(
    get_current_FunctionDeclaration_addBlobToSummary());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_addSummarizeResultToSummary": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_addSummarizeResultToSummary():
    TypeOnly<typeof old.addSummarizeResultToSummary>;
declare function use_current_FunctionDeclaration_addSummarizeResultToSummary(
    use: TypeOnly<typeof current.addSummarizeResultToSummary>): void;
use_current_FunctionDeclaration_addSummarizeResultToSummary(
    get_old_FunctionDeclaration_addSummarizeResultToSummary());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_addSummarizeResultToSummary": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_addSummarizeResultToSummary():
    TypeOnly<typeof current.addSummarizeResultToSummary>;
declare function use_old_FunctionDeclaration_addSummarizeResultToSummary(
    use: TypeOnly<typeof old.addSummarizeResultToSummary>): void;
use_old_FunctionDeclaration_addSummarizeResultToSummary(
    get_current_FunctionDeclaration_addSummarizeResultToSummary());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_calculateStats": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_calculateStats():
    TypeOnly<typeof old.calculateStats>;
declare function use_current_FunctionDeclaration_calculateStats(
    use: TypeOnly<typeof current.calculateStats>): void;
use_current_FunctionDeclaration_calculateStats(
    get_old_FunctionDeclaration_calculateStats());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_calculateStats": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_calculateStats():
    TypeOnly<typeof current.calculateStats>;
declare function use_old_FunctionDeclaration_calculateStats(
    use: TypeOnly<typeof old.calculateStats>): void;
use_old_FunctionDeclaration_calculateStats(
    get_current_FunctionDeclaration_calculateStats());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_convertSnapshotTreeToSummaryTree": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_convertSnapshotTreeToSummaryTree():
    TypeOnly<typeof old.convertSnapshotTreeToSummaryTree>;
declare function use_current_FunctionDeclaration_convertSnapshotTreeToSummaryTree(
    use: TypeOnly<typeof current.convertSnapshotTreeToSummaryTree>): void;
use_current_FunctionDeclaration_convertSnapshotTreeToSummaryTree(
    get_old_FunctionDeclaration_convertSnapshotTreeToSummaryTree());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_convertSnapshotTreeToSummaryTree": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_convertSnapshotTreeToSummaryTree():
    TypeOnly<typeof current.convertSnapshotTreeToSummaryTree>;
declare function use_old_FunctionDeclaration_convertSnapshotTreeToSummaryTree(
    use: TypeOnly<typeof old.convertSnapshotTreeToSummaryTree>): void;
use_old_FunctionDeclaration_convertSnapshotTreeToSummaryTree(
    get_current_FunctionDeclaration_convertSnapshotTreeToSummaryTree());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_convertSummaryTreeToITree": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_convertSummaryTreeToITree():
    TypeOnly<typeof old.convertSummaryTreeToITree>;
declare function use_current_FunctionDeclaration_convertSummaryTreeToITree(
    use: TypeOnly<typeof current.convertSummaryTreeToITree>): void;
use_current_FunctionDeclaration_convertSummaryTreeToITree(
    get_old_FunctionDeclaration_convertSummaryTreeToITree());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_convertSummaryTreeToITree": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_convertSummaryTreeToITree():
    TypeOnly<typeof current.convertSummaryTreeToITree>;
declare function use_old_FunctionDeclaration_convertSummaryTreeToITree(
    use: TypeOnly<typeof old.convertSummaryTreeToITree>): void;
use_old_FunctionDeclaration_convertSummaryTreeToITree(
    get_current_FunctionDeclaration_convertSummaryTreeToITree());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_convertToSummaryTree": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_convertToSummaryTree():
    TypeOnly<typeof old.convertToSummaryTree>;
declare function use_current_FunctionDeclaration_convertToSummaryTree(
    use: TypeOnly<typeof current.convertToSummaryTree>): void;
use_current_FunctionDeclaration_convertToSummaryTree(
    get_old_FunctionDeclaration_convertToSummaryTree());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_convertToSummaryTree": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_convertToSummaryTree():
    TypeOnly<typeof current.convertToSummaryTree>;
declare function use_old_FunctionDeclaration_convertToSummaryTree(
    use: TypeOnly<typeof old.convertToSummaryTree>): void;
use_old_FunctionDeclaration_convertToSummaryTree(
    get_current_FunctionDeclaration_convertToSummaryTree());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_convertToSummaryTreeWithStats": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_convertToSummaryTreeWithStats():
    TypeOnly<typeof old.convertToSummaryTreeWithStats>;
declare function use_current_FunctionDeclaration_convertToSummaryTreeWithStats(
    use: TypeOnly<typeof current.convertToSummaryTreeWithStats>): void;
use_current_FunctionDeclaration_convertToSummaryTreeWithStats(
    get_old_FunctionDeclaration_convertToSummaryTreeWithStats());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_convertToSummaryTreeWithStats": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_convertToSummaryTreeWithStats():
    TypeOnly<typeof current.convertToSummaryTreeWithStats>;
declare function use_old_FunctionDeclaration_convertToSummaryTreeWithStats(
    use: TypeOnly<typeof old.convertToSummaryTreeWithStats>): void;
use_old_FunctionDeclaration_convertToSummaryTreeWithStats(
    get_current_FunctionDeclaration_convertToSummaryTreeWithStats());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_create404Response": {"forwardCompat": false}
 */
declare function get_old_VariableDeclaration_create404Response():
    TypeOnly<typeof old.create404Response>;
declare function use_current_VariableDeclaration_create404Response(
    use: TypeOnly<typeof current.create404Response>): void;
use_current_VariableDeclaration_create404Response(
    get_old_VariableDeclaration_create404Response());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_create404Response": {"backCompat": false}
 */
declare function get_current_VariableDeclaration_create404Response():
    TypeOnly<typeof current.create404Response>;
declare function use_old_VariableDeclaration_create404Response(
    use: TypeOnly<typeof old.create404Response>): void;
use_old_VariableDeclaration_create404Response(
    get_current_VariableDeclaration_create404Response());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_createDataStoreFactory": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_createDataStoreFactory():
    TypeOnly<typeof old.createDataStoreFactory>;
declare function use_current_FunctionDeclaration_createDataStoreFactory(
    use: TypeOnly<typeof current.createDataStoreFactory>): void;
use_current_FunctionDeclaration_createDataStoreFactory(
    get_old_FunctionDeclaration_createDataStoreFactory());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_createDataStoreFactory": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_createDataStoreFactory():
    TypeOnly<typeof current.createDataStoreFactory>;
declare function use_old_FunctionDeclaration_createDataStoreFactory(
    use: TypeOnly<typeof old.createDataStoreFactory>): void;
use_old_FunctionDeclaration_createDataStoreFactory(
    get_current_FunctionDeclaration_createDataStoreFactory());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_createResponseError": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_createResponseError():
    TypeOnly<typeof old.createResponseError>;
declare function use_current_FunctionDeclaration_createResponseError(
    use: TypeOnly<typeof current.createResponseError>): void;
use_current_FunctionDeclaration_createResponseError(
    get_old_FunctionDeclaration_createResponseError());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_createResponseError": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_createResponseError():
    TypeOnly<typeof current.createResponseError>;
declare function use_old_FunctionDeclaration_createResponseError(
    use: TypeOnly<typeof old.createResponseError>): void;
use_old_FunctionDeclaration_createResponseError(
    get_current_FunctionDeclaration_createResponseError());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_encodeCompactIdToString": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_encodeCompactIdToString():
    TypeOnly<typeof old.encodeCompactIdToString>;
declare function use_current_FunctionDeclaration_encodeCompactIdToString(
    use: TypeOnly<typeof current.encodeCompactIdToString>): void;
use_current_FunctionDeclaration_encodeCompactIdToString(
    get_old_FunctionDeclaration_encodeCompactIdToString());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_encodeCompactIdToString": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_encodeCompactIdToString():
    TypeOnly<typeof current.encodeCompactIdToString>;
declare function use_old_FunctionDeclaration_encodeCompactIdToString(
    use: TypeOnly<typeof old.encodeCompactIdToString>): void;
use_old_FunctionDeclaration_encodeCompactIdToString(
    get_current_FunctionDeclaration_encodeCompactIdToString());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_exceptionToResponse": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_exceptionToResponse():
    TypeOnly<typeof old.exceptionToResponse>;
declare function use_current_FunctionDeclaration_exceptionToResponse(
    use: TypeOnly<typeof current.exceptionToResponse>): void;
use_current_FunctionDeclaration_exceptionToResponse(
    get_old_FunctionDeclaration_exceptionToResponse());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_exceptionToResponse": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_exceptionToResponse():
    TypeOnly<typeof current.exceptionToResponse>;
declare function use_old_FunctionDeclaration_exceptionToResponse(
    use: TypeOnly<typeof old.exceptionToResponse>): void;
use_old_FunctionDeclaration_exceptionToResponse(
    get_current_FunctionDeclaration_exceptionToResponse());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_generateHandleContextPath": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_generateHandleContextPath():
    TypeOnly<typeof old.generateHandleContextPath>;
declare function use_current_FunctionDeclaration_generateHandleContextPath(
    use: TypeOnly<typeof current.generateHandleContextPath>): void;
use_current_FunctionDeclaration_generateHandleContextPath(
    get_old_FunctionDeclaration_generateHandleContextPath());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_generateHandleContextPath": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_generateHandleContextPath():
    TypeOnly<typeof current.generateHandleContextPath>;
declare function use_old_FunctionDeclaration_generateHandleContextPath(
    use: TypeOnly<typeof old.generateHandleContextPath>): void;
use_old_FunctionDeclaration_generateHandleContextPath(
    get_current_FunctionDeclaration_generateHandleContextPath());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_getBlobSize": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_getBlobSize():
    TypeOnly<typeof old.getBlobSize>;
declare function use_current_FunctionDeclaration_getBlobSize(
    use: TypeOnly<typeof current.getBlobSize>): void;
use_current_FunctionDeclaration_getBlobSize(
    get_old_FunctionDeclaration_getBlobSize());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_getBlobSize": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_getBlobSize():
    TypeOnly<typeof current.getBlobSize>;
declare function use_old_FunctionDeclaration_getBlobSize(
    use: TypeOnly<typeof old.getBlobSize>): void;
use_old_FunctionDeclaration_getBlobSize(
    get_current_FunctionDeclaration_getBlobSize());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_getNormalizedObjectStoragePathParts": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_getNormalizedObjectStoragePathParts():
    TypeOnly<typeof old.getNormalizedObjectStoragePathParts>;
declare function use_current_FunctionDeclaration_getNormalizedObjectStoragePathParts(
    use: TypeOnly<typeof current.getNormalizedObjectStoragePathParts>): void;
use_current_FunctionDeclaration_getNormalizedObjectStoragePathParts(
    get_old_FunctionDeclaration_getNormalizedObjectStoragePathParts());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_getNormalizedObjectStoragePathParts": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_getNormalizedObjectStoragePathParts():
    TypeOnly<typeof current.getNormalizedObjectStoragePathParts>;
declare function use_old_FunctionDeclaration_getNormalizedObjectStoragePathParts(
    use: TypeOnly<typeof old.getNormalizedObjectStoragePathParts>): void;
use_old_FunctionDeclaration_getNormalizedObjectStoragePathParts(
    get_current_FunctionDeclaration_getNormalizedObjectStoragePathParts());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_isFluidHandle": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_isFluidHandle():
    TypeOnly<typeof old.isFluidHandle>;
declare function use_current_FunctionDeclaration_isFluidHandle(
    use: TypeOnly<typeof current.isFluidHandle>): void;
use_current_FunctionDeclaration_isFluidHandle(
    get_old_FunctionDeclaration_isFluidHandle());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_isFluidHandle": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_isFluidHandle():
    TypeOnly<typeof current.isFluidHandle>;
declare function use_old_FunctionDeclaration_isFluidHandle(
    use: TypeOnly<typeof old.isFluidHandle>): void;
use_old_FunctionDeclaration_isFluidHandle(
    get_current_FunctionDeclaration_isFluidHandle());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_isSerializedHandle": {"forwardCompat": false}
 */
declare function get_old_VariableDeclaration_isSerializedHandle():
    TypeOnly<typeof old.isSerializedHandle>;
declare function use_current_VariableDeclaration_isSerializedHandle(
    use: TypeOnly<typeof current.isSerializedHandle>): void;
use_current_VariableDeclaration_isSerializedHandle(
    get_old_VariableDeclaration_isSerializedHandle());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_isSerializedHandle": {"backCompat": false}
 */
declare function get_current_VariableDeclaration_isSerializedHandle():
    TypeOnly<typeof current.isSerializedHandle>;
declare function use_old_VariableDeclaration_isSerializedHandle(
    use: TypeOnly<typeof old.isSerializedHandle>): void;
use_old_VariableDeclaration_isSerializedHandle(
    get_current_VariableDeclaration_isSerializedHandle());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_isSnapshotFetchRequiredForLoadingGroupId": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_isSnapshotFetchRequiredForLoadingGroupId():
    TypeOnly<typeof old.isSnapshotFetchRequiredForLoadingGroupId>;
declare function use_current_FunctionDeclaration_isSnapshotFetchRequiredForLoadingGroupId(
    use: TypeOnly<typeof current.isSnapshotFetchRequiredForLoadingGroupId>): void;
use_current_FunctionDeclaration_isSnapshotFetchRequiredForLoadingGroupId(
    get_old_FunctionDeclaration_isSnapshotFetchRequiredForLoadingGroupId());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_isSnapshotFetchRequiredForLoadingGroupId": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_isSnapshotFetchRequiredForLoadingGroupId():
    TypeOnly<typeof current.isSnapshotFetchRequiredForLoadingGroupId>;
declare function use_old_FunctionDeclaration_isSnapshotFetchRequiredForLoadingGroupId(
    use: TypeOnly<typeof old.isSnapshotFetchRequiredForLoadingGroupId>): void;
use_old_FunctionDeclaration_isSnapshotFetchRequiredForLoadingGroupId(
    get_current_FunctionDeclaration_isSnapshotFetchRequiredForLoadingGroupId());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_listBlobsAtTreePath": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_listBlobsAtTreePath():
    TypeOnly<typeof old.listBlobsAtTreePath>;
declare function use_current_FunctionDeclaration_listBlobsAtTreePath(
    use: TypeOnly<typeof current.listBlobsAtTreePath>): void;
use_current_FunctionDeclaration_listBlobsAtTreePath(
    get_old_FunctionDeclaration_listBlobsAtTreePath());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_listBlobsAtTreePath": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_listBlobsAtTreePath():
    TypeOnly<typeof current.listBlobsAtTreePath>;
declare function use_old_FunctionDeclaration_listBlobsAtTreePath(
    use: TypeOnly<typeof old.listBlobsAtTreePath>): void;
use_old_FunctionDeclaration_listBlobsAtTreePath(
    get_current_FunctionDeclaration_listBlobsAtTreePath());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_mergeStats": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_mergeStats():
    TypeOnly<typeof old.mergeStats>;
declare function use_current_FunctionDeclaration_mergeStats(
    use: TypeOnly<typeof current.mergeStats>): void;
use_current_FunctionDeclaration_mergeStats(
    get_old_FunctionDeclaration_mergeStats());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_mergeStats": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_mergeStats():
    TypeOnly<typeof current.mergeStats>;
declare function use_old_FunctionDeclaration_mergeStats(
    use: TypeOnly<typeof old.mergeStats>): void;
use_old_FunctionDeclaration_mergeStats(
    get_current_FunctionDeclaration_mergeStats());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_processAttachMessageGCData": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_processAttachMessageGCData():
    TypeOnly<typeof old.processAttachMessageGCData>;
declare function use_current_FunctionDeclaration_processAttachMessageGCData(
    use: TypeOnly<typeof current.processAttachMessageGCData>): void;
use_current_FunctionDeclaration_processAttachMessageGCData(
    get_old_FunctionDeclaration_processAttachMessageGCData());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_processAttachMessageGCData": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_processAttachMessageGCData():
    TypeOnly<typeof current.processAttachMessageGCData>;
declare function use_old_FunctionDeclaration_processAttachMessageGCData(
    use: TypeOnly<typeof old.processAttachMessageGCData>): void;
use_old_FunctionDeclaration_processAttachMessageGCData(
    get_current_FunctionDeclaration_processAttachMessageGCData());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_responseToException": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_responseToException():
    TypeOnly<typeof old.responseToException>;
declare function use_current_FunctionDeclaration_responseToException(
    use: TypeOnly<typeof current.responseToException>): void;
use_current_FunctionDeclaration_responseToException(
    get_old_FunctionDeclaration_responseToException());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_responseToException": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_responseToException():
    TypeOnly<typeof current.responseToException>;
declare function use_old_FunctionDeclaration_responseToException(
    use: TypeOnly<typeof old.responseToException>): void;
use_old_FunctionDeclaration_responseToException(
    get_current_FunctionDeclaration_responseToException());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_seqFromTree": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_seqFromTree():
    TypeOnly<typeof old.seqFromTree>;
declare function use_current_FunctionDeclaration_seqFromTree(
    use: TypeOnly<typeof current.seqFromTree>): void;
use_current_FunctionDeclaration_seqFromTree(
    get_old_FunctionDeclaration_seqFromTree());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_seqFromTree": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_seqFromTree():
    TypeOnly<typeof current.seqFromTree>;
declare function use_old_FunctionDeclaration_seqFromTree(
    use: TypeOnly<typeof old.seqFromTree>): void;
use_old_FunctionDeclaration_seqFromTree(
    get_current_FunctionDeclaration_seqFromTree());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_toDeltaManagerErased": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_toDeltaManagerErased():
    TypeOnly<typeof old.toDeltaManagerErased>;
declare function use_current_FunctionDeclaration_toDeltaManagerErased(
    use: TypeOnly<typeof current.toDeltaManagerErased>): void;
use_current_FunctionDeclaration_toDeltaManagerErased(
    get_old_FunctionDeclaration_toDeltaManagerErased());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_toDeltaManagerErased": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_toDeltaManagerErased():
    TypeOnly<typeof current.toDeltaManagerErased>;
declare function use_old_FunctionDeclaration_toDeltaManagerErased(
    use: TypeOnly<typeof old.toDeltaManagerErased>): void;
use_old_FunctionDeclaration_toDeltaManagerErased(
    get_current_FunctionDeclaration_toDeltaManagerErased());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_toDeltaManagerInternal": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_toDeltaManagerInternal():
    TypeOnly<typeof old.toDeltaManagerInternal>;
declare function use_current_FunctionDeclaration_toDeltaManagerInternal(
    use: TypeOnly<typeof current.toDeltaManagerInternal>): void;
use_current_FunctionDeclaration_toDeltaManagerInternal(
    get_old_FunctionDeclaration_toDeltaManagerInternal());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_toDeltaManagerInternal": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_toDeltaManagerInternal():
    TypeOnly<typeof current.toDeltaManagerInternal>;
declare function use_old_FunctionDeclaration_toDeltaManagerInternal(
    use: TypeOnly<typeof old.toDeltaManagerInternal>): void;
use_old_FunctionDeclaration_toDeltaManagerInternal(
    get_current_FunctionDeclaration_toDeltaManagerInternal());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_toFluidHandleErased": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_toFluidHandleErased():
    TypeOnly<typeof old.toFluidHandleErased>;
declare function use_current_FunctionDeclaration_toFluidHandleErased(
    use: TypeOnly<typeof current.toFluidHandleErased>): void;
use_current_FunctionDeclaration_toFluidHandleErased(
    get_old_FunctionDeclaration_toFluidHandleErased());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_toFluidHandleErased": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_toFluidHandleErased():
    TypeOnly<typeof current.toFluidHandleErased>;
declare function use_old_FunctionDeclaration_toFluidHandleErased(
    use: TypeOnly<typeof old.toFluidHandleErased>): void;
use_old_FunctionDeclaration_toFluidHandleErased(
    get_current_FunctionDeclaration_toFluidHandleErased());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_toFluidHandleInternal": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_toFluidHandleInternal():
    TypeOnly<typeof old.toFluidHandleInternal>;
declare function use_current_FunctionDeclaration_toFluidHandleInternal(
    use: TypeOnly<typeof current.toFluidHandleInternal>): void;
use_current_FunctionDeclaration_toFluidHandleInternal(
    get_old_FunctionDeclaration_toFluidHandleInternal());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_toFluidHandleInternal": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_toFluidHandleInternal():
    TypeOnly<typeof current.toFluidHandleInternal>;
declare function use_old_FunctionDeclaration_toFluidHandleInternal(
    use: TypeOnly<typeof old.toFluidHandleInternal>): void;
use_old_FunctionDeclaration_toFluidHandleInternal(
    get_current_FunctionDeclaration_toFluidHandleInternal());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_unpackChildNodesUsedRoutes": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_unpackChildNodesUsedRoutes():
    TypeOnly<typeof old.unpackChildNodesUsedRoutes>;
declare function use_current_FunctionDeclaration_unpackChildNodesUsedRoutes(
    use: TypeOnly<typeof current.unpackChildNodesUsedRoutes>): void;
use_current_FunctionDeclaration_unpackChildNodesUsedRoutes(
    get_old_FunctionDeclaration_unpackChildNodesUsedRoutes());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_unpackChildNodesUsedRoutes": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_unpackChildNodesUsedRoutes():
    TypeOnly<typeof current.unpackChildNodesUsedRoutes>;
declare function use_old_FunctionDeclaration_unpackChildNodesUsedRoutes(
    use: TypeOnly<typeof old.unpackChildNodesUsedRoutes>): void;
use_old_FunctionDeclaration_unpackChildNodesUsedRoutes(
    get_current_FunctionDeclaration_unpackChildNodesUsedRoutes());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_utf8ByteLength": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_utf8ByteLength():
    TypeOnly<typeof old.utf8ByteLength>;
declare function use_current_FunctionDeclaration_utf8ByteLength(
    use: TypeOnly<typeof current.utf8ByteLength>): void;
use_current_FunctionDeclaration_utf8ByteLength(
    get_old_FunctionDeclaration_utf8ByteLength());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_utf8ByteLength": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_utf8ByteLength():
    TypeOnly<typeof current.utf8ByteLength>;
declare function use_old_FunctionDeclaration_utf8ByteLength(
    use: TypeOnly<typeof old.utf8ByteLength>): void;
use_old_FunctionDeclaration_utf8ByteLength(
    get_current_FunctionDeclaration_utf8ByteLength());
