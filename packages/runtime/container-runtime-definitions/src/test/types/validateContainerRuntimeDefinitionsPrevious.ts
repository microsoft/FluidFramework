/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-validator in @fluidframework/build-tools.
 */
import * as old from "@fluidframework/container-runtime-definitions-previous";
import * as current from "../../index";

type TypeOnly<T> = {
    [P in keyof T]: TypeOnly<T[P]>;
};

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_IContainerRuntime": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_IContainerRuntime():
    TypeOnly<typeof old.IContainerRuntime>;
declare function use_current_VariableDeclaration_IContainerRuntime(
    use: TypeOnly<typeof current.IContainerRuntime>);
use_current_VariableDeclaration_IContainerRuntime(
    get_old_VariableDeclaration_IContainerRuntime());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_IContainerRuntime": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_IContainerRuntime():
    TypeOnly<typeof current.IContainerRuntime>;
declare function use_old_VariableDeclaration_IContainerRuntime(
    use: TypeOnly<typeof old.IContainerRuntime>);
use_old_VariableDeclaration_IContainerRuntime(
    get_current_VariableDeclaration_IContainerRuntime());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IContainerRuntime": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IContainerRuntime():
    TypeOnly<old.IContainerRuntime>;
declare function use_current_InterfaceDeclaration_IContainerRuntime(
    use: TypeOnly<current.IContainerRuntime>);
use_current_InterfaceDeclaration_IContainerRuntime(
    get_old_InterfaceDeclaration_IContainerRuntime());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IContainerRuntime": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IContainerRuntime():
    TypeOnly<current.IContainerRuntime>;
declare function use_old_InterfaceDeclaration_IContainerRuntime(
    use: TypeOnly<old.IContainerRuntime>);
use_old_InterfaceDeclaration_IContainerRuntime(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IContainerRuntime());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_IContainerRuntimeBaseWithCombinedEvents": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_IContainerRuntimeBaseWithCombinedEvents():
    TypeOnly<old.IContainerRuntimeBaseWithCombinedEvents>;
declare function use_current_TypeAliasDeclaration_IContainerRuntimeBaseWithCombinedEvents(
    use: TypeOnly<current.IContainerRuntimeBaseWithCombinedEvents>);
use_current_TypeAliasDeclaration_IContainerRuntimeBaseWithCombinedEvents(
    get_old_TypeAliasDeclaration_IContainerRuntimeBaseWithCombinedEvents());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_IContainerRuntimeBaseWithCombinedEvents": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_IContainerRuntimeBaseWithCombinedEvents():
    TypeOnly<current.IContainerRuntimeBaseWithCombinedEvents>;
declare function use_old_TypeAliasDeclaration_IContainerRuntimeBaseWithCombinedEvents(
    use: TypeOnly<old.IContainerRuntimeBaseWithCombinedEvents>);
use_old_TypeAliasDeclaration_IContainerRuntimeBaseWithCombinedEvents(
    get_current_TypeAliasDeclaration_IContainerRuntimeBaseWithCombinedEvents());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IContainerRuntimeEvents": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IContainerRuntimeEvents():
    TypeOnly<old.IContainerRuntimeEvents>;
declare function use_current_InterfaceDeclaration_IContainerRuntimeEvents(
    use: TypeOnly<current.IContainerRuntimeEvents>);
use_current_InterfaceDeclaration_IContainerRuntimeEvents(
    get_old_InterfaceDeclaration_IContainerRuntimeEvents());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IContainerRuntimeEvents": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IContainerRuntimeEvents():
    TypeOnly<current.IContainerRuntimeEvents>;
declare function use_old_InterfaceDeclaration_IContainerRuntimeEvents(
    use: TypeOnly<old.IContainerRuntimeEvents>);
use_old_InterfaceDeclaration_IContainerRuntimeEvents(
    get_current_InterfaceDeclaration_IContainerRuntimeEvents());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "RemovedInterfaceDeclaration_IDataStoreWithBindToContext_Deprecated": {"forwardCompat": false}
*/

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "RemovedInterfaceDeclaration_IDataStoreWithBindToContext_Deprecated": {"backCompat": false}
*/

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IProvideContainerRuntime": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IProvideContainerRuntime():
    TypeOnly<old.IProvideContainerRuntime>;
declare function use_current_InterfaceDeclaration_IProvideContainerRuntime(
    use: TypeOnly<current.IProvideContainerRuntime>);
use_current_InterfaceDeclaration_IProvideContainerRuntime(
    get_old_InterfaceDeclaration_IProvideContainerRuntime());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IProvideContainerRuntime": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IProvideContainerRuntime():
    TypeOnly<current.IProvideContainerRuntime>;
declare function use_old_InterfaceDeclaration_IProvideContainerRuntime(
    use: TypeOnly<old.IProvideContainerRuntime>);
use_old_InterfaceDeclaration_IProvideContainerRuntime(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IProvideContainerRuntime());
