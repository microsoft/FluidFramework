/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/container-runtime-definitions-previous/internal";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IContainerRuntime": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IContainerRuntime():
    TypeOnly<old.IContainerRuntime>;
declare function use_current_InterfaceDeclaration_IContainerRuntime(
    use: TypeOnly<current.IContainerRuntime>): void;
use_current_InterfaceDeclaration_IContainerRuntime(
    get_old_InterfaceDeclaration_IContainerRuntime());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IContainerRuntime": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IContainerRuntime():
    TypeOnly<current.IContainerRuntime>;
declare function use_old_InterfaceDeclaration_IContainerRuntime(
    use: TypeOnly<old.IContainerRuntime>): void;
use_old_InterfaceDeclaration_IContainerRuntime(
    get_current_InterfaceDeclaration_IContainerRuntime());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_IContainerRuntimeBaseWithCombinedEvents": {"forwardCompat": false}
 */
declare function get_old_TypeAliasDeclaration_IContainerRuntimeBaseWithCombinedEvents():
    TypeOnly<old.IContainerRuntimeBaseWithCombinedEvents>;
declare function use_current_TypeAliasDeclaration_IContainerRuntimeBaseWithCombinedEvents(
    use: TypeOnly<current.IContainerRuntimeBaseWithCombinedEvents>): void;
use_current_TypeAliasDeclaration_IContainerRuntimeBaseWithCombinedEvents(
    get_old_TypeAliasDeclaration_IContainerRuntimeBaseWithCombinedEvents());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_IContainerRuntimeBaseWithCombinedEvents": {"backCompat": false}
 */
declare function get_current_TypeAliasDeclaration_IContainerRuntimeBaseWithCombinedEvents():
    TypeOnly<current.IContainerRuntimeBaseWithCombinedEvents>;
declare function use_old_TypeAliasDeclaration_IContainerRuntimeBaseWithCombinedEvents(
    use: TypeOnly<old.IContainerRuntimeBaseWithCombinedEvents>): void;
use_old_TypeAliasDeclaration_IContainerRuntimeBaseWithCombinedEvents(
    get_current_TypeAliasDeclaration_IContainerRuntimeBaseWithCombinedEvents());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IContainerRuntimeEvents": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IContainerRuntimeEvents():
    TypeOnly<old.IContainerRuntimeEvents>;
declare function use_current_InterfaceDeclaration_IContainerRuntimeEvents(
    use: TypeOnly<current.IContainerRuntimeEvents>): void;
use_current_InterfaceDeclaration_IContainerRuntimeEvents(
    get_old_InterfaceDeclaration_IContainerRuntimeEvents());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IContainerRuntimeEvents": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IContainerRuntimeEvents():
    TypeOnly<current.IContainerRuntimeEvents>;
declare function use_old_InterfaceDeclaration_IContainerRuntimeEvents(
    use: TypeOnly<old.IContainerRuntimeEvents>): void;
use_old_InterfaceDeclaration_IContainerRuntimeEvents(
    get_current_InterfaceDeclaration_IContainerRuntimeEvents());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IContainerRuntimeWithResolveHandle_Deprecated": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IContainerRuntimeWithResolveHandle_Deprecated():
    TypeOnly<old.IContainerRuntimeWithResolveHandle_Deprecated>;
declare function use_current_InterfaceDeclaration_IContainerRuntimeWithResolveHandle_Deprecated(
    use: TypeOnly<current.IContainerRuntimeWithResolveHandle_Deprecated>): void;
use_current_InterfaceDeclaration_IContainerRuntimeWithResolveHandle_Deprecated(
    get_old_InterfaceDeclaration_IContainerRuntimeWithResolveHandle_Deprecated());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IContainerRuntimeWithResolveHandle_Deprecated": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IContainerRuntimeWithResolveHandle_Deprecated():
    TypeOnly<current.IContainerRuntimeWithResolveHandle_Deprecated>;
declare function use_old_InterfaceDeclaration_IContainerRuntimeWithResolveHandle_Deprecated(
    use: TypeOnly<old.IContainerRuntimeWithResolveHandle_Deprecated>): void;
use_old_InterfaceDeclaration_IContainerRuntimeWithResolveHandle_Deprecated(
    get_current_InterfaceDeclaration_IContainerRuntimeWithResolveHandle_Deprecated());
