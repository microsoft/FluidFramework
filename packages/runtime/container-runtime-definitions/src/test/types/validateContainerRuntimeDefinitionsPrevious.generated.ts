/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType, requireAssignableTo } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/container-runtime-definitions-previous";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current | requireAssignableTo<true, true>;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IContainerRuntime": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IContainerRuntime = requireAssignableTo<TypeOnly<old.IContainerRuntime>, TypeOnly<current.IContainerRuntime>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IContainerRuntime": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IContainerRuntime = requireAssignableTo<TypeOnly<current.IContainerRuntime>, TypeOnly<old.IContainerRuntime>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IContainerRuntimeEvents": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IContainerRuntimeEvents = requireAssignableTo<TypeOnly<old.IContainerRuntimeEvents>, TypeOnly<current.IContainerRuntimeEvents>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IContainerRuntimeEvents": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IContainerRuntimeEvents = requireAssignableTo<TypeOnly<current.IContainerRuntimeEvents>, TypeOnly<old.IContainerRuntimeEvents>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IDataStoreWithBindToContext_Deprecated": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IDataStoreWithBindToContext_Deprecated = requireAssignableTo<TypeOnly<old.IDataStoreWithBindToContext_Deprecated>, TypeOnly<current.IDataStoreWithBindToContext_Deprecated>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IDataStoreWithBindToContext_Deprecated": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IDataStoreWithBindToContext_Deprecated = requireAssignableTo<TypeOnly<current.IDataStoreWithBindToContext_Deprecated>, TypeOnly<old.IDataStoreWithBindToContext_Deprecated>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IProvideContainerRuntime": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IProvideContainerRuntime = requireAssignableTo<TypeOnly<old.IProvideContainerRuntime>, TypeOnly<current.IProvideContainerRuntime>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IProvideContainerRuntime": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IProvideContainerRuntime = requireAssignableTo<TypeOnly<current.IProvideContainerRuntime>, TypeOnly<old.IProvideContainerRuntime>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_IContainerRuntimeBaseWithCombinedEvents": {"forwardCompat": false}
 */
declare type old_as_current_for_TypeAlias_IContainerRuntimeBaseWithCombinedEvents = requireAssignableTo<TypeOnly<old.IContainerRuntimeBaseWithCombinedEvents>, TypeOnly<current.IContainerRuntimeBaseWithCombinedEvents>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_IContainerRuntimeBaseWithCombinedEvents": {"backCompat": false}
 */
declare type current_as_old_for_TypeAlias_IContainerRuntimeBaseWithCombinedEvents = requireAssignableTo<TypeOnly<current.IContainerRuntimeBaseWithCombinedEvents>, TypeOnly<old.IContainerRuntimeBaseWithCombinedEvents>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Variable_IContainerRuntime": {"backCompat": false}
 */
declare type current_as_old_for_Variable_IContainerRuntime = requireAssignableTo<TypeOnly<typeof current.IContainerRuntime>, TypeOnly<typeof old.IContainerRuntime>>
