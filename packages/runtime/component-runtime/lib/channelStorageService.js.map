{"version":3,"file":"channelStorageService.js","sourceRoot":"","sources":["../src/channelStorageService.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAKH,OAAO,EAAE,mCAAmC,EAAE,MAAM,+BAA+B,CAAC;AAEpF,MAAM,OAAO,qBAAqB;IAe9B,YACqB,IAAwC,EACxC,OAA8C,EAC9C,UAAyC;QAFzC,SAAI,GAAJ,IAAI,CAAoC;QACxC,YAAO,GAAP,OAAO,CAAuC;QAC9C,eAAU,GAAV,UAAU,CAA+B;QAE1D,mCAAmC;QACnC,IAAI,IAAI,KAAK,SAAS,EAAE;YACpB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,YAAY,EAAE,EAAE;gBAC7C,MAAM,aAAa,GAA+B,EAAE,CAAC;gBACrD,qBAAqB,CAAC,WAAW,CAAC,EAAE,EAAE,YAAY,EAAE,aAAa,CAAC,CAAC;gBACnE,OAAO,aAAa,CAAC;YACzB,CAAC,CAAC,CAAC;SACN;aAAM;YACH,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;SAC7C;IACL,CAAC;IA7BO,MAAM,CAAC,WAAW,CAAC,IAAY,EAAE,IAAmB,EAAE,OAAmC;QAC7F,8DAA8D;QAC9D,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE;YAC3B,qBAAqB,CAAC,WAAW,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;SACnF;QAED,8DAA8D;QAC9D,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE;YAC3B,OAAO,CAAC,GAAG,IAAI,GAAG,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SAChD;IACL,CAAC;IAqBM,KAAK,CAAC,QAAQ,CAAC,IAAY;QAC9B,OAAO,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,KAAK,SAAS,CAAC;IAC3D,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,IAAY;QAC1B,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACzC,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,KAAK,SAAS;YACtC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC;YACjC,CAAC,CAAC,SAAS,CAAC;QAEhB,QAAO,IAAI,aAAJ,IAAI,cAAJ,IAAI,GAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,EAAC;IACzC,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,IAAY;;QAC1B,IAAI,IAAI,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC;QAC3B,MAAM,SAAS,GAAG,mCAAmC,CAAC,IAAI,CAAC,CAAC;QAC5D,OAAO,IAAI,KAAK,SAAS,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;YAC/C,oEAAoE;YACpE,MAAM,IAAI,GAAG,SAAS,CAAC,KAAK,EAAG,CAAC;YAChC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SAC3B;QACD,IAAI,IAAI,KAAK,SAAS,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;YAC9C,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;SAC1C;QAED,OAAO,MAAM,CAAC,IAAI,aAAC,IAAI,0CAAE,KAAK,uCAAI,EAAE,GAAC,CAAC;IAC1C,CAAC;IAEO,KAAK,CAAC,YAAY,CAAC,IAAY;QACnC,OAAO,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC;IAC7C,CAAC;CACJ","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { IDocumentStorageService } from \"@fluidframework/driver-definitions\";\nimport { ISnapshotTree } from \"@fluidframework/protocol-definitions\";\nimport { IChannelStorageService } from \"@fluidframework/datastore-definitions\";\nimport { getNormalizedObjectStoragePathParts } from \"@fluidframework/runtime-utils\";\n\nexport class ChannelStorageService implements IChannelStorageService {\n    private static flattenTree(base: string, tree: ISnapshotTree, results: { [path: string]: string }) {\n        // eslint-disable-next-line guard-for-in, no-restricted-syntax\n        for (const path in tree.trees) {\n            ChannelStorageService.flattenTree(`${base}${path}/`, tree.trees[path], results);\n        }\n\n        // eslint-disable-next-line guard-for-in, no-restricted-syntax\n        for (const blob in tree.blobs) {\n            results[`${base}${blob}`] = tree.blobs[blob];\n        }\n    }\n\n    private readonly flattenedTreeP: Promise<{ [path: string]: string }>;\n\n    constructor(\n        private readonly tree: Promise<ISnapshotTree> | undefined,\n        private readonly storage: Pick<IDocumentStorageService, \"read\">,\n        private readonly extraBlobs?: Promise<Map<string, string>>,\n    ) {\n        // Create a map from paths to blobs\n        if (tree !== undefined) {\n            this.flattenedTreeP = tree.then((snapshotTree) => {\n                const flattenedTree: { [path: string]: string } = {};\n                ChannelStorageService.flattenTree(\"\", snapshotTree, flattenedTree);\n                return flattenedTree;\n            });\n        } else {\n            this.flattenedTreeP = Promise.resolve({});\n        }\n    }\n\n    public async contains(path: string): Promise<boolean> {\n        return (await this.flattenedTreeP)[path] !== undefined;\n    }\n\n    public async read(path: string): Promise<string> {\n        const id = await this.getIdForPath(path);\n        const blob = this.extraBlobs !== undefined\n            ? (await this.extraBlobs).get(id)\n            : undefined;\n\n        return blob ?? this.storage.read(id);\n    }\n\n    public async list(path: string): Promise<string[]> {\n        let tree = await this.tree;\n        const pathParts = getNormalizedObjectStoragePathParts(path);\n        while (tree !== undefined && pathParts.length > 0) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const part = pathParts.shift()!;\n            tree = tree.trees[part];\n        }\n        if (tree === undefined || pathParts.length !== 0) {\n            throw new Error(\"path does not exist\");\n        }\n\n        return Object.keys(tree?.blobs ?? {});\n    }\n\n    private async getIdForPath(path: string): Promise<string> {\n        return (await this.flattenedTreeP)[path];\n    }\n}\n"]}