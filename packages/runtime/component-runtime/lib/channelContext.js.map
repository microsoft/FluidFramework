{"version":3,"file":"channelContext.js","sourceRoot":"","sources":["../src/channelContext.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAGH,OAAO,EAAE,aAAa,EAAE,MAAM,+BAA+B,CAAC;AAQ9D,OAAO,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAC;AAClE,OAAO,EAAE,qBAAqB,EAAE,MAAM,yBAAyB,CAAC;AAiBhE,MAAM,UAAU,sBAAsB,CAClC,EAAU,EACV,SAAkB,EAClB,QAA0D,EAC1D,OAAmB,EACnB,cAAuC,EACvC,IAA6B,EAC7B,UAAyC;IAEzC,MAAM,eAAe,GAAG,IAAI,sBAAsB,CAC9C,EAAE,EACF,SAAS,EACT,CAAC,OAAO,EAAE,eAAe,EAAE,EAAE,CAAC,QAAQ,CAAC,OAAO,EAAE,eAAe,CAAC,EAChE,OAAO,CAAC,CAAC;IACb,MAAM,aAAa,GAAG,IAAI,qBAAqB,CAAC,IAAI,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC;IAElF,OAAO;QACH,eAAe;QACf,aAAa;KAChB,CAAC;AACN,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,OAAiB;IAC7C,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;IAEpC,oDAAoD;IACpD,MAAM,gBAAgB,GAAG,OAAO,CAAC,UAAU,CAAC;IAC5C,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,aAAa,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;IAE1F,OAAO,QAAQ,CAAC;AACpB,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { IDocumentStorageService } from \"@fluidframework/driver-definitions\";\nimport { BlobTreeEntry } from \"@fluidframework/protocol-base\";\nimport {\n    ISequencedDocumentMessage,\n    ISnapshotTree,\n    ITree,\n} from \"@fluidframework/protocol-definitions\";\nimport { IChannel } from \"@fluidframework/component-runtime-definitions\";\nimport { ISummarizeResult } from \"@fluidframework/runtime-definitions\";\nimport { ChannelDeltaConnection } from \"./channelDeltaConnection\";\nimport { ChannelStorageService } from \"./channelStorageService\";\n\nexport interface IChannelContext {\n    getChannel(): Promise<IChannel>;\n\n    setConnectionState(connected: boolean, clientId?: string);\n\n    processOp(message: ISequencedDocumentMessage, local: boolean, localOpMetadata?: unknown): void;\n\n    /** @deprecated in 0.22 summarizerNode */\n    snapshot(fullTree?: boolean): Promise<ITree>;\n\n    summarize(fullTree?: boolean): Promise<ISummarizeResult>;\n\n    reSubmit(content: any, localOpMetadata: unknown): void;\n}\n\nexport function createServiceEndpoints(\n    id: string,\n    connected: boolean,\n    submitFn: (content: any, localOpMetadata: unknown) => void,\n    dirtyFn: () => void,\n    storageService: IDocumentStorageService,\n    tree?: Promise<ISnapshotTree>,\n    extraBlobs?: Promise<Map<string, string>>,\n) {\n    const deltaConnection = new ChannelDeltaConnection(\n        id,\n        connected,\n        (message, localOpMetadata) => submitFn(message, localOpMetadata),\n        dirtyFn);\n    const objectStorage = new ChannelStorageService(tree, storageService, extraBlobs);\n\n    return {\n        deltaConnection,\n        objectStorage,\n    };\n}\n\nexport function snapshotChannel(channel: IChannel) {\n    const snapshot = channel.snapshot();\n\n    // Add in the object attributes to the returned tree\n    const objectAttributes = channel.attributes;\n    snapshot.entries.push(new BlobTreeEntry(\".attributes\", JSON.stringify(objectAttributes)));\n\n    return snapshot;\n}\n"]}