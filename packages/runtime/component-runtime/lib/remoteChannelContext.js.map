{"version":3,"file":"remoteChannelContext.js","sourceRoot":"","sources":["../src/remoteChannelContext.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport assert from \"assert\";\nimport { IDocumentStorageService } from \"@fluidframework/driver-definitions\";\nimport { CreateContainerError } from \"@fluidframework/container-utils\";\nimport { readAndParse } from \"@fluidframework/driver-utils\";\nimport {\n    ISequencedDocumentMessage,\n    ISnapshotTree,\n    ITree,\n} from \"@fluidframework/protocol-definitions\";\nimport {\n    IChannel,\n    IChannelAttributes,\n    IFluidDataStoreRuntime,\n    IChannelFactory,\n} from \"@fluidframework/datastore-definitions\";\nimport {\n    IFluidDataStoreContext,\n    ISummaryTracker,\n    ISummarizeResult,\n    ISummarizerNode,\n    CreateChildSummarizerNodeFn,\n    ISummarizeInternalResult,\n} from \"@fluidframework/runtime-definitions\";\nimport { convertToSummaryTree } from \"@fluidframework/runtime-utils\";\nimport { createServiceEndpoints, IChannelContext, snapshotChannel } from \"./channelContext\";\nimport { ChannelDeltaConnection } from \"./channelDeltaConnection\";\nimport { ISharedObjectRegistry } from \"./componentRuntime\";\nimport { debug } from \"./debug\";\nimport { ChannelStorageService } from \"./channelStorageService\";\n\nexport class RemoteChannelContext implements IChannelContext {\n    private isLoaded = false;\n    private pending: ISequencedDocumentMessage[] | undefined = [];\n    private channelP: Promise<IChannel> | undefined;\n    private channel: IChannel | undefined;\n    private readonly services: {\n        readonly deltaConnection: ChannelDeltaConnection,\n        readonly objectStorage: ChannelStorageService,\n    };\n    private readonly summarizerNode: ISummarizerNode;\n    constructor(\n        private readonly runtime: IFluidDataStoreRuntime,\n        private readonly componentContext: IFluidDataStoreContext,\n        storageService: IDocumentStorageService,\n        submitFn: (content: any, localOpMetadata: unknown) => void,\n        dirtyFn: (address: string) => void,\n        private readonly id: string,\n        baseSnapshot: Promise<ISnapshotTree> | ISnapshotTree,\n        private readonly registry: ISharedObjectRegistry,\n        extraBlobs: Promise<Map<string, string>> | undefined,\n        private readonly branch: string,\n        private readonly summaryTracker: ISummaryTracker,\n        createSummarizerNode: CreateChildSummarizerNodeFn,\n        private readonly attachMessageType?: string,\n    ) {\n        this.services = createServiceEndpoints(\n            this.id,\n            this.componentContext.connected,\n            submitFn,\n            () => dirtyFn(this.id),\n            storageService,\n            Promise.resolve(baseSnapshot),\n            extraBlobs);\n        const thisSummarizeInternal = async (fullTree: boolean) => this.summarizeInternal(fullTree);\n        this.summarizerNode = createSummarizerNode(thisSummarizeInternal);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/promise-function-async\n    public getChannel(): Promise<IChannel> {\n        if (this.channelP === undefined) {\n            this.channelP = this.loadChannel();\n        }\n\n        return this.channelP;\n    }\n\n    public setConnectionState(connected: boolean, clientId?: string) {\n        // Connection events are ignored if the component is not yet loaded\n        if (!this.isLoaded) {\n            return;\n        }\n\n        this.services.deltaConnection.setConnectionState(connected);\n    }\n\n    public processOp(message: ISequencedDocumentMessage, local: boolean, localOpMetadata: unknown): void {\n        this.summaryTracker.updateLatestSequenceNumber(message.sequenceNumber);\n        this.summarizerNode.invalidate(message.sequenceNumber);\n\n        if (this.isLoaded) {\n            this.services.deltaConnection.process(message, local, localOpMetadata);\n        } else {\n            assert(!local, \"Remote channel must not be local when processing op\");\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            this.pending!.push(message);\n        }\n    }\n\n    public reSubmit(content: any, localOpMetadata: unknown) {\n        assert(this.isLoaded, \"Remote channel must be loaded when resubmitting op\");\n\n        this.services.deltaConnection.reSubmit(content, localOpMetadata);\n    }\n\n    public async snapshot(fullTree: boolean = false): Promise<ITree> {\n        if (!fullTree) {\n            const id = await this.summaryTracker.getId();\n            if (id !== undefined) {\n                return { id, entries: [] };\n            }\n        }\n\n        const channel = await this.getChannel();\n        return snapshotChannel(channel);\n    }\n\n    public async summarize(fullTree: boolean = false): Promise<ISummarizeResult> {\n        return this.summarizerNode.summarize(fullTree);\n    }\n\n    private async summarizeInternal(fullTree: boolean): Promise<ISummarizeInternalResult> {\n        const channel = await this.getChannel();\n        const snapshotTree = snapshotChannel(channel);\n        const summaryResult = convertToSummaryTree(snapshotTree, fullTree);\n        return { ...summaryResult, id: this.id };\n    }\n\n    private async loadChannel(): Promise<IChannel> {\n        assert(!this.isLoaded, \"Remote channel must not already be loaded when loading\");\n\n        let attributes: IChannelAttributes | undefined;\n        if (await this.services.objectStorage.contains(\".attributes\")) {\n            attributes = await readAndParse<IChannelAttributes | undefined>(\n                this.services.objectStorage,\n                \".attributes\");\n        }\n\n        let factory: IChannelFactory | undefined;\n        // this is a back-compat case where\n        // the attach message doesn't include\n        // the attributes. Since old attach messages\n        // will not have attributes we need to keep\n        // this as long as we support old attach messages\n        if (attributes === undefined) {\n            if (this.attachMessageType === undefined) {\n                throw new Error(\"Channel type not available\");\n            }\n            factory = this.registry.get(this.attachMessageType);\n            if (factory === undefined) {\n                throw new Error(`Channel Factory ${this.attachMessageType} for attach not registered`);\n            }\n            attributes = factory.attributes;\n        } else {\n            factory = this.registry.get(attributes.type);\n            if (factory === undefined) {\n                throw new Error(`Channel Factory ${attributes.type} not registered`);\n            }\n        }\n\n        // Compare snapshot version to collaborative object version\n        if (attributes.snapshotFormatVersion !== undefined\n            && attributes.snapshotFormatVersion !== factory.attributes.snapshotFormatVersion) {\n            debug(`Snapshot version mismatch. Type: ${attributes.type}, ` +\n                `Snapshot format@pkg version: ${attributes.snapshotFormatVersion}@${attributes.packageVersion}, ` +\n                // eslint-disable-next-line max-len\n                `client format@pkg version: ${factory.attributes.snapshotFormatVersion}@${factory.attributes.packageVersion}`);\n        }\n\n        // eslint-disable-next-line max-len\n        debug(`Loading channel ${attributes.type}@${factory.attributes.packageVersion}, snapshot format version: ${attributes.snapshotFormatVersion}`);\n\n        const channel = await factory.load(\n            this.runtime,\n            this.id,\n            this.services,\n            this.branch,\n            attributes);\n\n        // Send all pending messages to the channel\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        for (const message of this.pending!) {\n            try {\n                this.services.deltaConnection.process(message, false, undefined /* localOpMetadata */);\n            } catch (err) {\n                // record sequence number for easier debugging\n                const error = CreateContainerError(err);\n                error.sequenceNumber = message.sequenceNumber;\n                throw error;\n            }\n        }\n\n        // Commit changes.\n        this.channel = channel;\n        this.pending = undefined;\n        this.isLoaded = true;\n\n        // Because have some await between we created the service and here, the connection state might have changed\n        // and we don't propagate the connection state when we are not loaded.  So we have to set it again here.\n        this.services.deltaConnection.setConnectionState(this.componentContext.connected);\n        return this.channel;\n    }\n}\n"]}