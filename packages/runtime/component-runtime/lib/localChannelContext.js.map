{"version":3,"file":"localChannelContext.js","sourceRoot":"","sources":["../src/localChannelContext.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport assert from \"assert\";\nimport { IDocumentStorageService } from \"@fluidframework/driver-definitions\";\nimport {\n    ISequencedDocumentMessage,\n    ITree,\n} from \"@fluidframework/protocol-definitions\";\nimport { IChannel, IFluidDataStoreRuntime } from \"@fluidframework/component-runtime-definitions\";\nimport { IFluidDataStoreContext, ISummarizeResult } from \"@fluidframework/runtime-definitions\";\nimport { convertToSummaryTree } from \"@fluidframework/runtime-utils\";\nimport { createServiceEndpoints, IChannelContext, snapshotChannel } from \"./channelContext\";\nimport { ChannelDeltaConnection } from \"./channelDeltaConnection\";\nimport { ISharedObjectRegistry } from \"./componentRuntime\";\n\n/**\n * Channel context for a locally created channel\n */\nexport class LocalChannelContext implements IChannelContext {\n    public readonly channel: IChannel;\n    private attached = false;\n    private connection: ChannelDeltaConnection | undefined;\n    private readonly dirtyFn: () => void;\n\n    constructor(\n        id: string,\n        registry: ISharedObjectRegistry,\n        type: string,\n        runtime: IFluidDataStoreRuntime,\n        private readonly componentContext: IFluidDataStoreContext,\n        private readonly storageService: IDocumentStorageService,\n        private readonly submitFn: (content: any, localOpMetadata: unknown) => void,\n        dirtyFn: (address: string) => void,\n    ) {\n        const factory = registry.get(type);\n        if (factory === undefined) {\n            throw new Error(`Channel Factory ${type} not registered`);\n        }\n\n        this.channel = factory.create(runtime, id);\n\n        this.dirtyFn = () => { dirtyFn(id); };\n    }\n\n    public async getChannel(): Promise<IChannel> {\n        return this.channel;\n    }\n\n    public setConnectionState(connected: boolean, clientId?: string) {\n        // Connection events are ignored if the component is not yet attached\n        if (!this.attached) {\n            return;\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.connection!.setConnectionState(connected);\n    }\n\n    public processOp(message: ISequencedDocumentMessage, local: boolean, localOpMetadata: unknown): void {\n        assert(this.attached, \"Local channel must be attached when processing op\");\n\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.connection!.process(message, local, localOpMetadata);\n    }\n\n    public reSubmit(content: any, localOpMetadata: unknown) {\n        assert(this.attached, \"Local channel must be attached when resubmitting op\");\n\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.connection!.reSubmit(content, localOpMetadata);\n    }\n\n    public async snapshot(fullTree: boolean = false): Promise<ITree> {\n        return this.getAttachSnapshot();\n    }\n\n    public async summarize(fullTree: boolean = false): Promise<ISummarizeResult> {\n        const snapshot = this.getAttachSnapshot();\n        const summary = convertToSummaryTree(snapshot, fullTree);\n        return summary;\n    }\n\n    public getAttachSnapshot(): ITree {\n        return snapshotChannel(this.channel);\n    }\n\n    public attach(): void {\n        if (this.attached) {\n            throw new Error(\"Channel is already attached\");\n        }\n\n        const services = createServiceEndpoints(\n            this.channel.id,\n            this.componentContext.connected,\n            this.submitFn,\n            this.dirtyFn,\n            this.storageService);\n        this.connection = services.deltaConnection;\n        this.channel.connect(services);\n\n        this.attached = true;\n    }\n}\n"]}