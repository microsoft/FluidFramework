{"version":3,"file":"channelDeltaConnection.js","sourceRoot":"","sources":["../src/channelDeltaConnection.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,MAAM,MAAM,QAAQ,CAAC;AAI5B,MAAM,OAAO,sBAAsB;IAW/B,YACW,QAAgB,EACf,UAAmB,EACV,QAAuE,EACvE,OAAmB;QAH7B,aAAQ,GAAR,QAAQ,CAAQ;QACf,eAAU,GAAV,UAAU,CAAS;QACV,aAAQ,GAAR,QAAQ,CAA+D;QACvE,YAAO,GAAP,OAAO,CAAY;IACxC,CAAC;IAbD,IAAY,OAAO;QACf,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACtB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IACD,IAAW,SAAS;QAChB,OAAO,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;IASM,MAAM,CAAC,OAAsB;QAChC,MAAM,CAAC,IAAI,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC;QACpC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC5B,CAAC;IAEM,kBAAkB,CAAC,SAAkB;QACxC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;IAC/C,CAAC;IAEM,OAAO,CAAC,OAAkC,EAAE,KAAc,EAAE,eAAwB;QACvF,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,EAAE,eAAe,CAAC,CAAC;IAC1D,CAAC;IAEM,QAAQ,CAAC,OAAY,EAAE,eAAwB;QAClD,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;IACpD,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,OAAyB,EAAE,eAAwB;QAC7D,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;IAC5C,CAAC;IAED;;;OAGG;IACI,KAAK;QACR,IAAI,CAAC,OAAO,EAAE,CAAC;IACnB,CAAC;CACJ","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport assert from \"assert\";\nimport { IDocumentMessage, ISequencedDocumentMessage } from \"@fluidframework/protocol-definitions\";\nimport { IDeltaConnection, IDeltaHandler } from \"@fluidframework/datastore-definitions\";\n\nexport class ChannelDeltaConnection implements IDeltaConnection {\n    private _handler: IDeltaHandler | undefined;\n\n    private get handler(): IDeltaHandler {\n        assert(this._handler);\n        return this._handler;\n    }\n    public get connected(): boolean {\n        return this._connected;\n    }\n\n    constructor(\n        public objectId: string,\n        private _connected: boolean,\n        private readonly submitFn: (message: IDocumentMessage, localOpMetadata: unknown) => void,\n        private readonly dirtyFn: () => void) {\n    }\n\n    public attach(handler: IDeltaHandler) {\n        assert(this._handler === undefined);\n        this._handler = handler;\n    }\n\n    public setConnectionState(connected: boolean) {\n        this._connected = connected;\n        this.handler.setConnectionState(connected);\n    }\n\n    public process(message: ISequencedDocumentMessage, local: boolean, localOpMetadata: unknown) {\n        this.handler.process(message, local, localOpMetadata);\n    }\n\n    public reSubmit(content: any, localOpMetadata: unknown) {\n        this.handler.reSubmit(content, localOpMetadata);\n    }\n\n    /**\n     * Send new messages to the server\n     */\n    public submit(message: IDocumentMessage, localOpMetadata: unknown): void {\n        this.submitFn(message, localOpMetadata);\n    }\n\n    /**\n     * Indicates that the channel is dirty and needs to be part of the summary. It is called by a SharedSummaryBlock\n     * that needs to be part of the summary but does not generate ops.\n     */\n    public dirty(): void {\n        this.dirtyFn();\n    }\n}\n"]}