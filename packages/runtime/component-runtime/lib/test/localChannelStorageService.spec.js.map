{"version":3,"file":"localChannelStorageService.spec.js","sourceRoot":"","sources":["../../src/test/localChannelStorageService.spec.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAS,QAAQ,EAAE,MAAM,sCAAsC,CAAC;AACvE,OAAO,EAAE,0BAA0B,EAAE,MAAM,+BAA+B,CAAC;AAE3E,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;IACxC,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;QACxB,MAAM,IAAI,GAAU;YAChB,2CAA2C;YAC3C,EAAE,EAAE,IAAI;YACR,OAAO,EAAE,EAAE;SACd,CAAC;QAEF,MAAM,EAAE,GAAG,IAAI,0BAA0B,CAAC,IAAI,CAAC,CAAC;QAEhD,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gBAAgB,EAAE,KAAK,IAAI,EAAE;QAC5B,MAAM,IAAI,GAAU;YAChB,2CAA2C;YAC3C,EAAE,EAAE,IAAI;YACR,OAAO,EAAE;gBACL;oBACI,IAAI,EAAE,QAAQ,CAAC,IAAI;oBACnB,IAAI,EAAE,KAAK;oBACX,IAAI,EAAE,MAAM;oBACZ,KAAK,EAAE;wBACH,QAAQ,EAAE,MAAM;wBAChB,QAAQ,EAAE,KAAK;qBAClB;iBACJ;aACJ;SACJ,CAAC;QAEF,MAAM,EAAE,GAAG,IAAI,0BAA0B,CAAC,IAAI,CAAC,CAAC;QAEhD,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC;QAC7C,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;QACnD,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;QACzB,MAAM,IAAI,GAAU;YAChB,2CAA2C;YAC3C,EAAE,EAAE,IAAI;YACR,OAAO,EAAE;gBACL;oBACI,IAAI,EAAE,QAAQ,CAAC,IAAI;oBACnB,IAAI,EAAE,QAAQ;oBACd,IAAI,EAAE,MAAM;oBACZ,KAAK,EAAE;wBACH,2CAA2C;wBAC3C,EAAE,EAAE,IAAI;wBACR,OAAO,EAAE;4BACL;gCACI,IAAI,EAAE,QAAQ,CAAC,IAAI;gCACnB,IAAI,EAAE,KAAK;gCACX,IAAI,EAAE,MAAM;gCACZ,KAAK,EAAE;oCACH,QAAQ,EAAE,MAAM;oCAChB,QAAQ,EAAE,KAAK;iCAClB;6BACJ;yBACJ;qBACJ;iBACJ;aACJ;SACJ,CAAC;QACF,MAAM,EAAE,GAAG,IAAI,0BAA0B,CAAC,IAAI,CAAC,CAAC;QAEhD,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,CAAC;QACpD,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;QAC1D,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,KAAK,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport assert from \"assert\";\nimport { ITree, FileMode } from \"@fluidframework/protocol-definitions\";\nimport { LocalChannelStorageService } from \"../localChannelStorageService\";\n\ndescribe(\"LocalChannelStorageService\", () => {\n    it(\"Empty Tree\", async () => {\n        const tree: ITree = {\n            // eslint-disable-next-line no-null/no-null\n            id: null,\n            entries: [],\n        };\n\n        const ss = new LocalChannelStorageService(tree);\n\n        assert.equal(await ss.contains(\"/\"), false);\n        assert.deepEqual(await ss.list(\"\"), []);\n    });\n\n    it(\"Top Level Blob\", async () => {\n        const tree: ITree = {\n            // eslint-disable-next-line no-null/no-null\n            id: null,\n            entries: [\n                {\n                    mode: FileMode.File,\n                    path: \"foo\",\n                    type: \"Blob\",\n                    value: {\n                        encoding: \"utf8\",\n                        contents: \"bar\",\n                    },\n                },\n            ],\n        };\n\n        const ss = new LocalChannelStorageService(tree);\n\n        assert.equal(await ss.contains(\"foo\"), true);\n        assert.deepStrictEqual(await ss.list(\"\"), [\"foo\"]);\n        assert.equal(await ss.read(\"foo\"), \"bar\");\n    });\n\n    it(\"Nested Blob\", async () => {\n        const tree: ITree = {\n            // eslint-disable-next-line no-null/no-null\n            id: null,\n            entries: [\n                {\n                    mode: FileMode.File,\n                    path: \"nested\",\n                    type: \"Tree\",\n                    value: {\n                        // eslint-disable-next-line no-null/no-null\n                        id: null,\n                        entries: [\n                            {\n                                mode: FileMode.File,\n                                path: \"foo\",\n                                type: \"Blob\",\n                                value: {\n                                    encoding: \"utf8\",\n                                    contents: \"bar\",\n                                },\n                            },\n                        ],\n                    },\n                },\n            ],\n        };\n        const ss = new LocalChannelStorageService(tree);\n\n        assert.equal(await ss.contains(\"nested/foo\"), true);\n        assert.deepStrictEqual(await ss.list(\"nested/\"), [\"foo\"]);\n        assert.equal(await ss.read(\"nested/foo\"), \"bar\");\n    });\n});\n"]}