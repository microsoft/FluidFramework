{"version":3,"file":"channelStorageService.spec.js","sourceRoot":"","sources":["../../src/test/channelStorageService.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport assert from \"assert\";\nimport { ISnapshotTree } from \"@fluidframework/protocol-definitions\";\nimport { IDocumentStorageService } from \"@fluidframework/driver-definitions\";\nimport { ChannelStorageService } from \"../channelStorageService\";\n\ndescribe(\"ChannelStorageService\", () => {\n    it(\"Empty Tree\", async () => {\n        const tree: ISnapshotTree = {\n            blobs: {},\n            commits: {},\n            // eslint-disable-next-line no-null/no-null\n            id: null,\n            trees: {},\n        };\n        const storage: Pick<IDocumentStorageService, \"read\"> = {\n            read: async (id: string) => {\n                assert.fail();\n            },\n        };\n        const ss = new ChannelStorageService(Promise.resolve(tree), storage);\n\n        assert.equal(await ss.contains(\"/\"), false);\n        assert.deepEqual(await ss.list(\"\"), []);\n    });\n\n    it(\"Top Level Blob\", async () => {\n        const tree: ISnapshotTree = {\n            blobs: {\n                foo: \"bar\",\n            },\n            commits: {},\n            // eslint-disable-next-line no-null/no-null\n            id: null,\n            trees: {},\n        };\n        const storage: Pick<IDocumentStorageService, \"read\"> = {\n            read: async (id: string) => {\n                return id;\n            },\n        };\n        const ss = new ChannelStorageService(Promise.resolve(tree), storage);\n\n        assert.equal(await ss.contains(\"foo\"), true);\n        assert.deepStrictEqual(await ss.list(\"\"), [\"foo\"]);\n        assert.equal(await ss.read(\"foo\"), \"bar\");\n    });\n\n    it(\"Nested Blob\", async () => {\n        const tree: ISnapshotTree = {\n            blobs: {},\n            commits: {},\n            // eslint-disable-next-line no-null/no-null\n            id: null,\n            trees: {\n                nested: {\n                    blobs: {\n                        foo: \"bar\",\n                    },\n                    commits: {},\n                    // eslint-disable-next-line no-null/no-null\n                    id: null,\n                    trees: {},\n                },\n            },\n        };\n        const storage: Pick<IDocumentStorageService, \"read\"> = {\n            read: async (id: string) => {\n                return id;\n            },\n        };\n        const ss = new ChannelStorageService(Promise.resolve(tree), storage);\n\n        assert.equal(await ss.contains(\"nested/foo\"), true);\n        assert.deepStrictEqual(await ss.list(\"nested/\"), [\"foo\"]);\n        assert.equal(await ss.read(\"nested/foo\"), \"bar\");\n    });\n});\n"]}