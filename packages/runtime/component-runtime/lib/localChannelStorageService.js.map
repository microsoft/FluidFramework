{"version":3,"file":"localChannelStorageService.js","sourceRoot":"","sources":["../src/localChannelStorageService.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAGH,OAAO,EAAE,gBAAgB,EAAE,MAAM,8BAA8B,CAAC;AAChE,OAAO,EAAgB,SAAS,EAAE,MAAM,sCAAsC,CAAC;AAC/E,OAAO,EAAE,mBAAmB,EAAE,MAAM,+BAA+B,CAAC;AAEpE,MAAM,OAAO,0BAA0B;IACnC,YAA6B,IAAW;QAAX,SAAI,GAAJ,IAAI,CAAO;IACxC,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,IAAY;QAC1B,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACrC,OAAO,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAC5F,CAAC;IAEM,KAAK,CAAC,QAAQ,CAAC,IAAY;QAC9B,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACrC,OAAO,QAAQ,KAAK,SAAS,CAAC;IAClC,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,IAAY;QAC1B,OAAO,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAChD,CAAC;IAED;;OAEG;IACK,QAAQ,CAAC,IAAY;QACzB,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC;IAEO,gBAAgB,CAAC,IAAY,EAAE,IAAW;QAC9C,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,OAAO,EAAE;YAC9B,QAAQ,KAAK,CAAC,IAAI,EAAE;gBAChB,KAAK,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC;oBAC1B,IAAI,IAAI,KAAK,KAAK,CAAC,IAAI,EAAE;wBACrB,MAAM,IAAI,GAAG,KAAK,CAAC,KAAc,CAAC;wBAClC,OAAO,IAAI,CAAC,QAAQ,KAAK,OAAO;4BAC5B,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC;4BACjC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;qBACvB;oBACD,MAAM;gBAEV,KAAK,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC;oBAC1B,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;wBAC7B,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,KAAc,CAAC,CAAC;qBAC1F;oBACD,MAAM;gBAEV,QAAQ;aACX;SACJ;QAED,OAAO,SAAS,CAAC;IACrB,CAAC;CACJ","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { IChannelStorageService } from \"@fluidframework/datastore-definitions\";\nimport { fromUtf8ToBase64 } from \"@fluidframework/common-utils\";\nimport { IBlob, ITree, TreeEntry } from \"@fluidframework/protocol-definitions\";\nimport { listBlobsAtTreePath } from \"@fluidframework/runtime-utils\";\n\nexport class LocalChannelStorageService implements IChannelStorageService {\n    constructor(private readonly tree: ITree) {\n    }\n\n    public async read(path: string): Promise<string> {\n        const contents = this.readSync(path);\n        return contents !== undefined ? Promise.resolve(contents) : Promise.reject(\"Not found\");\n    }\n\n    public async contains(path: string): Promise<boolean> {\n        const contents = this.readSync(path);\n        return contents !== undefined;\n    }\n\n    public async list(path: string): Promise<string[]> {\n        return listBlobsAtTreePath(this.tree, path);\n    }\n\n    /**\n     * Provides a synchronous access point to locally stored data\n     */\n    private readSync(path: string): string | undefined {\n        return this.readSyncInternal(path, this.tree);\n    }\n\n    private readSyncInternal(path: string, tree: ITree): string | undefined {\n        for (const entry of tree.entries) {\n            switch (entry.type) {\n                case TreeEntry[TreeEntry.Blob]:\n                    if (path === entry.path) {\n                        const blob = entry.value as IBlob;\n                        return blob.encoding === \"utf-8\"\n                            ? fromUtf8ToBase64(blob.contents)\n                            : blob.contents;\n                    }\n                    break;\n\n                case TreeEntry[TreeEntry.Tree]:\n                    if (path.startsWith(entry.path)) {\n                        return this.readSyncInternal(path.substr(entry.path.length + 1), entry.value as ITree);\n                    }\n                    break;\n\n                default:\n            }\n        }\n\n        return undefined;\n    }\n}\n"]}