/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/odsp-driver-previous/internal";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "EnumDeclaration_ClpCompliantAppHeader": {"forwardCompat": false}
 */
declare function get_old_EnumDeclaration_ClpCompliantAppHeader():
    TypeOnly<old.ClpCompliantAppHeader>;
declare function use_current_EnumDeclaration_ClpCompliantAppHeader(
    use: TypeOnly<current.ClpCompliantAppHeader>): void;
use_current_EnumDeclaration_ClpCompliantAppHeader(
    get_old_EnumDeclaration_ClpCompliantAppHeader());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "EnumDeclaration_ClpCompliantAppHeader": {"backCompat": false}
 */
declare function get_current_EnumDeclaration_ClpCompliantAppHeader():
    TypeOnly<current.ClpCompliantAppHeader>;
declare function use_old_EnumDeclaration_ClpCompliantAppHeader(
    use: TypeOnly<old.ClpCompliantAppHeader>): void;
use_old_EnumDeclaration_ClpCompliantAppHeader(
    get_current_EnumDeclaration_ClpCompliantAppHeader());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_EpochTracker": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_EpochTracker():
    TypeOnly<old.EpochTracker>;
declare function use_current_ClassDeclaration_EpochTracker(
    use: TypeOnly<current.EpochTracker>): void;
use_current_ClassDeclaration_EpochTracker(
    get_old_ClassDeclaration_EpochTracker());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_EpochTracker": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_EpochTracker():
    TypeOnly<current.EpochTracker>;
declare function use_old_ClassDeclaration_EpochTracker(
    use: TypeOnly<old.EpochTracker>): void;
use_old_ClassDeclaration_EpochTracker(
    get_current_ClassDeclaration_EpochTracker());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_FetchType": {"forwardCompat": false}
 */
declare function get_old_TypeAliasDeclaration_FetchType():
    TypeOnly<old.FetchType>;
declare function use_current_TypeAliasDeclaration_FetchType(
    use: TypeOnly<current.FetchType>): void;
use_current_TypeAliasDeclaration_FetchType(
    get_old_TypeAliasDeclaration_FetchType());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_FetchType": {"backCompat": false}
 */
declare function get_current_TypeAliasDeclaration_FetchType():
    TypeOnly<current.FetchType>;
declare function use_old_TypeAliasDeclaration_FetchType(
    use: TypeOnly<old.FetchType>): void;
use_old_TypeAliasDeclaration_FetchType(
    get_current_TypeAliasDeclaration_FetchType());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_FetchTypeInternal": {"forwardCompat": false}
 */
declare function get_old_TypeAliasDeclaration_FetchTypeInternal():
    TypeOnly<old.FetchTypeInternal>;
declare function use_current_TypeAliasDeclaration_FetchTypeInternal(
    use: TypeOnly<current.FetchTypeInternal>): void;
use_current_TypeAliasDeclaration_FetchTypeInternal(
    get_old_TypeAliasDeclaration_FetchTypeInternal());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_FetchTypeInternal": {"backCompat": false}
 */
declare function get_current_TypeAliasDeclaration_FetchTypeInternal():
    TypeOnly<current.FetchTypeInternal>;
declare function use_old_TypeAliasDeclaration_FetchTypeInternal(
    use: TypeOnly<old.FetchTypeInternal>): void;
use_old_TypeAliasDeclaration_FetchTypeInternal(
    get_current_TypeAliasDeclaration_FetchTypeInternal());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ICacheAndTracker": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_ICacheAndTracker():
    TypeOnly<old.ICacheAndTracker>;
declare function use_current_InterfaceDeclaration_ICacheAndTracker(
    use: TypeOnly<current.ICacheAndTracker>): void;
use_current_InterfaceDeclaration_ICacheAndTracker(
    get_old_InterfaceDeclaration_ICacheAndTracker());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ICacheAndTracker": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_ICacheAndTracker():
    TypeOnly<current.ICacheAndTracker>;
declare function use_old_InterfaceDeclaration_ICacheAndTracker(
    use: TypeOnly<old.ICacheAndTracker>): void;
use_old_InterfaceDeclaration_ICacheAndTracker(
    get_current_InterfaceDeclaration_ICacheAndTracker());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IClpCompliantAppHeader": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IClpCompliantAppHeader():
    TypeOnly<old.IClpCompliantAppHeader>;
declare function use_current_InterfaceDeclaration_IClpCompliantAppHeader(
    use: TypeOnly<current.IClpCompliantAppHeader>): void;
use_current_InterfaceDeclaration_IClpCompliantAppHeader(
    get_old_InterfaceDeclaration_IClpCompliantAppHeader());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IClpCompliantAppHeader": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IClpCompliantAppHeader():
    TypeOnly<current.IClpCompliantAppHeader>;
declare function use_old_InterfaceDeclaration_IClpCompliantAppHeader(
    use: TypeOnly<old.IClpCompliantAppHeader>): void;
use_old_InterfaceDeclaration_IClpCompliantAppHeader(
    get_current_InterfaceDeclaration_IClpCompliantAppHeader());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_INonPersistentCache": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_INonPersistentCache():
    TypeOnly<old.INonPersistentCache>;
declare function use_current_InterfaceDeclaration_INonPersistentCache(
    use: TypeOnly<current.INonPersistentCache>): void;
use_current_InterfaceDeclaration_INonPersistentCache(
    get_old_InterfaceDeclaration_INonPersistentCache());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_INonPersistentCache": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_INonPersistentCache():
    TypeOnly<current.INonPersistentCache>;
declare function use_old_InterfaceDeclaration_INonPersistentCache(
    use: TypeOnly<old.INonPersistentCache>): void;
use_old_InterfaceDeclaration_INonPersistentCache(
    get_current_InterfaceDeclaration_INonPersistentCache());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IOdspCache": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IOdspCache():
    TypeOnly<old.IOdspCache>;
declare function use_current_InterfaceDeclaration_IOdspCache(
    use: TypeOnly<current.IOdspCache>): void;
use_current_InterfaceDeclaration_IOdspCache(
    get_old_InterfaceDeclaration_IOdspCache());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IOdspCache": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IOdspCache():
    TypeOnly<current.IOdspCache>;
declare function use_old_InterfaceDeclaration_IOdspCache(
    use: TypeOnly<old.IOdspCache>): void;
use_old_InterfaceDeclaration_IOdspCache(
    get_current_InterfaceDeclaration_IOdspCache());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IOdspResponse": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IOdspResponse():
    TypeOnly<old.IOdspResponse<any>>;
declare function use_current_InterfaceDeclaration_IOdspResponse(
    use: TypeOnly<current.IOdspResponse<any>>): void;
use_current_InterfaceDeclaration_IOdspResponse(
    get_old_InterfaceDeclaration_IOdspResponse());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IOdspResponse": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IOdspResponse():
    TypeOnly<current.IOdspResponse<any>>;
declare function use_old_InterfaceDeclaration_IOdspResponse(
    use: TypeOnly<old.IOdspResponse<any>>): void;
use_old_InterfaceDeclaration_IOdspResponse(
    get_current_InterfaceDeclaration_IOdspResponse());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IPersistedFileCache": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IPersistedFileCache():
    TypeOnly<old.IPersistedFileCache>;
declare function use_current_InterfaceDeclaration_IPersistedFileCache(
    use: TypeOnly<current.IPersistedFileCache>): void;
use_current_InterfaceDeclaration_IPersistedFileCache(
    get_old_InterfaceDeclaration_IPersistedFileCache());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IPersistedFileCache": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IPersistedFileCache():
    TypeOnly<current.IPersistedFileCache>;
declare function use_old_InterfaceDeclaration_IPersistedFileCache(
    use: TypeOnly<old.IPersistedFileCache>): void;
use_old_InterfaceDeclaration_IPersistedFileCache(
    get_current_InterfaceDeclaration_IPersistedFileCache());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IPrefetchSnapshotContents": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IPrefetchSnapshotContents():
    TypeOnly<old.IPrefetchSnapshotContents>;
declare function use_current_InterfaceDeclaration_IPrefetchSnapshotContents(
    use: TypeOnly<current.IPrefetchSnapshotContents>): void;
use_current_InterfaceDeclaration_IPrefetchSnapshotContents(
    get_old_InterfaceDeclaration_IPrefetchSnapshotContents());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IPrefetchSnapshotContents": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IPrefetchSnapshotContents():
    TypeOnly<current.IPrefetchSnapshotContents>;
declare function use_old_InterfaceDeclaration_IPrefetchSnapshotContents(
    use: TypeOnly<old.IPrefetchSnapshotContents>): void;
use_old_InterfaceDeclaration_IPrefetchSnapshotContents(
    get_current_InterfaceDeclaration_IPrefetchSnapshotContents());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISharingLinkHeader": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_ISharingLinkHeader():
    TypeOnly<old.ISharingLinkHeader>;
declare function use_current_InterfaceDeclaration_ISharingLinkHeader(
    use: TypeOnly<current.ISharingLinkHeader>): void;
use_current_InterfaceDeclaration_ISharingLinkHeader(
    get_old_InterfaceDeclaration_ISharingLinkHeader());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISharingLinkHeader": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_ISharingLinkHeader():
    TypeOnly<current.ISharingLinkHeader>;
declare function use_old_InterfaceDeclaration_ISharingLinkHeader(
    use: TypeOnly<old.ISharingLinkHeader>): void;
use_old_InterfaceDeclaration_ISharingLinkHeader(
    get_current_InterfaceDeclaration_ISharingLinkHeader());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISnapshotContents": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_ISnapshotContents():
    TypeOnly<old.ISnapshotContents>;
declare function use_current_InterfaceDeclaration_ISnapshotContents(
    use: TypeOnly<current.ISnapshotContents>): void;
use_current_InterfaceDeclaration_ISnapshotContents(
    get_old_InterfaceDeclaration_ISnapshotContents());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISnapshotContents": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_ISnapshotContents():
    TypeOnly<current.ISnapshotContents>;
declare function use_old_InterfaceDeclaration_ISnapshotContents(
    use: TypeOnly<old.ISnapshotContents>): void;
use_old_InterfaceDeclaration_ISnapshotContents(
    get_current_InterfaceDeclaration_ISnapshotContents());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISnapshotContentsWithProps": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_ISnapshotContentsWithProps():
    TypeOnly<old.ISnapshotContentsWithProps>;
declare function use_current_InterfaceDeclaration_ISnapshotContentsWithProps(
    use: TypeOnly<current.ISnapshotContentsWithProps>): void;
use_current_InterfaceDeclaration_ISnapshotContentsWithProps(
    get_old_InterfaceDeclaration_ISnapshotContentsWithProps());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISnapshotContentsWithProps": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_ISnapshotContentsWithProps():
    TypeOnly<current.ISnapshotContentsWithProps>;
declare function use_old_InterfaceDeclaration_ISnapshotContentsWithProps(
    use: TypeOnly<old.ISnapshotContentsWithProps>): void;
use_old_InterfaceDeclaration_ISnapshotContentsWithProps(
    get_current_InterfaceDeclaration_ISnapshotContentsWithProps());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_OdcApiSiteOrigin": {"forwardCompat": false}
 */
declare function get_old_VariableDeclaration_OdcApiSiteOrigin():
    TypeOnly<typeof old.OdcApiSiteOrigin>;
declare function use_current_VariableDeclaration_OdcApiSiteOrigin(
    use: TypeOnly<typeof current.OdcApiSiteOrigin>): void;
use_current_VariableDeclaration_OdcApiSiteOrigin(
    get_old_VariableDeclaration_OdcApiSiteOrigin());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_OdcApiSiteOrigin": {"backCompat": false}
 */
declare function get_current_VariableDeclaration_OdcApiSiteOrigin():
    TypeOnly<typeof current.OdcApiSiteOrigin>;
declare function use_old_VariableDeclaration_OdcApiSiteOrigin(
    use: TypeOnly<typeof old.OdcApiSiteOrigin>): void;
use_old_VariableDeclaration_OdcApiSiteOrigin(
    get_current_VariableDeclaration_OdcApiSiteOrigin());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_OdcFileSiteOrigin": {"forwardCompat": false}
 */
declare function get_old_VariableDeclaration_OdcFileSiteOrigin():
    TypeOnly<typeof old.OdcFileSiteOrigin>;
declare function use_current_VariableDeclaration_OdcFileSiteOrigin(
    use: TypeOnly<typeof current.OdcFileSiteOrigin>): void;
use_current_VariableDeclaration_OdcFileSiteOrigin(
    get_old_VariableDeclaration_OdcFileSiteOrigin());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_OdcFileSiteOrigin": {"backCompat": false}
 */
declare function get_current_VariableDeclaration_OdcFileSiteOrigin():
    TypeOnly<typeof current.OdcFileSiteOrigin>;
declare function use_old_VariableDeclaration_OdcFileSiteOrigin(
    use: TypeOnly<typeof old.OdcFileSiteOrigin>): void;
use_old_VariableDeclaration_OdcFileSiteOrigin(
    get_current_VariableDeclaration_OdcFileSiteOrigin());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_OdspDocumentServiceFactory": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_OdspDocumentServiceFactory():
    TypeOnly<old.OdspDocumentServiceFactory>;
declare function use_current_ClassDeclaration_OdspDocumentServiceFactory(
    use: TypeOnly<current.OdspDocumentServiceFactory>): void;
use_current_ClassDeclaration_OdspDocumentServiceFactory(
    get_old_ClassDeclaration_OdspDocumentServiceFactory());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_OdspDocumentServiceFactory": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_OdspDocumentServiceFactory():
    TypeOnly<current.OdspDocumentServiceFactory>;
declare function use_old_ClassDeclaration_OdspDocumentServiceFactory(
    use: TypeOnly<old.OdspDocumentServiceFactory>): void;
use_old_ClassDeclaration_OdspDocumentServiceFactory(
    get_current_ClassDeclaration_OdspDocumentServiceFactory());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_OdspDocumentServiceFactoryCore": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_OdspDocumentServiceFactoryCore():
    TypeOnly<old.OdspDocumentServiceFactoryCore>;
declare function use_current_ClassDeclaration_OdspDocumentServiceFactoryCore(
    use: TypeOnly<current.OdspDocumentServiceFactoryCore>): void;
use_current_ClassDeclaration_OdspDocumentServiceFactoryCore(
    get_old_ClassDeclaration_OdspDocumentServiceFactoryCore());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_OdspDocumentServiceFactoryCore": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_OdspDocumentServiceFactoryCore():
    TypeOnly<current.OdspDocumentServiceFactoryCore>;
declare function use_old_ClassDeclaration_OdspDocumentServiceFactoryCore(
    use: TypeOnly<old.OdspDocumentServiceFactoryCore>): void;
use_old_ClassDeclaration_OdspDocumentServiceFactoryCore(
    get_current_ClassDeclaration_OdspDocumentServiceFactoryCore());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_OdspDocumentServiceFactoryWithCodeSplit": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_OdspDocumentServiceFactoryWithCodeSplit():
    TypeOnly<old.OdspDocumentServiceFactoryWithCodeSplit>;
declare function use_current_ClassDeclaration_OdspDocumentServiceFactoryWithCodeSplit(
    use: TypeOnly<current.OdspDocumentServiceFactoryWithCodeSplit>): void;
use_current_ClassDeclaration_OdspDocumentServiceFactoryWithCodeSplit(
    get_old_ClassDeclaration_OdspDocumentServiceFactoryWithCodeSplit());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_OdspDocumentServiceFactoryWithCodeSplit": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_OdspDocumentServiceFactoryWithCodeSplit():
    TypeOnly<current.OdspDocumentServiceFactoryWithCodeSplit>;
declare function use_old_ClassDeclaration_OdspDocumentServiceFactoryWithCodeSplit(
    use: TypeOnly<old.OdspDocumentServiceFactoryWithCodeSplit>): void;
use_old_ClassDeclaration_OdspDocumentServiceFactoryWithCodeSplit(
    get_current_ClassDeclaration_OdspDocumentServiceFactoryWithCodeSplit());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_OdspDriverUrlResolver": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_OdspDriverUrlResolver():
    TypeOnly<old.OdspDriverUrlResolver>;
declare function use_current_ClassDeclaration_OdspDriverUrlResolver(
    use: TypeOnly<current.OdspDriverUrlResolver>): void;
use_current_ClassDeclaration_OdspDriverUrlResolver(
    get_old_ClassDeclaration_OdspDriverUrlResolver());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_OdspDriverUrlResolver": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_OdspDriverUrlResolver():
    TypeOnly<current.OdspDriverUrlResolver>;
declare function use_old_ClassDeclaration_OdspDriverUrlResolver(
    use: TypeOnly<old.OdspDriverUrlResolver>): void;
use_old_ClassDeclaration_OdspDriverUrlResolver(
    get_current_ClassDeclaration_OdspDriverUrlResolver());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_OdspDriverUrlResolverForShareLink": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_OdspDriverUrlResolverForShareLink():
    TypeOnly<old.OdspDriverUrlResolverForShareLink>;
declare function use_current_ClassDeclaration_OdspDriverUrlResolverForShareLink(
    use: TypeOnly<current.OdspDriverUrlResolverForShareLink>): void;
use_current_ClassDeclaration_OdspDriverUrlResolverForShareLink(
    get_old_ClassDeclaration_OdspDriverUrlResolverForShareLink());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_OdspDriverUrlResolverForShareLink": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_OdspDriverUrlResolverForShareLink():
    TypeOnly<current.OdspDriverUrlResolverForShareLink>;
declare function use_old_ClassDeclaration_OdspDriverUrlResolverForShareLink(
    use: TypeOnly<old.OdspDriverUrlResolverForShareLink>): void;
use_old_ClassDeclaration_OdspDriverUrlResolverForShareLink(
    get_current_ClassDeclaration_OdspDriverUrlResolverForShareLink());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_OdspFluidDataStoreLocator": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_OdspFluidDataStoreLocator():
    TypeOnly<old.OdspFluidDataStoreLocator>;
declare function use_current_InterfaceDeclaration_OdspFluidDataStoreLocator(
    use: TypeOnly<current.OdspFluidDataStoreLocator>): void;
use_current_InterfaceDeclaration_OdspFluidDataStoreLocator(
    get_old_InterfaceDeclaration_OdspFluidDataStoreLocator());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_OdspFluidDataStoreLocator": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_OdspFluidDataStoreLocator():
    TypeOnly<current.OdspFluidDataStoreLocator>;
declare function use_old_InterfaceDeclaration_OdspFluidDataStoreLocator(
    use: TypeOnly<old.OdspFluidDataStoreLocator>): void;
use_old_InterfaceDeclaration_OdspFluidDataStoreLocator(
    get_current_InterfaceDeclaration_OdspFluidDataStoreLocator());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ShareLinkFetcherProps": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_ShareLinkFetcherProps():
    TypeOnly<old.ShareLinkFetcherProps>;
declare function use_current_InterfaceDeclaration_ShareLinkFetcherProps(
    use: TypeOnly<current.ShareLinkFetcherProps>): void;
use_current_InterfaceDeclaration_ShareLinkFetcherProps(
    get_old_InterfaceDeclaration_ShareLinkFetcherProps());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ShareLinkFetcherProps": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_ShareLinkFetcherProps():
    TypeOnly<current.ShareLinkFetcherProps>;
declare function use_old_InterfaceDeclaration_ShareLinkFetcherProps(
    use: TypeOnly<old.ShareLinkFetcherProps>): void;
use_old_InterfaceDeclaration_ShareLinkFetcherProps(
    get_current_InterfaceDeclaration_ShareLinkFetcherProps());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "EnumDeclaration_SharingLinkHeader": {"forwardCompat": false}
 */
declare function get_old_EnumDeclaration_SharingLinkHeader():
    TypeOnly<old.SharingLinkHeader>;
declare function use_current_EnumDeclaration_SharingLinkHeader(
    use: TypeOnly<current.SharingLinkHeader>): void;
use_current_EnumDeclaration_SharingLinkHeader(
    get_old_EnumDeclaration_SharingLinkHeader());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "EnumDeclaration_SharingLinkHeader": {"backCompat": false}
 */
declare function get_current_EnumDeclaration_SharingLinkHeader():
    TypeOnly<current.SharingLinkHeader>;
declare function use_old_EnumDeclaration_SharingLinkHeader(
    use: TypeOnly<old.SharingLinkHeader>): void;
use_old_EnumDeclaration_SharingLinkHeader(
    get_current_EnumDeclaration_SharingLinkHeader());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "EnumDeclaration_SnapshotFormatSupportType": {"forwardCompat": false}
 */
declare function get_old_EnumDeclaration_SnapshotFormatSupportType():
    TypeOnly<old.SnapshotFormatSupportType>;
declare function use_current_EnumDeclaration_SnapshotFormatSupportType(
    use: TypeOnly<current.SnapshotFormatSupportType>): void;
use_current_EnumDeclaration_SnapshotFormatSupportType(
    get_old_EnumDeclaration_SnapshotFormatSupportType());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "EnumDeclaration_SnapshotFormatSupportType": {"backCompat": false}
 */
declare function get_current_EnumDeclaration_SnapshotFormatSupportType():
    TypeOnly<current.SnapshotFormatSupportType>;
declare function use_old_EnumDeclaration_SnapshotFormatSupportType(
    use: TypeOnly<old.SnapshotFormatSupportType>): void;
use_old_EnumDeclaration_SnapshotFormatSupportType(
    get_current_EnumDeclaration_SnapshotFormatSupportType());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_checkUrl": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_checkUrl():
    TypeOnly<typeof old.checkUrl>;
declare function use_current_FunctionDeclaration_checkUrl(
    use: TypeOnly<typeof current.checkUrl>): void;
use_current_FunctionDeclaration_checkUrl(
    get_old_FunctionDeclaration_checkUrl());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_checkUrl": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_checkUrl():
    TypeOnly<typeof current.checkUrl>;
declare function use_old_FunctionDeclaration_checkUrl(
    use: TypeOnly<typeof old.checkUrl>): void;
use_old_FunctionDeclaration_checkUrl(
    get_current_FunctionDeclaration_checkUrl());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_createLocalOdspDocumentServiceFactory": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_createLocalOdspDocumentServiceFactory():
    TypeOnly<typeof old.createLocalOdspDocumentServiceFactory>;
declare function use_current_FunctionDeclaration_createLocalOdspDocumentServiceFactory(
    use: TypeOnly<typeof current.createLocalOdspDocumentServiceFactory>): void;
use_current_FunctionDeclaration_createLocalOdspDocumentServiceFactory(
    get_old_FunctionDeclaration_createLocalOdspDocumentServiceFactory());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_createLocalOdspDocumentServiceFactory": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_createLocalOdspDocumentServiceFactory():
    TypeOnly<typeof current.createLocalOdspDocumentServiceFactory>;
declare function use_old_FunctionDeclaration_createLocalOdspDocumentServiceFactory(
    use: TypeOnly<typeof old.createLocalOdspDocumentServiceFactory>): void;
use_old_FunctionDeclaration_createLocalOdspDocumentServiceFactory(
    get_current_FunctionDeclaration_createLocalOdspDocumentServiceFactory());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_createOdspCreateContainerRequest": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_createOdspCreateContainerRequest():
    TypeOnly<typeof old.createOdspCreateContainerRequest>;
declare function use_current_FunctionDeclaration_createOdspCreateContainerRequest(
    use: TypeOnly<typeof current.createOdspCreateContainerRequest>): void;
use_current_FunctionDeclaration_createOdspCreateContainerRequest(
    get_old_FunctionDeclaration_createOdspCreateContainerRequest());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_createOdspCreateContainerRequest": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_createOdspCreateContainerRequest():
    TypeOnly<typeof current.createOdspCreateContainerRequest>;
declare function use_old_FunctionDeclaration_createOdspCreateContainerRequest(
    use: TypeOnly<typeof old.createOdspCreateContainerRequest>): void;
use_old_FunctionDeclaration_createOdspCreateContainerRequest(
    get_current_FunctionDeclaration_createOdspCreateContainerRequest());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_createOdspUrl": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_createOdspUrl():
    TypeOnly<typeof old.createOdspUrl>;
declare function use_current_FunctionDeclaration_createOdspUrl(
    use: TypeOnly<typeof current.createOdspUrl>): void;
use_current_FunctionDeclaration_createOdspUrl(
    get_old_FunctionDeclaration_createOdspUrl());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_createOdspUrl": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_createOdspUrl():
    TypeOnly<typeof current.createOdspUrl>;
declare function use_old_FunctionDeclaration_createOdspUrl(
    use: TypeOnly<typeof old.createOdspUrl>): void;
use_old_FunctionDeclaration_createOdspUrl(
    get_current_FunctionDeclaration_createOdspUrl());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_encodeOdspFluidDataStoreLocator": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_encodeOdspFluidDataStoreLocator():
    TypeOnly<typeof old.encodeOdspFluidDataStoreLocator>;
declare function use_current_FunctionDeclaration_encodeOdspFluidDataStoreLocator(
    use: TypeOnly<typeof current.encodeOdspFluidDataStoreLocator>): void;
use_current_FunctionDeclaration_encodeOdspFluidDataStoreLocator(
    get_old_FunctionDeclaration_encodeOdspFluidDataStoreLocator());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_encodeOdspFluidDataStoreLocator": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_encodeOdspFluidDataStoreLocator():
    TypeOnly<typeof current.encodeOdspFluidDataStoreLocator>;
declare function use_old_FunctionDeclaration_encodeOdspFluidDataStoreLocator(
    use: TypeOnly<typeof old.encodeOdspFluidDataStoreLocator>): void;
use_old_FunctionDeclaration_encodeOdspFluidDataStoreLocator(
    get_current_FunctionDeclaration_encodeOdspFluidDataStoreLocator());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_getHashedDocumentId": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_getHashedDocumentId():
    TypeOnly<typeof old.getHashedDocumentId>;
declare function use_current_FunctionDeclaration_getHashedDocumentId(
    use: TypeOnly<typeof current.getHashedDocumentId>): void;
use_current_FunctionDeclaration_getHashedDocumentId(
    get_old_FunctionDeclaration_getHashedDocumentId());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_getHashedDocumentId": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_getHashedDocumentId():
    TypeOnly<typeof current.getHashedDocumentId>;
declare function use_old_FunctionDeclaration_getHashedDocumentId(
    use: TypeOnly<typeof old.getHashedDocumentId>): void;
use_old_FunctionDeclaration_getHashedDocumentId(
    get_current_FunctionDeclaration_getHashedDocumentId());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_getLocatorFromOdspUrl": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_getLocatorFromOdspUrl():
    TypeOnly<typeof old.getLocatorFromOdspUrl>;
declare function use_current_FunctionDeclaration_getLocatorFromOdspUrl(
    use: TypeOnly<typeof current.getLocatorFromOdspUrl>): void;
use_current_FunctionDeclaration_getLocatorFromOdspUrl(
    get_old_FunctionDeclaration_getLocatorFromOdspUrl());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_getLocatorFromOdspUrl": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_getLocatorFromOdspUrl():
    TypeOnly<typeof current.getLocatorFromOdspUrl>;
declare function use_old_FunctionDeclaration_getLocatorFromOdspUrl(
    use: TypeOnly<typeof old.getLocatorFromOdspUrl>): void;
use_old_FunctionDeclaration_getLocatorFromOdspUrl(
    get_current_FunctionDeclaration_getLocatorFromOdspUrl());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_getOdspUrlParts": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_getOdspUrlParts():
    TypeOnly<typeof old.getOdspUrlParts>;
declare function use_current_FunctionDeclaration_getOdspUrlParts(
    use: TypeOnly<typeof current.getOdspUrlParts>): void;
use_current_FunctionDeclaration_getOdspUrlParts(
    get_old_FunctionDeclaration_getOdspUrlParts());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_getOdspUrlParts": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_getOdspUrlParts():
    TypeOnly<typeof current.getOdspUrlParts>;
declare function use_old_FunctionDeclaration_getOdspUrlParts(
    use: TypeOnly<typeof old.getOdspUrlParts>): void;
use_old_FunctionDeclaration_getOdspUrlParts(
    get_current_FunctionDeclaration_getOdspUrlParts());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_isOdcUrl": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_isOdcUrl():
    TypeOnly<typeof old.isOdcUrl>;
declare function use_current_FunctionDeclaration_isOdcUrl(
    use: TypeOnly<typeof current.isOdcUrl>): void;
use_current_FunctionDeclaration_isOdcUrl(
    get_old_FunctionDeclaration_isOdcUrl());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_isOdcUrl": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_isOdcUrl():
    TypeOnly<typeof current.isOdcUrl>;
declare function use_old_FunctionDeclaration_isOdcUrl(
    use: TypeOnly<typeof old.isOdcUrl>): void;
use_old_FunctionDeclaration_isOdcUrl(
    get_current_FunctionDeclaration_isOdcUrl());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_isOdspResolvedUrl": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_isOdspResolvedUrl():
    TypeOnly<typeof old.isOdspResolvedUrl>;
declare function use_current_FunctionDeclaration_isOdspResolvedUrl(
    use: TypeOnly<typeof current.isOdspResolvedUrl>): void;
use_current_FunctionDeclaration_isOdspResolvedUrl(
    get_old_FunctionDeclaration_isOdspResolvedUrl());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_isOdspResolvedUrl": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_isOdspResolvedUrl():
    TypeOnly<typeof current.isOdspResolvedUrl>;
declare function use_old_FunctionDeclaration_isOdspResolvedUrl(
    use: TypeOnly<typeof old.isOdspResolvedUrl>): void;
use_old_FunctionDeclaration_isOdspResolvedUrl(
    get_current_FunctionDeclaration_isOdspResolvedUrl());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_isSpoUrl": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_isSpoUrl():
    TypeOnly<typeof old.isSpoUrl>;
declare function use_current_FunctionDeclaration_isSpoUrl(
    use: TypeOnly<typeof current.isSpoUrl>): void;
use_current_FunctionDeclaration_isSpoUrl(
    get_old_FunctionDeclaration_isSpoUrl());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_isSpoUrl": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_isSpoUrl():
    TypeOnly<typeof current.isSpoUrl>;
declare function use_old_FunctionDeclaration_isSpoUrl(
    use: TypeOnly<typeof old.isSpoUrl>): void;
use_old_FunctionDeclaration_isSpoUrl(
    get_current_FunctionDeclaration_isSpoUrl());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_locatorQueryParamName": {"forwardCompat": false}
 */
declare function get_old_VariableDeclaration_locatorQueryParamName():
    TypeOnly<typeof old.locatorQueryParamName>;
declare function use_current_VariableDeclaration_locatorQueryParamName(
    use: TypeOnly<typeof current.locatorQueryParamName>): void;
use_current_VariableDeclaration_locatorQueryParamName(
    get_old_VariableDeclaration_locatorQueryParamName());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_locatorQueryParamName": {"backCompat": false}
 */
declare function get_current_VariableDeclaration_locatorQueryParamName():
    TypeOnly<typeof current.locatorQueryParamName>;
declare function use_old_VariableDeclaration_locatorQueryParamName(
    use: TypeOnly<typeof old.locatorQueryParamName>): void;
use_old_VariableDeclaration_locatorQueryParamName(
    get_current_VariableDeclaration_locatorQueryParamName());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_parseCompactSnapshotResponse": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_parseCompactSnapshotResponse():
    TypeOnly<typeof old.parseCompactSnapshotResponse>;
declare function use_current_FunctionDeclaration_parseCompactSnapshotResponse(
    use: TypeOnly<typeof current.parseCompactSnapshotResponse>): void;
use_current_FunctionDeclaration_parseCompactSnapshotResponse(
    get_old_FunctionDeclaration_parseCompactSnapshotResponse());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_parseCompactSnapshotResponse": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_parseCompactSnapshotResponse():
    TypeOnly<typeof current.parseCompactSnapshotResponse>;
declare function use_old_FunctionDeclaration_parseCompactSnapshotResponse(
    use: TypeOnly<typeof old.parseCompactSnapshotResponse>): void;
use_old_FunctionDeclaration_parseCompactSnapshotResponse(
    get_current_FunctionDeclaration_parseCompactSnapshotResponse());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_prefetchLatestSnapshot": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_prefetchLatestSnapshot():
    TypeOnly<typeof old.prefetchLatestSnapshot>;
declare function use_current_FunctionDeclaration_prefetchLatestSnapshot(
    use: TypeOnly<typeof current.prefetchLatestSnapshot>): void;
use_current_FunctionDeclaration_prefetchLatestSnapshot(
    get_old_FunctionDeclaration_prefetchLatestSnapshot());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_prefetchLatestSnapshot": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_prefetchLatestSnapshot():
    TypeOnly<typeof current.prefetchLatestSnapshot>;
declare function use_old_FunctionDeclaration_prefetchLatestSnapshot(
    use: TypeOnly<typeof old.prefetchLatestSnapshot>): void;
use_old_FunctionDeclaration_prefetchLatestSnapshot(
    get_current_FunctionDeclaration_prefetchLatestSnapshot());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_storeLocatorInOdspUrl": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_storeLocatorInOdspUrl():
    TypeOnly<typeof old.storeLocatorInOdspUrl>;
declare function use_current_FunctionDeclaration_storeLocatorInOdspUrl(
    use: TypeOnly<typeof current.storeLocatorInOdspUrl>): void;
use_current_FunctionDeclaration_storeLocatorInOdspUrl(
    get_old_FunctionDeclaration_storeLocatorInOdspUrl());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_storeLocatorInOdspUrl": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_storeLocatorInOdspUrl():
    TypeOnly<typeof current.storeLocatorInOdspUrl>;
declare function use_old_FunctionDeclaration_storeLocatorInOdspUrl(
    use: TypeOnly<typeof old.storeLocatorInOdspUrl>): void;
use_old_FunctionDeclaration_storeLocatorInOdspUrl(
    get_current_FunctionDeclaration_storeLocatorInOdspUrl());
