/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/odsp-urlresolver-previous/internal";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_FluidAppOdspUrlResolver": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_FluidAppOdspUrlResolver():
    TypeOnly<old.FluidAppOdspUrlResolver>;
declare function use_current_ClassDeclaration_FluidAppOdspUrlResolver(
    use: TypeOnly<current.FluidAppOdspUrlResolver>): void;
use_current_ClassDeclaration_FluidAppOdspUrlResolver(
    get_old_ClassDeclaration_FluidAppOdspUrlResolver());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_FluidAppOdspUrlResolver": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_FluidAppOdspUrlResolver():
    TypeOnly<current.FluidAppOdspUrlResolver>;
declare function use_old_ClassDeclaration_FluidAppOdspUrlResolver(
    use: TypeOnly<old.FluidAppOdspUrlResolver>): void;
use_old_ClassDeclaration_FluidAppOdspUrlResolver(
    get_current_ClassDeclaration_FluidAppOdspUrlResolver());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_OdspUrlResolver": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_OdspUrlResolver():
    TypeOnly<old.OdspUrlResolver>;
declare function use_current_ClassDeclaration_OdspUrlResolver(
    use: TypeOnly<current.OdspUrlResolver>): void;
use_current_ClassDeclaration_OdspUrlResolver(
    get_old_ClassDeclaration_OdspUrlResolver());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_OdspUrlResolver": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_OdspUrlResolver():
    TypeOnly<current.OdspUrlResolver>;
declare function use_old_ClassDeclaration_OdspUrlResolver(
    use: TypeOnly<old.OdspUrlResolver>): void;
use_old_ClassDeclaration_OdspUrlResolver(
    get_current_ClassDeclaration_OdspUrlResolver());
