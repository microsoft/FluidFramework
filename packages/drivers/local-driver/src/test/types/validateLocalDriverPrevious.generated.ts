/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType, requireAssignableTo } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/local-driver-previous/internal";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current | requireAssignableTo<true, true>;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_LocalDocumentServiceFactory": {"forwardCompat": false}
 */
declare type old_as_current_for_Class_LocalDocumentServiceFactory = requireAssignableTo<TypeOnly<old.LocalDocumentServiceFactory>, TypeOnly<current.LocalDocumentServiceFactory>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_LocalDocumentServiceFactory": {"backCompat": false}
 */
declare type current_as_old_for_Class_LocalDocumentServiceFactory = requireAssignableTo<TypeOnly<current.LocalDocumentServiceFactory>, TypeOnly<old.LocalDocumentServiceFactory>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_LocalResolver": {"forwardCompat": false}
 */
declare type old_as_current_for_Class_LocalResolver = requireAssignableTo<TypeOnly<old.LocalResolver>, TypeOnly<current.LocalResolver>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_LocalResolver": {"backCompat": false}
 */
declare type current_as_old_for_Class_LocalResolver = requireAssignableTo<TypeOnly<current.LocalResolver>, TypeOnly<old.LocalResolver>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_LocalDocumentServiceFactory": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_LocalDocumentServiceFactory = requireAssignableTo<TypeOnly<typeof current.LocalDocumentServiceFactory>, TypeOnly<typeof old.LocalDocumentServiceFactory>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_LocalResolver": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_LocalResolver = requireAssignableTo<TypeOnly<typeof current.LocalResolver>, TypeOnly<typeof old.LocalResolver>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Function_createLocalResolverCreateNewRequest": {"backCompat": false}
 */
declare type current_as_old_for_Function_createLocalResolverCreateNewRequest = requireAssignableTo<TypeOnly<typeof current.createLocalResolverCreateNewRequest>, TypeOnly<typeof old.createLocalResolverCreateNewRequest>>
