/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-validator in @fluidframework/build-tools.
 */
import * as old from "@fluidframework/tinylicious-driver-previous";
import * as current from "../../index";

type TypeOnly<T> = {
    [P in keyof T]: TypeOnly<T[P]>;
};

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_createTinyliciousCreateNewRequest": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_createTinyliciousCreateNewRequest():
    TypeOnly<typeof old.createTinyliciousCreateNewRequest>;
declare function use_current_VariableDeclaration_createTinyliciousCreateNewRequest(
    use: TypeOnly<typeof current.createTinyliciousCreateNewRequest>);
use_current_VariableDeclaration_createTinyliciousCreateNewRequest(
    get_old_VariableDeclaration_createTinyliciousCreateNewRequest());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_createTinyliciousCreateNewRequest": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_createTinyliciousCreateNewRequest():
    TypeOnly<typeof current.createTinyliciousCreateNewRequest>;
declare function use_old_VariableDeclaration_createTinyliciousCreateNewRequest(
    use: TypeOnly<typeof old.createTinyliciousCreateNewRequest>);
use_old_VariableDeclaration_createTinyliciousCreateNewRequest(
    get_current_VariableDeclaration_createTinyliciousCreateNewRequest());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_defaultTinyliciousEndpoint": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_defaultTinyliciousEndpoint():
    TypeOnly<typeof old.defaultTinyliciousEndpoint>;
declare function use_current_VariableDeclaration_defaultTinyliciousEndpoint(
    use: TypeOnly<typeof current.defaultTinyliciousEndpoint>);
use_current_VariableDeclaration_defaultTinyliciousEndpoint(
    get_old_VariableDeclaration_defaultTinyliciousEndpoint());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_defaultTinyliciousEndpoint": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_defaultTinyliciousEndpoint():
    TypeOnly<typeof current.defaultTinyliciousEndpoint>;
declare function use_old_VariableDeclaration_defaultTinyliciousEndpoint(
    use: TypeOnly<typeof old.defaultTinyliciousEndpoint>);
use_old_VariableDeclaration_defaultTinyliciousEndpoint(
    get_current_VariableDeclaration_defaultTinyliciousEndpoint());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_defaultTinyliciousPort": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_defaultTinyliciousPort():
    TypeOnly<typeof old.defaultTinyliciousPort>;
declare function use_current_VariableDeclaration_defaultTinyliciousPort(
    use: TypeOnly<typeof current.defaultTinyliciousPort>);
use_current_VariableDeclaration_defaultTinyliciousPort(
    get_old_VariableDeclaration_defaultTinyliciousPort());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_defaultTinyliciousPort": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_defaultTinyliciousPort():
    TypeOnly<typeof current.defaultTinyliciousPort>;
declare function use_old_VariableDeclaration_defaultTinyliciousPort(
    use: TypeOnly<typeof old.defaultTinyliciousPort>);
use_old_VariableDeclaration_defaultTinyliciousPort(
    get_current_VariableDeclaration_defaultTinyliciousPort());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_InsecureTinyliciousTokenProvider": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_InsecureTinyliciousTokenProvider():
    TypeOnly<old.InsecureTinyliciousTokenProvider>;
declare function use_current_ClassDeclaration_InsecureTinyliciousTokenProvider(
    use: TypeOnly<current.InsecureTinyliciousTokenProvider>);
use_current_ClassDeclaration_InsecureTinyliciousTokenProvider(
    get_old_ClassDeclaration_InsecureTinyliciousTokenProvider());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_InsecureTinyliciousTokenProvider": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_InsecureTinyliciousTokenProvider():
    TypeOnly<current.InsecureTinyliciousTokenProvider>;
declare function use_old_ClassDeclaration_InsecureTinyliciousTokenProvider(
    use: TypeOnly<old.InsecureTinyliciousTokenProvider>);
use_old_ClassDeclaration_InsecureTinyliciousTokenProvider(
    get_current_ClassDeclaration_InsecureTinyliciousTokenProvider());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_InsecureTinyliciousUrlResolver": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_InsecureTinyliciousUrlResolver():
    TypeOnly<old.InsecureTinyliciousUrlResolver>;
declare function use_current_ClassDeclaration_InsecureTinyliciousUrlResolver(
    use: TypeOnly<current.InsecureTinyliciousUrlResolver>);
use_current_ClassDeclaration_InsecureTinyliciousUrlResolver(
    get_old_ClassDeclaration_InsecureTinyliciousUrlResolver());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_InsecureTinyliciousUrlResolver": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_InsecureTinyliciousUrlResolver():
    TypeOnly<current.InsecureTinyliciousUrlResolver>;
declare function use_old_ClassDeclaration_InsecureTinyliciousUrlResolver(
    use: TypeOnly<old.InsecureTinyliciousUrlResolver>);
use_old_ClassDeclaration_InsecureTinyliciousUrlResolver(
    get_current_ClassDeclaration_InsecureTinyliciousUrlResolver());
