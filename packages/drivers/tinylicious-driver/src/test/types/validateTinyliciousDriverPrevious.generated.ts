/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/tinylicious-driver-previous/internal";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_InsecureTinyliciousTokenProvider": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_InsecureTinyliciousTokenProvider():
    TypeOnly<old.InsecureTinyliciousTokenProvider>;
declare function use_current_ClassDeclaration_InsecureTinyliciousTokenProvider(
    use: TypeOnly<current.InsecureTinyliciousTokenProvider>): void;
use_current_ClassDeclaration_InsecureTinyliciousTokenProvider(
    get_old_ClassDeclaration_InsecureTinyliciousTokenProvider());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_InsecureTinyliciousTokenProvider": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_InsecureTinyliciousTokenProvider():
    TypeOnly<current.InsecureTinyliciousTokenProvider>;
declare function use_old_ClassDeclaration_InsecureTinyliciousTokenProvider(
    use: TypeOnly<old.InsecureTinyliciousTokenProvider>): void;
use_old_ClassDeclaration_InsecureTinyliciousTokenProvider(
    get_current_ClassDeclaration_InsecureTinyliciousTokenProvider());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_InsecureTinyliciousUrlResolver": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_InsecureTinyliciousUrlResolver():
    TypeOnly<old.InsecureTinyliciousUrlResolver>;
declare function use_current_ClassDeclaration_InsecureTinyliciousUrlResolver(
    use: TypeOnly<current.InsecureTinyliciousUrlResolver>): void;
use_current_ClassDeclaration_InsecureTinyliciousUrlResolver(
    get_old_ClassDeclaration_InsecureTinyliciousUrlResolver());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_InsecureTinyliciousUrlResolver": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_InsecureTinyliciousUrlResolver():
    TypeOnly<current.InsecureTinyliciousUrlResolver>;
declare function use_old_ClassDeclaration_InsecureTinyliciousUrlResolver(
    use: TypeOnly<old.InsecureTinyliciousUrlResolver>): void;
use_old_ClassDeclaration_InsecureTinyliciousUrlResolver(
    get_current_ClassDeclaration_InsecureTinyliciousUrlResolver());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_createTinyliciousCreateNewRequest": {"forwardCompat": false}
 */
declare function get_old_VariableDeclaration_createTinyliciousCreateNewRequest():
    TypeOnly<typeof old.createTinyliciousCreateNewRequest>;
declare function use_current_VariableDeclaration_createTinyliciousCreateNewRequest(
    use: TypeOnly<typeof current.createTinyliciousCreateNewRequest>): void;
use_current_VariableDeclaration_createTinyliciousCreateNewRequest(
    get_old_VariableDeclaration_createTinyliciousCreateNewRequest());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_createTinyliciousCreateNewRequest": {"backCompat": false}
 */
declare function get_current_VariableDeclaration_createTinyliciousCreateNewRequest():
    TypeOnly<typeof current.createTinyliciousCreateNewRequest>;
declare function use_old_VariableDeclaration_createTinyliciousCreateNewRequest(
    use: TypeOnly<typeof old.createTinyliciousCreateNewRequest>): void;
use_old_VariableDeclaration_createTinyliciousCreateNewRequest(
    get_current_VariableDeclaration_createTinyliciousCreateNewRequest());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_defaultTinyliciousEndpoint": {"forwardCompat": false}
 */
declare function get_old_VariableDeclaration_defaultTinyliciousEndpoint():
    TypeOnly<typeof old.defaultTinyliciousEndpoint>;
declare function use_current_VariableDeclaration_defaultTinyliciousEndpoint(
    use: TypeOnly<typeof current.defaultTinyliciousEndpoint>): void;
use_current_VariableDeclaration_defaultTinyliciousEndpoint(
    get_old_VariableDeclaration_defaultTinyliciousEndpoint());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_defaultTinyliciousEndpoint": {"backCompat": false}
 */
declare function get_current_VariableDeclaration_defaultTinyliciousEndpoint():
    TypeOnly<typeof current.defaultTinyliciousEndpoint>;
declare function use_old_VariableDeclaration_defaultTinyliciousEndpoint(
    use: TypeOnly<typeof old.defaultTinyliciousEndpoint>): void;
use_old_VariableDeclaration_defaultTinyliciousEndpoint(
    get_current_VariableDeclaration_defaultTinyliciousEndpoint());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_defaultTinyliciousPort": {"forwardCompat": false}
 */
declare function get_old_VariableDeclaration_defaultTinyliciousPort():
    TypeOnly<typeof old.defaultTinyliciousPort>;
declare function use_current_VariableDeclaration_defaultTinyliciousPort(
    use: TypeOnly<typeof current.defaultTinyliciousPort>): void;
use_current_VariableDeclaration_defaultTinyliciousPort(
    get_old_VariableDeclaration_defaultTinyliciousPort());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_defaultTinyliciousPort": {"backCompat": false}
 */
declare function get_current_VariableDeclaration_defaultTinyliciousPort():
    TypeOnly<typeof current.defaultTinyliciousPort>;
declare function use_old_VariableDeclaration_defaultTinyliciousPort(
    use: TypeOnly<typeof old.defaultTinyliciousPort>): void;
use_old_VariableDeclaration_defaultTinyliciousPort(
    get_current_VariableDeclaration_defaultTinyliciousPort());
