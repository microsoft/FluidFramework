/*!
* Copyright (c) Microsoft Corporation and contributors. All rights reserved.
* Licensed under the MIT License.
*/
/*
* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
* Generated by fluid-type-validator in @fluidframework/build-tools.
*/
import * as old from "@fluidframework/file-driver-previous";
import * as current from "../../index";

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.58.2000:
* "ClassDeclaration_FileDeltaStorageService": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_FileDeltaStorageService():
    Omit<old.FileDeltaStorageService,"">;
declare function use_current_ClassDeclaration_FileDeltaStorageService(
    use: Omit<current.FileDeltaStorageService,"">);
use_current_ClassDeclaration_FileDeltaStorageService(
    get_old_ClassDeclaration_FileDeltaStorageService());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.58.2000:
* "ClassDeclaration_FileDeltaStorageService": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_FileDeltaStorageService():
    Omit<current.FileDeltaStorageService,"">;
declare function use_old_ClassDeclaration_FileDeltaStorageService(
    use: Omit<old.FileDeltaStorageService,"">);
use_old_ClassDeclaration_FileDeltaStorageService(
    get_current_ClassDeclaration_FileDeltaStorageService());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.58.2000:
* "ClassDeclaration_FileDocumentService": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_FileDocumentService():
    Omit<old.FileDocumentService,"">;
declare function use_current_ClassDeclaration_FileDocumentService(
    use: Omit<current.FileDocumentService,"">);
use_current_ClassDeclaration_FileDocumentService(
    get_old_ClassDeclaration_FileDocumentService());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.58.2000:
* "ClassDeclaration_FileDocumentService": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_FileDocumentService():
    Omit<current.FileDocumentService,"">;
declare function use_old_ClassDeclaration_FileDocumentService(
    use: Omit<old.FileDocumentService,"">);
use_old_ClassDeclaration_FileDocumentService(
    get_current_ClassDeclaration_FileDocumentService());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.58.2000:
* "ClassDeclaration_FileDocumentServiceFactory": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_FileDocumentServiceFactory():
    Omit<old.FileDocumentServiceFactory,"">;
declare function use_current_ClassDeclaration_FileDocumentServiceFactory(
    use: Omit<current.FileDocumentServiceFactory,"">);
use_current_ClassDeclaration_FileDocumentServiceFactory(
    get_old_ClassDeclaration_FileDocumentServiceFactory());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.58.2000:
* "ClassDeclaration_FileDocumentServiceFactory": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_FileDocumentServiceFactory():
    Omit<current.FileDocumentServiceFactory,"">;
declare function use_old_ClassDeclaration_FileDocumentServiceFactory(
    use: Omit<old.FileDocumentServiceFactory,"">);
use_old_ClassDeclaration_FileDocumentServiceFactory(
    get_current_ClassDeclaration_FileDocumentServiceFactory());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.58.2000:
* "VariableDeclaration_FileSnapshotWriterClassFactory": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_FileSnapshotWriterClassFactory():
    typeof old.FileSnapshotWriterClassFactory;
declare function use_current_VariableDeclaration_FileSnapshotWriterClassFactory(
    use: typeof current.FileSnapshotWriterClassFactory);
use_current_VariableDeclaration_FileSnapshotWriterClassFactory(
    get_old_VariableDeclaration_FileSnapshotWriterClassFactory());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.58.2000:
* "VariableDeclaration_FileSnapshotWriterClassFactory": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_FileSnapshotWriterClassFactory():
    typeof current.FileSnapshotWriterClassFactory;
declare function use_old_VariableDeclaration_FileSnapshotWriterClassFactory(
    use: typeof old.FileSnapshotWriterClassFactory);
use_old_VariableDeclaration_FileSnapshotWriterClassFactory(
    get_current_VariableDeclaration_FileSnapshotWriterClassFactory());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.58.2000:
* "VariableDeclaration_FileStorageDocumentName": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_FileStorageDocumentName():
    typeof old.FileStorageDocumentName;
declare function use_current_VariableDeclaration_FileStorageDocumentName(
    use: typeof current.FileStorageDocumentName);
use_current_VariableDeclaration_FileStorageDocumentName(
    get_old_VariableDeclaration_FileStorageDocumentName());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.58.2000:
* "VariableDeclaration_FileStorageDocumentName": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_FileStorageDocumentName():
    typeof current.FileStorageDocumentName;
declare function use_old_VariableDeclaration_FileStorageDocumentName(
    use: typeof old.FileStorageDocumentName);
use_old_VariableDeclaration_FileStorageDocumentName(
    get_current_VariableDeclaration_FileStorageDocumentName());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.58.2000:
* "ClassDeclaration_FluidFetchReader": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_FluidFetchReader():
    Omit<old.FluidFetchReader,"">;
declare function use_current_ClassDeclaration_FluidFetchReader(
    use: Omit<current.FluidFetchReader,"">);
use_current_ClassDeclaration_FluidFetchReader(
    get_old_ClassDeclaration_FluidFetchReader());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.58.2000:
* "ClassDeclaration_FluidFetchReader": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_FluidFetchReader():
    Omit<current.FluidFetchReader,"">;
declare function use_old_ClassDeclaration_FluidFetchReader(
    use: Omit<old.FluidFetchReader,"">);
use_old_ClassDeclaration_FluidFetchReader(
    get_current_ClassDeclaration_FluidFetchReader());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.58.2000:
* "VariableDeclaration_FluidFetchReaderFileSnapshotWriter": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_FluidFetchReaderFileSnapshotWriter():
    typeof old.FluidFetchReaderFileSnapshotWriter;
declare function use_current_VariableDeclaration_FluidFetchReaderFileSnapshotWriter(
    use: typeof current.FluidFetchReaderFileSnapshotWriter);
use_current_VariableDeclaration_FluidFetchReaderFileSnapshotWriter(
    get_old_VariableDeclaration_FluidFetchReaderFileSnapshotWriter());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.58.2000:
* "VariableDeclaration_FluidFetchReaderFileSnapshotWriter": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_FluidFetchReaderFileSnapshotWriter():
    typeof current.FluidFetchReaderFileSnapshotWriter;
declare function use_old_VariableDeclaration_FluidFetchReaderFileSnapshotWriter(
    use: typeof old.FluidFetchReaderFileSnapshotWriter);
use_old_VariableDeclaration_FluidFetchReaderFileSnapshotWriter(
    get_current_VariableDeclaration_FluidFetchReaderFileSnapshotWriter());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.58.2000:
* "InterfaceDeclaration_ISnapshotWriterStorage": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISnapshotWriterStorage():
    old.ISnapshotWriterStorage;
declare function use_current_InterfaceDeclaration_ISnapshotWriterStorage(
    use: current.ISnapshotWriterStorage);
use_current_InterfaceDeclaration_ISnapshotWriterStorage(
    get_old_InterfaceDeclaration_ISnapshotWriterStorage());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.58.2000:
* "InterfaceDeclaration_ISnapshotWriterStorage": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISnapshotWriterStorage():
    current.ISnapshotWriterStorage;
declare function use_old_InterfaceDeclaration_ISnapshotWriterStorage(
    use: old.ISnapshotWriterStorage);
use_old_InterfaceDeclaration_ISnapshotWriterStorage(
    get_current_InterfaceDeclaration_ISnapshotWriterStorage());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.58.2000:
* "TypeAliasDeclaration_ReaderConstructor": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_ReaderConstructor():
    old.ReaderConstructor;
declare function use_current_TypeAliasDeclaration_ReaderConstructor(
    use: current.ReaderConstructor);
use_current_TypeAliasDeclaration_ReaderConstructor(
    get_old_TypeAliasDeclaration_ReaderConstructor());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.58.2000:
* "TypeAliasDeclaration_ReaderConstructor": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_ReaderConstructor():
    current.ReaderConstructor;
declare function use_old_TypeAliasDeclaration_ReaderConstructor(
    use: old.ReaderConstructor);
use_old_TypeAliasDeclaration_ReaderConstructor(
    get_current_TypeAliasDeclaration_ReaderConstructor());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.58.2000:
* "ClassDeclaration_Replayer": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_Replayer():
    Omit<old.Replayer,"">;
declare function use_current_ClassDeclaration_Replayer(
    use: Omit<current.Replayer,"">);
use_current_ClassDeclaration_Replayer(
    get_old_ClassDeclaration_Replayer());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.58.2000:
* "ClassDeclaration_Replayer": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_Replayer():
    Omit<current.Replayer,"">;
declare function use_old_ClassDeclaration_Replayer(
    use: Omit<old.Replayer,"">);
use_old_ClassDeclaration_Replayer(
    get_current_ClassDeclaration_Replayer());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.58.2000:
* "ClassDeclaration_ReplayFileDeltaConnection": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_ReplayFileDeltaConnection():
    Omit<old.ReplayFileDeltaConnection,"">;
declare function use_current_ClassDeclaration_ReplayFileDeltaConnection(
    use: Omit<current.ReplayFileDeltaConnection,"">);
use_current_ClassDeclaration_ReplayFileDeltaConnection(
    get_old_ClassDeclaration_ReplayFileDeltaConnection());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.58.2000:
* "ClassDeclaration_ReplayFileDeltaConnection": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_ReplayFileDeltaConnection():
    Omit<current.ReplayFileDeltaConnection,"">;
declare function use_old_ClassDeclaration_ReplayFileDeltaConnection(
    use: Omit<old.ReplayFileDeltaConnection,"">);
const foo = get_current_ClassDeclaration_ReplayFileDeltaConnection();
use_old_ClassDeclaration_ReplayFileDeltaConnection(
    foo);
