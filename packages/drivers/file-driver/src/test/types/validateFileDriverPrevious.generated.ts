/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType, requireAssignableTo } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/file-driver-previous/internal";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current | requireAssignableTo<true, true>;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_FileDeltaStorageService": {"forwardCompat": false}
 */
declare type old_as_current_for_ClassDeclaration_FileDeltaStorageService = requireAssignableTo<TypeOnly<old.FileDeltaStorageService>, TypeOnly<current.FileDeltaStorageService>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_FileDeltaStorageService": {"backCompat": false}
 */
declare type current_as_old_for_ClassDeclaration_FileDeltaStorageService = requireAssignableTo<TypeOnly<current.FileDeltaStorageService>, TypeOnly<old.FileDeltaStorageService>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_FileDocumentServiceFactory": {"forwardCompat": false}
 */
declare type old_as_current_for_ClassDeclaration_FileDocumentServiceFactory = requireAssignableTo<TypeOnly<old.FileDocumentServiceFactory>, TypeOnly<current.FileDocumentServiceFactory>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_FileDocumentServiceFactory": {"backCompat": false}
 */
declare type current_as_old_for_ClassDeclaration_FileDocumentServiceFactory = requireAssignableTo<TypeOnly<current.FileDocumentServiceFactory>, TypeOnly<old.FileDocumentServiceFactory>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_FileSnapshotWriterClassFactory": {"forwardCompat": false}
 */
declare type old_as_current_for_VariableDeclaration_FileSnapshotWriterClassFactory = requireAssignableTo<TypeOnly<typeof old.FileSnapshotWriterClassFactory>, TypeOnly<typeof current.FileSnapshotWriterClassFactory>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_FileSnapshotWriterClassFactory": {"backCompat": false}
 */
declare type current_as_old_for_VariableDeclaration_FileSnapshotWriterClassFactory = requireAssignableTo<TypeOnly<typeof current.FileSnapshotWriterClassFactory>, TypeOnly<typeof old.FileSnapshotWriterClassFactory>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_FileStorageDocumentName": {"forwardCompat": false}
 */
declare type old_as_current_for_VariableDeclaration_FileStorageDocumentName = requireAssignableTo<TypeOnly<typeof old.FileStorageDocumentName>, TypeOnly<typeof current.FileStorageDocumentName>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_FileStorageDocumentName": {"backCompat": false}
 */
declare type current_as_old_for_VariableDeclaration_FileStorageDocumentName = requireAssignableTo<TypeOnly<typeof current.FileStorageDocumentName>, TypeOnly<typeof old.FileStorageDocumentName>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_FluidFetchReader": {"forwardCompat": false}
 */
declare type old_as_current_for_ClassDeclaration_FluidFetchReader = requireAssignableTo<TypeOnly<old.FluidFetchReader>, TypeOnly<current.FluidFetchReader>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_FluidFetchReader": {"backCompat": false}
 */
declare type current_as_old_for_ClassDeclaration_FluidFetchReader = requireAssignableTo<TypeOnly<current.FluidFetchReader>, TypeOnly<old.FluidFetchReader>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_FluidFetchReaderFileSnapshotWriter": {"forwardCompat": false}
 */
// @ts-expect-error compatibility expected to be broken
declare type old_as_current_for_VariableDeclaration_FluidFetchReaderFileSnapshotWriter = requireAssignableTo<TypeOnly<typeof old.FluidFetchReaderFileSnapshotWriter>, TypeOnly<typeof current.FluidFetchReaderFileSnapshotWriter>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_FluidFetchReaderFileSnapshotWriter": {"backCompat": false}
 */
declare type current_as_old_for_VariableDeclaration_FluidFetchReaderFileSnapshotWriter = requireAssignableTo<TypeOnly<typeof current.FluidFetchReaderFileSnapshotWriter>, TypeOnly<typeof old.FluidFetchReaderFileSnapshotWriter>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISnapshotWriterStorage": {"forwardCompat": false}
 */
declare type old_as_current_for_InterfaceDeclaration_ISnapshotWriterStorage = requireAssignableTo<TypeOnly<old.ISnapshotWriterStorage>, TypeOnly<current.ISnapshotWriterStorage>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISnapshotWriterStorage": {"backCompat": false}
 */
declare type current_as_old_for_InterfaceDeclaration_ISnapshotWriterStorage = requireAssignableTo<TypeOnly<current.ISnapshotWriterStorage>, TypeOnly<old.ISnapshotWriterStorage>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_ReaderConstructor": {"forwardCompat": false}
 */
declare type old_as_current_for_TypeAliasDeclaration_ReaderConstructor = requireAssignableTo<TypeOnly<old.ReaderConstructor>, TypeOnly<current.ReaderConstructor>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_ReaderConstructor": {"backCompat": false}
 */
declare type current_as_old_for_TypeAliasDeclaration_ReaderConstructor = requireAssignableTo<TypeOnly<current.ReaderConstructor>, TypeOnly<old.ReaderConstructor>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_ReplayFileDeltaConnection": {"forwardCompat": false}
 */
declare type old_as_current_for_ClassDeclaration_ReplayFileDeltaConnection = requireAssignableTo<TypeOnly<old.ReplayFileDeltaConnection>, TypeOnly<current.ReplayFileDeltaConnection>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_ReplayFileDeltaConnection": {"backCompat": false}
 */
declare type current_as_old_for_ClassDeclaration_ReplayFileDeltaConnection = requireAssignableTo<TypeOnly<current.ReplayFileDeltaConnection>, TypeOnly<old.ReplayFileDeltaConnection>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_Replayer": {"forwardCompat": false}
 */
declare type old_as_current_for_ClassDeclaration_Replayer = requireAssignableTo<TypeOnly<old.Replayer>, TypeOnly<current.Replayer>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_Replayer": {"backCompat": false}
 */
declare type current_as_old_for_ClassDeclaration_Replayer = requireAssignableTo<TypeOnly<current.Replayer>, TypeOnly<old.Replayer>>
