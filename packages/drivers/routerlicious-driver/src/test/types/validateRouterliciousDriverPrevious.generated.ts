/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type * as old from "@fluidframework/routerlicious-driver-previous/internal";

import type * as current from "../../index.js";

type ValueOf<T> = T[keyof T];
type OnlySymbols<T> = T extends symbol ? T : never;
type WellKnownSymbols = OnlySymbols<ValueOf<typeof Symbol>>;
/**
 * Omit (replace with never) a key if it is a custom symbol,
 * not just symbol or a well known symbol from the global Symbol.
 */
type SkipUniqueSymbols<Key> = symbol extends Key
	? Key // Key is symbol or a generalization of symbol, so leave it as is.
	: Key extends symbol
		? Key extends WellKnownSymbols
			? Key // Key is a well known symbol from the global Symbol object. These are shared between packages, so they are fine and kept as is.
			: never // Key is most likely some specialized symbol, typically a unique symbol. These break type comparisons so are removed by replacing them with never.
		: Key; // Key is not a symbol (for example its a string or number), so leave it as is.
/**
 * Remove details of T which are incompatible with type testing while keeping as much as is practical.
 *
 * See 'build-tools/packages/build-tools/src/typeValidator/compatibility.ts' for more information.
 */
type TypeOnly<T> = T extends number
	? number
	: T extends boolean | bigint | string
		? T
		: T extends symbol
			? SkipUniqueSymbols<T>
			: {
					[P in keyof T as SkipUniqueSymbols<P>]: TypeOnly<T[P]>;
				};

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_DefaultTokenProvider": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_DefaultTokenProvider():
    TypeOnly<old.DefaultTokenProvider>;
declare function use_current_ClassDeclaration_DefaultTokenProvider(
    use: TypeOnly<current.DefaultTokenProvider>): void;
use_current_ClassDeclaration_DefaultTokenProvider(
    get_old_ClassDeclaration_DefaultTokenProvider());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_DefaultTokenProvider": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_DefaultTokenProvider():
    TypeOnly<current.DefaultTokenProvider>;
declare function use_old_ClassDeclaration_DefaultTokenProvider(
    use: TypeOnly<old.DefaultTokenProvider>): void;
use_old_ClassDeclaration_DefaultTokenProvider(
    get_current_ClassDeclaration_DefaultTokenProvider());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_DocumentPostCreateError": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_DocumentPostCreateError():
    TypeOnly<old.DocumentPostCreateError>;
declare function use_current_ClassDeclaration_DocumentPostCreateError(
    use: TypeOnly<current.DocumentPostCreateError>): void;
use_current_ClassDeclaration_DocumentPostCreateError(
    get_old_ClassDeclaration_DocumentPostCreateError());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_DocumentPostCreateError": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_DocumentPostCreateError():
    TypeOnly<current.DocumentPostCreateError>;
declare function use_old_ClassDeclaration_DocumentPostCreateError(
    use: TypeOnly<old.DocumentPostCreateError>): void;
use_old_ClassDeclaration_DocumentPostCreateError(
    get_current_ClassDeclaration_DocumentPostCreateError());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IRouterliciousDriverPolicies": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IRouterliciousDriverPolicies():
    TypeOnly<old.IRouterliciousDriverPolicies>;
declare function use_current_InterfaceDeclaration_IRouterliciousDriverPolicies(
    use: TypeOnly<current.IRouterliciousDriverPolicies>): void;
use_current_InterfaceDeclaration_IRouterliciousDriverPolicies(
    get_old_InterfaceDeclaration_IRouterliciousDriverPolicies());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IRouterliciousDriverPolicies": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IRouterliciousDriverPolicies():
    TypeOnly<current.IRouterliciousDriverPolicies>;
declare function use_old_InterfaceDeclaration_IRouterliciousDriverPolicies(
    use: TypeOnly<old.IRouterliciousDriverPolicies>): void;
use_old_InterfaceDeclaration_IRouterliciousDriverPolicies(
    get_current_InterfaceDeclaration_IRouterliciousDriverPolicies());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IRouterliciousResolvedUrl": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IRouterliciousResolvedUrl():
    TypeOnly<old.IRouterliciousResolvedUrl>;
declare function use_current_InterfaceDeclaration_IRouterliciousResolvedUrl(
    use: TypeOnly<current.IRouterliciousResolvedUrl>): void;
use_current_InterfaceDeclaration_IRouterliciousResolvedUrl(
    get_old_InterfaceDeclaration_IRouterliciousResolvedUrl());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IRouterliciousResolvedUrl": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IRouterliciousResolvedUrl():
    TypeOnly<current.IRouterliciousResolvedUrl>;
declare function use_old_InterfaceDeclaration_IRouterliciousResolvedUrl(
    use: TypeOnly<old.IRouterliciousResolvedUrl>): void;
use_old_InterfaceDeclaration_IRouterliciousResolvedUrl(
    get_current_InterfaceDeclaration_IRouterliciousResolvedUrl());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ITokenProvider": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_ITokenProvider():
    TypeOnly<old.ITokenProvider>;
declare function use_current_InterfaceDeclaration_ITokenProvider(
    use: TypeOnly<current.ITokenProvider>): void;
use_current_InterfaceDeclaration_ITokenProvider(
    get_old_InterfaceDeclaration_ITokenProvider());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ITokenProvider": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_ITokenProvider():
    TypeOnly<current.ITokenProvider>;
declare function use_old_InterfaceDeclaration_ITokenProvider(
    use: TypeOnly<old.ITokenProvider>): void;
use_old_InterfaceDeclaration_ITokenProvider(
    get_current_InterfaceDeclaration_ITokenProvider());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ITokenResponse": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_ITokenResponse():
    TypeOnly<old.ITokenResponse>;
declare function use_current_InterfaceDeclaration_ITokenResponse(
    use: TypeOnly<current.ITokenResponse>): void;
use_current_InterfaceDeclaration_ITokenResponse(
    get_old_InterfaceDeclaration_ITokenResponse());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ITokenResponse": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_ITokenResponse():
    TypeOnly<current.ITokenResponse>;
declare function use_old_InterfaceDeclaration_ITokenResponse(
    use: TypeOnly<old.ITokenResponse>): void;
use_old_InterfaceDeclaration_ITokenResponse(
    get_current_InterfaceDeclaration_ITokenResponse());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ITokenService": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_ITokenService():
    TypeOnly<old.ITokenService>;
declare function use_current_InterfaceDeclaration_ITokenService(
    use: TypeOnly<current.ITokenService>): void;
use_current_InterfaceDeclaration_ITokenService(
    get_old_InterfaceDeclaration_ITokenService());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ITokenService": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_ITokenService():
    TypeOnly<current.ITokenService>;
declare function use_old_InterfaceDeclaration_ITokenService(
    use: TypeOnly<old.ITokenService>): void;
use_old_InterfaceDeclaration_ITokenService(
    get_current_InterfaceDeclaration_ITokenService());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_RouterliciousDocumentServiceFactory": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_RouterliciousDocumentServiceFactory():
    TypeOnly<old.RouterliciousDocumentServiceFactory>;
declare function use_current_ClassDeclaration_RouterliciousDocumentServiceFactory(
    use: TypeOnly<current.RouterliciousDocumentServiceFactory>): void;
use_current_ClassDeclaration_RouterliciousDocumentServiceFactory(
    get_old_ClassDeclaration_RouterliciousDocumentServiceFactory());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_RouterliciousDocumentServiceFactory": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_RouterliciousDocumentServiceFactory():
    TypeOnly<current.RouterliciousDocumentServiceFactory>;
declare function use_old_ClassDeclaration_RouterliciousDocumentServiceFactory(
    use: TypeOnly<old.RouterliciousDocumentServiceFactory>): void;
use_old_ClassDeclaration_RouterliciousDocumentServiceFactory(
    get_current_ClassDeclaration_RouterliciousDocumentServiceFactory());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_RouterliciousErrorTypes": {"forwardCompat": false}
 */
declare function get_old_VariableDeclaration_RouterliciousErrorTypes():
    TypeOnly<typeof old.RouterliciousErrorTypes>;
declare function use_current_VariableDeclaration_RouterliciousErrorTypes(
    use: TypeOnly<typeof current.RouterliciousErrorTypes>): void;
use_current_VariableDeclaration_RouterliciousErrorTypes(
    get_old_VariableDeclaration_RouterliciousErrorTypes());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_RouterliciousErrorTypes": {"backCompat": false}
 */
declare function get_current_VariableDeclaration_RouterliciousErrorTypes():
    TypeOnly<typeof current.RouterliciousErrorTypes>;
declare function use_old_VariableDeclaration_RouterliciousErrorTypes(
    use: TypeOnly<typeof old.RouterliciousErrorTypes>): void;
use_old_VariableDeclaration_RouterliciousErrorTypes(
    get_current_VariableDeclaration_RouterliciousErrorTypes());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_RouterliciousErrorTypes": {"forwardCompat": false}
 */
declare function get_old_TypeAliasDeclaration_RouterliciousErrorTypes():
    TypeOnly<old.RouterliciousErrorTypes>;
declare function use_current_TypeAliasDeclaration_RouterliciousErrorTypes(
    use: TypeOnly<current.RouterliciousErrorTypes>): void;
use_current_TypeAliasDeclaration_RouterliciousErrorTypes(
    get_old_TypeAliasDeclaration_RouterliciousErrorTypes());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_RouterliciousErrorTypes": {"backCompat": false}
 */
declare function get_current_TypeAliasDeclaration_RouterliciousErrorTypes():
    TypeOnly<current.RouterliciousErrorTypes>;
declare function use_old_TypeAliasDeclaration_RouterliciousErrorTypes(
    use: TypeOnly<old.RouterliciousErrorTypes>): void;
use_old_TypeAliasDeclaration_RouterliciousErrorTypes(
    get_current_TypeAliasDeclaration_RouterliciousErrorTypes());
