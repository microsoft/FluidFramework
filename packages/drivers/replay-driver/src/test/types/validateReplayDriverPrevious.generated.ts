/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType, requireAssignableTo } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/replay-driver-previous/internal";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current | requireAssignableTo<true, true>;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_FileSnapshotReader": {"forwardCompat": false}
 */
declare type old_as_current_for_ClassDeclaration_FileSnapshotReader = requireAssignableTo<TypeOnly<old.FileSnapshotReader>, TypeOnly<current.FileSnapshotReader>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_FileSnapshotReader": {"backCompat": false}
 */
declare type current_as_old_for_ClassDeclaration_FileSnapshotReader = requireAssignableTo<TypeOnly<current.FileSnapshotReader>, TypeOnly<old.FileSnapshotReader>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IFileSnapshot": {"forwardCompat": false}
 */
declare type old_as_current_for_InterfaceDeclaration_IFileSnapshot = requireAssignableTo<TypeOnly<old.IFileSnapshot>, TypeOnly<current.IFileSnapshot>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IFileSnapshot": {"backCompat": false}
 */
declare type current_as_old_for_InterfaceDeclaration_IFileSnapshot = requireAssignableTo<TypeOnly<current.IFileSnapshot>, TypeOnly<old.IFileSnapshot>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_ReadDocumentStorageServiceBase": {"forwardCompat": false}
 */
declare type old_as_current_for_ClassDeclaration_ReadDocumentStorageServiceBase = requireAssignableTo<TypeOnly<old.ReadDocumentStorageServiceBase>, TypeOnly<current.ReadDocumentStorageServiceBase>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_ReadDocumentStorageServiceBase": {"backCompat": false}
 */
declare type current_as_old_for_ClassDeclaration_ReadDocumentStorageServiceBase = requireAssignableTo<TypeOnly<current.ReadDocumentStorageServiceBase>, TypeOnly<old.ReadDocumentStorageServiceBase>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_ReplayController": {"forwardCompat": false}
 */
declare type old_as_current_for_ClassDeclaration_ReplayController = requireAssignableTo<TypeOnly<old.ReplayController>, TypeOnly<current.ReplayController>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_ReplayController": {"backCompat": false}
 */
declare type current_as_old_for_ClassDeclaration_ReplayController = requireAssignableTo<TypeOnly<current.ReplayController>, TypeOnly<old.ReplayController>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_ReplayDocumentService": {"forwardCompat": false}
 */
declare type old_as_current_for_ClassDeclaration_ReplayDocumentService = requireAssignableTo<TypeOnly<old.ReplayDocumentService>, TypeOnly<current.ReplayDocumentService>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_ReplayDocumentService": {"backCompat": false}
 */
declare type current_as_old_for_ClassDeclaration_ReplayDocumentService = requireAssignableTo<TypeOnly<current.ReplayDocumentService>, TypeOnly<old.ReplayDocumentService>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_ReplayDocumentServiceFactory": {"forwardCompat": false}
 */
declare type old_as_current_for_ClassDeclaration_ReplayDocumentServiceFactory = requireAssignableTo<TypeOnly<old.ReplayDocumentServiceFactory>, TypeOnly<current.ReplayDocumentServiceFactory>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_ReplayDocumentServiceFactory": {"backCompat": false}
 */
declare type current_as_old_for_ClassDeclaration_ReplayDocumentServiceFactory = requireAssignableTo<TypeOnly<current.ReplayDocumentServiceFactory>, TypeOnly<old.ReplayDocumentServiceFactory>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_SnapshotStorage": {"forwardCompat": false}
 */
declare type old_as_current_for_ClassDeclaration_SnapshotStorage = requireAssignableTo<TypeOnly<old.SnapshotStorage>, TypeOnly<current.SnapshotStorage>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_SnapshotStorage": {"backCompat": false}
 */
declare type current_as_old_for_ClassDeclaration_SnapshotStorage = requireAssignableTo<TypeOnly<current.SnapshotStorage>, TypeOnly<old.SnapshotStorage>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_StaticStorageDocumentServiceFactory": {"forwardCompat": false}
 */
declare type old_as_current_for_ClassDeclaration_StaticStorageDocumentServiceFactory = requireAssignableTo<TypeOnly<old.StaticStorageDocumentServiceFactory>, TypeOnly<current.StaticStorageDocumentServiceFactory>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_StaticStorageDocumentServiceFactory": {"backCompat": false}
 */
declare type current_as_old_for_ClassDeclaration_StaticStorageDocumentServiceFactory = requireAssignableTo<TypeOnly<current.StaticStorageDocumentServiceFactory>, TypeOnly<old.StaticStorageDocumentServiceFactory>>
