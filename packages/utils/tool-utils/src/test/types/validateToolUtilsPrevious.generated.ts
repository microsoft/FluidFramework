/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/tool-utils-previous/internal";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IAsyncCache": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IAsyncCache():
    TypeOnly<old.IAsyncCache<any,any>>;
declare function use_current_InterfaceDeclaration_IAsyncCache(
    use: TypeOnly<current.IAsyncCache<any,any>>): void;
use_current_InterfaceDeclaration_IAsyncCache(
    get_old_InterfaceDeclaration_IAsyncCache());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IAsyncCache": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IAsyncCache():
    TypeOnly<current.IAsyncCache<any,any>>;
declare function use_old_InterfaceDeclaration_IAsyncCache(
    use: TypeOnly<old.IAsyncCache<any,any>>): void;
use_old_InterfaceDeclaration_IAsyncCache(
    get_current_InterfaceDeclaration_IAsyncCache());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IOdspTokenManagerCacheKey": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IOdspTokenManagerCacheKey():
    TypeOnly<old.IOdspTokenManagerCacheKey>;
declare function use_current_InterfaceDeclaration_IOdspTokenManagerCacheKey(
    use: TypeOnly<current.IOdspTokenManagerCacheKey>): void;
use_current_InterfaceDeclaration_IOdspTokenManagerCacheKey(
    get_old_InterfaceDeclaration_IOdspTokenManagerCacheKey());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IOdspTokenManagerCacheKey": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IOdspTokenManagerCacheKey():
    TypeOnly<current.IOdspTokenManagerCacheKey>;
declare function use_old_InterfaceDeclaration_IOdspTokenManagerCacheKey(
    use: TypeOnly<old.IOdspTokenManagerCacheKey>): void;
use_old_InterfaceDeclaration_IOdspTokenManagerCacheKey(
    get_current_InterfaceDeclaration_IOdspTokenManagerCacheKey());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IResources": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IResources():
    TypeOnly<old.IResources>;
declare function use_current_InterfaceDeclaration_IResources(
    use: TypeOnly<current.IResources>): void;
use_current_InterfaceDeclaration_IResources(
    get_old_InterfaceDeclaration_IResources());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IResources": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IResources():
    TypeOnly<current.IResources>;
declare function use_old_InterfaceDeclaration_IResources(
    use: TypeOnly<old.IResources>): void;
use_old_InterfaceDeclaration_IResources(
    get_current_InterfaceDeclaration_IResources());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISnapshotNormalizerConfig": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_ISnapshotNormalizerConfig():
    TypeOnly<old.ISnapshotNormalizerConfig>;
declare function use_current_InterfaceDeclaration_ISnapshotNormalizerConfig(
    use: TypeOnly<current.ISnapshotNormalizerConfig>): void;
use_current_InterfaceDeclaration_ISnapshotNormalizerConfig(
    get_old_InterfaceDeclaration_ISnapshotNormalizerConfig());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISnapshotNormalizerConfig": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_ISnapshotNormalizerConfig():
    TypeOnly<current.ISnapshotNormalizerConfig>;
declare function use_old_InterfaceDeclaration_ISnapshotNormalizerConfig(
    use: TypeOnly<old.ISnapshotNormalizerConfig>): void;
use_old_InterfaceDeclaration_ISnapshotNormalizerConfig(
    get_current_InterfaceDeclaration_ISnapshotNormalizerConfig());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_OdspTokenConfig": {"forwardCompat": false}
 */
declare function get_old_TypeAliasDeclaration_OdspTokenConfig():
    TypeOnly<old.OdspTokenConfig>;
declare function use_current_TypeAliasDeclaration_OdspTokenConfig(
    use: TypeOnly<current.OdspTokenConfig>): void;
use_current_TypeAliasDeclaration_OdspTokenConfig(
    get_old_TypeAliasDeclaration_OdspTokenConfig());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_OdspTokenConfig": {"backCompat": false}
 */
declare function get_current_TypeAliasDeclaration_OdspTokenConfig():
    TypeOnly<current.OdspTokenConfig>;
declare function use_old_TypeAliasDeclaration_OdspTokenConfig(
    use: TypeOnly<old.OdspTokenConfig>): void;
use_old_TypeAliasDeclaration_OdspTokenConfig(
    get_current_TypeAliasDeclaration_OdspTokenConfig());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_OdspTokenManager": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_OdspTokenManager():
    TypeOnly<old.OdspTokenManager>;
declare function use_current_ClassDeclaration_OdspTokenManager(
    use: TypeOnly<current.OdspTokenManager>): void;
use_current_ClassDeclaration_OdspTokenManager(
    get_old_ClassDeclaration_OdspTokenManager());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_OdspTokenManager": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_OdspTokenManager():
    TypeOnly<current.OdspTokenManager>;
declare function use_old_ClassDeclaration_OdspTokenManager(
    use: TypeOnly<old.OdspTokenManager>): void;
use_old_ClassDeclaration_OdspTokenManager(
    get_current_ClassDeclaration_OdspTokenManager());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_gcBlobPrefix": {"forwardCompat": false}
 */
declare function get_old_VariableDeclaration_gcBlobPrefix():
    TypeOnly<typeof old.gcBlobPrefix>;
declare function use_current_VariableDeclaration_gcBlobPrefix(
    use: TypeOnly<typeof current.gcBlobPrefix>): void;
use_current_VariableDeclaration_gcBlobPrefix(
    get_old_VariableDeclaration_gcBlobPrefix());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_gcBlobPrefix": {"backCompat": false}
 */
declare function get_current_VariableDeclaration_gcBlobPrefix():
    TypeOnly<typeof current.gcBlobPrefix>;
declare function use_old_VariableDeclaration_gcBlobPrefix(
    use: TypeOnly<typeof old.gcBlobPrefix>): void;
use_old_VariableDeclaration_gcBlobPrefix(
    get_current_VariableDeclaration_gcBlobPrefix());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_getMicrosoftConfiguration": {"forwardCompat": false}
 */
declare function get_old_VariableDeclaration_getMicrosoftConfiguration():
    TypeOnly<typeof old.getMicrosoftConfiguration>;
declare function use_current_VariableDeclaration_getMicrosoftConfiguration(
    use: TypeOnly<typeof current.getMicrosoftConfiguration>): void;
use_current_VariableDeclaration_getMicrosoftConfiguration(
    get_old_VariableDeclaration_getMicrosoftConfiguration());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_getMicrosoftConfiguration": {"backCompat": false}
 */
declare function get_current_VariableDeclaration_getMicrosoftConfiguration():
    TypeOnly<typeof current.getMicrosoftConfiguration>;
declare function use_old_VariableDeclaration_getMicrosoftConfiguration(
    use: TypeOnly<typeof old.getMicrosoftConfiguration>): void;
use_old_VariableDeclaration_getMicrosoftConfiguration(
    get_current_VariableDeclaration_getMicrosoftConfiguration());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_getNormalizedSnapshot": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_getNormalizedSnapshot():
    TypeOnly<typeof old.getNormalizedSnapshot>;
declare function use_current_FunctionDeclaration_getNormalizedSnapshot(
    use: TypeOnly<typeof current.getNormalizedSnapshot>): void;
use_current_FunctionDeclaration_getNormalizedSnapshot(
    get_old_FunctionDeclaration_getNormalizedSnapshot());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_getNormalizedSnapshot": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_getNormalizedSnapshot():
    TypeOnly<typeof current.getNormalizedSnapshot>;
declare function use_old_FunctionDeclaration_getNormalizedSnapshot(
    use: TypeOnly<typeof old.getNormalizedSnapshot>): void;
use_old_FunctionDeclaration_getNormalizedSnapshot(
    get_current_FunctionDeclaration_getNormalizedSnapshot());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_loadRC": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_loadRC():
    TypeOnly<typeof old.loadRC>;
declare function use_current_FunctionDeclaration_loadRC(
    use: TypeOnly<typeof current.loadRC>): void;
use_current_FunctionDeclaration_loadRC(
    get_old_FunctionDeclaration_loadRC());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_loadRC": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_loadRC():
    TypeOnly<typeof current.loadRC>;
declare function use_old_FunctionDeclaration_loadRC(
    use: TypeOnly<typeof old.loadRC>): void;
use_old_FunctionDeclaration_loadRC(
    get_current_FunctionDeclaration_loadRC());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_lockRC": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_lockRC():
    TypeOnly<typeof old.lockRC>;
declare function use_current_FunctionDeclaration_lockRC(
    use: TypeOnly<typeof current.lockRC>): void;
use_current_FunctionDeclaration_lockRC(
    get_old_FunctionDeclaration_lockRC());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_lockRC": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_lockRC():
    TypeOnly<typeof current.lockRC>;
declare function use_old_FunctionDeclaration_lockRC(
    use: TypeOnly<typeof old.lockRC>): void;
use_old_FunctionDeclaration_lockRC(
    get_current_FunctionDeclaration_lockRC());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_odspTokensCache": {"forwardCompat": false}
 */
declare function get_old_VariableDeclaration_odspTokensCache():
    TypeOnly<typeof old.odspTokensCache>;
declare function use_current_VariableDeclaration_odspTokensCache(
    use: TypeOnly<typeof current.odspTokensCache>): void;
use_current_VariableDeclaration_odspTokensCache(
    get_old_VariableDeclaration_odspTokensCache());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_odspTokensCache": {"backCompat": false}
 */
declare function get_current_VariableDeclaration_odspTokensCache():
    TypeOnly<typeof current.odspTokensCache>;
declare function use_old_VariableDeclaration_odspTokensCache(
    use: TypeOnly<typeof old.odspTokensCache>): void;
use_old_VariableDeclaration_odspTokensCache(
    get_current_VariableDeclaration_odspTokensCache());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_saveRC": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_saveRC():
    TypeOnly<typeof old.saveRC>;
declare function use_current_FunctionDeclaration_saveRC(
    use: TypeOnly<typeof current.saveRC>): void;
use_current_FunctionDeclaration_saveRC(
    get_old_FunctionDeclaration_saveRC());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_saveRC": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_saveRC():
    TypeOnly<typeof current.saveRC>;
declare function use_old_FunctionDeclaration_saveRC(
    use: TypeOnly<typeof old.saveRC>): void;
use_old_FunctionDeclaration_saveRC(
    get_current_FunctionDeclaration_saveRC());
