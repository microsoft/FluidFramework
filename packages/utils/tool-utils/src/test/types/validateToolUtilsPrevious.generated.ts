/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType, requireAssignableTo } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/tool-utils-previous/internal";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current | requireAssignableTo<true, true>;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IAsyncCache": {"forwardCompat": false}
 */
declare type old_as_current_for_InterfaceDeclaration_IAsyncCache = requireAssignableTo<TypeOnly<old.IAsyncCache<any,any>>, TypeOnly<current.IAsyncCache<any,any>>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IAsyncCache": {"backCompat": false}
 */
declare type current_as_old_for_InterfaceDeclaration_IAsyncCache = requireAssignableTo<TypeOnly<current.IAsyncCache<any,any>>, TypeOnly<old.IAsyncCache<any,any>>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IOdspTokenManagerCacheKey": {"forwardCompat": false}
 */
declare type old_as_current_for_InterfaceDeclaration_IOdspTokenManagerCacheKey = requireAssignableTo<TypeOnly<old.IOdspTokenManagerCacheKey>, TypeOnly<current.IOdspTokenManagerCacheKey>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IOdspTokenManagerCacheKey": {"backCompat": false}
 */
declare type current_as_old_for_InterfaceDeclaration_IOdspTokenManagerCacheKey = requireAssignableTo<TypeOnly<current.IOdspTokenManagerCacheKey>, TypeOnly<old.IOdspTokenManagerCacheKey>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IResources": {"forwardCompat": false}
 */
declare type old_as_current_for_InterfaceDeclaration_IResources = requireAssignableTo<TypeOnly<old.IResources>, TypeOnly<current.IResources>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IResources": {"backCompat": false}
 */
declare type current_as_old_for_InterfaceDeclaration_IResources = requireAssignableTo<TypeOnly<current.IResources>, TypeOnly<old.IResources>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISnapshotNormalizerConfig": {"forwardCompat": false}
 */
declare type old_as_current_for_InterfaceDeclaration_ISnapshotNormalizerConfig = requireAssignableTo<TypeOnly<old.ISnapshotNormalizerConfig>, TypeOnly<current.ISnapshotNormalizerConfig>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ISnapshotNormalizerConfig": {"backCompat": false}
 */
declare type current_as_old_for_InterfaceDeclaration_ISnapshotNormalizerConfig = requireAssignableTo<TypeOnly<current.ISnapshotNormalizerConfig>, TypeOnly<old.ISnapshotNormalizerConfig>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_OdspTokenConfig": {"forwardCompat": false}
 */
declare type old_as_current_for_TypeAliasDeclaration_OdspTokenConfig = requireAssignableTo<TypeOnly<old.OdspTokenConfig>, TypeOnly<current.OdspTokenConfig>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAliasDeclaration_OdspTokenConfig": {"backCompat": false}
 */
declare type current_as_old_for_TypeAliasDeclaration_OdspTokenConfig = requireAssignableTo<TypeOnly<current.OdspTokenConfig>, TypeOnly<old.OdspTokenConfig>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_OdspTokenManager": {"forwardCompat": false}
 */
declare type old_as_current_for_ClassDeclaration_OdspTokenManager = requireAssignableTo<TypeOnly<old.OdspTokenManager>, TypeOnly<current.OdspTokenManager>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_OdspTokenManager": {"backCompat": false}
 */
declare type current_as_old_for_ClassDeclaration_OdspTokenManager = requireAssignableTo<TypeOnly<current.OdspTokenManager>, TypeOnly<old.OdspTokenManager>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_gcBlobPrefix": {"forwardCompat": false}
 */
declare type old_as_current_for_VariableDeclaration_gcBlobPrefix = requireAssignableTo<TypeOnly<typeof old.gcBlobPrefix>, TypeOnly<typeof current.gcBlobPrefix>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_gcBlobPrefix": {"backCompat": false}
 */
declare type current_as_old_for_VariableDeclaration_gcBlobPrefix = requireAssignableTo<TypeOnly<typeof current.gcBlobPrefix>, TypeOnly<typeof old.gcBlobPrefix>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_getMicrosoftConfiguration": {"forwardCompat": false}
 */
declare type old_as_current_for_VariableDeclaration_getMicrosoftConfiguration = requireAssignableTo<TypeOnly<typeof old.getMicrosoftConfiguration>, TypeOnly<typeof current.getMicrosoftConfiguration>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_getMicrosoftConfiguration": {"backCompat": false}
 */
declare type current_as_old_for_VariableDeclaration_getMicrosoftConfiguration = requireAssignableTo<TypeOnly<typeof current.getMicrosoftConfiguration>, TypeOnly<typeof old.getMicrosoftConfiguration>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_getNormalizedSnapshot": {"forwardCompat": false}
 */
declare type old_as_current_for_FunctionDeclaration_getNormalizedSnapshot = requireAssignableTo<TypeOnly<typeof old.getNormalizedSnapshot>, TypeOnly<typeof current.getNormalizedSnapshot>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_getNormalizedSnapshot": {"backCompat": false}
 */
declare type current_as_old_for_FunctionDeclaration_getNormalizedSnapshot = requireAssignableTo<TypeOnly<typeof current.getNormalizedSnapshot>, TypeOnly<typeof old.getNormalizedSnapshot>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_loadRC": {"forwardCompat": false}
 */
declare type old_as_current_for_FunctionDeclaration_loadRC = requireAssignableTo<TypeOnly<typeof old.loadRC>, TypeOnly<typeof current.loadRC>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_loadRC": {"backCompat": false}
 */
declare type current_as_old_for_FunctionDeclaration_loadRC = requireAssignableTo<TypeOnly<typeof current.loadRC>, TypeOnly<typeof old.loadRC>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_lockRC": {"forwardCompat": false}
 */
declare type old_as_current_for_FunctionDeclaration_lockRC = requireAssignableTo<TypeOnly<typeof old.lockRC>, TypeOnly<typeof current.lockRC>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_lockRC": {"backCompat": false}
 */
declare type current_as_old_for_FunctionDeclaration_lockRC = requireAssignableTo<TypeOnly<typeof current.lockRC>, TypeOnly<typeof old.lockRC>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_odspTokensCache": {"forwardCompat": false}
 */
declare type old_as_current_for_VariableDeclaration_odspTokensCache = requireAssignableTo<TypeOnly<typeof old.odspTokensCache>, TypeOnly<typeof current.odspTokensCache>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_odspTokensCache": {"backCompat": false}
 */
declare type current_as_old_for_VariableDeclaration_odspTokensCache = requireAssignableTo<TypeOnly<typeof current.odspTokensCache>, TypeOnly<typeof old.odspTokensCache>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_saveRC": {"forwardCompat": false}
 */
declare type old_as_current_for_FunctionDeclaration_saveRC = requireAssignableTo<TypeOnly<typeof old.saveRC>, TypeOnly<typeof current.saveRC>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_saveRC": {"backCompat": false}
 */
declare type current_as_old_for_FunctionDeclaration_saveRC = requireAssignableTo<TypeOnly<typeof current.saveRC>, TypeOnly<typeof old.saveRC>>
