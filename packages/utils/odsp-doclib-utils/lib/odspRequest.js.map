{"version":3,"file":"odspRequest.js","sourceRoot":"","sources":["../src/odspRequest.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,MAAM,YAAY,CAAC;AAC/B,OAAO,EAEH,oBAAoB,GACvB,MAAM,YAAY,CAAC;AAEpB,MAAM,CAAC,KAAK,UAAU,QAAQ,CAC1B,GAAW,EACX,eAAqC;IAErC,OAAO,WAAW,CAAC,eAAe,EAAE,KAAK,EAAE,MAAmB,EAAE,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,MAAM,CAAa,CAAC,CAAC;AACvG,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,QAAQ,CAC1B,GAAW,EACX,eAAqC;IAErC,OAAO,WAAW,CAAC,eAAe,EAAE,KAAK,EAAE,MAAmB,EAAE,EAAE;QAC9D,MAAM,SAAS,mCACR,MAAM,KACT,MAAM,EAAE,KAAK,GAChB,CAAC;QACF,OAAO,KAAK,CAAC,GAAG,EAAE,SAAS,CAAa,CAAC;IAC7C,CAAC,CAAC,CAAC;AACP,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,SAAS,CAC3B,GAAW,EACX,IAAS,EACT,eAAqC;IAErC,OAAO,WAAW,CAAC,eAAe,EAAE,KAAK,EAAE,MAAmB,EAAE,EAAE;QAC9D,MAAM,UAAU,mCACT,MAAM,KACT,IAAI,EACJ,MAAM,EAAE,MAAM,GACjB,CAAC;QACF,OAAO,KAAK,CAAC,GAAG,EAAE,UAAU,CAAa,CAAC;IAC9C,CAAC,CAAC,CAAC;AACP,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,GAAW,EAAE,IAAS;IACxD,OAAO,eAAe,CAAC,KAAK,IAAI,EAAE;QAC9B,OAAO,KAAK,CAAC,GAAG,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,CAAa,CAAC;IAC5D,CAAC,CAAC,CAAC;AACP,CAAC;AAED,KAAK,UAAU,WAAW,CACtB,eAAqC,EACrC,eAA2D;IAE3D,OAAO,oBAAoB,CACvB,eAAe,EACf,KAAK,EAAE,MAAmB,EAAE,EAAE,CAAC,eAAe,CAAC,KAAK,IAAI,EAAE,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CACtF,CAAC;AACN,CAAC;AAED,KAAK,UAAU,eAAe,CAAC,eAAwC;;IACnE,IAAI,QAAkB,CAAC;IACvB,IAAI;QACA,QAAQ,GAAG,MAAM,eAAe,EAAE,CAAC;KACtC;IAAC,OAAO,KAAK,EAAE;QACZ,gBAAI,KAAK,0CAAE,QAAQ,0CAAE,MAAM,EAAE;YACzB,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;SAC7B;aAAM;YACH,MAAM,KAAK,CAAC;SACf;KACJ;IACD,OAAO,QAAQ,CAAC;AACpB,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport fetch from \"node-fetch\";\nimport {\n    IOdspAuthRequestInfo,\n    authRequestWithRetry,\n} from \"./odspAuth\";\n\nexport async function getAsync(\n    url: string,\n    authRequestInfo: IOdspAuthRequestInfo,\n): Promise<Response> {\n    return authRequest(authRequestInfo, async (config: RequestInit) => fetch(url, config) as Response);\n}\n\nexport async function putAsync(\n    url: string,\n    authRequestInfo: IOdspAuthRequestInfo,\n): Promise<Response> {\n    return authRequest(authRequestInfo, async (config: RequestInit) => {\n        const putConfig = {\n            ...config,\n            method: \"PUT\",\n        };\n        return fetch(url, putConfig) as Response;\n    });\n}\n\nexport async function postAsync(\n    url: string,\n    body: any,\n    authRequestInfo: IOdspAuthRequestInfo,\n): Promise<Response> {\n    return authRequest(authRequestInfo, async (config: RequestInit) => {\n        const postConfig = {\n            ...config,\n            body,\n            method: \"POST\",\n        };\n        return fetch(url, postConfig) as Response;\n    });\n}\n\nexport async function unauthPostAsync(url: string, body: any): Promise<Response> {\n    return safeRequestCore(async () => {\n        return fetch(url, { body, method: \"POST\" }) as Response;\n    });\n}\n\nasync function authRequest(\n    authRequestInfo: IOdspAuthRequestInfo,\n    requestCallback: (config: RequestInit) => Promise<Response>,\n): Promise<Response> {\n    return authRequestWithRetry(\n        authRequestInfo,\n        async (config: RequestInit) => safeRequestCore(async () => requestCallback(config)),\n    );\n}\n\nasync function safeRequestCore(requestCallback: () => Promise<Response>): Promise<Response> {\n    let response: Response;\n    try {\n        response = await requestCallback();\n    } catch (error) {\n        if (error?.response?.status) {\n            response = error.response;\n        } else {\n            throw error;\n        }\n    }\n    return response;\n}\n"]}