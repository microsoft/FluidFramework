{"version":3,"file":"odspErrorUtils.js","sourceRoot":"","sources":["../src/odspErrorUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { DriverError, DriverErrorType } from \"@fluidframework/driver-definitions\";\nimport {\n    AuthorizationError,\n    createGenericNetworkError,\n    GenericNetworkError,\n    isOnline,\n    NetworkErrorBasic,\n    NonRetryableError,\n    OnlineStatus,\n} from \"@fluidframework/driver-utils\";\n\nexport const offlineFetchFailureStatusCode: number = 709;\nexport const fetchFailureStatusCode: number = 710;\n// Status code for invalid file name error in odsp driver.\nexport const invalidFileNameStatusCode: number = 711;\n// no response, or can't parse response\nexport const fetchIncorrectResponse = 712;\n\nexport enum OdspErrorType {\n    /**\n     * Storage is out of space\n     */\n    outOfStorageError = \"outOfStorageError\",\n\n    /**\n     * Invalid file name (at creation of the file)\n     */\n    invalidFileNameError = \"invalidFileNameError\",\n\n    /**\n     * Snapshot is too big. Host application specified limit for snapshot size, and snapshot was bigger\n     * that that limit, thus request failed. Hosting application is expected to have fall-back behavior for\n     * such case.\n     */\n    snapshotTooBig = \"snapshotTooBig\",\n\n    /*\n        * SPO admin toggle: fluid service is not enabled.\n        */\n    fluidNotEnabled = \"fluidNotEnabled\",\n}\n\n/**\n * Base interface for all errors and warnings\n */\nexport interface IOdspError {\n    readonly errorType: OdspErrorType;\n    readonly message: string;\n    canRetry: boolean;\n    online?: string;\n}\n\nexport type OdspError =\n    | DriverError\n    | IOdspError;\n\nexport function createOdspNetworkError(\n    errorMessage: string,\n    statusCode?: number,\n    retryAfterSeconds?: number,\n    claims?: string,\n): OdspError {\n    let error: OdspError;\n\n    switch (statusCode) {\n        case 400:\n            error = new GenericNetworkError(errorMessage, false, statusCode);\n            break;\n        case 401:\n        case 403:\n            error = new AuthorizationError(errorMessage, claims);\n            break;\n        case 404:\n            error = new NetworkErrorBasic(errorMessage, DriverErrorType.fileNotFoundOrAccessDeniedError, false);\n            break;\n        case 406:\n            error = new NetworkErrorBasic(errorMessage, DriverErrorType.unsupportedClientProtocolVersion, false);\n            break;\n        case 413:\n            error = new NonRetryableError(errorMessage, OdspErrorType.snapshotTooBig);\n            break;\n        case 414:\n        case invalidFileNameStatusCode:\n            error = new NonRetryableError(errorMessage, OdspErrorType.invalidFileNameError);\n            break;\n        case 500:\n            error = new GenericNetworkError(errorMessage, true);\n            break;\n        case 501:\n            error = new NonRetryableError(errorMessage, OdspErrorType.fluidNotEnabled);\n            break;\n        case 507:\n            error = new NonRetryableError(errorMessage, OdspErrorType.outOfStorageError);\n            break;\n        case offlineFetchFailureStatusCode:\n            error = new NetworkErrorBasic(errorMessage, DriverErrorType.offlineError, true);\n            break;\n        case fetchFailureStatusCode:\n            error = new NetworkErrorBasic(errorMessage, DriverErrorType.fetchFailure, true);\n            break;\n        case fetchIncorrectResponse:\n            error = new NetworkErrorBasic(errorMessage, DriverErrorType.incorrectServerResponse, false);\n            break;\n        default:\n            error = createGenericNetworkError(errorMessage, true, retryAfterSeconds, statusCode);\n    }\n\n    error.online = OnlineStatus[isOnline()];\n\n    return error;\n}\n\n/**\n * Throws network error - an object with a bunch of network related properties\n */\nexport function throwOdspNetworkError(\n    errorMessage: string,\n    statusCode: number,\n    response?: Response,\n) {\n    const networkError = createOdspNetworkError(\n        response ? `${errorMessage}, msg = ${response.statusText}, type = ${response.type}` : errorMessage,\n        statusCode,\n        undefined /* retryAfterSeconds */,\n        undefined);\n\n    throw networkError;\n}\n"]}