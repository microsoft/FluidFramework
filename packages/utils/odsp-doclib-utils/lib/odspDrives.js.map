{"version":3,"file":"odspDrives.js","sourceRoot":"","sources":["../src/odspDrives.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { IOdspAuthRequestInfo } from \"./odspAuth\";\nimport { throwOdspNetworkError } from \"./odspErrorUtils\";\nimport { getAsync, putAsync } from \"./odspRequest\";\n\ninterface IOdspUser {\n    displayName: string;\n    email?: string;\n    id?: string;\n}\n\ninterface IOdspGroup {\n    displayName: string;\n    email?: string;\n}\n\ninterface IOdspDriveQuota {\n    deleted: number;\n    fileCount: number;\n    remaining: number;\n    state: string;\n    total: number;\n    used: number;\n}\n\ninterface IOdspEntity {\n    user?: IOdspUser;\n    group?: IOdspGroup;\n}\n\ninterface IOdspDriveInfo {\n    id: string;\n    createdDateTime: string;\n    description: string;\n    driveType: string;\n    lastModifiedDateTime: string;\n    name: string;\n    webUrl: string;\n    createdBy: IOdspEntity;\n    lastModifiedBy: IOdspEntity;\n    owner: IOdspEntity;\n    quota: IOdspDriveQuota;\n}\n\nexport interface IOdspDriveItem {\n    path: string;\n    name: string;\n    drive: string;\n    item: string;\n    isFolder: boolean;\n}\n\nexport async function getDriveItemByRootFileName(\n    server: string,\n    account: string,\n    path: string,\n    authRequestInfo: IOdspAuthRequestInfo,\n    create: boolean,\n    driveId?: string,\n): Promise<IOdspDriveItem> {\n    const accountPath = account !== undefined ? `/${account}` : \"\";\n    let getDriveItemUrl;\n    if (driveId !== undefined && driveId !== \"\") {\n        const encodedDrive = encodeURIComponent(driveId);\n        getDriveItemUrl = `https://${server}${accountPath}/_api/v2.1/drives/${encodedDrive}/root:${path}:`;\n    } else {\n        getDriveItemUrl = `https://${server}${accountPath}/_api/v2.1/drive/root:${path}:`;\n    }\n    return getDriveItem(getDriveItemUrl, authRequestInfo, create);\n}\n\nexport async function getDriveItemByServerRelativePath(\n    server: string,\n    serverRelativePath: string,\n    authRequestInfo: IOdspAuthRequestInfo,\n    create: boolean,\n): Promise<IOdspDriveItem> {\n    let account = \"\";\n    const pathParts = serverRelativePath.split(\"/\");\n    if (serverRelativePath.startsWith(\"/\")) {\n        pathParts.shift();\n    }\n    if (pathParts.length === 0) {\n        return Promise.reject(new Error(`Invalid serverRelativePath ${serverRelativePath}`));\n    }\n    if (pathParts.length >= 2 &&\n        (pathParts[0] === \"personal\" || pathParts[0] === \"teams\" || pathParts[0] === \"sites\")) {\n        account = `${pathParts.shift()}/${pathParts.shift()}`;\n    }\n\n    const library = pathParts.shift();\n    if (!library) {\n        // Default drive/library\n        return getDriveItemByRootFileName(server, account, \"/\", authRequestInfo, create);\n    }\n    const path = `/${pathParts.join(\"/\")}`;\n    const driveId = await getDriveId(server, account, library, authRequestInfo);\n    const getDriveItemUrl = `https://${server}/_api/v2.1/drives/${driveId}/root:${path}:`;\n    return getDriveItem(getDriveItemUrl, authRequestInfo, create);\n}\n\nexport async function getDriveItemFromDriveAndItem(\n    server: string,\n    drive: string,\n    item: string,\n    authRequestInfo: IOdspAuthRequestInfo,\n): Promise<IOdspDriveItem> {\n    const url = `https://${server}/_api/v2.1/drives/${drive}/items/${item}`;\n    return getDriveItem(url, authRequestInfo, false);\n}\n\nexport async function getChildrenByDriveItem(\n    driveItem: IOdspDriveItem,\n    server: string,\n    authRequestInfo: IOdspAuthRequestInfo,\n): Promise<IOdspDriveItem[]> {\n    if (!driveItem.isFolder) { return []; }\n    let url = `https://${server}/_api/v2.1/drives/${driveItem.drive}/items/${driveItem.item}/children`;\n    let children: any[] = [];\n    do {\n        const response = await getAsync(url, authRequestInfo);\n        if (response.status !== 200) {\n            throwOdspNetworkError(\"Unable to get children\", response.status);\n        }\n        const getChildrenResult = await response.json();\n        children = children.concat(getChildrenResult.value);\n        url = getChildrenResult[\"@odata.nextLink\"];\n    } while (url);\n\n    return children.map(toIODSPDriveItem);\n}\n\nasync function getDriveItem(\n    getDriveItemUrl: string,\n    authRequestInfo: IOdspAuthRequestInfo,\n    create: boolean,\n): Promise<IOdspDriveItem> {\n    let response = await getAsync(getDriveItemUrl, authRequestInfo);\n    if (response.status !== 200) {\n        if (!create) {\n            throwOdspNetworkError(\"Unable to get drive/item id from path\", response.status);\n        }\n\n        // Try creating the file\n        const contentUri = `${getDriveItemUrl}/content`;\n        const createResultResponse = await putAsync(contentUri, authRequestInfo);\n        if (createResultResponse.status !== 201) {\n            throwOdspNetworkError(\"Failed to create file.\", createResultResponse.status);\n        }\n\n        response = await getAsync(getDriveItemUrl, authRequestInfo);\n        if (response.status !== 200) {\n            throwOdspNetworkError(\"Unable to get drive/item id from path\", response.status);\n        }\n    }\n    const getDriveItemResult = await response.json();\n    return toIODSPDriveItem(getDriveItemResult);\n}\n\nasync function getDriveId(\n    server: string,\n    account: string,\n    library: string,\n    authRequestInfo: IOdspAuthRequestInfo,\n): Promise<string> {\n    const drives = await getDrives(server, account, authRequestInfo);\n    const accountPath = account ? `/${account}` : \"\";\n    const drivePath = encodeURI(`https://${server}${accountPath}/${library}`);\n    const index = drives.findIndex((value) => value.webUrl === drivePath);\n    if (index === -1) {\n        throw Error(`Drive ${drivePath} not found.`);\n    }\n    return drives[index].id;\n}\n\nasync function getDrives(\n    server: string,\n    account: string,\n    authRequestInfo: IOdspAuthRequestInfo,\n): Promise<IOdspDriveInfo[]> {\n    const accountPath = account ? `/${account}` : \"\";\n    const getDriveUrl = `https://${server}${accountPath}/_api/v2.1/drives`;\n    const response = await getAsync(getDriveUrl, authRequestInfo);\n    if (response.status !== 200) {\n        throwOdspNetworkError(\"Failed to get drives.\", response.status);\n    }\n    const getDriveResult = await response.json();\n    return getDriveResult.value as IOdspDriveInfo[];\n}\n\nfunction toIODSPDriveItem(parsedDriveItemBody: any): IOdspDriveItem {\n    const path = parsedDriveItemBody.parentReference.path ?\n        parsedDriveItemBody.parentReference.path.split(\"root:\")[1] : \"/\";\n    return {\n        path,\n        name: parsedDriveItemBody.name,\n        drive: parsedDriveItemBody.parentReference.driveId,\n        item: parsedDriveItemBody.id,\n        isFolder: !!parsedDriveItemBody.folder,\n    };\n}\n"]}