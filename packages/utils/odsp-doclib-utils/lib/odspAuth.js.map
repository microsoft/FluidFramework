{"version":3,"file":"odspAuth.js","sourceRoot":"","sources":["../src/odspAuth.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,EAAE,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AACxD,OAAO,EAAE,qBAAqB,EAAE,MAAM,kBAAkB,CAAC;AACzD,OAAO,EAAE,eAAe,EAAE,MAAM,eAAe,CAAC;AAqChD,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,MAAc,EAAE,EAAE,CAAC,0BAA0B,MAAM,iBAAiB,CAAC;AAClG,MAAM,CAAC,MAAM,SAAS,GAAG,sEAAsE,CAAC;AAEhG,MAAM,UAAU,gBAAgB,CAAC,MAAc;IAC3C,OAAO,qCAAqC,mBAAmB,CAAC,MAAM,CAAC,oBAAoB,CAAC;AAChG,CAAC;AAED,MAAM,UAAU,eAAe,CAC3B,MAAe,EACf,MAAc,EACd,YAA2B,EAC3B,KAAa,EACb,mBAA2B;IAE3B,MAAM,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;IACtE,OAAO,qCAAqC,MAAM,yBAAyB;UACrE,aAAa,YAAY,CAAC,QAAQ,EAAE;UACpC,UAAU,KAAK,EAAE;UACjB,qBAAqB;UACrB,iBAAiB,mBAAmB,EAAE,CAAC;AACjD,CAAC;AAED,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,MAAc,EAAE,YAA2B,EAAE,MAAmB,EAAE,EAAE,CACtG,iBAAiB,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;AAC1E,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,MAAc,EAAE,YAA2B,EAAE,MAAmB,EAAE,EAAE,CACtG,iBAAiB,CAAC,SAAS,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;AAC/D,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,KAAa,EAAE,MAAc,EAAE,YAA2B,EAAE,MAAmB,EAAE,EAAE,CACjH,KAAK,IAAI,EAAE;IACP,MAAM,aAAa,CAAC,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;IACzD,OAAO,MAAM,CAAC,WAAW,CAAC;AAC9B,CAAC,CAAC;AAEN;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,WAAW,CAC7B,MAAc,EACd,KAAa,EACb,YAA2B,EAC3B,WAAoC;IAEpC,MAAM,IAAI,mBACN,KAAK,EACL,SAAS,EAAE,YAAY,CAAC,QAAQ,EAChC,aAAa,EAAE,YAAY,CAAC,YAAY,IACrC,WAAW,CACjB,CAAC;IACF,MAAM,MAAM,GAAG,MAAM,eAAe,CAChC,gBAAgB,CAAC,MAAM,CAAC,EACxB,IAAI,eAAe,CAAC,IAAI,CAAC,CAC5B,CAAC;IACF,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;IACnC,MAAM,WAAW,GAAG,MAAM,CAAC,YAAY,CAAC;IACxC,MAAM,YAAY,GAAG,MAAM,CAAC,aAAa,CAAC;IAE1C,IAAI,WAAW,KAAK,SAAS,IAAI,YAAY,KAAK,SAAS,EAAE;QACzD,qBAAqB,CAAC,6BAA6B,EAAE,MAAM,CAAC,KAAK,KAAK,eAAe,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;KAChH;IACD,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;AACzC,CAAC;AAED;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,aAAa,CAC/B,MAAc,EACd,KAAa,EACb,YAA2B,EAC3B,MAAmB;IAEnB,yDAAyD;IACzD,MAAM,aAAa,GAAG,MAAM,CAAC,YAAY,CAAC;IAC1C,MAAM,CAAC,WAAW,GAAG,EAAE,CAAC;IACxB,MAAM,CAAC,YAAY,GAAG,EAAE,CAAC;IAEzB,MAAM,WAAW,GAA4B;QACzC,UAAU,EAAE,eAAe;QAC3B,aAAa;KAChB,CAAC;IACF,MAAM,SAAS,GAAG,MAAM,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,WAAW,CAAC,CAAC;IAE9E,2DAA2D;IAC3D,MAAM,CAAC,WAAW,GAAG,SAAS,CAAC,WAAW,CAAC;IAC3C,MAAM,CAAC,YAAY,GAAG,SAAS,CAAC,YAAY,CAAC;AACjD,CAAC;AAED;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,oBAAoB,CACtC,eAAqC,EACrC,eAA2D;IAE3D,MAAM,YAAY,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,aAAa,EAAE,UAAU,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;IAEpF,MAAM,MAAM,GAAG,MAAM,eAAe,CAAC,YAAY,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,CAAC;IAEhF,IAAI,eAAe,CAAC,cAAc,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,MAAM,KAAK,GAAG,CAAC,EAAE;QACpF,yCAAyC;QACzC,MAAM,oBAAoB,GAAG,MAAM,eAAe,CAAC,cAAc,EAAE,CAAC;QACpE,OAAO,eAAe,CAAC,YAAY,CAAC,oBAAoB,CAAC,CAAC,CAAC;KAC9D;IACD,OAAO,MAAM,CAAC;AAClB,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { getSharepointTenant } from \"./odspDocLibUtils\";\nimport { throwOdspNetworkError } from \"./odspErrorUtils\";\nimport { unauthPostAsync } from \"./odspRequest\";\n\nexport interface IOdspTokens {\n    accessToken: string;\n    refreshToken: string;\n}\n\nexport interface IClientConfig {\n    clientId: string;\n    clientSecret: string;\n}\n\nexport interface IOdspAuthRequestInfo {\n    accessToken: string;\n    refreshTokenFn?: () => Promise<string>,\n}\n\nexport type TokenRequestCredentials = {\n    grant_type: \"authorization_code\";\n    code: string;\n    redirect_uri: string;\n} | {\n    grant_type: \"refresh_token\";\n    refresh_token: string;\n} | {\n    grant_type: \"password\";\n    username: string;\n    password: string;\n};\n\ntype TokenRequestBody =\n    TokenRequestCredentials & {\n        client_id: string,\n        client_secret: string,\n        scope: string,\n    };\n\nexport const getOdspScope = (server: string) => `offline_access https://${server}/AllSites.Write`;\nexport const pushScope = \"offline_access https://pushchannel.1drv.ms/PushChannel.ReadWrite.All\";\n\nexport function getFetchTokenUrl(server: string): string {\n    return `https://login.microsoftonline.com/${getSharepointTenant(server)}/oauth2/v2.0/token`;\n}\n\nexport function getLoginPageUrl(\n    isPush: boolean,\n    server: string,\n    clientConfig: IClientConfig,\n    scope: string,\n    odspAuthRedirectUri: string,\n) {\n    const tenant = isPush ? \"organizations\" : getSharepointTenant(server);\n    return `https://login.microsoftonline.com/${tenant}/oauth2/v2.0/authorize?`\n        + `client_id=${clientConfig.clientId}`\n        + `&scope=${scope}`\n        + `&response_type=code`\n        + `&redirect_uri=${odspAuthRedirectUri}`;\n}\n\nexport const getOdspRefreshTokenFn = (server: string, clientConfig: IClientConfig, tokens: IOdspTokens) =>\n    getRefreshTokenFn(getOdspScope(server), server, clientConfig, tokens);\nexport const getPushRefreshTokenFn = (server: string, clientConfig: IClientConfig, tokens: IOdspTokens) =>\n    getRefreshTokenFn(pushScope, server, clientConfig, tokens);\nexport const getRefreshTokenFn = (scope: string, server: string, clientConfig: IClientConfig, tokens: IOdspTokens) =>\n    async () => {\n        await refreshTokens(server, scope, clientConfig, tokens);\n        return tokens.accessToken;\n    };\n\n/**\n * Fetch an access token and refresh token from AAD\n * @param server - The server to auth against\n * @param scope - The desired oauth scope\n * @param clientConfig - Info about this client's identity\n * @param credentials - Credentials authorizing the client for the requested token\n */\nexport async function fetchTokens(\n    server: string,\n    scope: string,\n    clientConfig: IClientConfig,\n    credentials: TokenRequestCredentials,\n): Promise<IOdspTokens> {\n    const body: TokenRequestBody = {\n        scope,\n        client_id: clientConfig.clientId,\n        client_secret: clientConfig.clientSecret,\n        ...credentials,\n    };\n    const result = await unauthPostAsync(\n        getFetchTokenUrl(server),\n        new URLSearchParams(body), // This formats the body like a query string which is the expected format\n    );\n    const tokens = await result.json();\n    const accessToken = tokens.access_token;\n    const refreshToken = tokens.refresh_token;\n\n    if (accessToken === undefined || refreshToken === undefined) {\n        throwOdspNetworkError(\"Unable to get access token.\", tokens.error === \"invalid_grant\" ? 401 : result.status);\n    }\n    return { accessToken, refreshToken };\n}\n\n/**\n * Fetch fresh tokens and update the provided tokens object with them\n * @param server - The server to auth against\n * @param scope - The desired oauth scope\n * @param clientConfig - Info about this client's identity\n * @param tokens - The tokens object to update with fresh tokens. Also provides the refresh token for the request\n */\nexport async function refreshTokens(\n    server: string,\n    scope: string,\n    clientConfig: IClientConfig,\n    tokens: IOdspTokens,\n): Promise<void> {\n    // Clear out the old tokens while awaiting the new tokens\n    const refresh_token = tokens.refreshToken;\n    tokens.accessToken = \"\";\n    tokens.refreshToken = \"\";\n\n    const credentials: TokenRequestCredentials = {\n        grant_type: \"refresh_token\",\n        refresh_token,\n    };\n    const newTokens = await fetchTokens(server, scope, clientConfig, credentials);\n\n    // Instead of returning, update the passed in tokens object\n    tokens.accessToken = newTokens.accessToken;\n    tokens.refreshToken = newTokens.refreshToken;\n}\n\n/**\n * Issue the requestCallback, providing the proper auth header based on authRequestInfo,\n * and retrying with a refreshed token if necessary.\n */\nexport async function authRequestWithRetry(\n    authRequestInfo: IOdspAuthRequestInfo,\n    requestCallback: (config: RequestInit) => Promise<Response>,\n): Promise<Response> {\n    const createConfig = (token) => ({ headers: { Authorization: `Bearer ${token}` } });\n\n    const result = await requestCallback(createConfig(authRequestInfo.accessToken));\n\n    if (authRequestInfo.refreshTokenFn && (result.status === 401 || result.status === 403)) {\n        // Unauthorized, try to refresh the token\n        const refreshedAccessToken = await authRequestInfo.refreshTokenFn();\n        return requestCallback(createConfig(refreshedAccessToken));\n    }\n    return result;\n}\n"]}