{"version":3,"file":"fluidPackage.js","sourceRoot":"","sources":["../src/fluidPackage.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAyDH;;;GAGG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,GAAQ,EAAkC,EAAE,CACvE,OAAO,GAAG,KAAK,QAAQ;OACpB,QAAO,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,IAAI,CAAA,KAAK,QAAQ;OAC7B,QAAO,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,KAAK,CAAA,KAAK,QAAQ,CAAC;AAyBtC,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,OAAgB,EAAsC,EAAE;IACvF,MAAM,gBAAgB,GAAG,OAAiD,CAAC;IAC3E,OAAO,OAAO,gBAAgB,KAAK,QAAQ;WACpC,CAAC,QAAO,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,OAAO,CAAA,KAAK,QAAQ,IAAI,cAAc,CAAC,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,OAAO,CAAC,CAAC;WAC5F,CAAC,CAAA,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,MAAM,MAAK,SAAS,IAAI,QAAO,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,MAAM,CAAA,KAAK,QAAQ,CAAC,CAAC;AACpG,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,yBAAyB,GAA2C,2BAA2B,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n /**\n  * Specifies an environment on Fluid property of a IFluidPackage\n  */\nexport interface IFluidPackageEnvironment {\n\n    /**\n     * The name of the target. For a browser environment, this could be umd for scripts\n     * or css for styles.\n     */\n    [target: string]: undefined | {\n        /**\n         * List of files for the target. These can be relative or absolute.\n         * The code loader should resolve relative paths, and validate all\n         * full urls.\n         */\n        files: string[];\n\n        /**\n         * General access for extended fields as specific usages will\n         * likely have additional infornamation like a definition\n         * of Library, the entrypoint for umd packages\n         */\n        [key: string]: unknown;\n    }\n}\n\n/**\n * Fluid-specific properties expected on a package to be loaded by the code loader.\n * While compatible with the npm package format it is not necessary that that package is an\n * npm package:\n * https://stackoverflow.com/questions/10065564/add-custom-metadata-or-config-to-package-json-is-it-valid\n */\nexport interface IFluidPackage {\n    /**\n     * The name of the package that this code represnets\n     */\n    name: string;\n    /**\n     * This object represents the Fluid specific properties of the package\n     */\n    fluid: {\n        /**\n         * The name of the of the environment. This should be something like browser, or node\n         * and contain the necessary targets for loading this code in that environment.\n         */\n        [environment: string]:  undefined | IFluidPackageEnvironment;\n    };\n    /**\n     * General access for extended fields as specific usages will\n     * likely have additional infornamation like a definition of\n     * compatible versions, or deployment information like rings or rollouts.\n     */\n    [key: string]: unknown;\n}\n\n/**\n * Check if the package.json defines a Fluid package\n * @param pkg - the package json data to check if it is a Fluid package.\n */\nexport const isFluidPackage = (pkg: any): pkg is Readonly<IFluidPackage> =>\n    typeof pkg === \"object\"\n    && typeof pkg?.name === \"string\"\n    && typeof pkg?.fluid === \"object\";\n\n/**\n * Package manager configuration. Provides a key value mapping of config values\n */\nexport interface IFluidCodeDetailsConfig {\n    readonly [key: string]: string;\n}\n\n/**\n * Data structure used to describe the code to load on the Fluid document\n */\nexport interface IFluidCodeDetails {\n    /**\n     * The code package to be used on the Fluid document. This is either the package name which will be loaded\n     * from a package manager. Or the expanded Fluid package.\n     */\n    readonly package: string | Readonly<IFluidPackage>;\n\n    /**\n     * Configuration details. This includes links to the package manager and base CDNs.\n     */\n    readonly config?: IFluidCodeDetailsConfig;\n}\n\nexport const isFluidCodeDetails = (details: unknown): details is Readonly<IFluidPackage> =>{\n    const maybeCodeDetails = details as Partial<IFluidCodeDetails> | undefined;\n    return typeof maybeCodeDetails === \"object\"\n        && (typeof maybeCodeDetails?.package === \"string\" || isFluidPackage(maybeCodeDetails?.package))\n        && (maybeCodeDetails?.config === undefined || typeof maybeCodeDetails?.config === \"object\");\n};\n\nexport const IFluidCodeDetailsComparer: keyof IProvideFluidCodeDetailsComparer = \"IFluidCodeDetailsComparer\";\n\nexport interface IProvideFluidCodeDetailsComparer {\n    readonly IFluidCodeDetailsComparer: IFluidCodeDetailsComparer ;\n}\n\n/**\n * Provides capability to compare Fluid code details.\n */\nexport interface IFluidCodeDetailsComparer extends IProvideFluidCodeDetailsComparer {\n\n    /**\n     * Determines if the `candidate` code details satisfy the constraints specified in `constraint` code details.\n     *\n     * Similar semantics to:\n     *      https://github.com/npm/node-semver#usage\n     */\n    satisfies(candidate: IFluidCodeDetails, constraint: IFluidCodeDetails): Promise<boolean>;\n\n    /**\n     * Return a number representing the ascending sort order of the `a` and `b` code details;\n     *      `< 0` if `a < b`.\n     *      `= 0` if `a === b`.\n     *      `> 0` if `a > b`.\n     *      `undefined` if `a` is not comparable to `b`.\n     *\n     * Similar semantics to:\n     *      https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Description\n     */\n    compare(a: IFluidCodeDetails, b: IFluidCodeDetails): Promise<number | undefined>;\n}\n"]}