{"version":3,"file":"handles.js","sourceRoot":"","sources":["../src/handles.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAMH,MAAM,CAAC,MAAM,mBAAmB,GAAqC,qBAAqB,CAAC;AAkC3F,MAAM,CAAC,MAAM,YAAY,GAA8B,cAAc,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { IRequest, IResponse } from \"./fluidRouter\";\nimport { IFluidObject } from \"./fluidObject\";\nimport { IFluidLoadable } from \"./fluidLoadable\";\n\nexport const IFluidHandleContext: keyof IProvideFluidHandleContext = \"IFluidHandleContext\";\n\nexport interface IProvideFluidHandleContext {\n    readonly IFluidHandleContext: IFluidHandleContext;\n}\n\n/**\n * An IFluidHandleContext describes a routing context from which other IFluidHandleContexts are defined\n */\nexport interface IFluidHandleContext extends IProvideFluidHandleContext {\n    /**\n     * The absolute path to the handle context from the root.\n     */\n    absolutePath: string;\n\n    /**\n     * The parent IFluidHandleContext that has provided a route path to this IFluidHandleContext or undefined\n     * at the root.\n     */\n    routeContext?: IFluidHandleContext;\n\n    /**\n     * Flag indicating whether or not the entity has services attached.\n     */\n    isAttached: boolean;\n\n    /**\n     * Runs through the graph and attach the bounded handles.\n     */\n    attachGraph(): void;\n\n    resolveHandle(request: IRequest): Promise<IResponse>;\n}\n\nexport const IFluidHandle: keyof IProvideFluidHandle = \"IFluidHandle\";\n\nexport interface IProvideFluidHandle {\n    readonly IFluidHandle: IFluidHandle;\n}\n\n/**\n * Handle to a shared FluidObject\n */\nexport interface IFluidHandle<\n    // REVIEW: Constrain `T` to `IFluidObject & IFluidLoadable`?\n    T = IFluidObject & IFluidLoadable\n    > extends IProvideFluidHandle {\n\n    /**\n     * The absolute path to the handle context from the root.\n     */\n    absolutePath: string;\n\n    /**\n     * Flag indicating whether or not the entity has services attached.\n     */\n    isAttached: boolean;\n\n    /**\n     * Runs through the graph and attach the bounded handles.\n     */\n    attachGraph(): void;\n\n    /**\n     * Returns a promise to the Fluid Object referenced by the handle.\n     */\n    get(): Promise<T>;\n\n    /**\n     * Binds the given handle to this one or attach the given handle if this handle is attached.\n     * A bound handle will also be attached once this handle is attached.\n     */\n    bind(handle: IFluidHandle): void;\n}\n"]}