/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-validator in @fluidframework/build-tools.
 */
import * as old from "@fluidframework/test-loader-utils-previous";
import * as current from "../../index";

type TypeOnly<T> = {
    [P in keyof T]: TypeOnly<T[P]>;
};

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_MockDocumentDeltaConnection": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_MockDocumentDeltaConnection():
    TypeOnly<old.MockDocumentDeltaConnection>;
declare function use_current_ClassDeclaration_MockDocumentDeltaConnection(
    use: TypeOnly<current.MockDocumentDeltaConnection>);
use_current_ClassDeclaration_MockDocumentDeltaConnection(
    get_old_ClassDeclaration_MockDocumentDeltaConnection());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_MockDocumentDeltaConnection": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_MockDocumentDeltaConnection():
    TypeOnly<current.MockDocumentDeltaConnection>;
declare function use_old_ClassDeclaration_MockDocumentDeltaConnection(
    use: TypeOnly<old.MockDocumentDeltaConnection>);
use_old_ClassDeclaration_MockDocumentDeltaConnection(
    get_current_ClassDeclaration_MockDocumentDeltaConnection());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_MockDocumentDeltaStorageService": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_MockDocumentDeltaStorageService():
    TypeOnly<old.MockDocumentDeltaStorageService>;
declare function use_current_ClassDeclaration_MockDocumentDeltaStorageService(
    use: TypeOnly<current.MockDocumentDeltaStorageService>);
use_current_ClassDeclaration_MockDocumentDeltaStorageService(
    get_old_ClassDeclaration_MockDocumentDeltaStorageService());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_MockDocumentDeltaStorageService": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_MockDocumentDeltaStorageService():
    TypeOnly<current.MockDocumentDeltaStorageService>;
declare function use_old_ClassDeclaration_MockDocumentDeltaStorageService(
    use: TypeOnly<old.MockDocumentDeltaStorageService>);
use_old_ClassDeclaration_MockDocumentDeltaStorageService(
    get_current_ClassDeclaration_MockDocumentDeltaStorageService());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_MockDocumentService": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_MockDocumentService():
    TypeOnly<old.MockDocumentService>;
declare function use_current_ClassDeclaration_MockDocumentService(
    use: TypeOnly<current.MockDocumentService>);
use_current_ClassDeclaration_MockDocumentService(
    get_old_ClassDeclaration_MockDocumentService());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_MockDocumentService": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_MockDocumentService():
    TypeOnly<current.MockDocumentService>;
declare function use_old_ClassDeclaration_MockDocumentService(
    use: TypeOnly<old.MockDocumentService>);
use_old_ClassDeclaration_MockDocumentService(
    get_current_ClassDeclaration_MockDocumentService());
