/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-validator in @fluidframework/build-tools.
 */
import * as old from "@fluidframework/location-redirection-utils-previous";
import * as current from "../../index";

type TypeOnly<T> = {
    [P in keyof T]: TypeOnly<T[P]>;
};

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_isLocationRedirectionError": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_isLocationRedirectionError():
    TypeOnly<typeof old.isLocationRedirectionError>;
declare function use_current_FunctionDeclaration_isLocationRedirectionError(
    use: TypeOnly<typeof current.isLocationRedirectionError>);
use_current_FunctionDeclaration_isLocationRedirectionError(
    get_old_FunctionDeclaration_isLocationRedirectionError());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_isLocationRedirectionError": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_isLocationRedirectionError():
    TypeOnly<typeof current.isLocationRedirectionError>;
declare function use_old_FunctionDeclaration_isLocationRedirectionError(
    use: TypeOnly<typeof old.isLocationRedirectionError>);
use_old_FunctionDeclaration_isLocationRedirectionError(
    get_current_FunctionDeclaration_isLocationRedirectionError());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_resolveWithLocationRedirectionHandling": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_resolveWithLocationRedirectionHandling():
    TypeOnly<typeof old.resolveWithLocationRedirectionHandling>;
declare function use_current_FunctionDeclaration_resolveWithLocationRedirectionHandling(
    use: TypeOnly<typeof current.resolveWithLocationRedirectionHandling>);
use_current_FunctionDeclaration_resolveWithLocationRedirectionHandling(
    get_old_FunctionDeclaration_resolveWithLocationRedirectionHandling());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_resolveWithLocationRedirectionHandling": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_resolveWithLocationRedirectionHandling():
    TypeOnly<typeof current.resolveWithLocationRedirectionHandling>;
declare function use_old_FunctionDeclaration_resolveWithLocationRedirectionHandling(
    use: TypeOnly<typeof old.resolveWithLocationRedirectionHandling>);
use_old_FunctionDeclaration_resolveWithLocationRedirectionHandling(
    get_current_FunctionDeclaration_resolveWithLocationRedirectionHandling());
