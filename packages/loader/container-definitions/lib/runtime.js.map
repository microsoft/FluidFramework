{"version":3,"file":"runtime.js","sourceRoot":"","sources":["../src/runtime.ts"],"names":[],"mappings":"AAAA;;;GAGG;AA4BH,iDAAiD;AACjD,MAAM,CAAN,IAAY,WAIX;AAJD,WAAY,WAAW;IACnB,oCAAqB,CAAA;IACrB,sCAAuB,CAAA;IACvB,oCAAqB,CAAA;AACzB,CAAC,EAJW,WAAW,KAAX,WAAW,QAItB;AAED,2CAA2C;AAC3C,MAAM,CAAN,IAAY,SAIX;AAJD,WAAY,SAAS;IACjB,kCAAqB,CAAA;IACrB,gCAAmB,CAAA;IACnB,4BAAe,CAAA;AACnB,CAAC,EAJW,SAAS,KAAT,SAAS,QAIpB;AA0HD,MAAM,CAAC,MAAM,eAAe,GAAiC,iBAAiB,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ITelemetryLogger, IDisposable } from \"@fluidframework/common-definitions\";\nimport {\n    IFluidObject,\n    IFluidConfiguration,\n    IRequest,\n    IResponse,\n    IFluidCodeDetails,\n} from \"@fluidframework/core-interfaces\";\nimport { IDocumentStorageService } from \"@fluidframework/driver-definitions\";\nimport {\n    IClientConfiguration,\n    IClientDetails,\n    IQuorum,\n    ISequencedDocumentMessage,\n    ISnapshotTree,\n    ITree,\n    MessageType,\n    ISummaryTree,\n    IVersion,\n    IDocumentMessage,\n} from \"@fluidframework/protocol-definitions\";\nimport { IAudience } from \"./audience\";\nimport { IDeltaManager } from \"./deltas\";\nimport { ICriticalContainerError, ContainerWarning } from \"./error\";\nimport { ILoader, ILoaderOptions } from \"./loader\";\n\n// Represents the attachment state of the entity.\nexport enum AttachState {\n    Detached = \"Detached\",\n    Attaching = \"Attaching\",\n    Attached = \"Attached\",\n}\n\n// Represents the bind state of the entity.\nexport enum BindState {\n    NotBound = \"NotBound\",\n    Binding = \"Binding\",\n    Bound = \"Bound\",\n}\n\n/**\n * Represents the data that will be preserved from the previous IRuntime during a context reload.\n */\nexport interface IRuntimeState {\n    snapshot?: ITree,\n    state?: unknown,\n}\n\n/**\n * The IRuntime represents an instantiation of a code package within a Container.\n * Primarily held by the ContainerContext to be able to interact with the running instance of the Container.\n */\nexport interface IRuntime extends IDisposable {\n\n    /**\n     * Executes a request against the runtime\n     */\n    request(request: IRequest): Promise<IResponse>;\n\n    /**\n     * Snapshots the runtime\n     */\n    snapshot(tagMessage: string, fullTree?: boolean): Promise<ITree | null>;\n\n    /**\n     * Notifies the runtime of a change in the connection state\n     */\n    setConnectionState(connected: boolean, clientId?: string);\n\n    /**\n     * @deprecated in 0.14 async stop()\n     * Use snapshot to get a snapshot for an IRuntimeState as needed, followed by dispose\n     *\n     * Stops the runtime. Once stopped no more messages will be delivered and the context passed to the runtime\n     * on creation will no longer be active\n     */\n    stop(): Promise<IRuntimeState>;\n\n    /**\n     * Processes the given op (message)\n     */\n    process(message: ISequencedDocumentMessage, local: boolean, context: any);\n\n    /**\n     * Processes the given signal\n     */\n    processSignal(message: any, local: boolean);\n\n    createSummary(): ISummaryTree;\n\n    /**\n     * Propagate the container state when container is attaching or attached.\n     * @param attachState - State of the container.\n     */\n    setAttachState(attachState: AttachState.Attaching | AttachState.Attached): void;\n\n    // 0.24 back-compat attachingBeforeSummary\n    readonly runtimeVersion?: string;\n}\n\n/**\n * The ContainerContext is a proxy standing between the Container and the Container's IRuntime.\n * This allows the Container to terminate the connection to the IRuntime.\n *\n * Specifically, there is an event on Container, onContextChanged, which mean a new code proposal has been loaded,\n * so the old IRuntime is no longer valid, as its ContainerContext has been revoked,\n * and the Container has created a new ContainerContext.\n */\nexport interface IContainerContext extends IDisposable {\n    readonly id: string;\n    readonly existing: boolean | undefined;\n    readonly options: ILoaderOptions;\n    readonly configuration: IFluidConfiguration;\n    readonly clientId: string | undefined;\n    readonly clientDetails: IClientDetails;\n    readonly codeDetails: IFluidCodeDetails;\n    readonly storage: IDocumentStorageService | undefined | null;\n    readonly connected: boolean;\n    readonly branch: string;\n    readonly baseSnapshot: ISnapshotTree | undefined;\n    readonly submitFn: (type: MessageType, contents: any, batch: boolean, appData?: any) => number;\n    readonly submitSignalFn: (contents: any) => void;\n    readonly snapshotFn: (message: string) => Promise<void>;\n    readonly closeFn: (error?: ICriticalContainerError) => void;\n    readonly deltaManager: IDeltaManager<ISequencedDocumentMessage, IDocumentMessage>;\n    readonly quorum: IQuorum;\n    readonly audience: IAudience | undefined;\n    readonly loader: ILoader;\n    readonly logger: ITelemetryLogger;\n    readonly serviceConfiguration: IClientConfiguration | undefined;\n    readonly version: string;\n    readonly previousRuntimeState: IRuntimeState;\n\n    /**\n     * Ambient services provided with the context\n     */\n    readonly scope: IFluidObject;\n\n    raiseContainerWarning(warning: ContainerWarning): void;\n    requestSnapshot(tagMessage: string): Promise<void>;\n    reloadContext(): Promise<void>;\n\n    /**\n     * Get an absolute url for a provided container-relative request.\n     * @param relativeUrl - A relative request within the container\n     *\n     * TODO: Optional for backwards compatibility. Make non-optional in version 0.19\n     */\n    getAbsoluteUrl?(relativeUrl: string): Promise<string | undefined>;\n\n    /**\n     * Indicates the attachment state of the container to a host service.\n     */\n    readonly attachState: AttachState;\n\n    getLoadedFromVersion(): IVersion | undefined;\n\n    createSummary(): ISummaryTree;\n}\n\nexport const IRuntimeFactory: keyof IProvideRuntimeFactory = \"IRuntimeFactory\";\n\nexport interface IProvideRuntimeFactory {\n    readonly IRuntimeFactory: IRuntimeFactory;\n}\n\n/**\n * Exported module definition\n *\n * Provides the entry point for the ContainerContext to load the proper IRuntime\n * to start up the running instance of the Container.\n */\nexport interface IRuntimeFactory extends IProvideRuntimeFactory {\n    /**\n     * Instantiates a new IRuntime for the given IContainerContext to proxy to\n     * This is the main entry point to the Container's business logic\n     */\n    instantiateRuntime(context: IContainerContext): Promise<IRuntime>;\n}\n"]}