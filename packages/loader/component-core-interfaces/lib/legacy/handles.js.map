{"version":3,"file":"handles.js","sourceRoot":"","sources":["../../src/legacy/handles.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAMH,MAAM,CAAC,MAAM,uBAAuB,GAAyC,yBAAyB,CAAC;AA4CvG,MAAM,CAAC,MAAM,gBAAgB,GAAkC,kBAAkB,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { IComponentRouter } from \"./componentRouter\";\nimport { IComponent } from \"./components\";\nimport { IComponentLoadable } from \"./componentLoadable\";\n\nexport const IComponentHandleContext: keyof IProvideComponentHandleContext = \"IComponentHandleContext\";\n\nexport interface IProvideComponentHandleContext {\n    readonly IComponentHandleContext: IComponentHandleContext;\n}\n\n/**\n * An IComponentHandleContext describes a routing context from which other IComponentHandleContexts are defined\n */\nexport interface IComponentHandleContext extends IComponentRouter, IProvideComponentHandleContext {\n    /**\n     * @deprecated - Use `absolutePath` to get the path to the handle context from the root.\n     * Path to the handle context relative to the routeContext\n     */\n    path: string;\n\n    /**\n     * The absolute path to the handle context from the root.\n     */\n    absolutePath: string;\n\n    /**\n     * The parent IComponentHandleContext that has provided a route path to this IComponentHandleContext or undefined\n     * at the root.\n     */\n    routeContext?: IComponentHandleContext;\n\n    /**\n     * Flag indicating whether or not the entity has services attached.\n     */\n    isAttached: boolean;\n\n    /**\n     * Runs through the graph and attach the bounded handles.\n     */\n    attachGraph(): void;\n\n    /**\n     * Binds the given handle to this one or attach the given handle if this handle is attached.\n     * A bound handle will also be attached once this handle is attached.\n     */\n    bind(handle: IComponentHandle): void;\n}\n\nexport const IComponentHandle: keyof IProvideComponentHandle = \"IComponentHandle\";\n\nexport interface IProvideComponentHandle {\n    readonly IComponentHandle: IComponentHandle;\n}\n\n/**\n * Handle to a shared component\n */\nexport interface IComponentHandle<\n    // REVIEW: Constrain `T` to `IComponent & IComponentLoadable`?\n    T = IComponent & IComponentLoadable\n    > extends IComponentHandleContext, IProvideComponentHandle {\n    /**\n     * Returns a promise to the component referenced by the handle.\n     */\n    get(): Promise<T>;\n}\n"]}