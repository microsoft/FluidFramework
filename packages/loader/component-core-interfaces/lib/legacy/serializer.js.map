{"version":3,"file":"serializer.js","sourceRoot":"","sources":["../../src/legacy/serializer.ts"],"names":[],"mappings":"AAMA,MAAM,CAAC,MAAM,oBAAoB,GAAsC,sBAAsB,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { IComponentHandle, IComponentHandleContext } from \"./handles\";\n\nexport const IComponentSerializer: keyof IProvideComponentSerializer = \"IComponentSerializer\";\n\nexport interface IProvideComponentSerializer {\n    readonly IComponentSerializer: IComponentSerializer;\n}\n\nexport interface IComponentSerializer extends IProvideComponentSerializer {\n    /**\n     * Given a mostly-plain object that may have handle objects embedded within, will return a fully-plain object\n     * where any embedded IComponentHandles have been replaced with a serializable form.\n     *\n     * The original `input` object is not mutated.  This method will shallowly clones all objects in the path from\n     * the root to any replaced handles.  (If no handles are found, returns the original object.)\n     */\n    replaceHandles(value: any, context: IComponentHandleContext, bind: IComponentHandle): any;\n\n    /**\n     * Stringifies a given value. Converts any IComponentHandle to its stringified equivalent.\n     */\n    stringify(value: any, context: IComponentHandleContext, bind: IComponentHandle): string;\n\n    /**\n     * Parses the given JSON input string and returns the JavaScript object defined by it. Any component\n     * handles will be realized as part of the parse\n     */\n    parse(value: string, context: IComponentHandleContext): any;\n}\n"]}