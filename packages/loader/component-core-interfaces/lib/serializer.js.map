{"version":3,"file":"serializer.js","sourceRoot":"","sources":["../src/serializer.ts"],"names":[],"mappings":"AAiBA,MAAM,CAAC,MAAM,gBAAgB,GAAkC,kBAAkB,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { IFluidHandle, IFluidHandleContext } from \"./handles\";\n\n/**\n * JSON serialized form of an IFluidHandle\n */\nexport interface ISerializedHandle {\n    // Marker to indicate to JSON.parse that the object is a Fluid handle\n    type: \"__fluid_handle__\";\n\n    // URL to the object. Relative URLs are relative to the handle context passed to the stringify.\n    url: string;\n}\n\nexport const IFluidSerializer: keyof IProvideFluidSerializer = \"IFluidSerializer\";\n\nexport interface IProvideFluidSerializer {\n    readonly IFluidSerializer: IFluidSerializer;\n}\n\nexport interface IFluidSerializer extends IProvideFluidSerializer {\n    /**\n     * Given a mostly-plain object that may have handle objects embedded within, will return a fully-plain object\n     * where any embedded IFluidHandles have been replaced with a serializable form.\n     *\n     * The original `input` object is not mutated.  This method will shallowly clones all objects in the path from\n     * the root to any replaced handles.  (If no handles are found, returns the original object.)\n     */\n    replaceHandles(value: any, context: IFluidHandleContext, bind: IFluidHandle): any;\n\n    /**\n     * Stringifies a given value. Converts any IFluidHandle to its stringified equivalent.\n     */\n    stringify(value: any, context: IFluidHandleContext, bind: IFluidHandle): string;\n\n    /**\n     * Parses the given JSON input string and returns the JavaScript object defined by it. Any Fluid\n     * handles will be realized as part of the parse\n     */\n    parse(value: string, context: IFluidHandleContext): any;\n}\n"]}