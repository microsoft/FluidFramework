{"version":3,"file":"driverError.js","sourceRoot":"","sources":["../src/driverError.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;GAGG;AACH,MAAM,CAAN,IAAY,eAuDX;AAvDD,WAAY,eAAe;IACvB;;OAEG;IACH,gDAA6B,CAAA;IAE7B;;;OAGG;IACH,8DAA2C,CAAA;IAE3C;;OAEG;IACH,4DAAyC,CAAA;IAEzC;;OAEG;IACH,sFAAmE,CAAA;IAEnE;;OAEG;IACH,sDAAmC,CAAA;IAEnC;;OAEG;IACH,gDAA6B,CAAA;IAE7B;;OAEG;IACH,wFAAqE,CAAA;IAErE;;;OAGG;IACH,4CAAyB,CAAA;IAEzB;;;;;OAKG;IACH,gDAA6B,CAAA;IAE7B;;OAEG;IACH,sEAAmD,CAAA;AACvD,CAAC,EAvDW,eAAe,KAAf,eAAe,QAuD1B","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Driver Error types\n * Lists types that are likely to be used by all drivers\n */\nexport enum DriverErrorType {\n    /**\n     * Some error, most likely an exception caught by runtime and propagated to container as critical error\n     */\n    genericError = \"genericError\",\n\n    /**\n     * Some non-categorized (below) networking error\n     * Include errors like  fatal server error (usually 500).\n     */\n    genericNetworkError = \"genericNetworkError\",\n\n    /**\n     * Access denied - user does not have enough privileges to open a file, or continue to operate on a file\n     */\n    authorizationError = \"authorizationError\",\n\n    /**\n     * File not found, or file deleted during session\n     */\n    fileNotFoundOrAccessDeniedError = \"fileNotFoundOrAccessDeniedError\",\n\n    /**\n     * Throttling error from server. Server is busy and is asking not to reconnect for some time\n     */\n    throttlingError = \"throttlingError\",\n\n    /**\n     * We can not reach server due to computer being offline.\n     */\n    offlineError = \"offlineError\",\n\n    /*\n     * Unsupported client protocol\n     */\n    unsupportedClientProtocolVersion = \"unsupportedClientProtocolVersion\",\n\n    /**\n     * User does not have write permissions to a file, but is changing content of a file.\n     * That might be indication of some data store error - data stores should not generate ops in readonly mode.\n     */\n    writeError = \"writeError\",\n\n    /**\n     * Generic fetch failure.\n     * Most of such failures are due to client being offline, or DNS is not reachable, such errors map to\n     * DriverErrorType.offlineError. Anything else that can't be diagnose as likely offline maps to this error.\n     * This can also indicate no response from server.\n     */\n    fetchFailure = \"fetchFailure\",\n\n    /**\n     * Unexpected response from server. Either JSON is malformed, or some required properties are missing\n     */\n    incorrectServerResponse = \"incorrectServerResponse\",\n}\n\n/**\n * Base interface for all errors and warnings\n */\nexport interface IDriverErrorBase {\n    readonly errorType: DriverErrorType;\n    readonly message: string;\n    canRetry: boolean;\n    online?: string;\n}\n\nexport interface IThrottlingWarning extends IDriverErrorBase {\n    readonly errorType: DriverErrorType.throttlingError;\n    readonly retryAfterSeconds: number;\n}\n\nexport interface IGenericNetworkError extends IDriverErrorBase {\n    readonly errorType: DriverErrorType.genericNetworkError;\n    readonly statusCode?: number;\n}\n\nexport interface IAuthorizationError extends IDriverErrorBase {\n    readonly errorType: DriverErrorType.authorizationError;\n    readonly claims?: string;\n}\n\n/**\n * Having this uber interface without types that have their own interfaces\n * allows compiler to differentiate interfaces based on error type\n */\nexport interface IDriverBasicError extends IDriverErrorBase {\n    readonly errorType:\n    DriverErrorType.genericError\n    | DriverErrorType.authorizationError\n    | DriverErrorType.fileNotFoundOrAccessDeniedError\n    | DriverErrorType.offlineError\n    | DriverErrorType.unsupportedClientProtocolVersion\n    | DriverErrorType.writeError\n    | DriverErrorType.fetchFailure\n    | DriverErrorType.incorrectServerResponse;\n    readonly statusCode?: number;\n}\n\nexport type DriverError =\n    | IThrottlingWarning\n    | IGenericNetworkError\n    | IAuthorizationError\n    | IDriverBasicError;\n"]}