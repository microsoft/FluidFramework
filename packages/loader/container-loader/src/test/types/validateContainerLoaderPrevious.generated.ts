/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType, requireAssignableTo } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/container-loader-previous";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current | requireAssignableTo<true, true>;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_Container": {"forwardCompat": false}
 */
declare type old_as_current_for_Class_Container = requireAssignableTo<TypeOnly<old.Container>, TypeOnly<current.Container>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_Container": {"backCompat": false}
 */
declare type current_as_old_for_Class_Container = requireAssignableTo<TypeOnly<current.Container>, TypeOnly<old.Container>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_Loader": {"forwardCompat": false}
 */
declare type old_as_current_for_Class_Loader = requireAssignableTo<TypeOnly<old.Loader>, TypeOnly<current.Loader>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_Loader": {"backCompat": false}
 */
declare type current_as_old_for_Class_Loader = requireAssignableTo<TypeOnly<current.Loader>, TypeOnly<old.Loader>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_RelativeLoader": {"forwardCompat": false}
 */
declare type old_as_current_for_Class_RelativeLoader = requireAssignableTo<TypeOnly<old.RelativeLoader>, TypeOnly<current.RelativeLoader>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_RelativeLoader": {"backCompat": false}
 */
declare type current_as_old_for_Class_RelativeLoader = requireAssignableTo<TypeOnly<current.RelativeLoader>, TypeOnly<old.RelativeLoader>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_Container": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_Container = requireAssignableTo<TypeOnly<typeof current.Container>, TypeOnly<typeof old.Container>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_Loader": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_Loader = requireAssignableTo<TypeOnly<typeof current.Loader>, TypeOnly<typeof old.Loader>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_RelativeLoader": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_RelativeLoader = requireAssignableTo<TypeOnly<typeof current.RelativeLoader>, TypeOnly<typeof old.RelativeLoader>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Enum_ConnectionState": {"forwardCompat": false}
 */
declare type old_as_current_for_Enum_ConnectionState = requireAssignableTo<TypeOnly<old.ConnectionState>, TypeOnly<current.ConnectionState>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Enum_ConnectionState": {"backCompat": false}
 */
declare type current_as_old_for_Enum_ConnectionState = requireAssignableTo<TypeOnly<current.ConnectionState>, TypeOnly<old.ConnectionState>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Function_waitContainerToCatchUp": {"backCompat": false}
 */
declare type current_as_old_for_Function_waitContainerToCatchUp = requireAssignableTo<TypeOnly<typeof current.waitContainerToCatchUp>, TypeOnly<typeof old.waitContainerToCatchUp>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICodeDetailsLoader": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ICodeDetailsLoader = requireAssignableTo<TypeOnly<old.ICodeDetailsLoader>, TypeOnly<current.ICodeDetailsLoader>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICodeDetailsLoader": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ICodeDetailsLoader = requireAssignableTo<TypeOnly<current.ICodeDetailsLoader>, TypeOnly<old.ICodeDetailsLoader>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IContainerConfig": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IContainerConfig = requireAssignableTo<TypeOnly<old.IContainerConfig>, TypeOnly<current.IContainerConfig>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IContainerConfig": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IContainerConfig = requireAssignableTo<TypeOnly<current.IContainerConfig>, TypeOnly<old.IContainerConfig>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IContainerLoadOptions": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IContainerLoadOptions = requireAssignableTo<TypeOnly<old.IContainerLoadOptions>, TypeOnly<current.IContainerLoadOptions>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IContainerLoadOptions": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IContainerLoadOptions = requireAssignableTo<TypeOnly<current.IContainerLoadOptions>, TypeOnly<old.IContainerLoadOptions>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IFluidModuleWithDetails": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IFluidModuleWithDetails = requireAssignableTo<TypeOnly<old.IFluidModuleWithDetails>, TypeOnly<current.IFluidModuleWithDetails>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IFluidModuleWithDetails": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IFluidModuleWithDetails = requireAssignableTo<TypeOnly<current.IFluidModuleWithDetails>, TypeOnly<old.IFluidModuleWithDetails>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ILoaderOptions": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ILoaderOptions = requireAssignableTo<TypeOnly<old.ILoaderOptions>, TypeOnly<current.ILoaderOptions>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ILoaderOptions": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ILoaderOptions = requireAssignableTo<TypeOnly<current.ILoaderOptions>, TypeOnly<old.ILoaderOptions>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ILoaderProps": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ILoaderProps = requireAssignableTo<TypeOnly<old.ILoaderProps>, TypeOnly<current.ILoaderProps>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ILoaderProps": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ILoaderProps = requireAssignableTo<TypeOnly<current.ILoaderProps>, TypeOnly<old.ILoaderProps>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ILoaderServices": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ILoaderServices = requireAssignableTo<TypeOnly<old.ILoaderServices>, TypeOnly<current.ILoaderServices>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ILoaderServices": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ILoaderServices = requireAssignableTo<TypeOnly<current.ILoaderServices>, TypeOnly<old.ILoaderServices>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IPendingContainerState": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IPendingContainerState = requireAssignableTo<TypeOnly<old.IPendingContainerState>, TypeOnly<current.IPendingContainerState>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IPendingContainerState": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IPendingContainerState = requireAssignableTo<TypeOnly<current.IPendingContainerState>, TypeOnly<old.IPendingContainerState>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_IDetachedBlobStorage": {"forwardCompat": false}
 */
declare type old_as_current_for_TypeAlias_IDetachedBlobStorage = requireAssignableTo<TypeOnly<old.IDetachedBlobStorage>, TypeOnly<current.IDetachedBlobStorage>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "TypeAlias_IDetachedBlobStorage": {"backCompat": false}
 */
declare type current_as_old_for_TypeAlias_IDetachedBlobStorage = requireAssignableTo<TypeOnly<current.IDetachedBlobStorage>, TypeOnly<old.IDetachedBlobStorage>>
