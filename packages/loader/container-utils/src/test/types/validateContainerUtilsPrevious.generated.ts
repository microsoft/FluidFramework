/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-test-generator in @fluidframework/build-tools.
 */
import * as old from "@fluidframework/container-utils-previous";
import * as current from "../../index";

type TypeOnly<T> = {
    [P in keyof T]: TypeOnly<T[P]>;
};

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_ClientSessionExpiredError": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_ClientSessionExpiredError():
    TypeOnly<old.ClientSessionExpiredError>;
declare function use_current_ClassDeclaration_ClientSessionExpiredError(
    use: TypeOnly<current.ClientSessionExpiredError>);
use_current_ClassDeclaration_ClientSessionExpiredError(
    get_old_ClassDeclaration_ClientSessionExpiredError());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_ClientSessionExpiredError": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_ClientSessionExpiredError():
    TypeOnly<current.ClientSessionExpiredError>;
declare function use_old_ClassDeclaration_ClientSessionExpiredError(
    use: TypeOnly<old.ClientSessionExpiredError>);
use_old_ClassDeclaration_ClientSessionExpiredError(
    get_current_ClassDeclaration_ClientSessionExpiredError());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DeltaManagerProxyBase": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_DeltaManagerProxyBase():
    TypeOnly<old.DeltaManagerProxyBase>;
declare function use_current_ClassDeclaration_DeltaManagerProxyBase(
    use: TypeOnly<current.DeltaManagerProxyBase>);
use_current_ClassDeclaration_DeltaManagerProxyBase(
    get_old_ClassDeclaration_DeltaManagerProxyBase());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DeltaManagerProxyBase": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_DeltaManagerProxyBase():
    TypeOnly<current.DeltaManagerProxyBase>;
declare function use_old_ClassDeclaration_DeltaManagerProxyBase(
    use: TypeOnly<old.DeltaManagerProxyBase>);
use_old_ClassDeclaration_DeltaManagerProxyBase(
    get_current_ClassDeclaration_DeltaManagerProxyBase());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_ThrottlingWarning": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_ThrottlingWarning():
    TypeOnly<old.ThrottlingWarning>;
declare function use_current_ClassDeclaration_ThrottlingWarning(
    use: TypeOnly<current.ThrottlingWarning>);
use_current_ClassDeclaration_ThrottlingWarning(
    get_old_ClassDeclaration_ThrottlingWarning());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_ThrottlingWarning": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_ThrottlingWarning():
    TypeOnly<current.ThrottlingWarning>;
declare function use_old_ClassDeclaration_ThrottlingWarning(
    use: TypeOnly<old.ThrottlingWarning>);
use_old_ClassDeclaration_ThrottlingWarning(
    get_current_ClassDeclaration_ThrottlingWarning());
