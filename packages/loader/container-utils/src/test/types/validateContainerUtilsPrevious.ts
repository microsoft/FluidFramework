/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-validator in @fluidframework/build-tools.
 */
import * as old from "@fluidframework/container-utils-previous";
import * as current from "../../index";

type TypeOnly<T> = {
    [P in keyof T]: TypeOnly<T[P]>;
};

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_ClientSessionExpiredError": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_ClientSessionExpiredError():
    TypeOnly<old.ClientSessionExpiredError>;
declare function use_current_ClassDeclaration_ClientSessionExpiredError(
    use: TypeOnly<current.ClientSessionExpiredError>);
use_current_ClassDeclaration_ClientSessionExpiredError(
    get_old_ClassDeclaration_ClientSessionExpiredError());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_ClientSessionExpiredError": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_ClientSessionExpiredError():
    TypeOnly<current.ClientSessionExpiredError>;
declare function use_old_ClassDeclaration_ClientSessionExpiredError(
    use: TypeOnly<old.ClientSessionExpiredError>);
use_old_ClassDeclaration_ClientSessionExpiredError(
    get_current_ClassDeclaration_ClientSessionExpiredError());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DataCorruptionError": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_DataCorruptionError():
    TypeOnly<old.DataCorruptionError>;
declare function use_current_ClassDeclaration_DataCorruptionError(
    use: TypeOnly<current.DataCorruptionError>);
use_current_ClassDeclaration_DataCorruptionError(
    get_old_ClassDeclaration_DataCorruptionError());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DataCorruptionError": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_DataCorruptionError():
    TypeOnly<current.DataCorruptionError>;
declare function use_old_ClassDeclaration_DataCorruptionError(
    use: TypeOnly<old.DataCorruptionError>);
use_old_ClassDeclaration_DataCorruptionError(
    get_current_ClassDeclaration_DataCorruptionError());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DataProcessingError": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_DataProcessingError():
    TypeOnly<old.DataProcessingError>;
declare function use_current_ClassDeclaration_DataProcessingError(
    use: TypeOnly<current.DataProcessingError>);
use_current_ClassDeclaration_DataProcessingError(
    get_old_ClassDeclaration_DataProcessingError());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DataProcessingError": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_DataProcessingError():
    TypeOnly<current.DataProcessingError>;
declare function use_old_ClassDeclaration_DataProcessingError(
    use: TypeOnly<old.DataProcessingError>);
use_old_ClassDeclaration_DataProcessingError(
    get_current_ClassDeclaration_DataProcessingError());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_extractSafePropertiesFromMessage": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_extractSafePropertiesFromMessage():
    TypeOnly<typeof old.extractSafePropertiesFromMessage>;
declare function use_current_VariableDeclaration_extractSafePropertiesFromMessage(
    use: TypeOnly<typeof current.extractSafePropertiesFromMessage>);
use_current_VariableDeclaration_extractSafePropertiesFromMessage(
    get_old_VariableDeclaration_extractSafePropertiesFromMessage());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_extractSafePropertiesFromMessage": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_extractSafePropertiesFromMessage():
    TypeOnly<typeof current.extractSafePropertiesFromMessage>;
declare function use_old_VariableDeclaration_extractSafePropertiesFromMessage(
    use: TypeOnly<typeof old.extractSafePropertiesFromMessage>);
use_old_VariableDeclaration_extractSafePropertiesFromMessage(
    get_current_VariableDeclaration_extractSafePropertiesFromMessage());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_GenericError": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_GenericError():
    TypeOnly<old.GenericError>;
declare function use_current_ClassDeclaration_GenericError(
    use: TypeOnly<current.GenericError>);
use_current_ClassDeclaration_GenericError(
    get_old_ClassDeclaration_GenericError());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_GenericError": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_GenericError():
    TypeOnly<current.GenericError>;
declare function use_old_ClassDeclaration_GenericError(
    use: TypeOnly<old.GenericError>);
use_old_ClassDeclaration_GenericError(
    get_current_ClassDeclaration_GenericError());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_ThrottlingWarning": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_ThrottlingWarning():
    TypeOnly<old.ThrottlingWarning>;
declare function use_current_ClassDeclaration_ThrottlingWarning(
    use: TypeOnly<current.ThrottlingWarning>);
use_current_ClassDeclaration_ThrottlingWarning(
    get_old_ClassDeclaration_ThrottlingWarning());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_ThrottlingWarning": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_ThrottlingWarning():
    TypeOnly<current.ThrottlingWarning>;
declare function use_old_ClassDeclaration_ThrottlingWarning(
    use: TypeOnly<old.ThrottlingWarning>);
use_old_ClassDeclaration_ThrottlingWarning(
    get_current_ClassDeclaration_ThrottlingWarning());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_UsageError": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_UsageError():
    TypeOnly<old.UsageError>;
declare function use_current_ClassDeclaration_UsageError(
    use: TypeOnly<current.UsageError>);
use_current_ClassDeclaration_UsageError(
    // @ts-expect-error compatibility expected to be broken
    get_old_ClassDeclaration_UsageError());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_UsageError": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_UsageError():
    TypeOnly<current.UsageError>;
declare function use_old_ClassDeclaration_UsageError(
    use: TypeOnly<old.UsageError>);
use_old_ClassDeclaration_UsageError(
    get_current_ClassDeclaration_UsageError());
