/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

import {
	type ApiDeclaredItem,
	type ApiItem,
	ApiItemKind,
	type ApiPackage,
	ReleaseTag,
} from "@microsoft/api-extractor-model";

import {
	getQualifiedApiItemName,
	getUnscopedPackageName,
	getSafeFilenameForName,
	getConciseSignature,
	getSingleLineExcerptText,
	isDeprecated,
	getReleaseTag,
	type DeepRequired,
	getApiItemKind,
} from "../../utilities/index.js";

/**
 * Kind of documentation suite hierarchy.
 *
 * @public
 */
export enum HierarchyKind {
	/**
	 * The API item gets a section under the document representing an ancestor of the API item.
	 */
	Section = "Section",

	/**
	 * The API item gets its own document, in the folder for an ancestor of the API item.
	 */
	Document = "Document",

	/**
	 * The API item gets its own document, and generates folder hierarchy for all descendent API items.
	 */
	Folder = "Folder",
}

/**
 * {@link TODO} base interface.
 */
export interface HierarchyConfigBase<THierarchyKind extends HierarchyKind> {
	/**
	 * {@inheritDoc HierarchyKind}
	 */
	readonly kind: THierarchyKind;
}

/**
 * {@link HierarchyKind.Section} hierarchy configuration options.
 *
 * @public
 */
export interface SectionHierarchyOptions {
	/**
	 * Heading text to use for the API item.
	 */
	readonly headingText?: string | ((apiItem: ApiItem) => string);
}

/**
 * The corresponding API item will be placed in a section under the document representing an ancestor of the API item.
 *
 * @public
 */
export interface SectionHierarchyConfig
	extends HierarchyConfigBase<HierarchyKind.Section>,
		SectionHierarchyOptions {}

/**
 * {@link HierarchyKind.Document} hierarchy configuration options.
 *
 * @public
 */
export interface DocumentHierarchyOptions {
	/**
	 * Document name to use for the API item.
	 */
	readonly documentName?: string | ((apiItem: ApiItem) => string);
}

/**
 * The corresponding API item will get its own document, in the folder for an ancestor of the API item.
 *
 * @public
 */
export interface DocumentHierarchyConfig
	extends HierarchyConfigBase<HierarchyKind.Document>,
		SectionHierarchyOptions,
		DocumentHierarchyOptions {}

/**
 * {@link HierarchyKind.Document} hierarchy configuration options.
 *
 * @public
 */
export interface FolderHierarchyOptions {
	/**
	 * Placement of the API item's document relative to its generated folder.
	 * `inside`: The document is placed inside its folder.
	 * `outside`: The document is placed outside (adjacent to) its folder.
	 */
	readonly documentPlacement?:
		| "inside"
		| "outside"
		| ((apiItem: ApiItem) => "inside" | "outside");

	/**
	 * Folder name to use for the API item.
	 */
	readonly folderName?: string | ((apiItem: ApiItem) => string);
}

/**
 * The corresponding API item will get its own document, in the folder for an ancestor of the API item.
 *
 * @public
 */
export interface FolderHierarchyConfig
	extends HierarchyConfigBase<HierarchyKind.Folder>,
		SectionHierarchyOptions,
		DocumentHierarchyOptions,
		FolderHierarchyOptions {}

/**
 * API item hierarchy configuration.
 */
export type HierarchyConfig =
	| SectionHierarchyConfig
	| DocumentHierarchyConfig
	| FolderHierarchyConfig;

/**
 * Options for configuring the documentation suite generated by the API Item -\> Documentation Domain transformation.
 *
 * @public
 */
export interface DocumentationSuiteOptions {
	/**
	 * Whether or not to include a top-level heading in rendered documents.
	 *
	 * @defaultValue `true`
	 *
	 * @remarks If you will be rendering the document contents into some other document content that will inject its
	 * own root heading, this can be used to omit that heading from what is rendered by this system.
	 */
	includeTopLevelDocumentHeading?: boolean;

	/**
	 * Whether or not to include a navigation breadcrumb at the top of rendered documents.
	 *
	 * @defaultValue `true`
	 *
	 * @remarks Note: `Model` items will never have a breadcrumb rendered, even if this is specified.
	 */
	includeBreadcrumb?: boolean;

	/**
	 * {@link HierarchyConfig} to use for the provided API item.
	 */
	readonly hierarchyOptions?: HierarchyConfig | ((apiItem: ApiItem) => HierarchyConfig);

	/**
	 * Optionally provide an override for the URI base used in links generated for the provided `ApiItem`.
	 *
	 * @remarks
	 *
	 * This can be used to match on particular item kinds, package names, etc., and adjust the links generated
	 * in the documentation accordingly.
	 *
	 * @param apiItem - The API item in question.
	 *
	 * @returns The URI base to use for the API item, or undefined if the default base should be used.
	 *
	 * @defaultValue Always use the default URI base.
	 */
	getUriBaseOverrideForItem?: (apiItem: ApiItem) => string | undefined;

	/**
	 * Generate link text for the provided `ApiItem`.
	 *
	 * @param apiItem - The API item for which the link is being generated.
	 *
	 * @returns The text to use in the link to the API item.
	 *
	 * @defaultValue {@link DefaultDocumentationSuiteOptions.defaultGetLinkTextForItem}
	 */
	getLinkTextForItem?: (apiItem: ApiItem) => string;

	/**
	 * Generate a list of "alerts" to display in API items tables for a given API item.
	 *
	 * @param apiItem - The API item for which table cell contents are being generated.
	 *
	 * @returns The list of "alert" strings to display.
	 *
	 * @defaultValue {@link DefaultDocumentationSuiteOptions.defaultGetAlertsForItem}
	 */
	getAlertsForItem?: (apiItem: ApiItem) => string[];

	/**
	 * Whether or not the provided `ApiPackage` should be skipped during documentation generation.
	 *
	 * @param apiPackage - The package that may or may not be skipped.
	 *
	 * @returns
	 *
	 * `true` if the package should not be included documentation generation. `false` otherwise.
	 *
	 * @defaultValue No packages are skipped.
	 */
	skipPackage?: (apiPackage: ApiPackage) => boolean;

	/**
	 * Minimal release scope to include in generated documentation suite.
	 * API members with matching or higher scope will be included, while lower scoped items will be omitted.
	 *
	 * @remarks
	 *
	 * Note that items tagged as `@internal` are not included in the models generated by API-Extractor,
	 * so `@internal` items will never be included for such models.
	 *
	 * Hierarchy: `@public` \> `@beta` \> `@alpha` \> `@internal`
	 *
	 * @defaultValue Include everything in the input model.
	 *
	 * @example `@beta` and `@public`
	 *
	 * To only include `@beta` and `@public` items (and omit `@alpha` items), specify:
	 *
	 * ```typescript
	 * releaseLevel: ReleaseTag.Beta
	 * ```
	 */
	minimumReleaseLevel?: Omit<ReleaseTag, ReleaseTag.None>;
}

/**
 * Default {@link SectionHierarchyOptions.headingText}.
 *
 * Uses the item's qualified API name, but is handled differently for the following items:
 *
 * - Model: Uses "index".
 *
 * - Package: Uses the unscoped package name.
 */
function defaultHeadingText(apiItem: ApiItem): string {
	const kind = getApiItemKind(apiItem);
	switch (kind) {
		case ApiItemKind.Model: {
			return "API Overview";
		}
		case ApiItemKind.CallSignature:
		case ApiItemKind.ConstructSignature:
		case ApiItemKind.IndexSignature: {
			// For signature items, the display-name is not particularly useful information
			// ("(constructor)", "(call)", etc.).
			// Instead, we will use a cleaned up variation on the type signature.
			const excerpt = getSingleLineExcerptText((apiItem as ApiDeclaredItem).excerpt);
			return trimTrailingSemicolon(excerpt);
		}
		default: {
			return apiItem.displayName;
		}
	}
}

const defaultSectionHierarchyConfig: DeepRequired<SectionHierarchyConfig> = {
	kind: HierarchyKind.Section,
	headingText: defaultHeadingText,
};

/**
 * Default {@link DocumentHierarchyOptions.documentName} for non-folder hierarchy documents.
 *
 * Uses the item's qualified API name, but is handled differently for the following items:
 *
 * - Model: Uses "index".
 *
 * - Package: Uses the unscoped package name.
 */
function defaultDocumentName(apiItem: ApiItem): string {
	const kind = getApiItemKind(apiItem);
	switch (kind) {
		case ApiItemKind.Model: {
			return "model";
		}
		case ApiItemKind.Package: {
			return getSafeFilenameForName(getUnscopedPackageName(apiItem as ApiPackage));
		}
		default: {
			// TODO: append item kind postfix
			return getQualifiedApiItemName(apiItem);
		}
	}
}

const defaultDocumentHierarchyConfig: DeepRequired<DocumentHierarchyConfig> = {
	kind: HierarchyKind.Document,
	headingText: defaultHeadingText,
	documentName: defaultDocumentName,
};

function defaultFolderName(apiItem: ApiItem): string {
	const kind = getApiItemKind(apiItem);
	switch (kind) {
		case ApiItemKind.Model: {
			return "model";
		}
		case ApiItemKind.Package: {
			return getSafeFilenameForName(getUnscopedPackageName(apiItem as ApiPackage));
		}
		default: {
			// TODO: append item kind postfix
			return getQualifiedApiItemName(apiItem);
		}
	}
}

const defaultFolderHierarchyConfig: DeepRequired<FolderHierarchyConfig> = {
	kind: HierarchyKind.Folder,
	headingText: defaultHeadingText,
	documentPlacement: "inside",
	documentName: "index", // Documents for items that get their own folder are always named "index" by default.
	folderName: defaultFolderName,
};

/**
 * Contains a list of default documentation transformations, used by {@link DocumentationSuiteOptions}.
 *
 * @public
 */
// eslint-disable-next-line @typescript-eslint/no-namespace
export namespace DefaultDocumentationSuiteOptions {
	/**
	 * Default {@link DocumentationSuiteOptions.hierarchyOptions}.
	 */
	export function defaultHierarchyOptions(apiItem: ApiItem): HierarchyConfig {
		const kind = getApiItemKind(apiItem);

		// TODO: audit these
		switch (kind) {
			case ApiItemKind.Namespace:
			case ApiItemKind.Package: {
				return defaultFolderHierarchyConfig;
			}
			case ApiItemKind.Class:
			case ApiItemKind.Interface:
			case ApiItemKind.EntryPoint:
			case ApiItemKind.Model:
			case ApiItemKind.TypeAlias: {
				return defaultDocumentHierarchyConfig;
			}
			default: {
				return defaultSectionHierarchyConfig;
			}
		}
	}

	/**
	 * Default {@link DocumentationSuiteOptions.getUriBaseOverrideForItem}.
	 *
	 * Always uses default URI base.
	 */
	export function defaultGetUriBaseOverrideForItem(): string | undefined {
		return undefined;
	}

	/**
	 * Default {@link DocumentationSuiteOptions.getLinkTextForItem}.
	 *
	 * Uses the item's signature, except for `Model` items, in which case the text "Packages" is displayed.
	 */
	export function defaultGetLinkTextForItem(apiItem: ApiItem): string {
		switch (apiItem.kind) {
			case ApiItemKind.Model: {
				return "Packages";
			}
			case ApiItemKind.CallSignature:
			case ApiItemKind.ConstructSignature:
			case ApiItemKind.IndexSignature: {
				// For signature items, the display-name is not particularly useful information
				// ("(constructor)", "(call)", etc.).
				// Instead, we will use a cleaned up variation on the type signature.
				const excerpt = getSingleLineExcerptText((apiItem as ApiDeclaredItem).excerpt);
				return trimTrailingSemicolon(excerpt);
			}
			default: {
				return getConciseSignature(apiItem);
			}
		}
	}

	/**
	 * Default {@link DocumentationSuiteOptions.getHeadingTextForItem}.
	 *
	 * Generates alerts for the following tags, if found:
	 *
	 * - `@alpha`: "Alpha"
	 *
	 * - `@beta`: "Beta"
	 *
	 * - `@deprecated`: "Deprecated"
	 */
	export function defaultGetAlertsForItem(apiItem: ApiItem): string[] {
		const alerts: string[] = [];
		if (isDeprecated(apiItem)) {
			alerts.push("Deprecated");
		}

		const releaseTag = getReleaseTag(apiItem);
		if (releaseTag === ReleaseTag.Alpha) {
			alerts.push("Alpha");
		} else if (releaseTag === ReleaseTag.Beta) {
			alerts.push("Beta");
		}
		return alerts;
	}

	/**
	 * Default {@link DocumentationSuiteOptions.skipPackage}.
	 *
	 * Unconditionally returns `false` (i.e. no packages will be filtered out).
	 */
	export function defaultSkipPackage(): boolean {
		return false;
	}
}

/**
 * Default {@link DocumentationSuiteOptions} value.
 */
const defaultDocumentationSuiteOptions: DeepRequired<DocumentationSuiteOptions> = {
	hierarchyOptions: DefaultDocumentationSuiteOptions.defaultHierarchyOptions,
	includeTopLevelDocumentHeading: true,
	includeBreadcrumb: true,
	getUriBaseOverrideForItem: DefaultDocumentationSuiteOptions.defaultGetUriBaseOverrideForItem,
	getLinkTextForItem: DefaultDocumentationSuiteOptions.defaultGetLinkTextForItem,
	getAlertsForItem: DefaultDocumentationSuiteOptions.defaultGetAlertsForItem,
	skipPackage: DefaultDocumentationSuiteOptions.defaultSkipPackage,
	minimumReleaseLevel: ReleaseTag.Internal, // Include everything in the input model
};

/**
 * Gets a complete {@link DocumentationSuiteOptions} using the provided partial configuration, and filling
 * in the remainder with the documented defaults.
 */
export function getDocumentationSuiteOptionsWithDefaults(
	inputOptions: DocumentationSuiteOptions,
): DeepRequired<DocumentationSuiteOptions> {
	return {
		...defaultDocumentationSuiteOptions,
		...inputOptions,
	};
}

/**
 * Trims a trailing semicolon from the provided text, if the text contains one.
 */
function trimTrailingSemicolon(text: string): string {
	if (text.endsWith(";")) {
		return text.slice(0, text.length - 1);
	}
	return text;
}
