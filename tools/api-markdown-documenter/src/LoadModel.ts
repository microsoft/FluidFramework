/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
import {
    ApiDocumentedItem,
    ApiItem,
    ApiItemContainerMixin,
    ApiModel,
    IResolveDeclarationReferenceResult,
} from "@microsoft/api-extractor-model";
import { DocComment, DocInheritDocTag } from "@microsoft/tsdoc";
import { FileSystem } from "@rushstack/node-core-library";
import * as Path from "path";

import { logSuccess, logWarning } from "./LoggingUtilities";

/**
 * Reads API reports generated by {@link https://api-extractor.com/ | API-Extractor} (.api.json files)
 * under the provided directory path, and generates an `ApiModel` from them.
 *
 * @remarks The resulting `ApiModel` can be passed to {@link renderDocuments} or {@link renderFiles}
 * to generate API documentation for the model and its packages.
 *
 * @param reportsDirectoryPath - Path to the directory containing the API reports.
 */
export async function loadModel(reportsDirectoryPath: string): Promise<ApiModel> {
    if (!(await FileSystem.exists(reportsDirectoryPath))) {
        throw new Error(`Provided directory does not exist: "${reportsDirectoryPath}".`);
    }

    console.log("Generating API model...");

    const apiReportFilePaths: string[] = [];
    for (const filename of FileSystem.readFolderItemNames(reportsDirectoryPath)) {
        if (filename.match(/\.api\.json$/i)) {
            console.log(`Reading ${filename}`);
            const filenamePath: string = Path.join(reportsDirectoryPath, filename);
            apiReportFilePaths.push(filenamePath);
        }
    }

    if (apiReportFilePaths.length === 0) {
        throw new Error(
            `No ".api.json" files found under provided directory path: "${reportsDirectoryPath}".`,
        );
    }

    const apiModel = new ApiModel();
    for (const apiReportFilePath of apiReportFilePaths) {
        console.log(`Loading package report "${apiReportFilePath}"...`);
        apiModel.loadPackage(apiReportFilePath);
    }

    logSuccess("API model generated!");

    console.log("Resolving `inheritDoc` comments...");
    applyInheritDoc(apiModel, apiModel);

    return apiModel;
}

/**
 * Pre-apply `{@inheritDoc}` comments to API items as needed.
 *
 * @remarks Copied from `@microsoft/api-documenter` as a workaround for an `API-Extractor` limitation tracked by
 * this issue: {@link https://github.com/microsoft/rushstack/issues/2062}.
 */
function applyInheritDoc(apiItem: ApiItem, apiModel: ApiModel): void {
    if (apiItem instanceof ApiDocumentedItem) {
        if (apiItem.tsdocComment) {
            const inheritDocTag: DocInheritDocTag | undefined = apiItem.tsdocComment.inheritDocTag;

            if (inheritDocTag && inheritDocTag.declarationReference) {
                // Attempt to resolve the declaration reference
                const result: IResolveDeclarationReferenceResult =
                    apiModel.resolveDeclarationReference(
                        inheritDocTag.declarationReference,
                        apiItem,
                    );

                if (result.errorMessage) {
                    logWarning(
                        `Unresolved @inheritDoc tag for ${apiItem.displayName}: ${result.errorMessage}.`,
                    );
                } else if (
                    result.resolvedApiItem instanceof ApiDocumentedItem &&
                    result.resolvedApiItem.tsdocComment &&
                    result.resolvedApiItem !== apiItem
                ) {
                    copyInheritedDocs(apiItem.tsdocComment, result.resolvedApiItem.tsdocComment);
                }
            }
        }
    }

    // Recurse members
    if (ApiItemContainerMixin.isBaseClassOf(apiItem)) {
        for (const member of apiItem.members) {
            applyInheritDoc(member, apiModel);
        }
    }
}

/**
 * Copy the content from `sourceDocComment` to `targetDocComment`.
 *
 * @remarks Copied from `@microsoft/api-documenter` as a workaround for an `API-Extractor` limitation tracked by
 * this issue: {@link https://github.com/microsoft/rushstack/issues/2062}.
 */
function copyInheritedDocs(targetDocComment: DocComment, sourceDocComment: DocComment): void {
    targetDocComment.summarySection = sourceDocComment.summarySection;
    targetDocComment.remarksBlock = sourceDocComment.remarksBlock;

    targetDocComment.params.clear();
    for (const param of sourceDocComment.params) {
        targetDocComment.params.add(param);
    }
    for (const typeParam of sourceDocComment.typeParams) {
        targetDocComment.typeParams.add(typeParam);
    }
    targetDocComment.returnsBlock = sourceDocComment.returnsBlock;

    targetDocComment.inheritDocTag = undefined;
}
