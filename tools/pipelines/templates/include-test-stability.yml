# Copyright (c) Microsoft Corporation and contributors. All rights reserved.
# Licensed under the MIT License.

# include-test-stability template to build and test NPM packages/projects

parameters:
- name: buildDirectory
  type: string

- name: taskBuild
  type: string
  default: ci:build

- name: taskLint
  type: boolean
  default: true

- name: taskTest
  type: object
  default:
  - ci:test

- name: poolBuild
  type: object
  default: Large

- name: checkoutSubmodules
  type: boolean
  default: false

- name: timeoutInMinutes
  type: number
  default: 60

jobs:
  # Job - Build
  - job: build
    displayName: Build
    pool: ${{ parameters.poolBuild }}
    variables:
      testCoverage: ${{ ne(variables['Build.Reason'], 'PullRequest') }}
      releaseBuildVar: $[variables.releaseBuild]
    timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
    steps:
    # Setup
    - checkout: self
      clean: true
      lfs: ${{ parameters.checkoutSubmodules }}
      submodules: ${{ parameters.checkoutSubmodules }}

    - task: Bash@3
      displayName: Parameters
      inputs:
        targetType: 'inline'
        workingDirectory: ${{ parameters.buildDirectory }}
        script: |
          # Show all task group conditions

          echo "
          Pipeline Variables:
            releaseBuild=$(releaseBuildVar)

          Tasks Parameters:
            BuildDir=${{ parameters.buildDirectory }}
            Build=${{ parameters.taskBuild }}
            Lint=${{ parameters.taskLint }}
            Test=${{ convertToJson(parameters.taskTest) }}
            TestCoverage=$(testCoverage)
          "

    # Install
    - task: UseNode@1
      displayName: Use Node 14.x
      inputs:
        version: 14.x
    - task: Npm@1
      displayName: npm ci
      inputs:
        command: 'custom'
        workingDir: ${{ parameters.buildDirectory }}
        customCommand: 'ci --unsafe-perm'
        customRegistry: 'useNpmrc'

    # Build
    - ${{ if ne(parameters.taskBuild, 'false') }}:
      - task: Npm@1
        displayName: npm run ${{ parameters.taskBuild }}
        inputs:
          command: 'custom'
          workingDir: ${{ parameters.buildDirectory }}
          customCommand: 'run ${{ parameters.taskBuild }}'

    # Lint
    - ${{ if ne(parameters.taskLint, false) }}:
      - task: Npm@1
        displayName: npm run lint
        inputs:
          command: 'custom'
          workingDir: ${{ parameters.buildDirectory }}
          customCommand: 'run lint'

    # Test
    - ${{ if ne(convertToJson(parameters.taskTest), '[]') }}:
      # Set variable startTest if the build succeed so that we can run all the test tasks whether they are failed or not
      - script: |
          echo "##vso[task.setvariable variable=startTest]true"
        displayName: Start Test

      - ${{ each taskTestStep in parameters.taskTest }}:
        # Test - With coverage
        - ${{ if and(eq(variables['testCoverage'], true), startsWith(taskTestStep, 'ci:test')) }}:
          - task: Npm@1
            displayName: npm run ${{ taskTestStep }}:coverage
            inputs:
              command: 'custom'
              workingDir: ${{ parameters.buildDirectory }}
              customCommand: 'run ${{ taskTestStep }}:coverage'
            condition: and(succeededOrFailed(), eq(variables['startTest'], 'true'))
        # Test - No coverage
        - ${{ if or(eq(variables['testCoverage'], false), eq(startsWith(taskTestStep, 'ci:test'), false)) }}:
            - task: Npm@1
              displayName: npm run ${{ taskTestStep }}
              inputs:
                command: 'custom'
                workingDir: ${{ parameters.buildDirectory }}
                customCommand: 'run ${{ taskTestStep }}'
              condition: and(succeededOrFailed(), eq(variables['startTest'], 'true'))

      # Test - Upload coverage results
      # Some webpacked file using externals introduce file name with quotes in them
      # and Istanbul's cobertura reporter doesn't escape them causing parse error when we publish
      # A quick fix to patch the file with sed. (See https://github.com/bcoe/c8/issues/302)
      - ${{ if eq(variables['testCoverage'], true) }}:
        - task: Bash@3
          displayName: 'Check for nyc/report directory'
          inputs:
            targetType: 'inline'
            workingDirectory: ${{ parameters.buildDirectory }}
            script: |
              test -d nyc/report && echo '##vso[task.setvariable variable=ReportDirExists;]true' || echo 'No nyc/report directory'
          condition: and(succeededOrFailed(), eq(variables['startTest'], 'true'))
        - task: Bash@3
          displayName: Patch Coverage Results
          inputs:
            targetType: 'inline'
            workingDirectory: ${{ parameters.buildDirectory }}/nyc/report
            script: |
              sed -e 's/\(filename=\".*[\\/]external .*\)"\(.*\)""/\1\&quot;\2\&quot;"/' cobertura-coverage.xml > cobertura-coverage-patched.xml
          condition: and(succeededOrFailed(), eq(variables['ReportDirExists'], 'true'))
        - task: PublishCodeCoverageResults@1
          displayName: Publish Code Coverage
          inputs:
            codeCoverageTool: Cobertura
            summaryFileLocation: ${{ parameters.buildDirectory }}/nyc/report/cobertura-coverage-patched.xml
            reportDirectory: ${{ parameters.buildDirectory }}/nyc/report
            failIfCoverageEmpty: true
          condition: and(succeededOrFailed(), eq(variables['ReportDirExists'], 'true'))

      # Test - Upload results
      - task: PublishTestResults@2
        displayName: Publish Test Results
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/*junit-report.xml'
          searchFolder: ${{ parameters.buildDirectory }}/nyc
          mergeTestResults: false
        condition: and(succeededOrFailed(), eq(variables['startTest'], 'true'))
