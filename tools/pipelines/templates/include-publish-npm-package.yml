# Copyright (c) Microsoft Corporation and contributors. All rights reserved.
# Licensed under the MIT License.

# include-publish-npm-package

parameters:
- name: tagName
  type: string

- name: pool
  type: object
  default: Small-eastus2

- name: isReleaseGroup
  type: boolean
  default: false

- name: buildDirectory
  type: string

- name: buildToolsVersionToInstall
  type: string
  default: repo

# The path to the pnpm store.
- name: pnpmStorePath
  type: string
  default: $(Pipeline.Workspace)/.pnpm-store

stages:

# This stage only runs for test-branch builds
- stage: publish_npm_internal_test
  dependsOn: build
  displayName: Publish internal test feed
  condition: and(succeeded(), eq(variables['testBuild'], true))
  variables:
  - group: ado-feeds
  jobs:
  - template: /tools/pipelines/templates/include-publish-npm-package-deployment.yml@self
    parameters:
      feedUrl: $(ado-feeds-test) # Comes from the ado-feeds variable group
      feedKind: internal-test
      environment: test-package-build-feed
      pool: ${{ parameters.pool }}
      buildDirectory: ${{ parameters.buildDirectory }}
      buildToolsVersionToInstall: ${{ parameters.buildToolsVersionToInstall }}
      pnpmStorePath: ${{ parameters.pnpmStorePath }}

  # Only generate manifest files for runs in the internal project (i.e. CI runs, not PR run), for the main, test and release branch, and
  # for the build of the client release group (we don't need manifests for anything else).
  # Enabling this template for every PR run risks overwriting existing manifest files uploaded to Azure blobs. Therefore, it's crucial to restrict this template to commits merged into the main and release branch.
  - ${{ if and(eq(variables['System.TeamProject'], 'internal'), eq(parameters.tagName, 'client'), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/test/'))) }}:
    - template: /tools/pipelines/templates/upload-dev-manifest.yml@self
      parameters:
        buildDirectory: '${{ parameters.buildDirectory }}'

# This stage and the following stage both run for non-test builds. The build feed is equivalent to the public npmjs.org
# feed except it contains builds for every main- or next-branch build.
- stage: publish_npm_internal_build
  dependsOn: build
  displayName: Publish to internal build feed
  # This condition should match the condition for publish_npm_internal_dev
  condition: and(succeeded(), eq(variables['testBuild'], false))
  variables:
  - group: ado-feeds
  jobs:
  - template: /tools/pipelines/templates/include-publish-npm-package-deployment.yml@self
    parameters:
      feedUrl: $(ado-feeds-build) # Comes from the ado-feeds variable group
      feedKind: internal-build
      # Environment should match the condition for publish_npm_internal_dev
      environment: package-build-feed
      pool: ${{ parameters.pool }}
      buildDirectory: ${{ parameters.buildDirectory }}
      buildToolsVersionToInstall: ${{ parameters.buildToolsVersionToInstall }}
      pnpmStorePath: ${{ parameters.pnpmStorePath }}

  # Only generate manifest files for runs in the internal project (i.e. CI runs, not PR run), for the main, test and release branch, and
  # for the build of the client release group (we don't need manifests for anything else).
  # Enabling this template for every PR run risks overwriting existing manifest files uploaded to Azure blobs. Therefore, it's crucial to restrict this template to commits merged into the main and release branch.
  - ${{ if and(eq(variables['System.TeamProject'], 'internal'), eq(parameters.tagName, 'client'), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/test/'))) }}:
    - template: /tools/pipelines/templates/upload-dev-manifest.yml@self
      parameters:
        buildDirectory: '${{ parameters.buildDirectory }}'

# Only add a stage to publish packages to the dev feed for release groups, which have separate lists of packages to
# publish to each feed. Non-release-group builds (for an independent package) only need to publish to the build feed.
- ${{ if eq(parameters.isReleaseGroup, true) }}:
  - stage: publish_npm_internal_dev
    dependsOn: build
    displayName: Publish to internal dev feed
    # This condition should match the condition for publish_npm_internal_build
    condition: and(succeeded(), eq(variables['testBuild'], false))
    variables:
    - group: ado-feeds
    jobs:
    - template: /tools/pipelines/templates/include-publish-npm-package-deployment.yml@self
      parameters:
        feedUrl: $(ado-feeds-dev) # Comes from the ado-feeds variable group
        feedKind: internal-dev
        # Environment should match the condition for publish_npm_internal_build
        environment: package-build-feed
        pool: ${{ parameters.pool }}
        buildDirectory: ${{ parameters.buildDirectory }}
        buildToolsVersionToInstall: ${{ parameters.buildToolsVersionToInstall }}
        pnpmStorePath: ${{ parameters.pnpmStorePath }}

- stage: publish_npm_public
  dependsOn: build
  displayName: Publish to public npmjs.org
  condition: and(succeeded(), or(eq(variables['release'], 'release'), eq(variables['release'], 'prerelease')))
  variables:
  - group: ado-feeds
  jobs:
  - template: /tools/pipelines/templates/include-publish-npm-package-deployment.yml@self
    parameters:
      feedUrl: https://registry.npmjs.org
      feedKind: public
      environment: package-npmjs-feed
      pool: ${{ parameters.pool }}
      customEndPoint: npmjs
      publishFlags: --access public
      tagName: ${{ parameters.tagName }}
      buildDirectory: ${{ parameters.buildDirectory }}
      buildToolsVersionToInstall: ${{ parameters.buildToolsVersionToInstall }}
      pnpmStorePath: ${{ parameters.pnpmStorePath }}
