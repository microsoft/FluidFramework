# Copyright (c) Microsoft Corporation and contributors. All rights reserved.
# Licensed under the MIT License.

# This template is intended to be used for common steps across stages of the test-perf-benchmarks.yml pipeline.
# It downloads (from the artifacts produced by another pipeline) and installs a specified package that has performance tests.

parameters:
# Identifier for the pipeline that produced the artifact with the package to be installed.
# Will be used for the 'pipeline' input for a DownloadPipelineArtifact task.
- name: artifactPipeline
  type: string

# Identifier for the pipeline run that produced the artifact with the package to be installed.
# Will be used for the 'buildId' input for a DownloadPipelineArtifact task.
- name: artifactBuildId
  type: string

# Name of the package to be installed.
- name: testPackageName
  type: string

# Path where the package should be installed. This template assumes an appropriate .npmrc file was already setup there
# so dependencies can be resolved from our feeds.
- name: installPath
  type: string

steps:
- task: Bash@3
  displayName: Set local template variables
  inputs:
    targetType: 'inline'
    # Using a prefix on these variables to try to make them unique to minimize risk of conflicts with variables that
    # use the same name in the pipeline that includes this template.
    # Using isOutput=true variables was too complicated/dirty.
    script: |
      set -eu -o pipefail
      echo "Setting local variables for yml template"

      # Doing the character replacements with sed at runtime because using replace() in ADO template expression (which
      # are evaluated at compile-time) causes some weird interactions if the value provided for testPackageName is only
      # available at runtime. Also, using ! as separator instead of the usual / because forward slash is something we
      # need to replace.
      TEST_PACKAGE_NAME=$(echo "${{ parameters.testPackageName }}" | sed -r 's!@!!g' | sed -r 's!/!-!g')

      # There's some thought behind the value for the itpbip_sanitizedPackageName to make sure that two packages with
      # partially overlapping names (e.g. @fluid-experimental/tree and @fluid-experimental/tree-react-api) can be
      # differentiated, so the pipeline knows which of the two tgz files it is supposed to unpack, while also avoiding
      # these issues we've run into in the past:
      # - A pattern like `${TEST_PACKAGE_NAME}-?.?.?-*.tgz` stops working for two-digit major/minor/patch version numbers.
      #   It also doesn't work when the pipeline runs for a release/* branch because in that case the tgz filename looks
      #   like `<package-name>-<major>.<minor>.<patch>.tgz` instead of `<package-name>-<major>.<minor>.<patch>-<build-id>.tgz`,
      #   so the final dash in the pattern causes it to not match.
      # - A pattern like `${TEST_PACKAGE_NAME}-*.*.*-*.tgz` won't differentiate packages in all cases because extra
      #   parts of the package name are separated with dashes (e.g.fluidexperimental-tree and fluidexperimental-tree-react-api),
      #   which are also used to separate the package name from the major version number.
      # The logic behind the current pattern is that we want to find these components:
      # - `${TEST_PACKAGE_NAME}` - Matching package name.
      # - `-` A dash.
      # - `[0-9]*.[0-9]*.[0-9]*` - The version. While the glob syntax technically allows alpha-numerics for `*`, we
      #   don't expect this will be an issue, and still allows us to match multi-digit version numbers (e.g. 2.10.0).
      #   This component *must not* match another bit of package name. As long as we don't put numbers in package names,
      #   the current pattern should keep working.
      #   Also, the trailing `*` is important to handle the case where "-<build-id>" is appended to the version number,
      #   but it also handles the case where it isn't because it can match 0 characters.
      # - `.tgz` - The extension.
      # NOTE: this ends up used as an input to an ADO task and in an argument in a call to `ls` so the syntax must work
      # in both cases. We might not be able to leverage all of ADOs globbing capabilities as described in
      # https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/file-matching-patterns?view=azure-devops#pattern-syntax.
      echo "##vso[task.setvariable variable=itpbip_sanitizedPackageName]${TEST_PACKAGE_NAME}-[0-9]*.[0-9]*.[0-9]*.tgz"
      echo "##vso[task.setvariable variable=itpbip_downloadPath]$(Pipeline.Workspace)/downloadedPackages"

# Download package that has performance tests
- task: DownloadPipelineArtifact@2
  displayName: Download package with perf tests - ${{ parameters.testPackageName }}
  retryCountOnTaskFailure: 1
  inputs:
    # It seems there's a bug and preferTriggeringPipeline is not respected.
    # We force the behavior by explicitly specifying:
    # - buildVersionToDownload: specific
    # - buildId: <the id of the triggering build>
    # preferTriggeringPipeline: true
    source: specific
    project: internal
    pipeline: ${{ parameters.artifactPipeline }}
    buildVersionToDownload: specific
    buildId: ${{ parameters.artifactBuildId }}
    artifact: pack
    patterns: "**/$(itpbip_sanitizedPackageName)"
    path: $(itpbip_downloadPath)
    # allowPartiallySucceededBuilds: true # No effect as long as we have buildVersionToDownload: specific
    # branchName: $(Build.SourceBranch)   # No effect as long as we have buildVersionToDownload: specific

# Install package that has performance tests
- task: Bash@3
  displayName: Install package with perf tests - ${{ parameters.testPackageName }}
  retryCountOnTaskFailure: 1
  inputs:
    targetType: 'inline'
    workingDirectory: ${{ parameters.installPath }}
    script: |
      set -eu -o pipefail
      echo "Installing ${{ parameters.testPackageName }}"

      # Note that this path must match the path that the packed packages are saved to in the build pipeline.
      # It should be kept up to date with the path defined in scripts/pack-packages.sh.
      TEST_PACKAGE_PATH_PATTERN=$(itpbip_downloadPath)/tarballs/$(itpbip_sanitizedPackageName)
      echo "Looking for tarball with pattern $TEST_PACKAGE_PATH_PATTERN :"
      ls -1 $TEST_PACKAGE_PATH_PATTERN

      if [[ `ls -1 $TEST_PACKAGE_PATH_PATTERN | wc -l` -eq 1 ]]; then
        npm install $(ls $TEST_PACKAGE_PATH_PATTERN)
      else
        echo "##vso[task.logissue type=error]Test package '${{ parameters.testPackageName }}' not found, or more than one possible match found. See messages above."
        exit -1
      fi
