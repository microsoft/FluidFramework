# Copyright (c) Microsoft Corporation and contributors. All rights reserved.
# Licensed under the MIT License.

# include-publish-npm-package-steps template to publish NPM packages/projects

parameters:
- name: namespace
  type: boolean

- name: feedName
  type: string

- name: devFeedName
  type: string

- name: official
  type: string

- name: artifactPath
  type: string

- name: publishFlags
  type: string
  default:

- name: customEndPoint
  type: string
  default:

- name: isClientUtilsPackage
  type: boolean
  default: false

steps:
- task: Bash@3
  displayName: Generate .npmrc for ${{ parameters.artifactPath }}
  inputs:
    targetType: 'inline'
    workingDirectory: $(Pipeline.Workspace)/pack/${{ parameters.artifactPath }}
    ${{ if eq(parameters.isClientUtilsPackage, true) }}:
      script: |
        echo Generating .npmrc for ${{ parameters.feedName }}
        echo "@fluid-internal:registry=${{ parameters.feedName }}" >> ./.npmrc
        echo "always-auth=true" >> ./.npmrc
        cat .npmrc
        echo Deleting @fluid-internal packages except fluid-internal-client-utils package
        for packageName in $(ls fluid-internal-*.tgz | grep -v fluid-internal-client-utils-*.tgz)
        do
          rm -f $packageName
        done
        echo Deleting @fluid-example packages
        rm -f fluid-example-*
        echo Deleting @fluidframework packages
        rm -f fluidframework-*
        echo Deleting @fluid-experimental packages
        rm -f fluid-experimental-*
        echo Deleting @fluid-tools packages
        rm -f fluid-tools-*
        echo "Display Package Names"
        ls
    ${{ elseif eq(parameters.namespace, true) }}:
      ${{ if eq(parameters.official, false) }}:
        script: |
          echo Generating .npmrc for ${{ parameters.feedName }}
          echo "@fluidframework:registry=${{ parameters.feedName }}" >> ./.npmrc
          echo "@fluid-example:registry=${{ parameters.feedName }}" >> ./.npmrc
          echo "@fluid-internal:registry=${{ parameters.devFeedName }}" >> ./.npmrc
          echo "@fluid-experimental:registry=${{ parameters.feedName }}" >> ./.npmrc
          echo "@fluid-tools:registry=${{ parameters.feedName }}" >> ./.npmrc
          echo "always-auth=true" >> ./.npmrc
          cat .npmrc
      ${{ if eq(parameters.official, true) }}:
        script: |
          echo Generating .npmrc for ${{ parameters.feedName }}
          echo "@fluidframework:registry=${{ parameters.feedName }}" >> ./.npmrc
          echo "@fluid-experimental:registry=${{ parameters.feedName }}" >> ./.npmrc
          echo "@fluid-tools:registry=${{ parameters.feedName }}" >> ./.npmrc
          echo "@fluid-internal:registry=${{ parameters.feedName }}" >> ./.npmrc
          echo "always-auth=true" >> ./.npmrc
          cat .npmrc
          echo Deleting @fluid-internal packages except fluid-internal-client-utils package
          for packageName in $(ls fluid-internal-*.tgz | grep -v fluid-internal-client-utils-*.tgz)
          do
            rm -f $packageName
          done
          echo Deleting @fluid-example packages
          rm -f fluid-example-*
    ${{ elseif eq(parameters.namespace, false) }}:
      script: |
        echo Generating .npmrc for ${{ parameters.feedName }}
        echo "registry=${{ parameters.feedName }}" >> ./.npmrc
        echo "always-auth=true" >> ./.npmrc
        cat .npmrc
- task: npmAuthenticate@0
  displayName: npm Authenticate for ${{ parameters.artifactPath }}
  inputs:
    workingFile: $(Pipeline.Workspace)/pack//${{ parameters.artifactPath }}/.npmrc
    customEndPoint: ${{ parameters.customEndPoint }}
- task: Bash@3
  displayName: Publish Packages for ${{ parameters.artifactPath }}
  inputs:
    targetType: 'inline'
    workingDirectory: $(Pipeline.Workspace)/pack/${{ parameters.artifactPath }}
    script: |
      tag="--tag canary"
      if [[ "$(release)" == "release" ]]; then
        if [ "$(isLatest)" = "true" ]; then
          tag="--tag latest"
        fi
      elif [[ "$(Build.SourceBranch)" = refs/heads/main ]]; then
        tag="--tag next"
      fi
      echo Tag: $tag
      cp .npmrc ~/.npmrc
      maximumRetryIfNetworkError=3
      if [[ -f $(Pipeline.Workspace)/pack/packagePublishOrder.txt ]]; then
        packages=$(cat $(Pipeline.Workspace)/pack/packagePublishOrder.txt)
        sorted=true
      else
        packages=*.tgz
        sorted=false
      fi
      for packageName in $packages
      do
        if [[ $sorted == true ]]; then
          f=$(find -name "${packageName}-[0-9]*.tgz")
        else
          f=$packageName
        fi
        if [[ $f != "" ]]; then
          for i in $( seq 1 $maximumRetryIfNetworkError )
          do
            echo "finalluy"
            echo $f
          done
        fi
      done
      rm ~/.npmrc
      exit 0
