# Copyright (c) Microsoft Corporation and contributors. All rights reserved.
# Licensed under the MIT License.

parameters:
- name: buildDirectory
  type: string
- name: buildNumberInPatch
  type: string
  default:
- name: tagName
  type: string

# Set version
steps:
- task: Bash@3
  name: InstallBuildTools
  displayName: Install Fluid Build Tools
  inputs:
    targetType: 'inline'
    workingDirectory: ${{ parameters.buildDirectory }}
    script: |
      pushd "$(Build.SourcesDirectory)/build-tools"
      npm ci
      npm run install:build-tools
      popd
      npm link "$(Build.SourcesDirectory)/build-tools/packages/build-tools"

- task: Bash@3
  name: SetVersion
  displayName: Set Package Version
  env:
    VERSION_RELEASE: $(release)
    VERSION_BUILDNUMBER: $(Build.BuildNumber)
    TEST_BUILD: $(testBuild)
    VERSION_PATCH: ${{ parameters.buildNumberInPatch }}
    VERSION_TAGNAME: ${{ parameters.tagName }}
  inputs:
    targetType: 'inline'
    workingDirectory: ${{ parameters.buildDirectory }}
    script: |
      # expect lerna.json and package.json be in the current working directory

      echo VERSION_BUILDNUMBER=$VERSION_BUILDNUMBER
      echo TEST_BUILD=$TEST_BUILD
      echo VERSION_RELEASE=$VERSION_RELEASE
      echo VERSION_PATCH=$VERSION_PATCH

      fluid-build-version
- task: Bash@3
  displayName: Update Package Version
  env:
    VERSION_RELEASE: $(release)
  inputs:
    targetType: 'inline'
    workingDirectory: ${{ parameters.buildDirectory }}
    script: |
      echo SETVERSION_VERSION=$SETVERSION_VERSION
      echo SETVERSION_CODEVERSION=$SETVERSION_CODEVERSION

      if [ -f "lerna.json" ]; then
        if [ "$VERSION_RELEASE" = "release" ]; then
          npx lerna version $(SetVersion.version) --no-git-tag-version --no-push --yes
        else
          npx lerna version $(SetVersion.version) --no-git-tag-version --no-push --yes --exact
        fi
      else
        npm version $(SetVersion.version) --no-git-tag-version -f --allow-same-version
      fi
