# Copyright (c) Microsoft Corporation and contributors. All rights reserved.
# Licensed under the MIT License.

parameters:
- name: buildDirectory
  type: string
- name: buildNumberInPatch
  type: string
  default:
- name: tagName
  type: string
- name: includeInternalVersions
  type: boolean
  default: false
- name: buildToolsVersionToInstall
  type: string
  default: repo

# Set version
steps:
- ${{ if eq(parameters.buildToolsVersionToInstall, 'repo') }}:
  - task: Bash@3
    name: PrependPath
    displayName: Prepend build-tools CLI to path
    inputs:
      targetType: 'inline'
      workingDirectory: ${{ parameters.buildDirectory }}
      script: |
        # Prepend the cli bin dir to the path. See
        # <https://docs.microsoft.com/en-us/azure/devops/pipelines/scripts/logging-commands?view=azure-devops&tabs=bash#prependpath-prepend-a-path-to-the--path-environment-variable>
        # more information.
        echo "##vso[task.prependpath]$(Build.SourcesDirectory)/build-tools/packages/build-cli/bin"

  - task: Bash@3
    name: InstallBuildTools
    displayName: Install Fluid Build Tools (from repo)
    inputs:
      targetType: 'inline'
      workingDirectory: ${{ parameters.buildDirectory }}
      script: |
        pushd "$(Build.SourcesDirectory)/build-tools"
        npm ci
        popd

- ${{ if ne(parameters.buildToolsVersionToInstall, 'repo') }}:
  - task: Bash@3
    name: InstallBuildTools
    displayName: Install Fluid Build Tools (from npm)
    inputs:
      targetType: 'inline'
      workingDirectory: ${{ parameters.buildDirectory }}
      script: |
        echo "${{ parameters.buildToolsVersionToInstall }}"
        npm install --global "@fluid-tools/build-cli@${{ parameters.buildToolsVersionToInstall }}"

- task: Bash@3
  name: BuildToolsInstallCheck
  displayName: Check Build Tools Installation
  inputs:
    targetType: 'inline'
    workingDirectory: ${{ parameters.buildDirectory }}
    script: |
      # Output the help and full command list for debugging purposes
      flub --help
      flub commands

- task: Bash@3
  name: SetVersion
  displayName: Set Package Version
  env:
    VERSION_RELEASE: $(release)
    VERSION_BUILDNUMBER: $(Build.BuildNumber)
    TEST_BUILD: $(testBuild)
    VERSION_PATCH: ${{ parameters.buildNumberInPatch }}
    VERSION_TAGNAME: ${{ parameters.tagName }}
    VERSION_INCLUDE_INTERNAL_VERSIONS: ${{ parameters.includeInternalVersions }}
  inputs:
    targetType: 'inline'
    workingDirectory: ${{ parameters.buildDirectory }}
    script: |
      # expect lerna.json and package.json be in the current working directory

      echo VERSION_BUILDNUMBER=$VERSION_BUILDNUMBER
      echo TEST_BUILD=$TEST_BUILD
      echo VERSION_RELEASE=$VERSION_RELEASE
      echo VERSION_PATCH=$VERSION_PATCH
      echo VERSION_INCLUDE_INTERNAL_VERSIONS=$VERSION_INCLUDE_INTERNAL_VERSIONS

      # Generate the build version
      flub generate buildVersion

- task: Bash@3
  displayName: Update Package Version
  env:
    VERSION_RELEASE: $(release)
  inputs:
    targetType: 'inline'
    workingDirectory: ${{ parameters.buildDirectory }}
    script: |
      echo SETVERSION_VERSION=$SETVERSION_VERSION
      echo SETVERSION_CODEVERSION=$SETVERSION_CODEVERSION

      if [ -f "lerna.json" ]; then
        if [ "$VERSION_RELEASE" = "release" ]; then
          # no need to run anything here, as the version in the package should be correct
          npx lerna exec "if [ \`npm -s run env echo '\$npm_package_version'\` != '$(SetVersion.version)' ]; then ( exit 1 ) fi"
          exit $?
        fi
        npx lerna version $(SetVersion.version) --no-git-tag-version --no-push --yes --exact
      else
        npm version $(SetVersion.version) --no-git-tag-version -f --allow-same-version
      fi
