# Copyright (c) Microsoft Corporation and contributors. All rights reserved.
# Licensed under the MIT License.

parameters:
- name: buildDirectory
  type: string
- name: buildNumberInPatch
  type: string
  default:
- name: tagName
  type: string
- name: includeInternalVersions
  type: boolean
  default: false
- name: buildToolsVersionToInstall
  type: string
  default: repo

# The path to the pnpm store.
- name: pnpmStorePath
  type: string
  default: $(Pipeline.Workspace)/.pnpm-store

# The semver range constraint to use for interdependencies; that is, dependencies on other packages within the release
# group
- name: interdependencyRange
  type: string

# Parameter for modifying the 'types' field in the package.json.
# If the value `none` is provided, the 'types' field in package.json will remain unchanged.
- name: packageTypesOverride
  type: string
  default: none

- name: STORAGE_ACCOUNT
  type: string
  default: none

- name: STORAGE_KEY
  type: string
  default: none

# Set version
steps:

# These steps should ONLY run if we're using the repo version of the build tools. These steps are mutually exclusive
# with the next group of steps.
- ${{ if eq(parameters.buildToolsVersionToInstall, 'repo') }}:
  - template: include-install-pnpm.yml
    parameters:
      buildDirectory: $(Build.SourcesDirectory)/build-tools
      pnpmStorePath: ${{ parameters.pnpmStorePath }}
      enableCache: false

  - task: Bash@3
    name: InstallBuildTools
    displayName: Install Fluid Build Tools (from repo)
    inputs:
      targetType: 'inline'
      workingDirectory: $(Build.SourcesDirectory)/build-tools
      script: |
        pnpm i --frozen-lockfile
        pnpm build:compile
        cd packages/build-cli
        # Use npm link instead of pnpm link because it handles bins better
        npm link
        echo "which flub: $(which flub)"

# These steps install a version of build-tools from the npm registry. As noted above, these steps are mutually exclusive
# with the previous group of steps.
- ${{ if ne(parameters.buildToolsVersionToInstall, 'repo') }}:
  - task: Bash@3
    name: InstallBuildTools
    displayName: Install Fluid Build Tools (from npm)
    inputs:
      targetType: 'inline'
      workingDirectory: ${{ parameters.buildDirectory }}
      script: |
        echo "${{ parameters.buildToolsVersionToInstall }}"
        npm install --global "@fluid-tools/build-cli@${{ parameters.buildToolsVersionToInstall }}"

- task: Bash@3
  name: BuildToolsInstallCheck
  displayName: Check Build Tools Installation
  inputs:
    targetType: 'inline'
    workingDirectory: ${{ parameters.buildDirectory }}
    script: |
      # Output the help and full command list for debugging purposes
      echo "which flub: $(which flub)"
      flub --help
      flub commands

- task: Bash@3
  name: SetVersion
  displayName: Set Package Version
  env:
    VERSION_RELEASE: $(release)
    VERSION_BUILDNUMBER: $(Build.BuildNumber)
    TEST_BUILD: $(testBuild)
    VERSION_PATCH: ${{ parameters.buildNumberInPatch }}
    VERSION_TAGNAME: ${{ parameters.tagName }}
    VERSION_INCLUDE_INTERNAL_VERSIONS: ${{ parameters.includeInternalVersions }}
    PACKAGE_TYPES_FIELD: ${{ parameters.packageTypesOverride }}
  inputs:
    targetType: 'inline'
    workingDirectory: ${{ parameters.buildDirectory }}
    script: |
      # expect lerna.json and package.json be in the current working directory

      echo VERSION_BUILDNUMBER=$VERSION_BUILDNUMBER
      echo TEST_BUILD=$TEST_BUILD
      echo VERSION_RELEASE=$VERSION_RELEASE
      echo VERSION_PATCH=$VERSION_PATCH
      echo VERSION_INCLUDE_INTERNAL_VERSIONS=$VERSION_INCLUDE_INTERNAL_VERSIONS
      echo PACKAGE_TYPES_FIELD=$PACKAGE_TYPES_FIELD

      # Generate the build version. Sets the environment variables version, codeVersion, and isLatest.
      # These are referenced in following steps prefixed by this task name. E.g. SetVersion.version
      flub generate buildVersion

# This check runs only when the value of `Change package types` is selected as `alpha` or `beta`
- ${{ if ne(parameters.packageTypesOverride, 'none') }}:
  - task: Bash@3
    displayName: Set Package Types - ${{ parameters.packageTypesOverride }}
    continueOnError: false
    inputs:
      targetType: 'inline'
      workingDirectory: ${{ parameters.buildDirectory }}
      script: |
        # At this point in the pipeline the build hasn't been done, so we skip checking if the types files and other build outputs exist.
        flub release setPackageTypesField -g ${{ parameters.tagName }} --types ${{ parameters.packageTypesOverride }} --no-checkFileExists

- task: Bash@3
  displayName: Update Package Version (flub)
  env:
    VERSION_RELEASE: $(release)
    RELEASE_GROUP: ${{ parameters.tagName }}
    INTERDEPENDENCY_RANGE: ${{ parameters.interdependencyRange }}
  inputs:
    targetType: 'filePath'
    workingDirectory: ${{ parameters.buildDirectory }}
    filePath: $(Build.SourcesDirectory)/scripts/update-package-version.sh

# Only generate manifest files for runs in the internal project (i.e. CI runs, not PR run), for the main and release branch, and
# for the build of the client release group (we don't need manifests for anything else).
# Enabling this template for every PR run risks overwriting existing manifest files uploaded to Azure blobs. Therefore, it's crucial to restrict this template to commits merged into the main and release branch.
- ${{ if and(eq(variables['System.TeamProject'], 'internal'), eq(parameters.tagName, 'client'), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))) }}:
  - template: /tools/pipelines/templates/upload-dev-manifest.yml
    parameters:
      buildDirectory: '${{ parameters.buildDirectory }}'
      STORAGE_ACCOUNT: '${{ parameters.STORAGE_ACCOUNT }}'
      STORAGE_KEY: '${{ parameters.STORAGE_KEY }}'

# This task is a last-minute verification that no Fluid internal versions show up with caret dependencies. This is to
# help find and prevent bugs in the version bumping tools.
- task: Bash@3
  displayName: Check for caret dependencies on internal versions
  inputs:
    targetType: 'inline'
    workingDirectory: ${{ parameters.buildDirectory }}
    script: |
      grep -r -e "\^2.0.0-internal.\d*.\d*.\d*" `find . -type d -name node_modules -prune -o -name 'package.json' -print`
      if [[ $? == 0 ]]; then
        echo "##vso[task.logissue type=error]Fluid internal versions shouldn't use caret dependencies"
        exit -1;
      fi

# This task is a last-minute verification that no Fluid internal dev versions show up with caret dependencies. This is
# to help find and prevent bugs in the version bumping tools.
- task: Bash@3
  displayName: Check for caret dependencies on dev versions
  inputs:
    targetType: 'inline'
    workingDirectory: ${{ parameters.buildDirectory }}
    script: |
      grep -r -e "\^2.0.0-dev.\d*.\d*.\d*.\d*" `find . -type d -name node_modules -prune -o -name 'package.json' -print`
      if [[ $? == 0 ]]; then
        echo "##vso[task.logissue type=error]Fluid internal dev versions shouldn't use caret dependencies"
        exit -1;
      fi
