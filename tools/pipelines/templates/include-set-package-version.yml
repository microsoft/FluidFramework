# Copyright (c) Microsoft Corporation and contributors. All rights reserved.
# Licensed under the MIT License.

parameters:
- name: buildDirectory
  type: string
- name: buildNumberInPatch
  type: string
  default:
- name: tagName
  type: string
- name: includeInternalVersions
  type: boolean
  default: false
- name: buildToolsVersionToInstall
  type: string
  default: repo

# The path to the pnpm store.
- name: pnpmStorePath
  type: string
  default: $(Pipeline.Workspace)/.pnpm-store

# The semver range constraint to use for interdependencies; that is, dependencies on other packages within the release
# group
- name: interdependencyRange
  type: string

# Set version
steps:
- ${{ if eq(parameters.buildToolsVersionToInstall, 'repo') }}:
  - task: Bash@3
    name: PrependPath
    displayName: Prepend build-tools CLI to path
    inputs:
      targetType: 'inline'
      workingDirectory: ${{ parameters.buildDirectory }}
      script: |
        # Prepend the cli bin dir to the path. See
        # <https://docs.microsoft.com/en-us/azure/devops/pipelines/scripts/logging-commands?view=azure-devops&tabs=bash#prependpath-prepend-a-path-to-the--path-environment-variable>
        # more information.
        echo "##vso[task.prependpath]$(Build.SourcesDirectory)/build-tools/packages/build-cli/bin"

  - template: include-install-pnpm.yml
    parameters:
      buildDirectory: $(Build.SourcesDirectory)/build-tools
      pnpmStorePath: ${{ parameters.pnpmStorePath }}
      enableCache: false

  - task: Bash@3
    name: InstallBuildTools
    displayName: Install Fluid Build Tools (from repo)
    inputs:
      targetType: 'inline'
      workingDirectory: $(Build.SourcesDirectory)/build-tools
      script: |
        pnpm i --frozen-lockfile
        pnpm build:compile

- ${{ if ne(parameters.buildToolsVersionToInstall, 'repo') }}:
  - task: Bash@3
    name: InstallBuildTools
    displayName: Install Fluid Build Tools (from npm)
    inputs:
      targetType: 'inline'
      workingDirectory: ${{ parameters.buildDirectory }}
      script: |
        echo "${{ parameters.buildToolsVersionToInstall }}"
        npm install --global "@fluid-tools/build-cli@${{ parameters.buildToolsVersionToInstall }}"

- task: Bash@3
  name: BuildToolsInstallCheck
  displayName: Check Build Tools Installation
  inputs:
    targetType: 'inline'
    workingDirectory: ${{ parameters.buildDirectory }}
    script: |
      # Output the help and full command list for debugging purposes
      which flub
      flub --help
      flub commands

- task: Bash@3
  name: SetVersion
  displayName: Set Package Version
  env:
    VERSION_RELEASE: $(release)
    VERSION_BUILDNUMBER: $(Build.BuildNumber)
    TEST_BUILD: $(testBuild)
    VERSION_PATCH: ${{ parameters.buildNumberInPatch }}
    VERSION_TAGNAME: ${{ parameters.tagName }}
    VERSION_INCLUDE_INTERNAL_VERSIONS: ${{ parameters.includeInternalVersions }}
  inputs:
    targetType: 'inline'
    workingDirectory: ${{ parameters.buildDirectory }}
    script: |
      # expect lerna.json and package.json be in the current working directory

      echo VERSION_BUILDNUMBER=$VERSION_BUILDNUMBER
      echo TEST_BUILD=$TEST_BUILD
      echo VERSION_RELEASE=$VERSION_RELEASE
      echo VERSION_PATCH=$VERSION_PATCH
      echo VERSION_INCLUDE_INTERNAL_VERSIONS=$VERSION_INCLUDE_INTERNAL_VERSIONS

      # Generate the build version. Sets the environment variables version, codeVersion, and isLatest.
      # These are referenced in following steps prefixed by this task name. E.g. SetVersion.version
      flub generate buildVersion

- task: Bash@3
  displayName: Update Package Version (flub)
  env:
    VERSION_RELEASE: $(release)
    RELEASE_GROUP: ${{ parameters.tagName }}
    INTERDEPENDENCY_RANGE: ${{ parameters.interdependencyRange }}
  inputs:
    targetType: 'filePath'
    workingDirectory: ${{ parameters.buildDirectory }}
    filePath: $(Build.SourcesDirectory)/scripts/update-package-version.sh

# This task is a last-minute verification that no Fluid internal versions show up with caret dependencies. This is to
# help find and prevent bugs in the version bumping tools.
- task: Bash@3
  displayName: Check for caret dependencies on internal versions
  inputs:
    targetType: 'inline'
    workingDirectory: ${{ parameters.buildDirectory }}
    script: |
      grep -r -e "\^2.0.0-internal.\d*.\d*.\d*" `find . -type d -name node_modules -prune -o -name 'package.json' -print`
      if [[ $? == 0 ]]; then
        echo "##vso[task.logissue type=error]Fluid internal versions shouldn't use caret dependencies"
        exit -1;
      fi

# This task is a last-minute verification that no Fluid internal dev versions show up with caret dependencies. This is
# to help find and prevent bugs in the version bumping tools.
- task: Bash@3
  displayName: Check for caret dependencies on dev versions
  inputs:
    targetType: 'inline'
    workingDirectory: ${{ parameters.buildDirectory }}
    script: |
      grep -r -e "\^2.0.0-dev.\d*.\d*.\d*.\d*" `find . -type d -name node_modules -prune -o -name 'package.json' -print`
      if [[ $? == 0 ]]; then
        echo "##vso[task.logissue type=error]Fluid internal dev versions shouldn't use caret dependencies"
        exit -1;
      fi
