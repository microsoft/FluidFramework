# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

# build-npm-package template to build NPM packages/projects

parameters:
- name: buildDirectory
  type: string

- name: taskBuild
  type: string
  default: ci:build

- name: taskBuildDocs
  type: boolean
  default: true

- name: taskLint
  type: boolean
  default: true

- name: taskTest
  type: string
  default: ci:test
 
- name: extraAuth
  type: string
  default:

- name: poolCG
  type: object
  default: Lite

- name: poolBuild
  type: object
  default: Lite

- name: preCG
  type: stepList
  default: []

- name: cgSubDirectory
  type: string
  default:

- name: checkoutSubmodules
  type: boolean
  default: false

- name: namespace
  type: boolean
  default: true

- name: runBundleAnalysis
  type: boolean
  default: false

- name: buildNumberInPatch
  type: string
  default:

- name: publishOverride
  type: string

- name: releaseBuildOverride
  type: string

- name: tagName
  type: string

trigger: none

variables:
  - template: include-vars.yml
    parameters:
      publishOverride: ${{ parameters.publishOverride }}
      releaseBuildOverride: ${{ parameters.releaseBuildOverride }}

stages:
  - stage: build
    displayName: Build Stage
    jobs:
      # Job - Build
      - job: Build
        pool: ${{ parameters.poolBuild }}
        variables:
          testCoverage: ${{ and(eq(parameters.taskTest, 'ci:test'), ne(variables['Build.Reason'], 'PullRequest')) }}
          releaseBuildVar: $[variables.releaseBuild]
        steps:
        # Setup
        - checkout: self
          clean: true
          lfs: ${{ parameters.checkoutSubmodules }}
          submodules: ${{ parameters.checkoutSubmodules }}

        - task: Bash@3
          displayName: Parameters
          inputs:
            targetType: 'inline'
            script: |
              # Show all task group conditions

              echo "
              Pipeline Variables:
                releaseBuild=$(releaseBuildVar)

              Override Parameters:
                publishOverride=${{ parameters.publishOverride }}
                releaseBuildOverride=${{ parameters.releaseBuildOverride }}

              Tasks Parameters:
                Build=${{ parameters.taskBuild }}
                Lint=${{ parameters.taskLint }}
                Test=${{ parameters.taskTest }}
                BuildDoc=${{ parameters.taskBuildDocs }}
                TestCoverage=$(testCoverage)

              Computed variables:
                shouldPublish=${{ variables.shouldPublish }}
                componentDetection=${{ variables.componentDetection }}
                pushImage=${{ variables.pushImage }}
                publish=${{ variables.publish }}
                release=$(release)"

        # Install
        - task: UseNode@1
          displayName: Use Node 12.x
          inputs:
            version: 12.x
        - task: Npm@1
          displayName: npm ci
          inputs:
            command: 'custom'
            workingDir: ${{ parameters.buildDirectory }}
            customCommand: 'ci --unsafe-perm'
            customRegistry: 'useNpmrc'

        # Set version
        - template: include-set-package-version.yml
          parameters:
            buildDirectory: ${{ parameters.buildDirectory }}
            buildNumberInPatch: ${{ parameters.buildNumberInPatch }}

        # Build
        - ${{ if ne(parameters.taskBuild, 'false') }}:
          - task: Npm@1
            displayName: npm run ${{ parameters.taskBuild }}
            inputs:
              command: 'custom'
              workingDir: ${{ parameters.buildDirectory }}
              customCommand: 'run ${{ parameters.taskBuild }}'

        # Lint
        - ${{ if ne(parameters.taskLint, false) }}:
          - task: Npm@1
            displayName: npm run lint
            inputs:
              command: 'custom'
              workingDir: ${{ parameters.buildDirectory }}
              customCommand: 'run lint'

        # Test
        - ${{ if ne(parameters.taskTest, 'false') }}:
          # Test - No coverage
          - ${{ if ne(variables['testCoverage'], true) }}:
            - task: Npm@1
              displayName: npm run ${{ parameters.taskTest }}
              inputs:
                command: 'custom'
                workingDir: ${{ parameters.buildDirectory }}
                customCommand: 'run ${{ parameters.taskTest }}'

          # Test - With coverage
          - ${{ if eq(variables['testCoverage'], true) }}:
            - task: Npm@1
              displayName: npm run ci:test:coverage
              inputs:
                command: 'custom'
                workingDir: ${{ parameters.buildDirectory }}
                customCommand: 'run ci:test:coverage'
            - task: PublishCodeCoverageResults@1
              displayName: Publish Code Coverage
              inputs:
                codeCoverageTool: Cobertura
                summaryFileLocation: ${{ parameters.buildDirectory }}/nyc/report/cobertura-coverage.xml
                reportDirectory: ${{ parameters.buildDirectory }}/nyc/report
              condition: succeededOrFailed()

          # Test - Upload results
          - task: PublishTestResults@2
            displayName: Publish Test Results
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/*junit-report.xml'
              searchFolder: ${{ parameters.buildDirectory }}/nyc
              mergeTestResults: true
            condition: succeededOrFailed()

        # Pack
        - task: Bash@3
          displayName: npm pack
          inputs:
            targetType: 'inline'
            workingDirectory: ${{ parameters.buildDirectory }}
            script: |
              mkdir $(Build.ArtifactStagingDirectory)/pack/
              if [ -f "lerna.json" ]; then
                npx lerna exec --no-private --no-sort -- npm pack --unsafe-perm
                npx lerna exec --no-private --no-sort --parallel -- mv -t $(Build.ArtifactStagingDirectory)/pack/ ./*.tgz
              else
                npm pack --unsafe-perm
                mv -t $(Build.ArtifactStagingDirectory)/pack/ ./*.tgz
              fi

        - task: PublishBuildArtifacts@1
          displayName: Publish Artifact - pack
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)/pack'
            ArtifactName: 'pack'
            publishLocation: 'Container'

        # Collect bundle analysis
        - ${{ if eq(parameters.runBundleAnalysis, true) }}:
          - task: Npm@1
            displayName: npm run bundle-analysis
            inputs:
              command: 'custom'
              workingDir: ${{ parameters.buildDirectory }}
              customCommand: 'run bundle-analysis'

          - task: PublishBuildArtifacts@1
            displayName: Publish Artifacts - bundle-analysis
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
            inputs:
              PathtoPublish: '${{ parameters.buildDirectory }}/artifacts/bundleAnalysis'
              Artifactname: 'bundleAnalysis'
              publishLocation: 'Container'

        # Docs
        - ${{ if ne(parameters.taskBuildDocs, false) }}:
          - task: Npm@1
            displayName: npm run build:docs
            inputs:
              command: 'custom'
              workingDir: ${{ parameters.buildDirectory }}
              customCommand: 'run build:docs'

          - task: PublishBuildArtifacts@1
            displayName: Publish Artifact - _api-extractor-temp
            inputs:
              PathtoPublish: '${{ parameters.buildDirectory }}/_api-extractor-temp'
              ArtifactName: '_api-extractor-temp'
              publishLocation: 'Container'

      # Job - Component detection
      - ${{ if eq(variables.componentDetection, true) }}:
        - job: CG
          displayName: Component Detection
          pool: ${{ parameters.poolCG }}
          steps:
          - checkout: self
            clean: true
            lfs: false
            submodules: false

          - ${{ parameters.preCG }}

          - task: ComponentGovernanceComponentDetection@0
            displayName: Component Detection
            inputs:
              sourceScanPath: ${{ parameters.buildDirectory }}/${{ parameters.cgSubDirectory }}
              verbosity: Verbose
              scanType: Register
              alertWarningLevel: High

  # Publish stage
  - ${{ if eq(variables.publish, true) }}:
    - template: include-publish-npm-package.yml
      parameters:
        buildDirectory: ${{ parameters.buildDirectory }}
        namespace: ${{ parameters.namespace }}
        tagName: ${{ parameters.tagName }}
        buildNumberInPatch: ${{ parameters.buildNumberInPatch }}
        
