# Copyright (c) Microsoft Corporation and contributors. All rights reserved.
# Licensed under the MIT License.

parameters:
- name: loggerPackage
  type: string
  default: '@ff-internal/aria-logger'

- name: pathToTelemetryGenerator
  type: string
  default: '$(Build.SourcesDirectory)/tools/telemetry-generator'

- name: buildFeedUrl
  type: string

- name: internalFeedUrl
  type: string

- name: devFeedUrl
  type: string

- name: officeFeedUrl
  type: string

steps:
# Set some variables only relevant to the steps in this template
- task: Bash@3
  displayName: Set variables for telemetry-generator setup
  name: templateVariables
  inputs:
    targetType: 'inline'
    ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/test/') }}:
      script: |
        echo "##vso[task.setvariable variable=feed;isoutput=true]${{ parameters.internalFeedUrl }}"
        echo "##vso[task.setvariable variable=devFeed;isoutput=true]${{ parameters.internalFeedUrl }}"
    ${{ else }}:
      script: |
        echo "##vso[task.setvariable variable=feed;isoutput=true]${{ parameters.buildFeedUrl }}"
        echo "##vso[task.setvariable variable=devFeed;isoutput=true]${{ parameters.devFeedUrl }}"

# Need to checkout the repo in order to run @fluid-tools/telemetry-generator which we don't publish right now.
- checkout: self
  clean: true

- template: include-use-node-version.yml

- task: Bash@3
  displayName: Print parameter/variable values for template
  inputs:
    targetType: 'inline'
    script: |
      echo "
      Parameters:
        loggerPackage=${{ parameters.loggerPackage }}
        pathToTelemetryGenerator=${{ parameters.pathToTelemetryGenerator }}
        buildFeedUrl={{ parameters.buildFeedUrl }}
        devFeedUrl={{ parameters.devFeedUrl }}
        internalFeedUrl={{ parameters.internalFeedUrl }}
        officeFeedUrl={{ parameters.officeFeedUrl }}

      Variables:
        feed=$(templateVariables.feed)
        devFeed=$(templateVariables.devFeed)
      "

- task: Bash@3
  displayName: Initialize npmrc
  inputs:
    targetType: 'inline'
    workingDirectory: ${{ parameters.pathToTelemetryGenerator }}
    # Note: $(ado-feeds-build) and $(ado-feeds-office) come from the ado-feeds variable group
    script: |
      echo Initialize package
      npm init --yes

      echo Generating .npmrc
      echo "registry=https://registry.npmjs.org" >> ./.npmrc
      echo "always-auth=false" >> ./.npmrc

      echo "@fluidframework:registry=$(templateVariables.feed)" >> ./.npmrc
      echo "@fluid-experimental:registry=$(templateVariables.feed)" >> ./.npmrc
      echo "@fluid-tools:registry=$(templateVariables.feed)" >> ./.npmrc
      echo "@fluid-internal:registry=$(templateVariables.devFeed)" >> ./.npmrc
      echo "@fluid-private:registry=$(templateVariables.devFeed)" >> ./.npmrc
      echo "@ff-internal:registry=${{ parameters.buildFeedUrl }}" >> ./.npmrc
      echo "@microsoft:registry=${{ parameters.officeFeedUrl }}" >> ./.npmrc
      echo "always-auth=true" >> ./.npmrc
      cat .npmrc

# Auth to internal feed
- task: npmAuthenticate@0
  displayName: 'npm authenticate (internal feed)'
  inputs:
    workingFile: ${{ parameters.pathToTelemetryGenerator }}/.npmrc

# Install test and logger package
- task: Npm@1
  displayName: 'npm install aria logger'
  inputs:
    workingDir: ${{ parameters.pathToTelemetryGenerator }}
    command: 'custom'
    customCommand: 'install ${{ parameters.loggerPackage }}'
    customRegistry: 'useNpmrc'

- task: Bash@3
  displayName: 'Prepare telemetry-generator'
  inputs:
    targetType: 'inline'
    workingDirectory: ${{ parameters.pathToTelemetryGenerator }}
    script: |
      npm i;
      npm run build:compile;
