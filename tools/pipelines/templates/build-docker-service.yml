# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

# build-docker-service template to build services docker container

parameters:
- name: buildDirectory
  type: string

- name: containerName
  type: string

- name: test
  type: boolean

- name: lint
  type: boolean
  default: false

- name: containerBaseDir
  type: string
  default: /home/node/server

- name: buildNumberInPatch
  type: string
  default: true

- name: setVersion
  type: boolean
  default: true

- name: releaseImage
  type: boolean
  default: false

- name: publishOverride
  type: string
  default: default

- name: releaseBuildOverride
  type: string
  default: none

- name: tagName
  type: string
  default:

trigger: none

variables:
- template: include-vars.yml
  parameters:
    releaseImage: ${{ parameters.releaseImage }}
    publishOverride: ${{ parameters.publishOverride }}
    releaseBuildOverride: ${{ parameters.releaseBuildOverride }}
    buildNumberInPatch: ${{ parameters.buildNumberInPatch }}
- group: container-registry-info
- name: buildContainerName
  value: build/${{ parameters.containerName }}
- ${{ if eq(variables.pushImage, false) }}:
  - name: containerRegistry
    value:
  - name: containerTag
    value: $(buildContainerName):$(containerTagSuffix)
- ${{ if eq(variables.pushImage, true) }}:
  - name: containerRegistry
    value: $[variables.containerRegistryConnection]
  - name: containerTag
    value: $(containerRegistryUrl)/$(buildContainerName):$(containerTagSuffix)

stages:
- stage: build
  displayName: Build Stage
  jobs:
  - job: build
    displayName: Build Container - ${{ variables.buildContainerName }}
    pool: Lite
    variables:
      releaseBuildVar: $[variables.releaseBuild]
      containerTagSuffix: $(SetVersion.version)
    steps:
    - task: Bash@3
      displayName: Parameters
      inputs:
        targetType: 'inline'
        script: |
          # Show all task group conditions

          echo "
          Pipeline Variables:
            releaseBuild=$(releaseBuildVar)

          Override Parameters:
            publishOverride=${{ parameters.publishOverride }}
            releaseBuildOverride=${{ parameters.releaseBuildOverride }}

          Tasks Parameters:
            Lint=${{ parameters.lint }}
            Test=${{ parameters.test }}

          Computed variables:
            shouldPublish=${{ variables.shouldPublish }}
            componentDetection=${{ variables.componentDetection }}
            publish=${{ variables.publish }}
            canRelease=${{ variables.canRelease }}

            pushImage=${{ variables.pushImage }}
            releaseImage=${{ variables.releaseImage }}
            release=$(release)"

          if [[ "$(release)" == "release" ]]; then
            if [[ "${{ variables.canRelease }}" == "False" ]]; then
              echo "##vso[task.logissue type=error]Invalid branch ${{ variables['Build.SourceBranch'] }} for release"
              exit -1;
            fi
          fi

          if [[ "$(release)" != "none" ]] && [[ "$(release)" != "" ]]; then
            if [[ "${{ variables.pushImage }}" != "True" ]]; then
              echo "##vso[task.logissue type=error]'$(release)' is set but image is not pushed. Either the branch doesn't default to push image or it is skipped."
              exit -1;
            fi

            if [[ "${{ variables.releaseImage }}" != "True" ]]; then
              echo "##vso[task.logissue type=error]'$(release)' is set but pipeline isn't declared to allow release image."
              exit -1;
            fi
          fi

    # Setup
    - checkout: self
      clean: true
      lfs: false
      submodules: false

    # Component detection
    - ${{ if eq(variables.componentDetection, true) }}:
      - template: include-generate-notice-steps.yml
        parameters:
          buildDirectory: ${{ parameters.buildDirectory }}

    # Set version
    - ${{ if eq(parameters.setVersion, true) }}:
      - task: UseNode@1
        displayName: Use Node 12.x
        inputs:
          version: 12.x
      - template: include-set-package-version.yml
        parameters:
          buildDirectory: ${{ parameters.buildDirectory }}
          buildNumberInPatch: ${{ parameters.buildNumberInPatch }}
    - ${{ if eq(parameters.setVersion, false) }}:
      - task: Bash@3
        name: SetVersion
        displayName: Set Package version
        inputs:
          targetType: 'inline'
          script: |
            echo "0.0.$(Build.BuildNumber)"
            echo "##vso[task.setvariable variable=version;isOutput=true]0.0.$(Build.BuildNumber)"

    # Build
    - task: Docker@2
      displayName: Docker Build
      inputs:
        containerRegistry: $(containerRegistry)
        repository: ${{ variables.buildContainerName }}
        command: build
        dockerFile: ${{ parameters.buildDirectory }}/Dockerfile
        buildContext: ${{ parameters.buildDirectory }}
        tags: |
          $(containerTagSuffix)

    # Lint
    - ${{ if eq(parameters.lint, true) }}:
      - task: Docker@0
        displayName: npm run lint
        inputs:
          action: 'Run a Docker command'
          customCommand: 'run -t $(containerTag) npm run lint'

    # Test
    - ${{ if eq(parameters.test, true) }}:
      - task: Docker@0
        displayName: npm run test
        inputs:
          action: 'Run a Docker command'
          customCommand: 'run --user root -v $(System.DefaultWorkingDirectory)/${{ parameters.buildDirectory }}/nyc:${{ parameters.containerBaseDir }}/nyc -t $(containerTag) npm run test'

      - task: PublishTestResults@2
        displayName: Publish Test Results
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/*junit-report.xml'
          searchFolder: $(System.DefaultWorkingDirectory)/${{ parameters.buildDirectory }}/nyc
          mergeTestResults: true
        condition: succeededOrFailed()

      - task: PublishCodeCoverageResults@1
        displayName: Publish Code Coverage
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/${{ parameters.buildDirectory }}/nyc/**/report/cobertura-coverage.xml'
          reportDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.buildDirectory }}/nyc/**/report'

    # Push
    - ${{ if eq(variables.pushImage, true) }}:
      - task: Docker@2
        displayName: Docker Push
        inputs:
          containerRegistry: $(containerRegistryConnection)
          repository: ${{ variables.buildContainerName }}
          command: push
          tags: |
            $(containerTagSuffix)

    # Cleanup
    - task: Docker@0
      displayName: Docker Cleanup - Container prune
      inputs:
        action: Run a Docker command
        customCommand: container prune -f
      continueOnError: true
      condition: succeededOrFailed()

    - task: Docker@0
      displayName: Docker Cleanup - ${{ variables.buildContainerName }}
      inputs:
        action: Run a Docker command
        customCommand: rmi $(containerTag)
      continueOnError: true
      condition: succeededOrFailed()

# Publish stage
- ${{ if eq(variables.releaseImage, true) }}:
  - template: include-publish-docker-service.yml
    parameters:
      containerRegistry: $(containerRegistry)
      containerTag: $(containerTag)
      containerRegistryUrl: $(containerRegistryUrl)
      containerName: ${{ parameters.containerName }}
      tagName: ${{ parameters.tagName }}
