# Copyright (c) Microsoft Corporation and contributors. All rights reserved.
# Licensed under the MIT License.

# build-docker-service template to build services docker container

parameters:
- name: buildDirectory
  type: string

- name: containerName
  type: string

- name: pack
  type: boolean
  default: false

- name: lint
  type: boolean
  default: false

- name: test
  type: string
  default:

- name: docs
  type: boolean
  default: false

- name: containerBaseDir
  type: string
  default: /home/node/server

- name: buildNumberInPatch
  type: string
  default: true

- name: setVersion
  type: boolean
  default: true

- name: releaseImage
  type: boolean
  default: false

- name: publishOverride
  type: string
  default: default

- name: releaseBuildOverride
  type: string
  default: none

- name: releaseKind
  type: string
  default: docker

- name: tagName
  type: string
  default:

- name: pool
  type: string
  default: Small

- name: buildToolsVersionToInstall
  type: string
  default: repo

- name: packageManager
  type: string
  default: npm

- name: packageManagerInstallCommand
  type: string
  default: 'npm ci --unsafe-perm'

# The semver range constraint to use for interdependencies; that is, dependencies on other packages within the release
# group
- name: interdependencyRange
  type: string
  default: "^"

# A list of scripts that execute checks of the release group, e.g. prettier, syncpack, etc. These will be run serially
# in a pipeline stage separate from the build stage.
- name: checks
  type: object
  default: []

trigger: none

variables:
- template: include-vars.yml
  parameters:
    releaseImage: ${{ parameters.releaseImage }}
    publishOverride: ${{ parameters.publishOverride }}
    releaseBuildOverride: ${{ parameters.releaseBuildOverride }}
    buildNumberInPatch: ${{ parameters.buildNumberInPatch }}
- group: container-registry-info
- ${{ if eq(variables.testBuild, true) }}:
  - name: buildContainerName
    value: test/${{ parameters.containerName }}
- ${{ if eq(variables.testBuild, false) }}:
  - name: buildContainerName
    value: build/${{ parameters.containerName }}
- name: baseContainerTag
  value: base:$(containerTagSuffix)
- ${{ if eq(variables.pushImage, false) }}:
  - name: containerRegistry
    value:
  - name: containerTag
    value: $(buildContainerName):$(containerTagSuffix)
- ${{ if eq(variables.pushImage, true) }}:
  - name: containerRegistry
    value: $[variables.containerRegistryConnection]
  - name: containerTag
    value: $(containerRegistryUrl)/$(buildContainerName):$(containerTagSuffix)
  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
    - name: latestContainerTagSuffix
      value: latest
    - name: latestContainerTag
      value: $(containerRegistryUrl)/$(buildContainerName):$(latestContainerTagSuffix)
  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/next') }}:
    - name: latestContainerTagSuffix
      value: next
    - name: latestContainerTag
      value: $(containerRegistryUrl)/$(buildContainerName):$(latestContainerTagSuffix)
# tag the git repo when we published the docker image if the releaseKind is docker,
# otherwise tag with the publishing the packages (where the releaseKind is both or npm)
- ${{ if ne(parameters.releaseKind, 'docker') }}:
  - name: tagNameOnReleaseImage
    value:
- ${{ if eq(parameters.releaseKind, 'docker') }}:
  - name: tagNameOnReleaseImage
    value: ${{ parameters.tagName }}

stages:
- ${{ if ne(convertToJson(parameters.checks), '[]') }}:
  - template: include-policy-check.yml
    parameters:
      buildDirectory: ${{ parameters.buildDirectory }}
      checks: ${{ parameters.checks }}

- stage: build
  displayName: Build Stage
  jobs:
  - job: build
    displayName: Build Container - ${{ parameters.containerName }}
    pool: ${{ parameters.pool }}
    variables:
      buildBase: ${{ or(ne(parameters.test, ''), or(eq(parameters.pack, true), or(eq(parameters.lint, true), eq(parameters.docs, true)))) }}
      testCoverage: ${{ and(eq(parameters.test, 'ci:test'), ne(variables['Build.Reason'], 'PullRequest')) }}
      releaseBuildVar: $[variables.releaseBuild]
      containerTagSuffix: $(SetVersion.version)
    steps:
    # Setup
    - checkout: self
      clean: true
      lfs: false
      submodules: false

    - task: Bash@3
      displayName: Parameters
      inputs:
        targetType: 'inline'
        workingDirectory: ${{ parameters.buildDirectory }}
        script: |
          # Show all task group conditions

          echo "
          Pipeline Variables:
            releaseBuild=$(releaseBuildVar)

          Override Parameters:
            publishOverride=${{ parameters.publishOverride }}
            releaseBuildOverride=${{ parameters.releaseBuildOverride }}

          Tasks Parameters:
            Lint=${{ parameters.lint }}
            Test=${{ parameters.test }}

          Computed variables:
            shouldPublish=${{ variables.shouldPublish }}
            componentDetection=${{ variables.componentDetection }}
            publish=${{ variables.publish }}
            canRelease=${{ variables.canRelease }}
            interdependencyRange='${{ parameters.interdependencyRange }}'

            pushImage=${{ variables.pushImage }}
            releaseImage=${{ variables.releaseImage }}
            release=$(release)"

          if [[ "$(release)" == "release" ]]; then
            if [[ "${{ variables.canRelease }}" == "False" ]]; then
              echo "##vso[task.logissue type=error]Invalid branch ${{ variables['Build.SourceBranch'] }} for release"
              exit -1;
            fi

            if [ -f "lerna.json" ]; then
              grep -e fluid.*[0-9]-[0-9] `find packages -name 'package.json'`
            else
              grep -e fluid.*[0-9]-[0-9] `find . -name 'package.json'`
            fi

            if [[ $? == 0 ]]; then
              echo "##vso[task.logissue type=error]Release shouldn't contain prerelease dependencies"
              exit -1;
            fi
          fi

          if [[ "$(release)" == "prerelease" ]]; then
            if [[ "${{ parameters.buildNumberInPatch }}" == "true" ]]; then
              echo "##vso[task.logissue type=error] Prerelease not allow for builds that put build number as the patch version"
              exit -1;
            fi
          fi

          if [[ "$(release)" != "none" ]] && [[ "$(release)" != "" ]]; then
            if [[ "${{ variables.pushImage }}" != "True" ]]; then
              echo "##vso[task.logissue type=error]'$(release)' is set but image is not pushed. Either the branch doesn't default to push image or it is skipped."
              exit -1;
            fi

            if [[ "${{ variables.releaseImage }}" != "True" ]]; then
              echo "##vso[task.logissue type=error]'$(release)' is set but pipeline isn't declared to allow release image."
              exit -1;
            fi
          fi

    # for npm ci in component detection and set version
    - template: include-use-node-version.yml

    # Component detection
    - ${{ if eq(variables.componentDetection, true) }}:
      - template: include-generate-notice-steps.yml
        parameters:
          buildDirectory: ${{ parameters.buildDirectory }}
          requireNotice: ${{ eq(variables.releaseImage, true) }}

    - ${{ if eq(parameters.packageManager, 'pnpm') }}:
      - template: include-install-pnpm.yml
        parameters:
          buildDirectory: ${{ parameters.buildDirectory }}

    # Set version
    - ${{ if eq(parameters.setVersion, true) }}:
      - task: Bash@3
        displayName: Install dependencies
        inputs:
          targetType: 'inline'
          workingDirectory: ${{ parameters.buildDirectory }}
          script: |
            ${{ parameters.packageManagerInstallCommand }}

      - template: include-set-package-version.yml
        parameters:
          buildDirectory: ${{ parameters.buildDirectory }}
          buildNumberInPatch: ${{ parameters.buildNumberInPatch }}
          buildToolsVersionToInstall: ${{ parameters.buildToolsVersionToInstall }}
          interdependencyRange: ${{ parameters.interdependencyRange }}
          tagName: ${{ parameters.tagName }}
    - ${{ if eq(parameters.setVersion, false) }}:
      - task: Bash@3
        name: SetVersion
        displayName: Set Package version
        inputs:
          targetType: 'inline'
          script: |
            echo "0.0.$(Build.BuildNumber)"
            echo "##vso[task.setvariable variable=version;isOutput=true]0.0.$(Build.BuildNumber)"

    - ${{ if eq(variables.buildBase, true) }}:
      # Build - Base
      - task: Docker@2
        displayName: Docker Build - base
        inputs:
          repository: base
          command: build
          dockerFile: ${{ parameters.buildDirectory }}/Dockerfile
          buildContext: ${{ parameters.buildDirectory }}
          arguments: --target base
          tags: |
            $(containerTagSuffix)

      # Pack
      - ${{ if eq(parameters.pack, true) }}:
        - task: Docker@0
          displayName: Pack
          inputs:
            action: 'Run a Docker command'
            customCommand: 'run -v $(System.DefaultWorkingDirectory)/pack/scoped:/usr/src/pack -t $(baseContainerTag) pnpm lerna exec --no-private -- mv `npm pack` /usr/src/pack'

        - task: PublishPipelineArtifact@1
          displayName: Publish Artifact - pack
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/pack'
            artifactName: pack
            publishLocation: 'pipeline'

      # Lint
      - ${{ if eq(parameters.lint, true) }}:
        - task: Docker@0
          displayName: npm run lint
          inputs:
            action: 'Run a Docker command'
            customCommand: 'run -t $(baseContainerTag) npm run lint'

      # Test
      - ${{ if ne(parameters.test, '') }}:
        # Test - No coverage
        - ${{ if ne(variables.testCoverage, true) }}:
          - task: Docker@0
            displayName: npm run ${{ parameters.test }}
            inputs:
              action: 'Run a Docker command'
              customCommand: 'run --user root -v $(System.DefaultWorkingDirectory)/${{ parameters.buildDirectory }}/nyc:${{ parameters.containerBaseDir }}/nyc -t $(baseContainerTag) npm run ${{ parameters.test }}'

        # Test - With coverage
        - ${{ if eq(variables.testCoverage, true) }}:
          - task: Docker@0
            displayName: npm run ci:test:coverage
            inputs:
              action: 'Run a Docker command'
              customCommand: 'run --user root -v $(System.DefaultWorkingDirectory)/${{ parameters.buildDirectory }}/nyc:${{ parameters.containerBaseDir }}/nyc -t $(baseContainerTag) npm run ci:test:coverage'

          - task: PublishCodeCoverageResults@1
            displayName: Publish Code Coverage
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/${{ parameters.buildDirectory }}/nyc/**/report/cobertura-coverage.xml'
              reportDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.buildDirectory }}/nyc/**/report'
              failIfCoverageEmpty: true
            condition: succeededOrFailed()

        # Test - Upload results
        - task: PublishTestResults@2
          displayName: Publish Test Results
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: '**/*junit-report.xml'
            searchFolder: $(System.DefaultWorkingDirectory)/${{ parameters.buildDirectory }}/nyc
            mergeTestResults: true
          condition: succeededOrFailed()

      # Docs
      - ${{ if eq(parameters.docs, true) }}:
        - task: Docker@0
          displayName: npm run ci:build:docs
          inputs:
            action: 'Run a Docker command'
            customCommand: 'run --user root -v $(System.DefaultWorkingDirectory)/_api-extractor-temp:/usr/src/server/_api-extractor-temp -t $(baseContainerTag) npm run ci:build:docs'

        - task: PublishPipelineArtifact@1
          displayName: 'Docs: Publish Artifact'
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/_api-extractor-temp'
            artifactName: _api-extractor-temp
            publishLocation: 'pipeline'

    # Build
    - task: Docker@2
      displayName: Docker Build - ${{ variables.buildContainerName }}
      inputs:
        containerRegistry: $(containerRegistry)
        repository: ${{ variables.buildContainerName }}
        command: build
        dockerFile: ${{ parameters.buildDirectory }}/Dockerfile
        buildContext: ${{ parameters.buildDirectory }}
        tags: |
          $(containerTagSuffix)
          ${{ variables.latestContainerTagSuffix }}

    # Push
    - ${{ if eq(variables.pushImage, true) }}:
      - task: Docker@2
        displayName: Docker Push
        inputs:
          containerRegistry: $(containerRegistryConnection)
          repository: ${{ variables.buildContainerName }}
          command: push
          tags: |
            $(containerTagSuffix)
            ${{ variables.latestContainerTagSuffix }}

    # Cleanup
    - task: Docker@0
      displayName: Docker Cleanup - Container prune
      inputs:
        action: Run a Docker command
        customCommand: container prune -f
      continueOnError: true
      condition: succeededOrFailed()

    - task: Docker@0
      displayName: Docker Cleanup - ${{ variables.buildContainerName }}
      inputs:
        action: Run a Docker command
        customCommand: rmi $(containerTag)
      continueOnError: true
      condition: succeededOrFailed()

    - ${{ if eq(variables.buildBase, true) }}:
      - task: Docker@0
        displayName: Docker Cleanup - base
        inputs:
          action: Run a Docker command
          customCommand: rmi $(baseContainerTag)
        continueOnError: true
        condition: succeededOrFailed()

    - ${{ if ne(variables.latestContainerTag, '') }}:
      - task: Docker@0
        displayName: Docker Cleanup - ${{ variables.latestContainerTag }}
        inputs:
          action: Run a Docker command
          customCommand: rmi ${{ variables.latestContainerTag }}
        continueOnError: true
        condition: succeededOrFailed()

    - ${{ if eq(parameters.packageManager, 'pnpm') }}:
      # Prune the pnpm store before it's cached. This removes any deps that are not used by the current build.
      - task: Bash@3
        displayName: Prune pnpm store
        inputs:
          targetType: 'inline'
          workingDirectory: ${{ parameters.buildDirectory }}
          script: |
            pnpm store prune

# Publish stage
- ${{ if and(eq(variables.publish, true), ne(parameters.releaseKind, 'docker')) }}:
  - template: include-publish-npm-package.yml
    parameters:
      namespace: true
      tagName: ${{ parameters.tagName }}

- ${{ if eq(variables.releaseImage, true) }}:
  - template: include-publish-docker-service.yml
    parameters:
      containerRegistry: $(containerRegistry)
      containerTag: $(containerTag)
      containerRegistryUrl: $(containerRegistryUrl)
      containerName: ${{ parameters.containerName }}
      tagName: ${{ variables.tagNameOnReleaseImage }}
