# Copyright (c) Microsoft Corporation and contributors. All rights reserved.
# Licensed under the MIT License.

# This template is specifically intended to be used for common steps required across different stages
# of test-perf-benchmarks.yml pipeline. It performs some common setup that all stages need to do.

parameters:
# Identifier for the pipeline that produced the artifact with the test files.
# Will be used for the 'pipeline' input for a DownloadPipelineArtifact task.
- name: artifactPipeline
  type: string

# Identifier for the pipeline run that produced the artifact with the test files.
# Will be used for the 'buildId' input for a DownloadPipelineArtifact task.
- name: artifactBuildId
  type: string

# Path to the folder where the test files artifact should be downloaded.
- name: testFilesPath
  type: string

# Name of the service that the tests are running against.
- name: endpointName
  type: string
  default: ''

- name: userNpmrcDirectory
  type: string
  default: $(Agent.TempDirectory)

steps:
- checkout: git://internal/ff_pipeline_host

- task: Bash@3
  displayName: Print parameter/variable values for troubleshooting
  inputs:
    targetType: 'inline'
    script: |
      set -eu -o pipefail
      echo "
      Variables:
        artifactBuildId=${{ parameters.artifactBuildId }}
        artifactPipeline=${{ parameters.artifactPipeline }}
        testFilesPath=${{ parameters.testFilesPath }}

      Build Params
        SourceBranch=$(Build.SourceBranch)
      "

# Note: there is some duplication between the .npmrc setup here, the pnpm configuration in the next step, and the
# base .npmrc file in ff_pipeline_host which could be cleaned up.
- template: /tools/pipelines/templates/include-setup-npmrc-for-download.yml@self
  parameters:
    userNpmrcDirectory: ${{ parameters.userNpmrcDirectory }}

- template: /tools/pipelines/templates/include-install.yml@self
  parameters:
    packageManager: pnpm
    buildDirectory: $(Build.SourcesDirectory)
    packageManagerInstallCommand: pnpm install
    primaryRegistry: $(ado-feeds-ff-download-only)
    userNpmrcPath: ${{ parameters.userNpmrcDirectory }}/.npmrc

# Download artifact with test files
- task: DownloadPipelineArtifact@2
  displayName: Download test files
  retryCountOnTaskFailure: 1
  inputs:
    # It seems there's a bug and preferTriggeringPipeline is not respected.
    # We force the behavior by explicitly specifying:
    # - buildVersionToDownload: specific
    # - buildId: <the id of the triggering build>
    # preferTriggeringPipeline: true
    source: specific
    project: internal
    pipeline: ${{ parameters.artifactPipeline }}
    buildVersionToDownload: specific
    buildId: ${{ parameters.artifactBuildId }}
    artifact: test-files
    path: ${{ parameters.testFilesPath }}
    # allowPartiallySucceededBuilds: true # No effect as long as we have buildVersionToDownload: specific
    # branchName: $(Build.SourceBranch)   # No effect as long as we have buildVersionToDownload: specific

- ${{ if eq(parameters.endpointName, 'odsp') }}:
  # Log in to Azure to retrieve tenant credentials
  - task: AzureCLI@2
    displayName: 'Log in to retrieve tenant credentials'
    inputs:
      azureSubscription: 'Fluid Framework Tests'
      # This injects environment variables into the below script. See https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/azure-cli-v2?view=azure-pipelines
      addSpnToEnvironment: true
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -eu -o pipefail

        az login --service-principal -u $servicePrincipalId -p $idToken --tenant $tenantId

  # Obtain tenant credentials and store them in environment variables
  - task: Bash@3
    displayName: 'Run tenant setup script'
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    inputs:
      targetType: 'inline'
      script: |
        set -eu -o pipefail

        # Increase the maximum time to wait for a tenant to 1 hour to accommodate multiple test runs at the same time.
        pnpm exec trips-setup --waitTime=3600 --accessToken=$SYSTEM_ACCESSTOKEN
        echo "##vso[task.setvariable variable=tenantSetupSuccess;]true"
