# Copyright (c) Microsoft Corporation and contributors. All rights reserved.
# Licensed under the MIT License.

# This template is specifically intended to be used for common steps required across different stages
# of test-perf-benchmarks.yml pipeline. It performs some common setup that all stages need to do.

parameters:
# Identifier for the pipeline that produced the artifact with the test files.
# Will be used for the 'pipeline' input for a DownloadPipelineArtifact task.
- name: artifactPipeline
  type: string

# Identifier for the pipeline run that produced the artifact with the test files.
# Will be used for the 'buildId' input for a DownloadPipelineArtifact task.
- name: artifactBuildId
  type: string

# URL for the "Dev feed" in our ADO project.
# All Fluid packages will be resolved from here when installing the dependencies for telemetry generator and aria-logger.
- name: devFeedUrl
  type: string

# URL for the "Office feed" in our ADO project.
# Packages in the @microsoft scope will be resolved from here when installing the dependencies for telemetry generator and aria-logger.
- name: officeFeedUrl
  type: string

# Path where the packages with perf tests will be installed.
# The template will create it, setup an .npmrc file so Fluid packages can be resolved from our Dev Feed, and install aria-logger in it.
- name: testWorkspace
  type: string

# Path to the folder where the test files artifact should be downloaded.
- name: testFilesPath
  type: string

steps:
- task: Bash@3
  displayName: Print parameter/variable values for troubleshooting
  inputs:
    targetType: 'inline'
    script: |
      echo "
      Variables:
        artifactBuildId=${{ parameters.artifactBuildId }}
        artifactPipeline=${{ parameters.artifactPipeline }}
        devFeedUrl=${{ parameters.devFeedUrl }}
        officeFeedUrl=${{ parameters.officeFeedUrl }}
        testFilesPath=${{ parameters.testFilesPath }}
        testWorkspace=${{ parameters.testWorkspace }}

      Build Params
        SourceBranch=$(Build.SourceBranch)
      "

- template: include-telemetry-setup.yml
  parameters:
    devFeedUrl: ${{ parameters.devFeedUrl }}
    officeFeedUrl: ${{ parameters.officeFeedUrl }}
    isCheckoutNeeded: true

# Download artifact with test files
- task: DownloadPipelineArtifact@2
  displayName: Download test files
  inputs:
    # It seems there's a bug and preferTriggeringPipeline is not respected.
    # We force the behavior by explicitly specifying:
    # - buildVersionToDownload: specific
    # - buildId: <the id of the triggering build>
    # preferTriggeringPipeline: true
    source: specific
    project: internal
    pipeline: ${{ parameters.artifactPipeline }}
    buildVersionToDownload: specific
    buildId: ${{ parameters.artifactBuildId }}
    artifact: test-files
    path: ${{ parameters.testFilesPath }}
    # allowPartiallySucceededBuilds: true # No effect as long as we have buildVersionToDownload: specific
    # branchName: $(Build.SourceBranch)   # No effect as long as we have buildVersionToDownload: specific

- task: Bash@3
  displayName: Create test directory
  inputs:
    targetType: 'inline'
    script: |
      mkdir ${{ parameters.testWorkspace }}

- task: Bash@3
  displayName: Initialize npmrc
  inputs:
    targetType: 'inline'
    workingDirectory: ${{ parameters.testWorkspace }}
    script: |
      echo Initialize package
      npm init --yes

      echo Generating .npmrc
      echo "registry=https://registry.npmjs.org" >> ./.npmrc
      echo "always-auth=false" >> ./.npmrc

      echo "@fluidframework:registry=${{ parameters.devFeedUrl }}" >> ./.npmrc
      echo "@fluid-experimental:registry=${{ parameters.devFeedUrl }}" >> ./.npmrc
      echo "@fluid-tools:registry=${{ parameters.devFeedUrl }}" >> ./.npmrc
      echo "@fluid-internal:registry=${{ parameters.devFeedUrl }}" >> ./.npmrc
      echo "@fluid-private:registry=${{ parameters.devFeedUrl }}" >> ./.npmrc
      echo "@ff-internal:registry=${{ parameters.devFeedUrl }}" >> ./.npmrc
      echo "@microsoft:registry=${{ parameters.officeFeedUrl }}" >> ./.npmrc
      echo "always-auth=true" >> ./.npmrc
      cat .npmrc

# Auth to internal feed
- task: npmAuthenticate@0
  displayName: 'npm authenticate (internal feed)'
  inputs:
    workingFile: ${{ parameters.testWorkspace }}/.npmrc

# Install aria-logger
- task: Npm@1
  displayName: 'npm install aria logger'
  inputs:
    workingDir: ${{ parameters.testWorkspace }}
    command: 'custom'
    customCommand: 'install @ff-internal/aria-logger'
    customRegistry: 'useNpmrc'
