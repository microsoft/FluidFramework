# Copyright (c) Microsoft Corporation and contributors. All rights reserved.
# Licensed under the MIT License.

parameters:
- name: poolBuild
  type: object
  default: Large

- name: testWorkspace
  type: string

# Custom steps specified by the "caller" of this template, to actually run perf tests
- name: customSteps
  type: stepList

- name: loggerPackage
  type: string
  default: '@ff-internal/aria-logger'

jobs:
  - job: runTests
    displayName: Run tests
    pool: ${{ parameters.poolBuild }}
    variables:
    - name: isTestBranch
      value: ${{ startsWith(variables['Build.SourceBranch'], 'refs/heads/test/') }}
      readonly: true
    - name: feed
      ${{ if eq(variables.isTestBranch, 'true') }}:
        value: https://pkgs.dev.azure.com/fluidframework/internal/_packaging/internal/npm/registry/
      ${{ else }}:
        value: https://pkgs.dev.azure.com/fluidframework/internal/_packaging/build/npm/registry/
    - name: devFeed
      ${{ if eq(variables.isTestBranch, 'true') }}:
        value: https://pkgs.dev.azure.com/fluidframework/internal/_packaging/internal/npm/registry/
      ${{ else }}:
        value: https://pkgs.dev.azure.com/fluidframework/internal/_packaging/dev/npm/registry/

    steps:
    # Setup. Need to checkout the repo in order to run @fluid-tools/telemetry-generator which we don't publish right now.
    - checkout: self
      clean: true

    # Install
    - task: UseNode@1
      displayName: Use Node 16.x
      inputs:
        version: 16.x

    - task: Bash@3
      displayName: Print Parameters
      inputs:
        targetType: 'inline'
        # Some of the variables
        # Variables declared outside this template will only work with "macro syntax": $(name).
        # Variables declared inside this template would work with "template expression syntax": ${{ variables.name }},
        # but we use macro syntax for all variables for consistency.
        script: |
          echo "
          Pipeline Parameters:
            poolBuild=${{ parameters.poolBuild }}

          Pipeline Variables:
            isTestBranch=$(isTestBranch)
            toolAbsolutePath=$(toolAbsolutePath)
            artifactPipeline=$(artifactPipeline)
            artifactBuildId=$(artifactBuildId)
            feed=$(feed)
            devFeed=$(devFeed)
            testWorkspace=${{ parameters.testWorkspace }}
            loggerPackage=${{ parameters.loggerPackage }}

          Build Params
            SourceBranch=$(Build.SourceBranch)
          "

    - task: Bash@3
      displayName: Create test directory
      inputs:
        targetType: 'inline'
        script: |
          mkdir ${{ parameters.testWorkspace }}

    - task: Bash@3
      displayName: Initialize npmrc
      inputs:
        targetType: 'inline'
        workingDirectory: ${{ parameters.testWorkspace }}
        script: |
          echo Initialize package
          npm init --yes

          echo Generating .npmrc
          echo "registry=https://registry.npmjs.org" >> ./.npmrc
          echo "always-auth=false" >> ./.npmrc

          echo "@fluidframework:registry=$(feed)" >> ./.npmrc
          echo "@fluid-experimental:registry=$(feed)" >> ./.npmrc
          echo "@fluid-tools:registry=$(feed)" >> ./.npmrc
          echo "@fluid-internal:registry=$(devFeed)" >> ./.npmrc
          echo "@ff-internal:registry=https://pkgs.dev.azure.com/fluidframework/internal/_packaging/build/npm/registry/" >> ./.npmrc
          echo "@microsoft:registry=https://office.pkgs.visualstudio.com/_packaging/Office/npm/registry/" >> ./.npmrc
          echo "always-auth=true" >> ./.npmrc
          cat .npmrc

    # Auth to internal feed
    - task: npmAuthenticate@0
      displayName: 'npm authenticate (internal feed)'
      inputs:
        workingFile: ${{ parameters.testWorkspace }}/.npmrc

    # Auth to Office feed
    - task: npmAuthenticate@0
      displayName: 'npm authenticate (office feed)'
      inputs:
        workingFile: ${{ parameters.testWorkspace }}/.npmrc
        customEndpoint: 'Office Packages - Readonly'

    # Install test and logger package
    - task: Npm@1
      displayName: 'npm install aria logger'
      inputs:
        command: 'custom'
        workingDir: ${{ parameters.testWorkspace }}
        customCommand: 'install ${{ parameters.loggerPackage }}'
        customRegistry: 'useNpmrc'

    - task: Bash@3
      displayName: 'Prepare telemetry-generator'
      inputs:
        targetType: 'inline'
        workingDirectory: $(toolAbsolutePath)
        script: |
          cp ${{ parameters.testWorkspace }}/.npmrc . ;
          npm install @ff-internal/aria-logger;
          npm i;
          npm run build:compile;

    - ${{ parameters.customSteps }}
