# Copyright (c) Microsoft Corporation and contributors. All rights reserved.
# Licensed under the MIT License.

# include-test-real-service

parameters:
- name: poolBuild
  type: object
  default: Small

- name: testPackage
  type: string
  default: "@fluidframework/test-end-to-end-tests"

- name: testWorkspace
  type: string

- name: timeoutInMinutes
  type: number
  default: 60

- name: env
  type: object
  default:

- name: splitTestVariants
  type: object
  default:
  - name: ""
    flags: ""

- name: testCommand
  type: string

- name: continueOnError
  type: boolean
  default: false

- name: testFileTarName
  type: string
  default: null

- name: extraDependencies
  type: string
  default: null

- name: downloadAzureTestArtifacts
  type: boolean
  default: false

# Name of the Secure File that contains the self-signed cert for the R11s deployment.
# If not blank, the pipeline will try to install it to the local cert store.
- name: r11sSelfSignedCertSecureFile
  type: string
  default: ""

jobs:
  - ${{ each variant in parameters.splitTestVariants }}:
    - job:
      displayName: Run ${{ variant.name }}
      pool: ${{ parameters.poolBuild }}
      timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
      variables:
      # We use 'chalk' to colorize output, which auto-detects color support in the
      # running terminal.  The log output shown in Azure DevOps job runs only has
      # basic ANSI color support though, so force that in the pipeline
      - name: FORCE_COLOR
        value: 1
      - name: testPackageDir
        value: '${{ parameters.testWorkspace }}/node_modules/${{ parameters.testPackage }}'
      - name: testPackageFilePattern
        value: ${{ replace(replace(parameters.testPackage, '@', '' ), '/', '-') }}-*.tgz
      - name: testPackagePathPattern
        value: $(Pipeline.Workspace)/client/pack/scoped/${{ variables.testPackageFilePattern }}
      - name: skipComponentGovernanceDetection
        value: true
      - ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/test/') }}:
        - name: feed
          value: https://pkgs.dev.azure.com/fluidframework/internal/_packaging/internal/npm/registry/
      - ${{ if not(startsWith(variables['Build.SourceBranch'], 'refs/heads/test/')) }}:
        - name: feed
          value: https://pkgs.dev.azure.com/fluidframework/internal/_packaging/build/npm/registry/
      - ${{ if eq(parameters.downloadAzureTestArtifacts, true) }}:
        - name: artifactPipeline
          value: Build - azure
      - ${{ else }}:
        - name: artifactPipeline
          value: Build - client packages

      steps:
      # Setup
      - checkout: none
        clean: true

      # Install self-signed cert for R11s deployment in local cert store
      - ${{ if ne(parameters.r11sSelfSignedCertSecureFile, '') }}:
        - task: DownloadSecureFile@1
          displayName: 'Download r11s self-signed cert'
          name: downloadCertTask
          inputs:
            secureFile: ${{ parameters.r11sSelfSignedCertSecureFile }}
            retryCount: '2'

        - task: Bash@3
          displayName: 'Install r11s self-signed cert in local cert store'
          inputs:
            targetType: 'inline'
            script: |

              # Extract public part from cert
              openssl x509 -in $(downloadCertTask.secureFilePath) -out cert.crt
              # Install cert
              sudo cp cert.crt /usr/local/share/ca-certificates/
              sudo update-ca-certificates

      # Print parameters/Vars
      - task: Bash@3
        displayName: Print Parameters and Variables
        inputs:
          targetType: 'inline'
          script: |
            # Show all task group conditions

            echo "
            Pipeline Parameters:
              poolBuild=${{ parameters.poolBuild }}
              testPackage=${{ parameters.testPackage }}

            Pipeline Variables:
              testWorkspace=${{ parameters.testWorkspace }}
              testPackageFilePattern=${{ variables.testPackageFilePattern }}
              feed=${{ variables.feed }}
              testCommand=${{ parameters.testCommand }}
              continueOnError=${{ parameters.continueOnError }}
              variant.flag=${{ variant.flags }}
              testFileTarName=${{ parameters.testFileTarName }}
              extraDependencies=${{ parameters.extraDependencies }}
            "

      # Install
      - task: UseNode@1
        displayName: Use Node 14.x
        inputs:
          version: 14.x

      # Download artifact
      - task: DownloadPipelineArtifact@2
        displayName: Download test package
        inputs:
          source: specific
          project: internal
          pipeline: ${{ variables.artifactPipeline }}
          preferTriggeringPipeline: true
          allowPartiallySucceededBuilds: true
          runVersion: latestFromBranch
          runBranch: $(Build.SourceBranch)
          artifact: pack
          patterns: "**/${{ variables.testPackageFilePattern }}"
          path: $(Pipeline.Workspace)/client/pack

      - task: Bash@3
        displayName: Create test directory
        inputs:
          targetType: 'inline'
          script: |
            mkdir ${{ parameters.testWorkspace }}

      - task: Bash@3
        name: Initialize
        displayName: Initialize
        inputs:
          targetType: 'inline'
          workingDirectory: ${{ parameters.testWorkspace }}
          script: |
            echo Initialize package
            npm init --yes

            echo Generating .npmrc
            echo "registry=https://registry.npmjs.org" >> ./.npmrc
            echo "always-auth=false" >> ./.npmrc

            echo "@fluidframework:registry=${{ variables.feed }}" >> ./.npmrc
            echo "@fluid-experimental:registry=${{ variables.feed }}" >> ./.npmrc
            echo "@fluid-internal:registry=${{ variables.feed }}" >> ./.npmrc
            echo "@ff-internal:registry=https://pkgs.dev.azure.com/fluidframework/internal/_packaging/build/npm/registry/" >> ./.npmrc
            echo "@microsoft:registry=https://office.pkgs.visualstudio.com/_packaging/Office/npm/registry/" >> ./.npmrc
            echo "always-auth=true" >> ./.npmrc
            cat .npmrc

            if [[ `ls -1 ${{ variables.testPackagePathPattern }} | wc -l` -eq 1 ]]; then
              echo "##vso[task.setvariable variable=testPackageTgz;isOutput=true]`ls ${{ variables.testPackagePathPattern }}`"
            else
              ls -1 ${{ variables.testPackagePathPattern }}
              echo "##vso[task.logissue type=error]Test package '${{ parameters.testPackage }}' not found, or there are more then one found"
            fi

      # Auth to internal feed
      - task: npmAuthenticate@0
        displayName: 'npm authenticate (internal feed)'
        inputs:
          workingFile: ${{ parameters.testWorkspace }}/.npmrc

      # Auth to Office feed
      - task: npmAuthenticate@0
        displayName: 'npm authenticate (office feed)'
        inputs:
          workingFile: ${{ parameters.testWorkspace }}/.npmrc
          customEndpoint: 'Office Packages - Readonly'

      # Install test and logger package
      - task: Npm@1
        displayName: 'npm install'
        inputs:
          command: 'custom'
          workingDir: ${{ parameters.testWorkspace }}
          customCommand: 'install $(Initialize.testPackageTgz) @ff-internal/aria-logger'
          customRegistry: 'useNpmrc'

      # Download Test Files & Install Extra Dependencies
      # These steps are intended to include extra dependencies that are not available as
      # part of the normal package .tgz installed previously in the pipeline.
      - ${{ if ne(parameters.testFileTarName, 'null') }}:
        # Download Artifact - Test Files
        - task: DownloadPipelineArtifact@2
          displayName: Download test files
          inputs:
            source: specific
            project: internal
            pipeline: ${{ variables.artifactPipeline }}
            preferTriggeringPipeline: true
            allowPartiallySucceededBuilds: true
            runVersion: latestFromBranch
            runBranch: $(Build.SourceBranch)
            artifact: test-files
            path: $(Pipeline.Workspace)/test-files

        # Unpack test files
        - task: Bash@3
          displayName: Unpack test files
          inputs:
            workingDir: ${{ parameters.testWorkspace }}
            targetType: 'inline'
            script: |
              mkdir ${{ parameters.testWorkspace }}/node_modules/${{ parameters.testPackage }}/dist/test
              tar -xvf $(Pipeline.Workspace)/test-files/${{ parameters.testFileTarName }}.test-files.tar -C $(Pipeline.Workspace)/test-files
              mv $(Pipeline.Workspace)/test-files/test/* ${{ parameters.testWorkspace }}/node_modules/${{ parameters.testPackage }}/dist/test

        - ${{ if ne(parameters.extraDependencies, 'null') }}:
          # Install extra dependencies for test files
          - task: Npm@1
            displayName: 'npm install - extra dependencies for test files'
            inputs:
              command: 'custom'
              workingDir: ${{ parameters.testWorkspace }}
              customCommand: 'install ${{ parameters.extraDependencies }}'
              customRegistry: 'useNpmrc'

      # run the test
      - task: Npm@1
        displayName: '[test] ${{ parameters.testCommand }} ${{ variant.flags }}'
        continueOnError: ${{ parameters.continueOnError }}
        env:
          ${{ parameters.env }}
        inputs:
          command: 'custom'
          workingDir: ${{ parameters.testWorkspace }}/node_modules/${{ parameters.testPackage }}
          customCommand: 'run ${{ parameters.testCommand }} -- ${{ variant.flags }}'

      # Upload results
      - task: PublishTestResults@2
        displayName: Publish Test Results
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/*junit-report.xml'
          searchFolder: ${{ variables.testPackageDir }}/nyc
          mergeTestResults: false
        condition: succeededOrFailed()
