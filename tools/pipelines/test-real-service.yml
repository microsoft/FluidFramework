# Copyright (c) Microsoft Corporation and contributors. All rights reserved.
# Licensed under the MIT License.

# test-real-service-e2e pipeline

name: $(Build.BuildId)

trigger: none
pr: none

resources:
  pipelines:
  - pipeline: client   # Name of the pipeline resource
    source: Build - client packages
    branch: main # Default branch for manual/scheduled triggers if none is selected
    trigger:
      branches:
      - release/*
      - main
      - next
      - lts

variables:
- group: prague-key-vault
- name: testWorkspace
  value: $(Pipeline.Workspace)/test
- name: testPackage
  value: "@fluid-private/test-end-to-end-tests"
  readonly: true
- name: absolutePathToTelemetryGenerator
  value: $(Build.SourcesDirectory)/tools/telemetry-generator
  readonly: true

lockBehavior: sequential
stages:
  # end-to-end tests local server
  - stage: e2e_local_server
    displayName: e2e - local server
    dependsOn: []
    jobs:
    - template: templates/include-test-real-service.yml
      parameters:
        poolBuild: Large # Need Large pool for full-compat matrix
        testPackage: ${{ variables.testPackage }}
        testWorkspace: ${{ variables.testWorkspace }}
        artifactBuildId: $(resources.pipeline.client.runID)
        testCommand: test:realsvc:local:report:full
        env:
          FLUID_TEST_LOGGER_PKG_PATH: ${{ variables.testWorkspace }}/node_modules/@ff-internal/aria-logger # Contains getTestLogger impl to inject

  # end-to-end tests tinylicious
  - stage: e2e_tinylicious
    displayName: e2e - tinylicious
    dependsOn: []
    jobs:
    - template: templates/include-test-real-service.yml
      parameters:
        poolBuild: Large # Need Large pool for full-compat matrix
        testPackage: ${{ variables.testPackage }}
        testWorkspace: ${{ variables.testWorkspace }}
        artifactBuildId: $(resources.pipeline.client.runID)
        testCommand: test:realsvc:tinylicious:report:full
        env:
          FLUID_TEST_LOGGER_PKG_PATH: ${{ variables.testWorkspace }}/node_modules/@ff-internal/aria-logger # Contains getTestLogger impl to inject
          # Disable colorization for tinylicious logs (not useful when printing to a file)
          logger__colorize: "false" # Need to pass it as string so ADO doesn't convert it into False (capital F) which doesn't work
          logger__morganFormat: tiny

  # end-to-end tests routerlicious
  - stage: e2e_routerlicious
    displayName: e2e - routerlicious
    dependsOn: []
    # use a variable group with exclusive lock force only one run at a time and avoid overloading the server/throttling
    variables:
    - group: e2e-r11s-lock
    jobs:
    - template: templates/include-test-real-service.yml
      parameters:
        poolBuild: Small
        testPackage: ${{ variables.testPackage }}
        testWorkspace: ${{ variables.testWorkspace }}
        artifactBuildId: $(resources.pipeline.client.runID)
        testCommand: test:realsvc:routerlicious:report
        continueOnError: true
        r11sSelfSignedCertSecureFile: wu2-tls-certificate.pem
        splitTestVariants:
          - name: Non-compat
            flags: --compatVersion=0
          - name: N-1
            flags: --compatVersion=-1
          - name: LTS
            flags: --compatVersion=LTS
          - name: Cross-version
            flags: --compatVersion=CROSS_VERSION
          # Assumes Non-compat and N-1 scenarios are covered
          - name: N-2ToLTS+1-back-compat
            flags: --compatVersion=FULL
        env:
          fluid__test__driver__r11s: $(automation-fluid-test-driver-r11s)
          FLUID_TEST_LOGGER_PKG_PATH: ${{ variables.testWorkspace }}/node_modules/@ff-internal/aria-logger # Contains getTestLogger impl to inject

  # end-to-end tests frs
  - stage: e2e_frs
    displayName: e2e - frs
    dependsOn: []
    # use a variable group with exclusive lock force only one run at a time and avoid overloading the server/throttling
    variables:
    - group: e2e-frs-lock
    jobs:
    - template: templates/include-test-real-service.yml
      parameters:
        poolBuild: Small
        testPackage: ${{ variables.testPackage }}
        testWorkspace: ${{ variables.testWorkspace }}
        artifactBuildId: $(resources.pipeline.client.runID)
        timeoutInMinutes: 360
        continueOnError: true
        testCommand: test:realsvc:frs:report
        splitTestVariants:
          - name: Non-compat
            flags: --compatVersion=0
          - name: N-1
            flags: --compatVersion=-1
          - name: LTS
            flags: --compatVersion=LTS
          - name: Cross-Version
            flags: --compatVersion=CROSS_VERSION
          # Assumes Non-compat and N-1 scenarios are covered
          - name: N-2ToLTS+1-back-compat
            flags: --compatVersion=FULL
        env:
          fluid__test__driver__frs: $(automation-fluid-test-driver-frs)
          FLUID_TEST_LOGGER_PKG_PATH: ${{ variables.testWorkspace }}/node_modules/@ff-internal/aria-logger # Contains getTestLogger impl to inject

  # end-to-end tests odsp
  - stage: e2e_odsp
    displayName:  e2e - odsp
    dependsOn: []
    # use a variable group with exclusive lock force only one run at a time and avoid overloading the server/throttling
    variables:
    - group: e2e-odsp-lock
    jobs:
    - template: templates/include-test-real-service.yml
      parameters:
        poolBuild: Small
        testPackage: ${{ variables.testPackage }}
        testWorkspace: ${{ variables.testWorkspace }}
        artifactBuildId: $(resources.pipeline.client.runID)
        timeoutInMinutes: 360
        continueOnError: true
        testCommand: test:realsvc:odsp:report
        splitTestVariants:
          - name: Non-compat
            flags: --compatVersion=0 --tenantIndex=0
          - name: N-1
            flags: --compatVersion=-1 --tenantIndex=1
          - name: Cross-Version
            flags: --compatVersion=CROSS_VERSION
          # Assumes Non-compat and N-1 scenarios are covered
          # Tests N-2 to LTS+1 back compat for loader
          # Tests N-2 to LTS+3 back compat for loader + driver
          - name: N-2ToLTS+1-back-compat
            flags: --compatVersion=V2_INT_3 --tenantIndex=3
        env:
          login__microsoft__clientId: $(login-microsoft-clientId)
          login__microsoft__secret: $(login-microsoft-secret)
          login__odsp__test__tenants: $(automation-e2e-login-odsp-test-tenants)
          FLUID_TEST_LOGGER_PKG_PATH: ${{ variables.testWorkspace }}/node_modules/@ff-internal/aria-logger # Contains getTestLogger impl to inject

  # Capture telemetry about pipeline stages
  - stage: upload_run_telemetry
    displayName: Upload pipeline run telemetry to Kusto
    condition: succeededOrFailed()
    dependsOn:
      - e2e_local_server
      - e2e_tinylicious
      - e2e_routerlicious
      - e2e_frs
      - e2e_odsp
    jobs:
    - job: upload_run_telemetry
      displayName: Upload pipeline run telemetry to Kusto
      pool: Small
      variables:
      - group: ado-feeds

      steps:
      - template: templates/include-telemetry-setup.yml
        parameters:
          devFeedUrl: $(ado-feeds-dev)
          officeFeedUrl: $(ado-feeds-office)
          isCheckoutNeeded: true
      - task: Bash@3
        displayName: Retrieve buildId results
        env:
          BUILD_ID: $(Build.BuildId)
          ADO_API_TOKEN: $(System.AccessToken)
          PIPELINE: 'EndToEndTests'
        inputs:
          targetType: 'inline'
          workingDirectory: $(absolutePathToTelemetryGenerator)
          script: |
            echo "creating output folder"
            mkdir -p ${{ variables.testWorkspace }}/timingOutput
            echo "Retrieving pipeline run timeline data command ..."
            echo 'curl -u ":<REDACTED>" "https://dev.azure.com/fluidframework/internal/_apis/build/builds/$BUILD_ID/timeline"'
            curl -u ":$ADO_API_TOKEN" "https://dev.azure.com/fluidframework/internal/_apis/build/builds/$BUILD_ID/timeline\?api-version\=6.0-preview.1" > ${{ variables.testWorkspace }}/timingOutput/output.json
            pwd;
            ls -laR ${{ variables.testWorkspace }}/timingOutput/output.json;
            cat ${{ variables.testWorkspace }}/timingOutput/output.json;
            node --require @ff-internal/aria-logger bin/run --handlerModule $(absolutePathToTelemetryGenerator)/dist/handlers/stageTimingRetriever.js --dir '${{ variables.testWorkspace }}/timingOutput/';

      # Retrieve E2E test pass rate
      - task: Bash@3
        displayName: Retrieve test pass rate
        env:
          BUILD_ID: $(Build.BuildId)
          ADO_API_TOKEN: $(System.AccessToken)
          BASE_OUTPUT_FOLDER: ${{ variables.testWorkspace }}
          BUILD_SOURCES_DIRECTORY: $(Build.SourcesDirectory)
          PIPELINE: 'EndToEndTests'
        inputs:
          targetType: 'inline'
          workingDirectory: $(absolutePathToTelemetryGenerator)
          script: |
            echo "Fetching pass rate data and saving into JSON files"
            node "$BUILD_SOURCES_DIRECTORY/scripts/get-test-pass-rate.mjs"
            echo "Files created. Now running telemetry-generator"
            node --require @ff-internal/aria-logger bin/run --handlerModule "$(absolutePathToTelemetryGenerator)/dist/handlers/testPassRate.js" --dir "$BASE_OUTPUT_FOLDER/stageFiles"
