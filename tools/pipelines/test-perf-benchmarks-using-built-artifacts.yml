# Copyright (c) Microsoft Corporation and contributors. All rights reserved.
# Licensed under the MIT License.

name: $(Build.BuildId)

pr: none

trigger: none

# Uncomment when we're done manually triggering
# resources:
#   pipelines:
#   - pipeline: client   # Name of the pipeline resource
#     source: Build - client packages
#     trigger:
#       branches:
#       - release/*
#       - main
#       - next
#       - lts

# trigger:
#   branches:
#     include:
#     - release/*
#     - main
#     - next
#     - lts
#   paths:
#     include:
#     - tools/benchmark
#     - tools/telemetry-generator
#     - tools/pipelines/test-perf-benchmarks.yml  # update with this files name

parameters:
- name: taskBuild
  type: string
  default: ci:build

- name: poolBuild
  type: object
  default: Large

- name: checkoutSubmodules
  type: boolean
  default: false

- name: buildNumberInPatch
  type: string
  default: "false"

- name: tagName
  type: string
  default: client

- name: memoryTestPackages
  type: object
  default:
    - "@fluidframework/sequence"
    - "@fluidframework/map"
    - "@fluidframework/matrix"

- name: executionTestPackages
  type: object
  default:
    - "@fluid-experimental/tree"
    # - "@fluid-internal/tree"

variables:
  # We use 'chalk' to colorize output, which auto-detects color support in the
  # running terminal.  The log output shown in Azure DevOps job runs only has
  # basic ANSI color support though, so force that in the pipeline
  - name: FORCE_COLOR
    value: 1
  - name: buildDirectory
    value: "."
  - name: testWorkspace
    value: $(Pipeline.Workspace)/test

stages:
  # Install / Build / Test Stage
  - stage: build
    displayName: Run tests
    jobs:
      - job: build
        displayName: Run performance tests
        pool: ${{ parameters.poolBuild }}
        variables:
          releaseBuildVar: $[variables.releaseBuild]
          toolAbsolutePath: $(Build.SourcesDirectory)/tools/telemetry-generator
          artifactPipeline: Build - client packages
          ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/test/') }}:
            feed: https://pkgs.dev.azure.com/fluidframework/internal/_packaging/internal/npm/registry/
          ${{ else }}:
            feed: https://pkgs.dev.azure.com/fluidframework/internal/_packaging/build/npm/registry/

        steps:
        # Setup
        - checkout: self
          clean: true

        # Install
        - task: UseNode@1
          displayName: Use Node 14.x
          inputs:
            version: 14.x

        - task: Bash@3
          displayName: Create test directory
          inputs:
            targetType: 'inline'
            script: |
              mkdir ${{ variables.testWorkspace }}

        - task: Bash@3
          displayName: Initialize npmrc
          inputs:
            targetType: 'inline'
            workingDirectory: ${{ variables.testWorkspace }}
            script: |
              echo Initialize package
              npm init --yes

              echo Generating .npmrc
              echo "registry=https://registry.npmjs.org" >> ./.npmrc
              echo "always-auth=false" >> ./.npmrc

              echo "@fluidframework:registry=${{ variables.feed }}" >> ./.npmrc
              echo "@fluid-experimental:registry=${{ variables.feed }}" >> ./.npmrc
              echo "@fluid-internal:registry=${{ variables.feed }}" >> ./.npmrc
              echo "@ff-internal:registry=https://pkgs.dev.azure.com/fluidframework/internal/_packaging/build/npm/registry/" >> ./.npmrc
              echo "@microsoft:registry=https://office.pkgs.visualstudio.com/_packaging/Office/npm/registry/" >> ./.npmrc
              echo "always-auth=true" >> ./.npmrc
              cat .npmrc

        # Auth to internal feed
        - task: npmAuthenticate@0
          displayName: 'npm authenticate (internal feed)'
          inputs:
            workingFile: ${{ variables.testWorkspace }}/.npmrc

        # Auth to Office feed
        - task: npmAuthenticate@0
          displayName: 'npm authenticate (office feed)'
          inputs:
            workingFile: ${{ variables.testWorkspace }}/.npmrc
            customEndpoint: 'Office Packages - Readonly'

        - task: Bash@3
          displayName: Print Parameters
          inputs:
            targetType: 'inline'
            script: |
              echo "
              Pipeline Parameters:
                poolBuild=${{ parameters.poolBuild }}
                Build=${{ parameters.taskBuild }}

              Task Variables:
                releaseBuild=$(releaseBuildVar)
                toolAbsolutePath=$(toolAbsolutePath)
                artifactPipeline=$(artifactPipeline)
                feed=$(feed)
                BuildDir=${{ variables.buildDirectory }}
                TestWorkspace=${{ variables.testWorkspace }}

              Build Params
                SourceBranch=$(Build.SourceBranch)
              "

        # - ${{ each testPackage in parameters.memoryTestPackages }}:

        #   # Download package artifacts
        #   - task: DownloadPipelineArtifact@2
        #     displayName: Download test package
        #     inputs:
        #       source: specific
        #       project: internal
        #       pipeline: ${{ variables.artifactPipeline }}
        #       preferTriggeringPipeline: true
        #       allowPartiallySucceededBuilds: true
        #       runVersion: latestFromBranch
        #       runBranch: $(Build.SourceBranch)
        #       artifact: pack
        #       patterns: "**/${{ replace(replace(testPackage, '@', '' ), '/', '-') }}-*.tgz"
        #       path: $(Pipeline.Workspace)/client/pack

        #   # Install test package
        #   - task: Bash@3
        #     displayName: Install Test Package
        #     inputs:
        #       targetType: 'inline'
        #       workingDirectory: ${{ variables.testWorkspace }}
        #       script: |
        #         TEST_PACKAGE_FILE_PATTERN=${{ replace(replace(testPackage, '@', '' ), '/', '-') }}-*.tgz
        #         TEST_PACKAGE_PATH_PATTERN=$(Pipeline.Workspace)/client/pack/scoped/$TEST_PACKAGE_FILE_PATTERN

        #         echo $TEST_PACKAGE_FILE_PATTERN
        #         echo $TEST_PACKAGE_PATH_PATTERN

        #         echo `ls -1 $TEST_PACKAGE_PATH_PATTERN | wc -l`
        #         echo `ls $TEST_PACKAGE_PATH_PATTERN`

        #         if [[ `ls -1 $TEST_PACKAGE_PATH_PATTERN | wc -l` -eq 1 ]]; then
        #           TEST_PACKAGE_TGZ=`ls $TEST_PACKAGE_PATH_PATTERN`
        #         else
        #           ls -1 $TEST_PACKAGE_PATH_PATTERN
        #           echo "##vso[task.logissue type=error]Test package '${{ testPackage }}' not found, or there are more then one found"
        #         fi

        #         npm install $TEST_PACKAGE_TGZ

        #   # Download Test Files
        #   # Download Artifact - Test Files
        #   - task: DownloadPipelineArtifact@2
        #     displayName: Download test files
        #     inputs:
        #       source: specific
        #       project: internal
        #       pipeline: ${{ variables.artifactPipeline }}
        #       preferTriggeringPipeline: true
        #       allowPartiallySucceededBuilds: true
        #       runVersion: latestFromBranch
        #       runBranch: $(Build.SourceBranch)
        #       artifact: test-files
        #       path: $(Pipeline.Workspace)/test-files

        #   # Unpack test files
        #   - task: Bash@3
        #     displayName: Unpack test files
        #     inputs:
        #       targetType: 'inline'
        #       script: |
        #         TAR_FILE=${{ replace(replace(replace(testPackage, '@fluidframework/', '' ), '@fluid-', '' ), '/', '-') }}
        #         mkdir -p ${{ variables.testWorkspace }}/node_modules/${{ testPackage }}/src/test
        #         tar -xvf $(Pipeline.Workspace)/test-files/$TAR_FILE.test-files.tar -C $(Pipeline.Workspace)/test-files
        #         mv $(Pipeline.Workspace)/test-files/test/* ${{ variables.testWorkspace }}/node_modules/${{ testPackage }}/src/test

        #   - task: Bash@3
        #     displayName: 'Run memory performance test'
        #     inputs:
        #       targetType: 'inline'
        #       workingDirectory: ${{ variables.testWorkspace }}/node_modules/${{ testPackage }}
        #       script: |
        #         cp ${{ variables.testWorkspace }}/.npmrc . ;
        #         npm i ;
        #         npm run test:memory-profiling:report;

        #   - task: Bash@3
        #     displayName: 'Log out memory test output work dir'
        #     inputs:
        #       targetType: 'inline'
        #       workingDirectory: $(toolAbsolutePath)
        #       script: |
        #         cp ${{ variables.testWorkspace }}/.npmrc . ;
        #         npm install @ff-internal/aria-logger;
        #         npm i;
        #         npm run build:compile;
        #         ls -la ${{ variables.testWorkspace }}/node_modules/${{ testPackage }};
        #         ls -la ${{ variables.testWorkspace }}/node_modules/${{ testPackage }}/.memoryTestsOutput;
        #         ls -la;

        #   - task: CopyFiles@2
        #     inputs:
        #       sourceFolder: ${{ variables.testWorkspace }}/node_modules/${{ testPackage }}/.memoryTestsOutput
        #       contents: '**'
        #       targetFolder: ${{ variables.testWorkspace }}/memoryTestsOutput/${{ replace(replace(replace(testPackage, '@fluidframework/', '' ), '@fluid-', '' ), '/', '-') }}

        # - task: Bash@3
        #   displayName: 'Write measurements to Aria/Kusto - memory usage'
        #   inputs:
        #     targetType: 'inline'
        #     workingDirectory: $(toolAbsolutePath)
        #     script: |
        #       ls -la;
        #       ls -la ${{ variables.testWorkspace }}/memoryTestsOutput;
        #       node --require @ff-internal/aria-logger bin/run --handlerModule $(toolAbsolutePath)/dist/handlers/memoryUsageTestHandler.js --dir ${{ variables.testWorkspace }}/memoryTestsOutput;

        # - task: PublishPipelineArtifact@1
        #   displayName: 'Publish Artifact - Perf tests output - memory usage'
        #   inputs:
        #     targetPath: '${{ variables.testWorkspace }}/memoryTestsOutput'
        #     artifactName: 'perf-test-outputs_memory-usage'
        #     condition: succeededOrFailed()

        - ${{ each execTestPackage in parameters.executionTestPackages }}:

          # Download package artifacts
          - task: DownloadPipelineArtifact@2
            displayName: Download test package
            inputs:
              source: specific
              project: internal
              pipeline: ${{ variables.artifactPipeline }}
              preferTriggeringPipeline: true
              allowPartiallySucceededBuilds: true
              runVersion: latestFromBranch
              runBranch: $(Build.SourceBranch)
              artifact: pack
              patterns: "**/${{ replace(replace(execTestPackage, '@', '' ), '/', '-') }}-*.tgz"
              path: $(Pipeline.Workspace)/client/pack

          # Install test package
          - task: Bash@3
            displayName: Install Test Package
            inputs:
              targetType: 'inline'
              workingDirectory: ${{ variables.testWorkspace }}
              script: |
                TEST_PACKAGE_FILE_PATTERN=${{ replace(replace(execTestPackage, '@', '' ), '/', '-') }}-*.tgz
                TEST_PACKAGE_PATH_PATTERN=$(Pipeline.Workspace)/client/pack/scoped/$TEST_PACKAGE_FILE_PATTERN

                echo $TEST_PACKAGE_FILE_PATTERN
                echo $TEST_PACKAGE_PATH_PATTERN

                echo `ls -1 $TEST_PACKAGE_PATH_PATTERN | wc -l`
                echo `ls $TEST_PACKAGE_PATH_PATTERN`

                # if [[ `ls -1 $TEST_PACKAGE_PATH_PATTERN | wc -l` -eq 1 ]]; then
                TEST_PACKAGE_TGZ=`ls $TEST_PACKAGE_PATH_PATTERN`
                # else
                #   ls -1 $TEST_PACKAGE_PATH_PATTERN
                #   echo "##vso[task.logissue type=error]Test package '${{ execTestPackage }}' not found, or there are more then one found"
                # fi

                npm install $TEST_PACKAGE_TGZ

          # Download Test Files
          # Download Artifact - Test Files
          - task: DownloadPipelineArtifact@2
            displayName: Download test files
            inputs:
              source: specific
              project: internal
              pipeline: ${{ variables.artifactPipeline }}
              preferTriggeringPipeline: true
              allowPartiallySucceededBuilds: true
              runVersion: latestFromBranch
              runBranch: $(Build.SourceBranch)
              artifact: test-files
              path: $(Pipeline.Workspace)/test-files

          # Unpack test files
          - task: Bash@3
            displayName: Unpack test files
            inputs:
              targetType: 'inline'
              script: |
                TAR_FILE=${{ replace(replace(replace(execTestPackage, '@fluidframework/', '' ), '@fluid-', '' ), '/', '-') }}
                mkdir -p ${{ variables.testWorkspace }}/node_modules/${{ execTestPackage }}/src/test
                tar -xvf $(Pipeline.Workspace)/test-files/$TAR_FILE.test-files.tar -C $(Pipeline.Workspace)/test-files
                mv $(Pipeline.Workspace)/test-files/test/* ${{ variables.testWorkspace }}/node_modules/${{ execTestPackage }}/src/test

                ls -la ${{ variables.testWorkspace }}/node_modules/${{ execTestPackage }}/dist/test

          # Run performance tests
          # - Add custom npm feeds to the tool's .npmrc file
          # - Authenticate to the custom npm feeds
          # - Install the aria-logger package from the custom npm feeds
          # - Run execution-time tests
          # - Run memory-usage tests
          # - Process output files and send telemetry to Kusto
          # - task: Npm@1
          #   displayName: 'Run performance test - execution time'
          #   inputs:
          #     command: 'custom'
          #     workingDir: ${{ variables.testWorkspace }}/node_modules/${{ execTestPackage }}
          #     customCommand: 'run test:benchmark:report'

          - task: Bash@3
            displayName: 'Run execution-time tests'
            inputs:
              targetType: 'inline'
              workingDirectory: ${{ variables.testWorkspace }}/node_modules/${{ execTestPackage }}
              script: |
                cp ${{ variables.testWorkspace }}/.npmrc . ;
                npm i;
                npm run build;
                ls -la ${{ variables.testWorkspace }}/node_modules/${{ execTestPackage }};
                ls -la;
                npm run test:benchmark:report;

          - task: Bash@3
            displayName: 'Write measurements to Aria/Kusto - execution time'
            inputs:
              targetType: 'inline'
              workingDirectory: $(toolAbsolutePath)
              script: |
                cp ${{ variables.testWorkspace }}/.npmrc . ;
                npm install @ff-internal/aria-logger;
                npm i;
                npm run build:compile;
                ls -la ${{ variables.testWorkspace }}/node_modules/${{ execTestPackage }};
                ls -la;
                node --require @ff-internal/aria-logger bin/run --handlerModule $(toolAbsolutePath)/dist/handlers/executionTimeTestHandler.js --dir '${{ variables.testWorkspace }}/node_modules/${{ execTestPackage }}/benchmarkOutput';

          # # - task: Npm@1
          # #   displayName: 'Consolidate output files - execution time'
          # #   inputs:
          # #     command: 'custom'
          # #     workingDir: ${{ variables.buildDirectory }}
          # #     customCommand: 'run test:benchmark:copyresults' # grab this script and write it as a bash file and then manually call that script
          # # # modification is probably "look at node_modules for blah"

          # - task: Bash@3
          #   displayName: 'Write measurements to Aria/Kusto - execution time'
          #   inputs:
          #     targetType: 'inline'
          #     workingDirectory: $(toolAbsolutePath)
          #     script: |
          #       npm i;
          #       npm run build:compile;
          #       node --require @ff-internal/aria-logger bin/run --handlerModule $(toolAbsolutePath)/dist/handlers/executionTimeTestHandler.js --dir '${{ variables.testWorkspace }}/node_modules/${{ execTestPackage }}/benchmarkOutput';

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Artifact - Perf tests output - execution time'
            inputs:
              targetPath: '${{ variables.buildDirectory }}/benchmarkOutput'
              artifactName: 'perf-test-outputs_execution-time'
              condition: succeededOrFailed()
