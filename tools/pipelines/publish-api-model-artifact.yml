# Copyright (c) Microsoft Corporation and contributors. All rights reserved.
# Licensed under the MIT License.

# publish-api-model-artifact pipeline

name: $(Build.BuildId)

parameters:
  - name: deployOverride
    displayName: Deployment Override (default = based on branch)
    type: string
    default: default
    values:
      - default
      - skip
      - force
  - name: deployEnvironment
    displayName: Static web app environment to deploy to
    type: string
    default: new
    values:
      - new
      - old
  - name: guardianAssetRetentionOverride
    displayName: Guardian Asset Retention Override (default = based on branch)
    type: string
    default: default
    values:
      - default
      - skip
      - force
  - name: publishGuardianBaselines
    displayName: Publish Guardian Baseline Files
    type: boolean
    default: false

variables:
  - group: doc-versions
  - group: storage-vars
  - name: repoToTrigger
    value: microsoft/FluidFramework
  - name: latestPipeline
    value: ${{ or(
      eq(variables['Build.SourceBranchName'], 'main'),
      eq(variables['Build.SourceBranchName'], 'pl-test')
      )}}
  - name: n1Branch
    value: ${{ join('/refs/heads/release/', variables['N1_BRANCH']) }}
  - name: n1Pipeline
    value: ${{ eq(variables['Build.SourceBranchName'], variables['N1_BRANCH']) }}
  - name: releasePipeline
    value: ${{ eq(variables['Build.SourceBranchName'], variables['RELEASE_BRANCH']) }}
  - name: validRun
    value: ${{ or(variables.releasePipeline, variables.n1Pipeline, variables.latestPipeline) }}
  - name: Packaging.EnableSBOMSigning
    value: true
  - name: isMain
    value: ${{ eq(variables['Build.SourceBranchName'], 'main') }}
  - name: shouldRetainGuardianAssets
    value: ${{ or(
      eq(parameters.guardianAssetRetentionOverride, 'force'),
      and(eq(parameters.guardianAssetRetentionOverride, 'default'))
      )}}
  - name: deploymentToken
    ${{ if eq( parameters['deployEnvironment'], 'new' ) }}:
      value: "$(FLUID_WEBSITE_TORUS_API_TOKEN)"
    ${{ if eq( parameters['deployEnvironment'], 'old') }}:
      value: "$(AZURE_STATIC_WEB_APPS_API_TOKEN)"
  # skip injected CG detection as we manually trigger it in a parallel job
  - name: skipComponentGovernanceDetection
    value: true
  - name: pnpmStorePath
    value: $(Pipeline.Workspace)/.pnpm-store

trigger:
  branches:
    include:
    - release/**
    - main
pr: none

stages:
- stage: check_branch_version
  displayName: 'Check Version Deployment Condition'
  pool: Small
  jobs:
    - job: check_branch_version
      displayName: 'Check Version Deployment Condition'
      steps:
        - checkout: self
          submodules: false
          clean: true

        - template: /tools/pipelines/templates/include-install-build-tools.yml
          parameters:
            buildDirectory: $(Build.SourcesDirectory)
        - task: Bash@3
          name: SetVersion
          displayName: 'Set Build Version'
          env:
            VERSION_BUILDNUMBER: $(Build.BuildNumber)
          inputs:
            targetType: 'inline'
            workingDirectory: $(Build.SourcesDirectory)
            script: |
              # Generate the build version. Sets the environment variables version, codeVersion, and isLatest.
              flub generate buildVersion
        - task: Bash@3
          name: SetShouldDeploy
          displayName: 'Check Version Deployment Condition'
          inputs:
            targetType: 'inline'
            workingDirectory: $(Build.SourcesDirectory)
            script: |
              # Check if the version is the latest minor of its corresponding major version series
              # Sets variable shouldDeploy to true if the version is the latest minor and false otherwise
              # Sets variable majorVersion to the major version extracted from $(SetVersion.version)
              flub check latestVersions $(SetVersion.version) client

    - deployment: upload_json
      displayName: 'Combine api-extractor JSON'
      dependsOn: [] # run in parallel
      environment: 'fluid-docs-env'
      pool: Large
      variables:
        uploadAsLatestRelease: $[ stageDependencies.check_branch_version.outputs['check_branch_version.SetShouldDeploy.shouldDeploy'] ]
        majorVersion: $[ stageDependencies.check_branch_version.outputs['check_branch_version.SetVersion.majorVersion'] ]
      strategy:
        runOnce:
          deploy:
            steps:
            - template: templates/upload-json-steps.yml
              parameters:
                STORAGE_ACCOUNT: $(STORAGE_ACCOUNT)
                uploadAsLatest: ${{ variables.isMain }}
                uploadAsLatestRelease: $(uploadAsLatestRelease)
                majorVersion: $(majorVersion)

- stage: deploy docs
  displayName: 'Deploy website'
  pool: Small
  dependsOn: ['build', 'guardian', 'check_branch_version']
  variables:
    deployOverrideVar: ${{ parameters.deployOverride }}
  condition: and(
    not(eq(variables['deployOverrideVar'], 'skip')),
    or(
      eq(dependencies.check_branch_version.outputs['check_branch_version.SetShouldDeploy.shouldDeploy'], 'true'),
      eq(variables['deployOverrideVar'], 'force')
    ))
  jobs:
    - job: deploy_site
      displayName: 'Deploy website'
      steps:
        - checkout: self
          submodules: false
          clean: true
        - task: TriggerBuild@4
          inputs:
            definitionIsInCurrentTeamProject: True
            buildDefinition: 'deploy-website'
            useSameSourceVersion: False
            useSameBranch: False
            branchToUse: main
            templateParameters: 'deployEnvironment:${{ parameters.deployEnvironment }}, guardianAssetRetentionOverride:${{ parameters.guardianAssetRetentionOverride }}, publishGuardianBaselines:${{ parameters.publishGuardianBaselines }}'
            storeInEnvironmentVariable: True
            authenticationMethod: 'OAuth Token'
            password: '$(System.AccessToken)'
          displayName: Run deploy-website pipeline
