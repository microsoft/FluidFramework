# Copyright (c) Microsoft Corporation and contributors. All rights reserved.
# Licensed under the MIT License.

# build-client pipeline

name: $(Build.BuildId)

parameters:
- name: releaseBuildOverride
  displayName: Release Build (default = not released)
  type: string
  default: none
  values:
    - none
    - prerelease
    - release
# Parameter for modifying the 'types' field in the package.json.
# If the value `none` is provided, the 'types' field in package.json will remain unchanged.
- name: packageTypesOverride
  displayName: Change package types (default = none)
  type: string
  default: none
  values:
    - none
    - alpha
    - beta
    # 'public' and 'untrimmed' options have not been fully developed yet
    # - public
    # - untrimmed
- name: publishOverride
  displayName: Publish Override (default = based on branch)
  type: string
  default: default
  values:
    - default
    - skip
    - force
- name: interdependencyRange
  displayName: Range to use for interdependencies (only affects releases) (default = ~)
  type: string
  default: "~"
  # The " " value (a space) is a hacky workaround. ADO doesn't support empty string, but we ultimately use this value as
  # an environment variable in a bash script (the 'update package versions' step), where it gets coerced back to the
  # empty string.
  values:
    - "^"
    - "~"
    - " "
- name: buildToolsVersionToInstall
  displayName: Fluid build tools version (default = installs version in repo)
  type: string
  default: repo

trigger:
  branches:
    include:
    - main
    - next
    - lts
    - release/*
  paths:
    include:
    - .prettierignore
    - packages
    - azure
    - examples
    - experimental
    - lerna.json
    - package.json
    - pnpm-lock.yaml
    - pnpm-workspace.yaml
    - tools/pipelines/build-client.yml
    - tools/pipelines/build-azure.yml
    - tools/pipelines/templates/build-npm-package.yml
    - tools/pipelines/templates/include-set-package-version.yml
    - tools/pipelines/templates/include-vars.yml
    - tools/pipelines/templates/include-install-pnpm.yml
    - tools/pipelines/templates/include-publish-npm-package.yml
    - tools/pipelines/templates/include-publish-npm-package-deployment.yml
    - tools/pipelines/templates/include-publish-npm-package-steps.yml
    - tools/pipelines/templates/include-git-tag-steps.yml
    - tools/pipelines/templates/include-use-node-version.yml
    - tools/pipelines/templates/include-process-test-results.yml
    - scripts/*

pr:
  branches:
    include:
    - main
    - next
    - lts
    - release/*
  paths:
    include:
    - .prettierignore
    - packages
    - azure
    - examples
    - experimental
    - lerna.json
    - package.json
    - pnpm-lock.yaml
    - pnpm-workspace.yaml
    - fluidBuild.config.cjs
    - tools/pipelines/build-client.yml
    - tools/pipelines/build-azure.yml
    - tools/pipelines/templates/build-npm-package.yml
    - tools/pipelines/templates/include-policy-check.yml
    - tools/pipelines/templates/include-set-package-version.yml
    - tools/pipelines/templates/include-vars.yml
    - tools/pipelines/templates/include-install-pnpm.yml
    - tools/pipelines/templates/include-use-node-version.yml
    - tools/pipelines/templates/include-process-test-results.yml
    - scripts/*

extends:
  template: templates/build-npm-package.yml
  parameters:
    publishOverride: ${{ parameters.publishOverride }}
    releaseBuildOverride: ${{ parameters.releaseBuildOverride }}
    packageTypesOverride: ${{ parameters.packageTypesOverride }}
    buildToolsVersionToInstall: ${{ parameters.buildToolsVersionToInstall }}
    interdependencyRange: ${{ parameters.interdependencyRange }}
    packageManagerInstallCommand: 'pnpm i --frozen-lockfile'
    packageManager: pnpm
    buildDirectory: .
    tagName: client
    isReleaseGroup: true
    poolBuild: NewLarge
    checkoutSubmodules: true
    taskBundleAnalysis: true
    taskLint: false
    taskBuildDocs: true
    publishDocs: true
    # We only care about pipeline run telemetry for the CI runs on the internal project, not for PR runs in the public
    # one. And since we don't batch commits for CI pipeline runs, the only reason we see for automated runs is IndividualCI.
    telemetry: ${{ eq(variables['Build.Reason'], 'IndividualCI') }}
    taskTest:
    - webpack
    - ci:test:mocha
    - ci:test:jest
    - ${{ if eq(variables['System.TeamProject'], 'public') }}:
      - ci:test:realsvc:local
      - ci:test:realsvc:tinylicious
    - ${{ if ne(variables['System.TeamProject'], 'public') }}:
      - ci:test:realsvc:local:full
      - ci:test:realsvc:tinylicious:full
    - ci:test:stress:tinylicious
    - test:copyresults
    testResultDirs:
    - nyc/azure
    - nyc/examples
    - nyc/experimental
    - nyc/packages
    checks:
    - checks
    additionalBuildSteps:
    - task: Bash@3
      displayName: Inject devtools telemetry logger token
      inputs:
        targetType: 'inline'
        script: |
          echo Generating .env
          echo "DEVTOOLS_TELEMETRY_TOKEN=$(devtools-telemetry-key)" >> ./packages/tools/devtools/devtools-browser-extension/.env

    - task: Npm@1
      displayName: Build devtools
      inputs:
        command: 'custom'
        workingDir: ./packages/tools/devtools/devtools-browser-extension/
        customCommand: 'run webpack'

    - task: PublishPipelineArtifact@1
      displayName: Publish Artifact - Devtools Browser Extension
      inputs:
        targetPath: './packages/tools/devtools/devtools-browser-extension/dist/bundle/'
        artifactName: 'devtools-extension-bundle'
        publishLocation: 'pipeline'
