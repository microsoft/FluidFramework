# Copyright (c) Microsoft Corporation and contributors. All rights reserved.
# Licensed under the MIT License.

# build-client pipeline

name: $(Build.BuildId)

parameters:
- name: releaseBuildOverride
  displayName: Release Build (default = not released)
  type: string
  default: none
  values:
    - none
    - prerelease
    - release
- name: publishOverride
  displayName: Publish Override (default = based on branch)
  type: string
  default: default
  values:
    - default
    - skip
    - force
- name: interdependencyRange
  displayName: Range to use for interdependencies (only affects releases) (default = ~)
  type: string
  default: "~"
  # The " " value (a space) is a hacky workaround. ADO doesn't support empty string, but we ultimately use this value as
  # an environment variable in a bash script (the 'update package versions' step), where it gets coerced back to the
  # empty string.
  values:
    - "^"
    - "~"
    - " "
- name: buildToolsVersionToInstall
  displayName: Fluid build tools version (default = installs version in repo)
  type: string
  default: repo
- name: nonScopedPackages
  displayName: Non-scoped packages to publish
  type: object
  default:
  - fluid-framework

variables:
- name: toolAbsolutePath
  value: $(Build.SourcesDirectory)/tools/telemetry-generator
  readonly: true

trigger:
  branches:
    include:
    - main
    - next
    - lts
    - release/*
  paths:
    include:
    - packages
    - azure
    - examples
    - experimental
    - lerna.json
    - package.json
    - pnpm-lock.yaml
    - pnpm-workspace.yaml
    - tools/pipelines/build-client.yml
    - tools/pipelines/build-azure.yml
    - tools/pipelines/templates/build-npm-package.yml
    - tools/pipelines/templates/include-set-package-version.yml
    - tools/pipelines/templates/include-vars.yml
    - tools/pipelines/templates/include-install-pnpm.yml
    - tools/pipelines/templates/include-publish-npm-package.yml
    - tools/pipelines/templates/include-publish-npm-package-deployment.yml
    - tools/pipelines/templates/include-publish-npm-package-steps.yml
    - tools/pipelines/templates/include-git-tag-steps.yml
    - tools/pipelines/templates/include-use-node-version.yml
    - tools/pipelines/templates/include-log-test-failures.yml

pr:
  branches:
    include:
    - main
    - next
    - lts
    - release/*
  paths:
    include:
    - packages
    - azure
    - examples
    - experimental
    - lerna.json
    - package.json
    - pnpm-lock.yaml
    - pnpm-workspace.yaml
    - fluidBuild.config.cjs
    - tools/pipelines/build-client.yml
    - tools/pipelines/build-azure.yml
    - tools/pipelines/templates/build-npm-package.yml
    - tools/pipelines/templates/include-policy-check.yml
    - tools/pipelines/templates/include-set-package-version.yml
    - tools/pipelines/templates/include-vars.yml
    - tools/pipelines/templates/include-install-pnpm.yml
    - tools/pipelines/templates/include-use-node-version.yml
    - tools/pipelines/templates/include-log-test-failures.yml

extends:
  template: templates/build-npm-package.yml
  parameters:
    publishOverride: ${{ parameters.publishOverride }}
    releaseBuildOverride: ${{ parameters.releaseBuildOverride }}
    nonScopedPackages: ${{ parameters.nonScopedPackages }}
    buildToolsVersionToInstall: ${{ parameters.buildToolsVersionToInstall }}
    interdependencyRange: ${{ parameters.interdependencyRange }}
    packageManagerInstallCommand: 'pnpm i --frozen-lockfile'
    packageManager: pnpm
    buildDirectory: .
    tagName: client
    poolBuild: NewLarge
    checkoutSubmodules: true
    taskBundleAnalysis: true
    taskLint: false
    taskBuildDocs: false
    publishDocs: true
    taskTest:
    - webpack
    - ci:test:mocha
    - ci:test:jest
    - ${{ if eq(variables['System.TeamProject'], 'public') }}:
      - ci:test:realsvc:local
      - ci:test:realsvc:tinylicious
    - ${{ if ne(variables['System.TeamProject'], 'public') }}:
      - ci:test:realsvc:local:full
      - ci:test:realsvc:tinylicious:full
    - ci:test:stress:tinylicious
    - test:copyresults
    testResultDirs:
    - nyc/azure
    - nyc/examples
    - nyc/experimental
    - nyc/packages
    checks:
    - syncpack:deps
    - syncpack:versions
    - check:versions
    - generate:packageList
    - prettier
    additionalBuildSteps:
      - task: Bash@3
        displayName: Inject devtools telemetry logger token
        inputs:
          targetType: 'inline'
          script: |
            echo Generating .env
            echo "DEVTOOLS_TELEMETRY_TOKEN=$(devtools-telemetry-key)" >> ./packages/tools/devtools/devtools-browser-extension/.env

      - task: Npm@1
        displayName: Build devtools
        inputs:
          command: 'custom'
          workingDir: ./packages/tools/devtools/devtools-browser-extension/
          customCommand: 'run webpack'

      - task: PublishPipelineArtifact@1
        displayName: Publish Artifact - Devtools Browser Extension
        inputs:
          targetPath: './packages/tools/devtools/devtools-browser-extension/dist/bundle/'
          artifactName: 'devtools-extension-bundle'
          publishLocation: 'pipeline'

  # Capture per-pipeline stage results
  stages:
    - ${{ if eq(variables['Build.Reason'], 'IndividualCI') }}:
      displayName: Retrieve and upload client stage stats to Kusto
      condition: always()
      dependsOn: 
        - build

      jobs:
        - template: include-test-perf-benchmarks.yml
          parameters:
              testWorkspace: ${{ variables.testWorkspace }}
              poolBuild: Small
              customSteps:

              - task: Bash@3
                displayName: Retrieve buildId results
                inputs:
                  targetType: 'inline'
                  workingDirectory: $(toolAbsolutePath)
                  script: |
                    echo "creating output folder"
                    mkdir -p ${{ variables.testWorkspace }}/clientOutput
                    echo "Executing curl command ..."
                    echo  'curl -u ":<REDACTED>" "https://dev.azure.com/fluidframework/internal/_apis/build/builds/$(Build.BuildId)/timeline"'
                    curl -u ":$(System.AccessToken)" "https://dev.azure.com/fluidframework/internal/_apis/build/builds/$(Build.BuildId)/timeline\?api-version\=6.0-preview.1" > ${{ variables.testWorkspace }}/clientOutput/output.json
                    pwd;
                    ls -laR ${{ variables.testWorkspace }}/clientOutput/output.json;
                    cat ${{ variables.testWorkspace }}/clientOutput/output.json;
                    node --require @ff-internal/aria-logger bin/run --handlerModule $(Build.SourcesDirectory)/tools/telemetry-generator/dist/handlers/stageTimingRetriever.js --dir '${{ variables.testWorkspace }}/clientOutput/';
                env:
                  BUILD_ID: $(Build.BuildId)
                  ADO_API_TOKEN: $(System.AccessToken)
                  PIPELINE: 'BuildClient'
