# Copyright (c) Microsoft Corporation and contributors. All rights reserved.
# Licensed under the MIT License.

# server-gitssh pipeline

name: $(Build.BuildId)

parameters:
- name: releaseBuildOverride
  displayName: Release Build (default = not released)
  type: string
  default: none
  values:
    - none
    - release
- name: publishOverride
  displayName: Publish Override (default = based on branch)
  type: string
  default: default
  values:
    - default
    - skip
    - force
- name: buildToolsVersionToInstall
  displayName: Fluid build tools version (default = installs version in repo)
  type: string
  default: repo

trigger:
  branches:
    include:
    - main
    - next
    - lts
  paths:
    include:
    - .prettierignore
    - fluidBuild.config.cjs
    - server/gitssh
    - tools/pipelines/server-gitssh.yml
    - tools/pipelines/templates/build-docker-service.yml
    - tools/pipelines/templates/include-vars.yml
    - tools/pipelines/templates/include-install-pnpm.yml
    - tools/pipelines/templates/include-publish-docker-service-steps.yml
    - tools/pipelines/templates/include-git-tag-steps.yml
    - tools/pipelines/templates/include-use-node-version.yml

pr:
  branches:
    include:
    - main
    - next
    - lts
    - release/*
  paths:
    include:
    - .prettierignore
    - fluidBuild.config.cjs
    - server/gitssh
    - tools/pipelines/server-gitssh.yml
    - tools/pipelines/templates/build-docker-service.yml
    - tools/pipelines/templates/include-vars.yml
    - tools/pipelines/templates/include-install-pnpm.yml
    - tools/pipelines/templates/include-use-node-version.yml

variables:
  - template: /tools/pipelines/templates/include-vars.yml@self
    parameters:
      releaseImage: true
      publishOverride: ${{ parameters.publishOverride }}
      releaseBuildOverride: ${{ parameters.releaseBuildOverride }}
      buildNumberInPatch: true
  # Note: we tried to centralize the use of the 'container-registry-info' variable group (i.e. put it inside the shared
  # build-docker-service.yml template) but ran into issues because if it exists in the stage-level variables of the template
  # instead of in the root-level variables of a pipeline, then the value for the ACR service connection name (which comes
  # from the variable group) that gets passed to a Docker@1 task seems to not be available before ADO performs checks for
  # that task, including that the specified service connection exists and the pipeline is authorized to use it. So ADO ends
  # uplooking for a service connection named "$(containerRegistryConnection)" instead of the actual value after replacement.
  - group: container-registry-info

extends:
  template: /tools/pipelines/templates/build-docker-service.yml@self
  parameters:
    testBuild: ${{ variables.testBuild }}
    shouldPushDockerImage: ${{ variables.pushImage }}
    shouldReleaseDockerImage: ${{ variables.releaseImage }}
    shouldPublishNpmPackages: ${{ variables.publish }}
    buildToolsVersionToInstall: ${{ parameters.buildToolsVersionToInstall }}
    buildDirectory: server/gitssh
    containerName: fluidframework/routerlicious/gitssh
    setVersion: false
    enableDockerImagePull: false
    tagName: gitssh
