# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

# server-routerlicious pipeline

name: $(Build.BuildId)

trigger:
  branches:
    include:
    - master
    - release/*
    - refs/tags/server_v*
  paths:
    include:
    - server/routerlicious
    - tools/build-server-resources
    - tools/pipelines/server-routerlicious.yml
    exclude:
    - server/routerlicious/kubernetes/routerlicious
  
pr:
  branches:
    include:
    - master
    - release/*
  paths:
    include:
    - server/routerlicious
    - tools/build-server-resources
    - tools/pipelines/server-routerlicious.yml
    exclude:
    - server/routerlicious/kubernetes/routerlicious

variables:
  repository: prague.azurecr.io
  containerName: prague-server
  baseContainerName: $(containerName)-base
  baseContainerTag: $(baseContainerName):$(Build.BuildId)
  fullRunnerContainerTag: $(repository)/$(containerName):$(Build.BuildId)
  ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
    testConfig: :full
  ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
    testConfig: :ci

jobs:
  - job: build
    displayName: Build
    pool: Default
    steps:
      # Component detection (not pull request)
      - ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
        - task: npmAuthenticate@0
          displayName: 'npm Authenticate root .npmrc'
          inputs:
            workingFile: .npmrc
        - task: Npm@1
          displayName: npm ci
          inputs:
            command: 'custom'
            customCommand: 'ci --ignore-scripts'
            customRegistry: 'useFeed'
            customFeed: '0a22f611-6a4a-4416-a1bb-53ed7284aa21/f56654ac-3b25-4f5c-bd34-2c1b79e8cfa6'
        - bash: |
            # Generate the package/package lock for the lerna project so we would scan it.
            node node_modules/@fluidframework/build-tools/dist/genMonoRepoPackageJson/genMonoRepoPackageJson.js
            cp server/routerlicious/repo-package.json server/routerlicious/packages/package.json
            cp server/routerlicious/repo-package-lock.json server/routerlicious/packages/package-lock.json
          displayName: 'Generate Mono repo package json'
        - task: ComponentGovernanceComponentDetection@0
          displayName: Component Detection
          inputs:
            sourceScanPath: server/routerlicious/packages
            verbosity: Verbose
            scanType: Register
            alertWarningLevel: High
        - task: msospo.ospo-extension.8d7f9abb-6896-461d-9e25-4f74ed65ddb2.notice@0
          displayName: 'NOTICE File Generator'
        - task: CopyFiles@2
          displayName: 'Copy NOTICE'
          inputs:
            SourceFolder: '$(System.DefaultWorkingDirectory)'
            Contents: NOTICE.txt
            TargetFolder: server/routerlicious
        - bash: |
            rm server/routerlicious/packages/package.json
            rm server/routerlicious/packages/package-lock.json
          displayName: 'Cleanup mono repo package json'

      # Setup
      - task: Bash@3
        displayName: Strip npmrc auth token preamble
        inputs:
          targetType: 'inline'
          script: |
            # In order to simplify the build and use the npm authenticate task we strip the auth token preamble from the npmrc
            sed -i '/^; begin auth token/,/^\; end auth token/d;' server/routerlicious/.npmrc
      - task: npmAuthenticate@0
        displayName: npm Authenticate
        inputs:
          workingFile: server/routerlicious/.npmrc

      # Build
      - task: Docker@2
        displayName: Docker build
        inputs:
          repository: $(baseContainerName)
          command: build
          dockerFile: server/routerlicious/Dockerfile
          buildContext: server/routerlicious
          arguments: --target base --build-arg VERSION_BUILDNUMBER=$(Build.BuildId) --build-arg VERSION_BUILDBRANCH=$(Build.SourceBranch)
          tags: |
            $(Build.BuildId)

      # Pack
      - task: Docker@0
        displayName: 'Packages: NPM Pack'
        inputs:
          action: 'Run a Docker command'
          customCommand: 'run -v $(System.DefaultWorkingDirectory)/pack:/usr/src/pack -t $(baseContainerTag) npx lerna exec --no-private -- mv `npm pack` /usr/src/pack'

      - task: PublishBuildArtifacts@1
        displayName: 'Packages: Publish Artifact'
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)/pack'
          ArtifactName: pack
          publishLocation: 'Container'

      # Lint
      - task: Docker@0
        displayName: 'Base: Lint'
        inputs:
          action: 'Run a Docker command'
          customCommand: 'run --user root -t $(baseContainerTag) npm run lint'

      # Test
      - task: Docker@0
        displayName: 'Base: Test'
        inputs:
          action: 'Run a Docker command'
          customCommand: 'run --user root -v $(System.DefaultWorkingDirectory)/server/routerlicious/nyc:/usr/src/server/nyc -t $(baseContainerTag) npm run test$(testConfig)'
        
      - task: PublishTestResults@2
        displayName: Publish Test Results
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/*junit-report.xml'
          searchFolder: $(System.DefaultWorkingDirectory)/server/routerlicious/nyc
          mergeTestResults: true
        condition: succeededOrFailed()

      - task: PublishCodeCoverageResults@1
        displayName: 'Base: Publish code coverage'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/server/routerlicious/nyc/**/report/cobertura-coverage.xml'
          reportDirectory: '$(System.DefaultWorkingDirectory)/server/routerlicious/nyc/**/report'

      # Docs
      - task: Docker@0
        displayName: 'Docs: api-extractor'
        inputs:
          action: 'Run a Docker command'
          customCommand: 'run --user root -v $(System.DefaultWorkingDirectory)/_api-extractor-temp:/usr/src/server/_api-extractor-temp -t $(baseContainerTag) npm run build:docs'

      - task: PublishBuildArtifacts@1
        displayName: 'Docs: Publish Artifact'
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)/_api-extractor-temp'
          ArtifactName: _api-extractor-temp
          publishLocation: 'Container'

      # Build - Runner
      - ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
        - task: Docker@2
          displayName: 'Runner: Build'
          inputs:
            containerRegistry: Prague
            repository: $(containerName)
            command: build
            dockerFile: server/routerlicious/Dockerfile
            buildContext: server/routerlicious
            arguments: '--target runner --build-arg VERSION_BUILDNUMBER=$(Build.BuildId) --build-arg VERSION_BUILDBRANCH=$(Build.SourceBranch)'
            tags: |
              $(Build.BuildId)
        
        - task: Docker@2
          displayName: 'Runner: Push'
          inputs:
            containerRegistry: Prague
            repository: $(containerName)
            command: push
            tags: |
              $(Build.BuildId)

      # Cleanup
      - task: Docker@0
        displayName: 'Cleanup: Container prune'
        inputs:
          action: 'Run a Docker command'
          customCommand: 'container prune -f'
        continueOnError: true
        condition: succeededOrFailed()

      - task: Docker@0
        displayName: 'Cleanup: Runner'
        inputs:
          action: 'Run a Docker command'
          customCommand: 'rmi $(fullRunnerContainerTag)'
        continueOnError: true
        condition: succeededOrFailed()

      - task: Docker@0
        displayName: 'Cleanup: Base'
        inputs:
          action: 'Run a Docker command'
          customCommand: 'rmi $(baseContainerTag)'
        continueOnError: true
        condition: succeededOrFailed()
