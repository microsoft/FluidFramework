# Copyright (c) Microsoft Corporation and contributors. All rights reserved.
# Licensed under the MIT License.

# publish-api-model-artifact pipeline
# This pipeline downloads the api-extractor artifacts from build pipelines and uploads them to the azure blob storage.
# After the artifacts are uploaded, the pipeline triggers the deploy-website pipeline to deploy the website.
# By default, artifacts are only published from the latest minor release branch of each major version series.

name: $(Build.BuildId)
parameters:
- name: deployOverride
  displayName: Deployment Override (default = based on branch)
  type: string
  default: default
  values:
  - default
  - skip
  - force
- name: deployEnvironment
  displayName: Static web app environment to deploy to
  type: string
  default: new
  values:
  - new
  - old
- name: guardianAssetRetentionOverride
  displayName: Guardian Asset Retention Override (default = based on branch)
  type: string
  default: default
  values:
  - default
  - skip
  - force
- name: publishGuardianBaselines
  displayName: Publish Guardian Baseline Files
  type: boolean
  default: false
variables:
- group: doc-versions
- group: storage-vars
- name: repoToTrigger
  value: microsoft/FluidFramework
- name: latestPipeline
  value: ${{ or( eq(variables['Build.SourceBranchName'], 'main'), eq(variables['Build.SourceBranchName'], 'pl-test') )}}
- name: n1Branch
  value: ${{ join('/refs/heads/release/', variables['N1_BRANCH']) }}
- name: n1Pipeline
  value: ${{ eq(variables['Build.SourceBranchName'], variables['N1_BRANCH']) }}
- name: releasePipeline
  value: ${{ eq(variables['Build.SourceBranchName'], variables['RELEASE_BRANCH']) }}
- name: validRun
  value: ${{ or(variables.releasePipeline, variables.n1Pipeline, variables.latestPipeline) }}
- name: Packaging.EnableSBOMSigning
  value: true
- name: isMain
  value: ${{ eq(variables['Build.SourceBranchName'], 'main') }}
- name: shouldDeploy
  value: ${{ or( eq(parameters.deployOverride, 'force'), and(eq(variables.isMain, true), eq(parameters.deployOverride, 'default')) )}}
- name: shouldRetainGuardianAssets
  value: ${{ or( eq(parameters.guardianAssetRetentionOverride, 'force'), and(eq(variables.isMain, true), eq(parameters.guardianAssetRetentionOverride, 'default')) )}}
- name: arrow.releasedtoproduction
  value: eq(variables.shouldDeploy, true)
- name: deploymentToken
  ${{ if eq( parameters['deployEnvironment'], 'new' ) }}:
    value: "$(FLUID_WEBSITE_TORUS_API_TOKEN)"
  ${{ if eq( parameters['deployEnvironment'], 'old') }}:
    value: "$(AZURE_STATIC_WEB_APPS_API_TOKEN)"
- name: skipComponentGovernanceDetection
  value: true
- name: pnpmStorePath
  value: $(Pipeline.Workspace)/.pnpm-store
trigger:
  branches:
    include:
    - main
pr: none
resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release
extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: Azure-Pipelines-1ESPT-ExDShared
      image: windows-2022
      os: windows

    customBuildTags:
    - ES365AIMigrationTooling
    stages:
    - stage: build
      displayName: 'Build website'
      dependsOn: []
      jobs:
      - job: debug_variables
        displayName: Show Variables
        dependsOn: []
        steps:
        - checkout: none
        - script: |
            echo SourceBranchName: ${{ variables['Build.SourceBranchName'] }}
            echo BASE_URL: $(BASE_URL)
            echo RELEASE_VERSION: $(RELEASE_VERSION)
            echo MAIN_BRANCH_VERSION: $(MAIN_BRANCH_VERSION)
            echo N1_VERSION: $(N1_VERSION)
            echo HUGO_PARAMS_APPINSIGHTKEY=$(HUGO_PARAMS_APPINSIGHTKEY)
            echo releasePipeline ${{ variables.releasePipeline }}
            echo latestPipeline ${{ variables.latestPipeline }}
            echo n1Pipeline ${{ variables.n1Pipeline }}
            echo repoToTrigger ${{ variables.repoToTrigger }}
            echo shouldDeploy ${{ variables.shouldDeploy }}
            echo shouldRetainGuardianAssets ${{ variables.shouldRetainGuardianAssets }}
            echo publishGuardianBaselines ${{ variables.publishGuardianBaselines }}
          displayName: Show Variables
      - job: component_detection
        displayName: Component Detection
        dependsOn: []
        steps:
        - task: ComponentGovernanceComponentDetection@0
          displayName: Component Detection
          inputs:
            sourceScanPath: docs
            verbosity: Verbose
            scanType: Register
            alertWarningLevel: High

      - job: build_site
        displayName: 'Build website'
        dependsOn: upload_json
        templateContext:
          outputs:
          - output: pipelineArtifact
            displayName: 'Publish site build artifact'
            targetPath: '$(Build.SourcesDirectory)/docs/public'
            artifactName: 'fluidframework-docs'
            publishLocation: 'pipeline'
        steps:
        - checkout: self
          submodules: false
          clean: true
        - template: /tools/pipelines/templates/include-use-node-version.yml@self
        - template: /tools/pipelines/templates/include-install-pnpm.yml@self
          parameters:
            buildDirectory: $(Build.SourcesDirectory)/docs
        - task: Bash@3
          displayName: Install dependencies
          inputs:
            targetType: 'inline'
            workingDirectory: $(Build.SourcesDirectory)/docs
            script: |
              pnpm i --frozen-lockfile
        - task: Npm@1
          displayName: npm run build
          inputs:
            command: 'custom'
            workingDir: $(Build.SourcesDirectory)/docs
            customCommand: 'run ci:build'
    - stage: guardian
      displayName: Guardian
      dependsOn: []
      jobs:
      - job: guardian_tasks
        displayName: Guardian tasks
        templateContext:
          outputs:
          - output: pipelineArtifact
            displayName: 'Publish Baselines'
            condition: eq('${{ parameters.publishGuardianBaselines }}', 'true')
            targetPath: '$(Build.ArtifactStagingDirectory)/.gdnbaselines'
            artifactName: .gdn
        steps:
        - checkout: self
          submodules: false
          clean: true
        - template: /tools/pipelines/templates/include-use-node-version.yml@self
        - task: UseDotNet@2
          displayName: 'Use .NET Core 3.x'
          condition: succeededOrFailed()
          inputs:
            packageType: sdk
            version: 3.x
        - task: AssetRetention@5
          displayName: Guardian Asset Retention
          condition: and(succeeded(), eq(variables.shouldRetainGuardianAssets, true))
          inputs:
            ArrowServiceConnection: 'ff-internal-arrow-sc'
            AssetGroupName: 'fluidframework_$(System.TeamProject)_$(Build.DefinitionName)'
            AssetNumber: '$(Build.BuildId)'
            IsShipped: false
            DropsToRetain: 'CodeAnalysisLogs'
    - stage: link_check
      displayName: 'Website Link Check'
      dependsOn: []
      jobs:
      - job: link_check
        displayName: 'Website Link Check'
        continueOnError: true
        templateContext: {}
        steps:
        - checkout: self
          submodules: false
          clean: true
        - template: /tools/pipelines/templates/include-use-node-version.yml@self
        - template: /tools/pipelines/templates/include-install-pnpm.yml@self
          parameters:
            buildDirectory: $(Build.SourcesDirectory)/docs
        - task: Bash@3
          displayName: Install dependencies
          inputs:
            targetType: 'inline'
            workingDirectory: $(Build.SourcesDirectory)/docs
            script: |
              pnpm i --frozen-lockfile
        - task: Npm@1
          displayName: npm run build
          inputs:
            command: 'custom'
            workingDir: $(Build.SourcesDirectory)/docs
            customCommand: 'run ci:build'
        - task: Npm@1
          displayName: npm run ci:linkcheck
          inputs:
            command: 'custom'
            workingDir: $(Build.SourcesDirectory)/docs
            customCommand: 'run ci:linkcheck'
    - stage: deploy
      displayName: 'Deploy website'
      dependsOn: ['build', 'guardian']
      jobs:
      - job: deploy_site
        displayName: 'Deploy website'
        templateContext:
          type: releaseJob
          isProduction: true
          inputs:
          - input: pipelineArtifact
            displayName: 'Copy fluidframework-docs to public folder'
            source: current
            artifactName: fluidframework-docs
            targetPath: '$(Build.SourcesDirectory)/docs/public'
        steps:
        - task: AzureStaticWebApp@0
          displayName: 'Deploy website to ASWA'
          condition: eq(variables.shouldDeploy, true)
          inputs:
            skip_app_build: true
            skip_api_build: true
            cwd: $(Build.SourcesDirectory)
            app_location: 'docs/public'
            api_location: 'docs/api'
            output_location: ''
            azure_static_web_apps_api_token: '${{ variables.deploymentToken }}'
