import * as yargs from 'yargs';
import { bundleBuddyPr } from './bundleBuddyPr';
import { bundleBuddyUpdatePendingPrs } from './bundleBuddyUpdatePendingPrs';

function bundleBuddyCli() {
  yargs
    .strict()
    .version(false)
    .command(
      'pr',
      'Run bundle buddy in the context of a PR build',
      (yargs) =>
        yargs
          .option('ci', {
            describe: 'CI loop provider',
            type: 'string',
            choices: ['ado', 'github'],
            demand: true
          })
          .option('pr', {
            describe: 'Pull request provider, defaults to the same as the CI loop provider',
            type: 'string',
            choices: ['ado', 'github']
          })
          .option('adoToken', {
            describe: 'An access token to use Azure DevOps Apis',
            type: 'string'
          })
          .option('githubToken', {
            describe: 'An access token to use GitHub Apis',
            type: 'string'
          })
          .option('buildId', {
            describe: 'The current build id',
            type: 'number',
            demand: true
          })
          .option('prId', {
            describe: 'The current pull request id',
            type: 'number',
            demand: true
          })
          .option('bundleReportPath', {
            descripe: 'The path where the bundle reports generated by this build are located',
            type: 'string',
            demand: true
          })
          .check((argv) => {
            if (argv.ci === 'ado' || argv.pr === 'ado') {
              if (!argv.adoToken) {
                throw new Error('adoToken must be provided for Azure DevOps services');
              }
            }
            if (argv.ci === 'github' || argv.pr === 'github') {
              if (!argv.githubToken) {
                throw new Error('githubToken must be provided for GitHub services');
              }
            }
          }),
      async (argv) => await bundleBuddyPr(argv.adoToken!, argv.bundleReportPath, argv.buildId, argv.prId)
    )
    .command(
      'updatePendingPrs',
      'Updates all pending PRs when a new baseline is available',
      (yargs) =>
        yargs
          .option('adoToken', {
            describe: 'An access token to use Azure DevOps Apis',
            type: 'string',
            demandOption: true
          })
          .option('baselineCommitHash', {
            describe: 'The git commit hash being used as the baseline build',
            type: 'string',
            demand: true
          })
          .option('baselineBundleReportPath', {
            descripe: 'The path where the bundle reports for the baseline are located',
            type: 'string',
            demand: true
          }),
      async (argv) =>
        await bundleBuddyUpdatePendingPrs(argv.adoToken, argv.baselineCommitHash, argv.baselineBundleReportPath)
    )
    .demandCommand().argv;
}

bundleBuddyCli();
