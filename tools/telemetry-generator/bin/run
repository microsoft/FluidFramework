#!/usr/bin/env node

const oclif = require('@oclif/core')

// Custom handling of errors because the OtelLogger dependency seems to be leaving unresolved promises
// and OCLIF considers that an error. The default implementation is this one:
//   oclif.run().then(require('@oclif/core/flush')).catch(require('@oclif/core/handle'))
const defaultHandler = require('@oclif/core/handle');
oclif.run().then(require('@oclif/core/flush')).catch((reason) => {
    // Ignore OCLIF "time-out" error due to unresolved promise in the command.
    // All that's available in the rejection reason when that happens is this object:
    //   {"oclif":{"exit":2}}
    // This means we're potentially swallowing other errors but I haven't found a better way of
    // doing this.
    if (reason && reason.oclif && reason.oclif.exit === 2) {
        console.error("\nOCLIF \"time-out\" error detected and skipped. Make sure you're awaiting all promises in your " +
                    "command, and that your dependencies are not leaving any unresolved promises.");
        process.exit(0);
    }
    defaultHandler(reason);
});
