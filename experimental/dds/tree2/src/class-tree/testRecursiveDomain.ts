/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/**
 * This file exists and is package exported to aid in testing of exporting recursive types across package boundaries.
 * Sometimes when TypeScript generates d.ts files, they type check significantly differently than the original source (One example of this: https://github.com/microsoft/TypeScript/issues/20979).
 * Unfortunately our recursive schema types are an example of types that have this kind of issue: the d.ts files tend to get "any" instead of the recursive type reference.
 * Currently we do not have tooling in place to test this in our test suite, and exporting these types here is a temporary crutch to aid in diagnosing this issue.
 */

import { SchemaFactory } from "./schemaFactory";
// This type is referred to by the base type generated by builder.object.
// Adding the import of it here prevents TypeScript from generating inline includes for it in the d.ts file.
// If we let TypeScript generate these includes, they use relative paths which break API extractor's rollup.
import { type NodeKind as _dummy } from "./schemaTypes";

{
	// Unused imports are an error, so make an unused type to use it.
	type _X = _dummy;
}

const builder = new SchemaFactory("Test Recursive Domain");

const recursiveReference = () => RecursiveObject;
builder.fixRecursiveReference(recursiveReference);

/**
 * @alpha
 */
export class RecursiveObject extends builder.object("object2", {
	recursive: [recursiveReference],
	number: builder.number,
}) {}
