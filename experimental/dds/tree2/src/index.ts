/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

export {
	Dependee,
	Dependent,
	NamedComputation,
	ObservingDependent,
	InvalidationToken,
	recordDependency,
	SimpleDependee,
	EmptyKey,
	FieldKey,
	TreeType,
	Value,
	TreeValue,
	AnchorSet,
	DetachedField,
	UpPath,
	Range,
	RangeUpPath,
	PlaceUpPath,
	DetachedRangeUpPath,
	DetachedPlaceUpPath,
	PlaceIndex,
	NodeIndex,
	FieldUpPath,
	Anchor,
	RootField,
	ChildCollection,
	ChildLocation,
	DeltaVisitor,
	AnnouncedVisitor,
	FieldMapObject,
	NodeData,
	GenericTreeNode,
	JsonableTree,
	Delta,
	rootFieldKey,
	rootField,
	ITreeCursor,
	CursorLocationType,
	ITreeCursorSynchronous,
	GenericFieldsNode,
	AnchorLocator,
	TreeNavigationResult,
	IEditableForest,
	IForestSubscription,
	TreeLocation,
	FieldLocation,
	ForestLocation,
	ITreeSubscriptionCursor,
	ITreeSubscriptionCursorState,
	TreeNodeSchemaIdentifier,
	TreeFieldStoredSchema,
	ValueSchema,
	TreeNodeStoredSchema,
	StoredSchemaRepository,
	FieldKindIdentifier,
	TreeTypeSet,
	TreeStoredSchema,
	FieldAnchor,
	SchemaEvents,
	ChangesetLocalId,
	ForestEvents,
	PathRootPrefix,
	AnchorSlot,
	AnchorNode,
	anchorSlot,
	UpPathDefault,
	AnchorEvents,
	AnchorSetRootEvents,
	FieldKindSpecifier,
	AllowedUpdateType,
	PathVisitor,
	Adapters,
	TreeAdapter,
	MapTree,
	Revertible,
	RevertibleKind,
	RevertResult,
	DiscardResult,
	forbiddenFieldKindIdentifier,
	StoredSchemaCollection,
} from "./core";

export {
	Brand,
	Opaque,
	extractFromOpaque,
	brand,
	brandOpaque,
	ValueFromBranded,
	NameFromBranded,
	JsonCompatibleReadOnly,
	JsonCompatible,
	JsonCompatibleObject,
	NestedMap,
	fail,
	IdAllocator,
	TransactionResult,
	BrandedKey,
	BrandedMapSubset,
	RangeQueryResult,
	Named,
	oneFromSet,
	disposeSymbol,
	IDisposable,
} from "./util";

export {
	Events,
	IsEvent,
	ISubscribable,
	createEmitter,
	IEmitter,
	NoListenersCallback,
	HasListeners,
} from "./events";

export {
	cursorToJsonObject,
	singleJsonCursor,
	jsonArray,
	jsonObject,
	jsonSchema,
	nodeKeyField,
	nodeKeySchema,
	leaf,
	SchemaBuilder,
} from "./domains";

export {
	FieldKind,
	Multiplicity,
	isNeverField,
	FullSchemaPolicy,
	getPrimaryField,
	typeNameSymbol,
	valueSymbol,
	ContextuallyTypedNodeDataObject,
	ContextuallyTypedNodeData,
	MarkedArrayLike,
	isContextuallyTypedNodeDataObject,
	defaultSchemaPolicy,
	jsonableTreeFromCursor,
	StableNodeKey,
	LocalNodeKey,
	compareLocalNodeKeys,
	IDefaultEditBuilder,
	ValueFieldEditBuilder,
	OptionalFieldEditBuilder,
	SequenceFieldEditBuilder,
	prefixPath,
	prefixFieldPath,
	cursorForJsonableTreeNode as singleTextCursor,
	stackTreeNodeCursor,
	CursorAdapter,
	CursorWithNode,
	EditableTreeEvents,
	InternalTypedSchemaTypes,
	SchemaAware,
	ArrayLikeMut,
	FieldKinds,
	ContextuallyTypedFieldData,
	cursorFromContextualData,
	AllowedTypes,
	TreeNodeSchema as FlexTreeNodeSchema,
	TreeSchema,
	SchemaLibrary,
	SchemaLibraryData,
	TreeFieldSchema,
	Any,
	NewFieldContent,
	NodeExistsConstraint,
	cursorForTypedTreeData,
	LazyTreeNodeSchema,
	FieldGenerator,
	TreeDataContext,
	nodeKeyFieldKey,
	SchemaLintConfiguration,
	TreeStatus,
	FlexTreeFieldNode,
	FlexibleFieldContent,
	FlexibleNodeContent,
	InternalEditableTreeTypes,
	FlexTreeLeafNode,
	FlexTreeMapNode,
	FlexTreeOptionalField,
	FlexTreeRequiredField,
	FlexTreeSequenceField,
	FlexTreeObjectNode,
	FlexTreeObjectNodeTyped,
	AssignableFieldKinds,
	FlexTreeContext as TreeContext,
	FlexTreeTypedField,
	FlexTreeTypedNode,
	FlexTreeTypedNodeUnion,
	FlexTreeEntity,
	FlexTreeField,
	FlexTreeNode,
	TreeNodeSchemaBase,
	FieldNodeSchema,
	LeafNodeSchema,
	MapNodeSchema,
	ObjectNodeSchema,
	CheckTypesOverlap,
	SchemaBuilderBase,
	ImplicitFieldSchema as FlexImplicitFieldSchema,
	ImplicitAllowedTypes,
	Unenforced,
	schemaIsFieldNode,
	schemaIsLeaf,
	schemaIsMap,
	schemaIsObjectNode,
	AllowedTypeSet,
	SchemaBuilderOptions,
	FlexTreeTyped,
	TreeEvent,
	SchemaCollection,
	TreeCompressionStrategy,
	treeSchemaFromStoredSchema,
	encodeTreeSchema,
	stackTreeFieldCursor,
} from "./feature-libraries";

export {
	TreeObjectNodeFields,
	TreeField,
	TreeFieldInner,
	TypedNode,
	TreeNodeUnion,
	TreeListNode,
	TreeListNodeOld,
	TreeMapNode,
	TreeObjectNode,
	Tree as TreeOld,
	TreeApi as TreeApiOld,
	TreeNode,
	TreeObjectFactory,
	FactoryTreeSchema,
	TreeMapNodeBase,
	Unhydrated,
	IterableTreeListContent,
} from "./simple-tree";

export {
	ISharedTree,
	ITreeCheckout,
	ITransaction,
	runSynchronous,
	SharedTreeFactory,
	SharedTreeOptions,
	ITreeCheckoutFork,
	CheckoutEvents,
	SchematizeConfiguration,
	TreeContent,
	InitializeAndSchematizeConfiguration,
	SchemaConfiguration,
	ForestType,
	TypedTreeFactory,
	TypedTreeOptions,
	ITree as ITreeOld,
	SharedTreeContentSnapshot,
	FlexTreeView,
	TreeView as TreeViewOld,
	ITreeViewFork,
	buildTreeConfiguration,
} from "./shared-tree";

export {
	ITree,
	TreeNodeSchema,
	TreeConfiguration,
	TreeView,
	SchemaFactory,
	Tree,
	TreeApi,
	NodeBase,
	ImplicitFieldSchema,
	TreeFieldFromImplicitField,
	TreeNodeEvents,
	NodeFromSchema,
} from "./class-tree";
export { TreeFactory, TreeOptions } from "./treeFactory";

export type { ICodecOptions, JsonValidator, SchemaValidationFunction } from "./codec";
export { noopValidator } from "./codec";
export { typeboxValidator } from "./external-utilities";

// Below here are things that are used by the above, but not part of the desired API surface.
import * as InternalTypes from "./internal";
export { InternalTypes };
