/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-test-generator in @fluidframework/build-tools.
 */
import * as old from "@fluidframework/map-previous";
import * as current from "../../index";

type TypeOnly<T> = {
    [P in keyof T]: TypeOnly<T[P]>;
};


/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ILocalValue": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ILocalValue():
    TypeOnly<old.ILocalValue>;
declare function use_current_InterfaceDeclaration_ILocalValue(
    use: TypeOnly<current.ILocalValue>);
use_current_InterfaceDeclaration_ILocalValue(
    get_old_InterfaceDeclaration_ILocalValue());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ILocalValue": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ILocalValue():
    TypeOnly<current.ILocalValue>;
declare function use_old_InterfaceDeclaration_ILocalValue(
    use: TypeOnly<old.ILocalValue>);
use_old_InterfaceDeclaration_ILocalValue(
    get_current_InterfaceDeclaration_ILocalValue());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISerializableValue": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISerializableValue():
    TypeOnly<old.ISerializableValue>;
declare function use_current_InterfaceDeclaration_ISerializableValue(
    use: TypeOnly<current.ISerializableValue>);
use_current_InterfaceDeclaration_ISerializableValue(
    get_old_InterfaceDeclaration_ISerializableValue());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISerializableValue": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISerializableValue():
    TypeOnly<current.ISerializableValue>;
declare function use_old_InterfaceDeclaration_ISerializableValue(
    use: TypeOnly<old.ISerializableValue>);
use_old_InterfaceDeclaration_ISerializableValue(
    get_current_InterfaceDeclaration_ISerializableValue());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISerializedValue": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISerializedValue():
    TypeOnly<old.ISerializedValue>;
declare function use_current_InterfaceDeclaration_ISerializedValue(
    use: TypeOnly<current.ISerializedValue>);
use_current_InterfaceDeclaration_ISerializedValue(
    get_old_InterfaceDeclaration_ISerializedValue());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISerializedValue": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISerializedValue():
    TypeOnly<current.ISerializedValue>;
declare function use_old_InterfaceDeclaration_ISerializedValue(
    use: TypeOnly<old.ISerializedValue>);
use_old_InterfaceDeclaration_ISerializedValue(
    get_current_InterfaceDeclaration_ISerializedValue());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISharedMap": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISharedMap():
    TypeOnly<old.ISharedMap>;
declare function use_current_InterfaceDeclaration_ISharedMap(
    use: TypeOnly<current.ISharedMap>);
use_current_InterfaceDeclaration_ISharedMap(
    get_old_InterfaceDeclaration_ISharedMap());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISharedMap": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISharedMap():
    TypeOnly<current.ISharedMap>;
declare function use_old_InterfaceDeclaration_ISharedMap(
    use: TypeOnly<old.ISharedMap>);
use_old_InterfaceDeclaration_ISharedMap(
    get_current_InterfaceDeclaration_ISharedMap());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISharedMapEvents": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISharedMapEvents():
    TypeOnly<old.ISharedMapEvents>;
declare function use_current_InterfaceDeclaration_ISharedMapEvents(
    use: TypeOnly<current.ISharedMapEvents>);
use_current_InterfaceDeclaration_ISharedMapEvents(
    get_old_InterfaceDeclaration_ISharedMapEvents());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISharedMapEvents": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISharedMapEvents():
    TypeOnly<current.ISharedMapEvents>;
declare function use_old_InterfaceDeclaration_ISharedMapEvents(
    use: TypeOnly<old.ISharedMapEvents>);
use_old_InterfaceDeclaration_ISharedMapEvents(
    get_current_InterfaceDeclaration_ISharedMapEvents());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IValueChanged": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IValueChanged():
    TypeOnly<old.IValueChanged>;
declare function use_current_InterfaceDeclaration_IValueChanged(
    use: TypeOnly<current.IValueChanged>);
use_current_InterfaceDeclaration_IValueChanged(
    get_old_InterfaceDeclaration_IValueChanged());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IValueChanged": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IValueChanged():
    TypeOnly<current.IValueChanged>;
declare function use_old_InterfaceDeclaration_IValueChanged(
    use: TypeOnly<old.IValueChanged>);
use_old_InterfaceDeclaration_IValueChanged(
    get_current_InterfaceDeclaration_IValueChanged());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_LocalValueMaker": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_LocalValueMaker():
    TypeOnly<old.LocalValueMaker>;
declare function use_current_ClassDeclaration_LocalValueMaker(
    use: TypeOnly<current.LocalValueMaker>);
use_current_ClassDeclaration_LocalValueMaker(
    get_old_ClassDeclaration_LocalValueMaker());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_LocalValueMaker": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_LocalValueMaker():
    TypeOnly<current.LocalValueMaker>;
declare function use_old_ClassDeclaration_LocalValueMaker(
    use: TypeOnly<old.LocalValueMaker>);
use_old_ClassDeclaration_LocalValueMaker(
    get_current_ClassDeclaration_LocalValueMaker());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_MapFactory": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_MapFactory():
    TypeOnly<old.MapFactory>;
declare function use_current_ClassDeclaration_MapFactory(
    use: TypeOnly<current.MapFactory>);
use_current_ClassDeclaration_MapFactory(
    get_old_ClassDeclaration_MapFactory());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_MapFactory": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_MapFactory():
    TypeOnly<current.MapFactory>;
declare function use_old_ClassDeclaration_MapFactory(
    use: TypeOnly<old.MapFactory>);
use_old_ClassDeclaration_MapFactory(
    get_current_ClassDeclaration_MapFactory());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SharedMap": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_SharedMap():
    TypeOnly<old.SharedMap>;
declare function use_current_ClassDeclaration_SharedMap(
    use: TypeOnly<current.SharedMap>);
use_current_ClassDeclaration_SharedMap(
    get_old_ClassDeclaration_SharedMap());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SharedMap": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_SharedMap():
    TypeOnly<current.SharedMap>;
declare function use_old_ClassDeclaration_SharedMap(
    use: TypeOnly<old.SharedMap>);
use_old_ClassDeclaration_SharedMap(
    get_current_ClassDeclaration_SharedMap());
