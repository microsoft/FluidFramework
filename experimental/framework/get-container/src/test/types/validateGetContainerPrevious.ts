/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-validator in @fluidframework/build-tools.
 */
import * as old from "@fluid-experimental/get-container-previous";
import * as current from "../../index";

type TypeOnly<T> = {
    [P in keyof T]: TypeOnly<T[P]>;
};

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_getFluidRelayContainer": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_getFluidRelayContainer():
    TypeOnly<typeof old.getFluidRelayContainer>;
declare function use_current_FunctionDeclaration_getFluidRelayContainer(
    use: TypeOnly<typeof current.getFluidRelayContainer>);
use_current_FunctionDeclaration_getFluidRelayContainer(
    get_old_FunctionDeclaration_getFluidRelayContainer());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_getFluidRelayContainer": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_getFluidRelayContainer():
    TypeOnly<typeof current.getFluidRelayContainer>;
declare function use_old_FunctionDeclaration_getFluidRelayContainer(
    use: TypeOnly<typeof old.getFluidRelayContainer>);
use_old_FunctionDeclaration_getFluidRelayContainer(
    get_current_FunctionDeclaration_getFluidRelayContainer());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_getSessionStorageContainer": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_getSessionStorageContainer():
    TypeOnly<typeof old.getSessionStorageContainer>;
declare function use_current_FunctionDeclaration_getSessionStorageContainer(
    use: TypeOnly<typeof current.getSessionStorageContainer>);
use_current_FunctionDeclaration_getSessionStorageContainer(
    get_old_FunctionDeclaration_getSessionStorageContainer());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_getSessionStorageContainer": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_getSessionStorageContainer():
    TypeOnly<typeof current.getSessionStorageContainer>;
declare function use_old_FunctionDeclaration_getSessionStorageContainer(
    use: TypeOnly<typeof old.getSessionStorageContainer>);
use_old_FunctionDeclaration_getSessionStorageContainer(
    get_current_FunctionDeclaration_getSessionStorageContainer());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_getTinyliciousContainer": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_getTinyliciousContainer():
    TypeOnly<typeof old.getTinyliciousContainer>;
declare function use_current_FunctionDeclaration_getTinyliciousContainer(
    use: TypeOnly<typeof current.getTinyliciousContainer>);
use_current_FunctionDeclaration_getTinyliciousContainer(
    get_old_FunctionDeclaration_getTinyliciousContainer());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_getTinyliciousContainer": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_getTinyliciousContainer():
    TypeOnly<typeof current.getTinyliciousContainer>;
declare function use_old_FunctionDeclaration_getTinyliciousContainer(
    use: TypeOnly<typeof old.getTinyliciousContainer>);
use_old_FunctionDeclaration_getTinyliciousContainer(
    get_current_FunctionDeclaration_getTinyliciousContainer());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_hasFluidRelayEndpoints": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_hasFluidRelayEndpoints():
    TypeOnly<typeof old.hasFluidRelayEndpoints>;
declare function use_current_FunctionDeclaration_hasFluidRelayEndpoints(
    use: TypeOnly<typeof current.hasFluidRelayEndpoints>);
use_current_FunctionDeclaration_hasFluidRelayEndpoints(
    get_old_FunctionDeclaration_hasFluidRelayEndpoints());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_hasFluidRelayEndpoints": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_hasFluidRelayEndpoints():
    TypeOnly<typeof current.hasFluidRelayEndpoints>;
declare function use_old_FunctionDeclaration_hasFluidRelayEndpoints(
    use: TypeOnly<typeof old.hasFluidRelayEndpoints>);
use_old_FunctionDeclaration_hasFluidRelayEndpoints(
    get_current_FunctionDeclaration_hasFluidRelayEndpoints());
