/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-validator in @fluidframework/build-tools.
 */
import * as old from "@fluid-experimental/last-edited-previous";
import * as current from "../../index";

type TypeOnly<T> = {
    [P in keyof T]: TypeOnly<T[P]>;
};

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_IFluidLastEditedTracker": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_IFluidLastEditedTracker():
    TypeOnly<typeof old.IFluidLastEditedTracker>;
declare function use_current_VariableDeclaration_IFluidLastEditedTracker(
    use: TypeOnly<typeof current.IFluidLastEditedTracker>);
use_current_VariableDeclaration_IFluidLastEditedTracker(
    get_old_VariableDeclaration_IFluidLastEditedTracker());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_IFluidLastEditedTracker": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_IFluidLastEditedTracker():
    TypeOnly<typeof current.IFluidLastEditedTracker>;
declare function use_old_VariableDeclaration_IFluidLastEditedTracker(
    use: TypeOnly<typeof old.IFluidLastEditedTracker>);
use_old_VariableDeclaration_IFluidLastEditedTracker(
    get_current_VariableDeclaration_IFluidLastEditedTracker());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IFluidLastEditedTracker": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidLastEditedTracker():
    TypeOnly<old.IFluidLastEditedTracker>;
declare function use_current_InterfaceDeclaration_IFluidLastEditedTracker(
    use: TypeOnly<current.IFluidLastEditedTracker>);
use_current_InterfaceDeclaration_IFluidLastEditedTracker(
    get_old_InterfaceDeclaration_IFluidLastEditedTracker());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IFluidLastEditedTracker": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidLastEditedTracker():
    TypeOnly<current.IFluidLastEditedTracker>;
declare function use_old_InterfaceDeclaration_IFluidLastEditedTracker(
    use: TypeOnly<old.IFluidLastEditedTracker>);
use_old_InterfaceDeclaration_IFluidLastEditedTracker(
    get_current_InterfaceDeclaration_IFluidLastEditedTracker());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ILastEditDetails": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ILastEditDetails():
    TypeOnly<old.ILastEditDetails>;
declare function use_current_InterfaceDeclaration_ILastEditDetails(
    use: TypeOnly<current.ILastEditDetails>);
use_current_InterfaceDeclaration_ILastEditDetails(
    get_old_InterfaceDeclaration_ILastEditDetails());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ILastEditDetails": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ILastEditDetails():
    TypeOnly<current.ILastEditDetails>;
declare function use_old_InterfaceDeclaration_ILastEditDetails(
    use: TypeOnly<old.ILastEditDetails>);
use_old_InterfaceDeclaration_ILastEditDetails(
    get_current_InterfaceDeclaration_ILastEditDetails());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IProvideFluidLastEditedTracker": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IProvideFluidLastEditedTracker():
    TypeOnly<old.IProvideFluidLastEditedTracker>;
declare function use_current_InterfaceDeclaration_IProvideFluidLastEditedTracker(
    use: TypeOnly<current.IProvideFluidLastEditedTracker>);
use_current_InterfaceDeclaration_IProvideFluidLastEditedTracker(
    get_old_InterfaceDeclaration_IProvideFluidLastEditedTracker());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IProvideFluidLastEditedTracker": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IProvideFluidLastEditedTracker():
    TypeOnly<current.IProvideFluidLastEditedTracker>;
declare function use_old_InterfaceDeclaration_IProvideFluidLastEditedTracker(
    use: TypeOnly<old.IProvideFluidLastEditedTracker>);
use_old_InterfaceDeclaration_IProvideFluidLastEditedTracker(
    get_current_InterfaceDeclaration_IProvideFluidLastEditedTracker());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_LastEditedTracker": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_LastEditedTracker():
    TypeOnly<old.LastEditedTracker>;
declare function use_current_ClassDeclaration_LastEditedTracker(
    use: TypeOnly<current.LastEditedTracker>);
use_current_ClassDeclaration_LastEditedTracker(
    get_old_ClassDeclaration_LastEditedTracker());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_LastEditedTracker": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_LastEditedTracker():
    TypeOnly<current.LastEditedTracker>;
declare function use_old_ClassDeclaration_LastEditedTracker(
    use: TypeOnly<old.LastEditedTracker>);
use_old_ClassDeclaration_LastEditedTracker(
    get_current_ClassDeclaration_LastEditedTracker());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_LastEditedTrackerDataObject": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_LastEditedTrackerDataObject():
    TypeOnly<old.LastEditedTrackerDataObject>;
declare function use_current_ClassDeclaration_LastEditedTrackerDataObject(
    use: TypeOnly<current.LastEditedTrackerDataObject>);
use_current_ClassDeclaration_LastEditedTrackerDataObject(
    get_old_ClassDeclaration_LastEditedTrackerDataObject());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_LastEditedTrackerDataObject": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_LastEditedTrackerDataObject():
    TypeOnly<current.LastEditedTrackerDataObject>;
declare function use_old_ClassDeclaration_LastEditedTrackerDataObject(
    use: TypeOnly<old.LastEditedTrackerDataObject>);
use_old_ClassDeclaration_LastEditedTrackerDataObject(
    get_current_ClassDeclaration_LastEditedTrackerDataObject());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_setupLastEditedTrackerForContainer": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_setupLastEditedTrackerForContainer():
    TypeOnly<typeof old.setupLastEditedTrackerForContainer>;
declare function use_current_FunctionDeclaration_setupLastEditedTrackerForContainer(
    use: TypeOnly<typeof current.setupLastEditedTrackerForContainer>);
use_current_FunctionDeclaration_setupLastEditedTrackerForContainer(
    get_old_FunctionDeclaration_setupLastEditedTrackerForContainer());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_setupLastEditedTrackerForContainer": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_setupLastEditedTrackerForContainer():
    TypeOnly<typeof current.setupLastEditedTrackerForContainer>;
declare function use_old_FunctionDeclaration_setupLastEditedTrackerForContainer(
    use: TypeOnly<typeof old.setupLastEditedTrackerForContainer>);
use_old_FunctionDeclaration_setupLastEditedTrackerForContainer(
    get_current_FunctionDeclaration_setupLastEditedTrackerForContainer());
