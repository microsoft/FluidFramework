/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-validator in @fluidframework/build-tools.
 */
import * as old from "@fluid-experimental/react-inputs-previous";
import * as current from "../../index";

type TypeOnly<T> = {
    [P in keyof T]: TypeOnly<T[P]>;
};

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_CollaborativeCheckbox": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_CollaborativeCheckbox():
    TypeOnly<old.CollaborativeCheckbox>;
declare function use_current_ClassDeclaration_CollaborativeCheckbox(
    use: TypeOnly<current.CollaborativeCheckbox>);
use_current_ClassDeclaration_CollaborativeCheckbox(
    get_old_ClassDeclaration_CollaborativeCheckbox());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_CollaborativeCheckbox": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_CollaborativeCheckbox():
    TypeOnly<current.CollaborativeCheckbox>;
declare function use_old_ClassDeclaration_CollaborativeCheckbox(
    use: TypeOnly<old.CollaborativeCheckbox>);
use_old_ClassDeclaration_CollaborativeCheckbox(
    get_current_ClassDeclaration_CollaborativeCheckbox());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_CollaborativeInput": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_CollaborativeInput():
    TypeOnly<old.CollaborativeInput>;
declare function use_current_ClassDeclaration_CollaborativeInput(
    use: TypeOnly<current.CollaborativeInput>);
use_current_ClassDeclaration_CollaborativeInput(
    get_old_ClassDeclaration_CollaborativeInput());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_CollaborativeInput": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_CollaborativeInput():
    TypeOnly<current.CollaborativeInput>;
declare function use_old_ClassDeclaration_CollaborativeInput(
    use: TypeOnly<old.CollaborativeInput>);
use_old_ClassDeclaration_CollaborativeInput(
    get_current_ClassDeclaration_CollaborativeInput());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_CollaborativeTextArea": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_CollaborativeTextArea():
    TypeOnly<typeof old.CollaborativeTextArea>;
declare function use_current_VariableDeclaration_CollaborativeTextArea(
    use: TypeOnly<typeof current.CollaborativeTextArea>);
use_current_VariableDeclaration_CollaborativeTextArea(
    get_old_VariableDeclaration_CollaborativeTextArea());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_CollaborativeTextArea": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_CollaborativeTextArea():
    TypeOnly<typeof current.CollaborativeTextArea>;
declare function use_old_VariableDeclaration_CollaborativeTextArea(
    use: TypeOnly<typeof old.CollaborativeTextArea>);
use_old_VariableDeclaration_CollaborativeTextArea(
    get_current_VariableDeclaration_CollaborativeTextArea());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ICollaborativeCheckboxProps": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ICollaborativeCheckboxProps():
    TypeOnly<old.ICollaborativeCheckboxProps>;
declare function use_current_InterfaceDeclaration_ICollaborativeCheckboxProps(
    use: TypeOnly<current.ICollaborativeCheckboxProps>);
use_current_InterfaceDeclaration_ICollaborativeCheckboxProps(
    get_old_InterfaceDeclaration_ICollaborativeCheckboxProps());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ICollaborativeCheckboxProps": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ICollaborativeCheckboxProps():
    TypeOnly<current.ICollaborativeCheckboxProps>;
declare function use_old_InterfaceDeclaration_ICollaborativeCheckboxProps(
    use: TypeOnly<old.ICollaborativeCheckboxProps>);
use_old_InterfaceDeclaration_ICollaborativeCheckboxProps(
    get_current_InterfaceDeclaration_ICollaborativeCheckboxProps());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ICollaborativeCheckboxState": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ICollaborativeCheckboxState():
    TypeOnly<old.ICollaborativeCheckboxState>;
declare function use_current_InterfaceDeclaration_ICollaborativeCheckboxState(
    use: TypeOnly<current.ICollaborativeCheckboxState>);
use_current_InterfaceDeclaration_ICollaborativeCheckboxState(
    get_old_InterfaceDeclaration_ICollaborativeCheckboxState());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ICollaborativeCheckboxState": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ICollaborativeCheckboxState():
    TypeOnly<current.ICollaborativeCheckboxState>;
declare function use_old_InterfaceDeclaration_ICollaborativeCheckboxState(
    use: TypeOnly<old.ICollaborativeCheckboxState>);
use_old_InterfaceDeclaration_ICollaborativeCheckboxState(
    get_current_InterfaceDeclaration_ICollaborativeCheckboxState());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ICollaborativeInputProps": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ICollaborativeInputProps():
    TypeOnly<old.ICollaborativeInputProps>;
declare function use_current_InterfaceDeclaration_ICollaborativeInputProps(
    use: TypeOnly<current.ICollaborativeInputProps>);
use_current_InterfaceDeclaration_ICollaborativeInputProps(
    get_old_InterfaceDeclaration_ICollaborativeInputProps());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ICollaborativeInputProps": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ICollaborativeInputProps():
    TypeOnly<current.ICollaborativeInputProps>;
declare function use_old_InterfaceDeclaration_ICollaborativeInputProps(
    use: TypeOnly<old.ICollaborativeInputProps>);
use_old_InterfaceDeclaration_ICollaborativeInputProps(
    get_current_InterfaceDeclaration_ICollaborativeInputProps());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ICollaborativeInputState": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ICollaborativeInputState():
    TypeOnly<old.ICollaborativeInputState>;
declare function use_current_InterfaceDeclaration_ICollaborativeInputState(
    use: TypeOnly<current.ICollaborativeInputState>);
use_current_InterfaceDeclaration_ICollaborativeInputState(
    get_old_InterfaceDeclaration_ICollaborativeInputState());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ICollaborativeInputState": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ICollaborativeInputState():
    TypeOnly<current.ICollaborativeInputState>;
declare function use_old_InterfaceDeclaration_ICollaborativeInputState(
    use: TypeOnly<old.ICollaborativeInputState>);
use_old_InterfaceDeclaration_ICollaborativeInputState(
    get_current_InterfaceDeclaration_ICollaborativeInputState());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ICollaborativeTextAreaProps": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ICollaborativeTextAreaProps():
    TypeOnly<old.ICollaborativeTextAreaProps>;
declare function use_current_InterfaceDeclaration_ICollaborativeTextAreaProps(
    use: TypeOnly<current.ICollaborativeTextAreaProps>);
use_current_InterfaceDeclaration_ICollaborativeTextAreaProps(
    get_old_InterfaceDeclaration_ICollaborativeTextAreaProps());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ICollaborativeTextAreaProps": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ICollaborativeTextAreaProps():
    TypeOnly<current.ICollaborativeTextAreaProps>;
declare function use_old_InterfaceDeclaration_ICollaborativeTextAreaProps(
    use: TypeOnly<old.ICollaborativeTextAreaProps>);
use_old_InterfaceDeclaration_ICollaborativeTextAreaProps(
    get_current_InterfaceDeclaration_ICollaborativeTextAreaProps());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISharedStringHelperEvents": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISharedStringHelperEvents():
    TypeOnly<old.ISharedStringHelperEvents>;
declare function use_current_InterfaceDeclaration_ISharedStringHelperEvents(
    use: TypeOnly<current.ISharedStringHelperEvents>);
use_current_InterfaceDeclaration_ISharedStringHelperEvents(
    get_old_InterfaceDeclaration_ISharedStringHelperEvents());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISharedStringHelperEvents": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISharedStringHelperEvents():
    TypeOnly<current.ISharedStringHelperEvents>;
declare function use_old_InterfaceDeclaration_ISharedStringHelperEvents(
    use: TypeOnly<old.ISharedStringHelperEvents>);
use_old_InterfaceDeclaration_ISharedStringHelperEvents(
    get_current_InterfaceDeclaration_ISharedStringHelperEvents());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISharedStringHelperTextChangedEventArgs": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISharedStringHelperTextChangedEventArgs():
    TypeOnly<old.ISharedStringHelperTextChangedEventArgs>;
declare function use_current_InterfaceDeclaration_ISharedStringHelperTextChangedEventArgs(
    use: TypeOnly<current.ISharedStringHelperTextChangedEventArgs>);
use_current_InterfaceDeclaration_ISharedStringHelperTextChangedEventArgs(
    get_old_InterfaceDeclaration_ISharedStringHelperTextChangedEventArgs());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISharedStringHelperTextChangedEventArgs": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISharedStringHelperTextChangedEventArgs():
    TypeOnly<current.ISharedStringHelperTextChangedEventArgs>;
declare function use_old_InterfaceDeclaration_ISharedStringHelperTextChangedEventArgs(
    use: TypeOnly<old.ISharedStringHelperTextChangedEventArgs>);
use_old_InterfaceDeclaration_ISharedStringHelperTextChangedEventArgs(
    get_current_InterfaceDeclaration_ISharedStringHelperTextChangedEventArgs());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SharedStringHelper": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_SharedStringHelper():
    TypeOnly<old.SharedStringHelper>;
declare function use_current_ClassDeclaration_SharedStringHelper(
    use: TypeOnly<current.SharedStringHelper>);
use_current_ClassDeclaration_SharedStringHelper(
    get_old_ClassDeclaration_SharedStringHelper());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SharedStringHelper": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_SharedStringHelper():
    TypeOnly<current.SharedStringHelper>;
declare function use_old_ClassDeclaration_SharedStringHelper(
    use: TypeOnly<old.SharedStringHelper>);
use_old_ClassDeclaration_SharedStringHelper(
    get_current_ClassDeclaration_SharedStringHelper());
