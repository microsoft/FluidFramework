/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-validator in @fluidframework/build-tools.
 */
import * as old from "@fluid-experimental/data-objects-previous";
import * as current from "../../index";

type TypeOnly<T> = {
    [P in keyof T]: TypeOnly<T[P]>;
};

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IRuntimeSignaler": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IRuntimeSignaler():
    TypeOnly<old.IRuntimeSignaler>;
declare function use_current_InterfaceDeclaration_IRuntimeSignaler(
    use: TypeOnly<current.IRuntimeSignaler>);
use_current_InterfaceDeclaration_IRuntimeSignaler(
    get_old_InterfaceDeclaration_IRuntimeSignaler());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IRuntimeSignaler": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IRuntimeSignaler():
    TypeOnly<current.IRuntimeSignaler>;
declare function use_old_InterfaceDeclaration_IRuntimeSignaler(
    use: TypeOnly<old.IRuntimeSignaler>);
use_old_InterfaceDeclaration_IRuntimeSignaler(
    get_current_InterfaceDeclaration_IRuntimeSignaler());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISignaler": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISignaler():
    TypeOnly<old.ISignaler>;
declare function use_current_InterfaceDeclaration_ISignaler(
    use: TypeOnly<current.ISignaler>);
use_current_InterfaceDeclaration_ISignaler(
    get_old_InterfaceDeclaration_ISignaler());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISignaler": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISignaler():
    TypeOnly<current.ISignaler>;
declare function use_old_InterfaceDeclaration_ISignaler(
    use: TypeOnly<old.ISignaler>);
use_old_InterfaceDeclaration_ISignaler(
    get_current_InterfaceDeclaration_ISignaler());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_Signaler": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_Signaler():
    TypeOnly<old.Signaler>;
declare function use_current_ClassDeclaration_Signaler(
    use: TypeOnly<current.Signaler>);
use_current_ClassDeclaration_Signaler(
    get_old_ClassDeclaration_Signaler());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_Signaler": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_Signaler():
    TypeOnly<current.Signaler>;
declare function use_old_ClassDeclaration_Signaler(
    use: TypeOnly<old.Signaler>);
use_old_ClassDeclaration_Signaler(
    get_current_ClassDeclaration_Signaler());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_SignalListener": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_SignalListener():
    TypeOnly<old.SignalListener>;
declare function use_current_TypeAliasDeclaration_SignalListener(
    use: TypeOnly<current.SignalListener>);
use_current_TypeAliasDeclaration_SignalListener(
    get_old_TypeAliasDeclaration_SignalListener());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_SignalListener": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_SignalListener():
    TypeOnly<current.SignalListener>;
declare function use_old_TypeAliasDeclaration_SignalListener(
    use: TypeOnly<old.SignalListener>);
use_old_TypeAliasDeclaration_SignalListener(
    get_current_TypeAliasDeclaration_SignalListener());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SignalManager": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_SignalManager():
    TypeOnly<old.SignalManager>;
declare function use_current_ClassDeclaration_SignalManager(
    use: TypeOnly<current.SignalManager>);
use_current_ClassDeclaration_SignalManager(
    get_old_ClassDeclaration_SignalManager());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SignalManager": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_SignalManager():
    TypeOnly<current.SignalManager>;
declare function use_old_ClassDeclaration_SignalManager(
    use: TypeOnly<old.SignalManager>);
use_old_ClassDeclaration_SignalManager(
    get_current_ClassDeclaration_SignalManager());
