{"version":3,"file":"FrsAzFunctionTokenProvider.js","sourceRoot":"","sources":["../src/FrsAzFunctionTokenProvider.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAGH,OAAO,KAAK,MAAM,OAAO,CAAC;AAG1B,MAAM,OAAO,0BAA0B;IACnC,YACqB,aAAqB,EACrB,IAAmE;QADnE,kBAAa,GAAb,aAAa,CAAQ;QACrB,SAAI,GAAJ,IAAI,CAA+D;IACpF,CAAC;IAEE,KAAK,CAAC,iBAAiB,CAAC,QAAgB,EAAE,UAAkB;QAC/D,OAAO;YACH,GAAG,EAAE,MAAM,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,CAAC;SACjD,CAAC;IACN,CAAC;IAEM,KAAK,CAAC,iBAAiB,CAAC,QAAgB,EAAE,UAAkB;QAC/D,OAAO;YACH,GAAG,EAAE,MAAM,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,CAAC;SACjD,CAAC;IACN,CAAC;IAEO,KAAK,CAAC,QAAQ,CAAC,QAAgB,EAAE,UAAkB;;QACvD,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE;YACjC,MAAM,EAAE;gBACJ,QAAQ;gBACR,UAAU;gBACV,MAAM,QAAE,IAAI,CAAC,IAAI,0CAAE,MAAM;gBACzB,QAAQ,QAAE,IAAI,CAAC,IAAI,0CAAE,QAAQ;gBAC7B,iBAAiB,QAAE,IAAI,CAAC,IAAI,0CAAE,iBAAiB;aAClD;SACJ,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;YACjB,OAAO,QAAQ,CAAC,IAAc,CAAC;QACnC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;YACb,OAAO,GAAa,CAAC;QACzB,CAAC,CAAC,CAAC;IACP,CAAC;CACJ","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ITokenProvider, ITokenResponse } from \"@fluidframework/routerlicious-driver\";\nimport axios from \"axios\";\nimport { FrsMember } from \"./interfaces\";\n\nexport class FrsAzFunctionTokenProvider implements ITokenProvider {\n    constructor(\n        private readonly azFunctionUrl: string,\n        private readonly user?: Pick<FrsMember, \"userId\" | \"userName\" | \"additionalDetails\">,\n    ) { }\n\n    public async fetchOrdererToken(tenantId: string, documentId: string): Promise<ITokenResponse> {\n        return {\n            jwt: await this.getToken(tenantId, documentId),\n        };\n    }\n\n    public async fetchStorageToken(tenantId: string, documentId: string): Promise<ITokenResponse> {\n        return {\n            jwt: await this.getToken(tenantId, documentId),\n        };\n    }\n\n    private async getToken(tenantId: string, documentId: string): Promise<string> {\n        return axios.get(this.azFunctionUrl, {\n            params: {\n                tenantId,\n                documentId,\n                userId: this.user?.userId,\n                userName: this.user?.userName,\n                additionalDetails: this.user?.additionalDetails,\n            },\n        }).then((response) => {\n            return response.data as string;\n        }).catch((err) => {\n            return err as string;\n        });\n    }\n}\n"]}