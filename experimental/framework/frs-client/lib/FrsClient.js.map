{"version":3,"file":"FrsClient.js","sourceRoot":"","sources":["../src/FrsClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Container, Loader } from \"@fluidframework/container-loader\";\nimport {\n    ContainerSchema,\n    DOProviderContainerRuntimeFactory,\n    FluidContainer,\n    RootDataObject,\n} from \"@fluid-experimental/fluid-framework\";\nimport {\n    IDocumentServiceFactory,\n} from \"@fluidframework/driver-definitions\";\nimport { RouterliciousDocumentServiceFactory } from \"@fluidframework/routerlicious-driver\";\nimport { requestFluidObject } from \"@fluidframework/runtime-utils\";\n\nimport {\n    FrsConnectionConfig,\n    FrsContainerConfig,\n    FrsContainerServices,\n    FrsResources,\n} from \"./interfaces\";\nimport { FrsAudience } from \"./FrsAudience\";\nimport { FrsUrlResolver } from \"./FrsUrlResolver\";\n\n/**\n * FrsClient provides the ability to have a Fluid object backed by the FRS service or, when running with\n * local tenantId, have it be backed by a Tinylicious local service instance\n */\nexport class FrsClient {\n    public readonly documentServiceFactory: IDocumentServiceFactory;\n\n    constructor(private readonly connectionConfig: FrsConnectionConfig) {\n        this.documentServiceFactory = new RouterliciousDocumentServiceFactory(\n            this.connectionConfig.tokenProvider,\n        );\n    }\n\n    public async createContainer(\n        containerConfig: FrsContainerConfig,\n        containerSchema: ContainerSchema,\n    ): Promise<FrsResources> {\n        const loader = this.createLoader(containerConfig, containerSchema);\n        const container = await loader.createDetachedContainer({\n            package: \"no-dynamic-package\",\n            config: {},\n        });\n        await container.attach({ url: containerConfig.id });\n        return this.getFluidContainerAndServices(container);\n    }\n\n    public async getContainer(\n        containerConfig: FrsContainerConfig,\n        containerSchema: ContainerSchema,\n    ): Promise<FrsResources> {\n        const loader = this.createLoader(containerConfig, containerSchema);\n        const container = await loader.resolve({ url: containerConfig.id });\n        return this.getFluidContainerAndServices(container);\n    }\n\n    private async getFluidContainerAndServices(\n        container: Container,\n    ): Promise<FrsResources> {\n        const rootDataObject = await requestFluidObject<RootDataObject>(container, \"/\");\n        const fluidContainer: FluidContainer = new FluidContainer(container, rootDataObject);\n        const containerServices: FrsContainerServices = this.getContainerServices(container);\n        const frsResources: FrsResources = { fluidContainer, containerServices };\n        return frsResources;\n    }\n\n    private getContainerServices(\n        container: Container,\n    ): FrsContainerServices {\n        return {\n            audience: new FrsAudience(container),\n        };\n    }\n\n    private createLoader(\n        containerConfig: FrsContainerConfig,\n        containerSchema: ContainerSchema,\n    ): Loader {\n        const runtimeFactory = new DOProviderContainerRuntimeFactory(\n            containerSchema,\n        );\n        const module = { fluidExport: runtimeFactory };\n        const codeLoader = { load: async () => module };\n        const urlResolver = new FrsUrlResolver(\n            this.connectionConfig.tenantId,\n            this.connectionConfig.orderer,\n            this.connectionConfig.storage,\n            containerConfig.id,\n            this.connectionConfig.tokenProvider,\n        );\n        return new Loader({\n            urlResolver,\n            documentServiceFactory: this.documentServiceFactory,\n            codeLoader,\n            logger: containerConfig.logger,\n        });\n    }\n}\n"]}