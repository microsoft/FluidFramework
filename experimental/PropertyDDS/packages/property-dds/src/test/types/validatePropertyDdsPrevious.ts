/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-validator in @fluidframework/build-tools.
 */
import * as old from "@fluid-experimental/property-dds-previous";
import * as current from "../../index";

type TypeOnly<T> = {
    [P in keyof T]: TypeOnly<T[P]>;
};

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DeflatedPropertyTree": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_DeflatedPropertyTree():
    TypeOnly<old.DeflatedPropertyTree>;
declare function use_current_ClassDeclaration_DeflatedPropertyTree(
    use: TypeOnly<current.DeflatedPropertyTree>);
use_current_ClassDeclaration_DeflatedPropertyTree(
    get_old_ClassDeclaration_DeflatedPropertyTree());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DeflatedPropertyTree": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_DeflatedPropertyTree():
    TypeOnly<current.DeflatedPropertyTree>;
declare function use_old_ClassDeclaration_DeflatedPropertyTree(
    use: TypeOnly<old.DeflatedPropertyTree>);
use_old_ClassDeclaration_DeflatedPropertyTree(
    get_current_ClassDeclaration_DeflatedPropertyTree());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DeflatedPropertyTreeFactory": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_DeflatedPropertyTreeFactory():
    TypeOnly<old.DeflatedPropertyTreeFactory>;
declare function use_current_ClassDeclaration_DeflatedPropertyTreeFactory(
    use: TypeOnly<current.DeflatedPropertyTreeFactory>);
use_current_ClassDeclaration_DeflatedPropertyTreeFactory(
    get_old_ClassDeclaration_DeflatedPropertyTreeFactory());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DeflatedPropertyTreeFactory": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_DeflatedPropertyTreeFactory():
    TypeOnly<current.DeflatedPropertyTreeFactory>;
declare function use_old_ClassDeclaration_DeflatedPropertyTreeFactory(
    use: TypeOnly<old.DeflatedPropertyTreeFactory>);
use_old_ClassDeclaration_DeflatedPropertyTreeFactory(
    get_current_ClassDeclaration_DeflatedPropertyTreeFactory());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IPropertyTreeConfig": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IPropertyTreeConfig():
    TypeOnly<old.IPropertyTreeConfig>;
declare function use_current_InterfaceDeclaration_IPropertyTreeConfig(
    use: TypeOnly<current.IPropertyTreeConfig>);
use_current_InterfaceDeclaration_IPropertyTreeConfig(
    get_old_InterfaceDeclaration_IPropertyTreeConfig());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IPropertyTreeConfig": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IPropertyTreeConfig():
    TypeOnly<current.IPropertyTreeConfig>;
declare function use_old_InterfaceDeclaration_IPropertyTreeConfig(
    use: TypeOnly<old.IPropertyTreeConfig>);
use_old_InterfaceDeclaration_IPropertyTreeConfig(
    get_current_InterfaceDeclaration_IPropertyTreeConfig());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IPropertyTreeMessage": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IPropertyTreeMessage():
    TypeOnly<old.IPropertyTreeMessage>;
declare function use_current_InterfaceDeclaration_IPropertyTreeMessage(
    use: TypeOnly<current.IPropertyTreeMessage>);
use_current_InterfaceDeclaration_IPropertyTreeMessage(
    get_old_InterfaceDeclaration_IPropertyTreeMessage());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IPropertyTreeMessage": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IPropertyTreeMessage():
    TypeOnly<current.IPropertyTreeMessage>;
declare function use_old_InterfaceDeclaration_IPropertyTreeMessage(
    use: TypeOnly<old.IPropertyTreeMessage>);
use_old_InterfaceDeclaration_IPropertyTreeMessage(
    get_current_InterfaceDeclaration_IPropertyTreeMessage());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IRemotePropertyTreeMessage": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IRemotePropertyTreeMessage():
    TypeOnly<old.IRemotePropertyTreeMessage>;
declare function use_current_InterfaceDeclaration_IRemotePropertyTreeMessage(
    use: TypeOnly<current.IRemotePropertyTreeMessage>);
use_current_InterfaceDeclaration_IRemotePropertyTreeMessage(
    get_old_InterfaceDeclaration_IRemotePropertyTreeMessage());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IRemotePropertyTreeMessage": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IRemotePropertyTreeMessage():
    TypeOnly<current.IRemotePropertyTreeMessage>;
declare function use_old_InterfaceDeclaration_IRemotePropertyTreeMessage(
    use: TypeOnly<old.IRemotePropertyTreeMessage>);
use_old_InterfaceDeclaration_IRemotePropertyTreeMessage(
    get_current_InterfaceDeclaration_IRemotePropertyTreeMessage());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISharedPropertyTreeEncDec": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISharedPropertyTreeEncDec():
    TypeOnly<old.ISharedPropertyTreeEncDec>;
declare function use_current_InterfaceDeclaration_ISharedPropertyTreeEncDec(
    use: TypeOnly<current.ISharedPropertyTreeEncDec>);
use_current_InterfaceDeclaration_ISharedPropertyTreeEncDec(
    get_old_InterfaceDeclaration_ISharedPropertyTreeEncDec());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISharedPropertyTreeEncDec": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISharedPropertyTreeEncDec():
    TypeOnly<current.ISharedPropertyTreeEncDec>;
declare function use_old_InterfaceDeclaration_ISharedPropertyTreeEncDec(
    use: TypeOnly<old.ISharedPropertyTreeEncDec>);
use_old_InterfaceDeclaration_ISharedPropertyTreeEncDec(
    get_current_InterfaceDeclaration_ISharedPropertyTreeEncDec());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISnapshotSummary": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISnapshotSummary():
    TypeOnly<old.ISnapshotSummary>;
declare function use_current_InterfaceDeclaration_ISnapshotSummary(
    use: TypeOnly<current.ISnapshotSummary>);
use_current_InterfaceDeclaration_ISnapshotSummary(
    get_old_InterfaceDeclaration_ISnapshotSummary());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISnapshotSummary": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISnapshotSummary():
    TypeOnly<current.ISnapshotSummary>;
declare function use_old_InterfaceDeclaration_ISnapshotSummary(
    use: TypeOnly<old.ISnapshotSummary>);
use_old_InterfaceDeclaration_ISnapshotSummary(
    get_current_InterfaceDeclaration_ISnapshotSummary());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_Metadata": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_Metadata():
    TypeOnly<old.Metadata>;
declare function use_current_TypeAliasDeclaration_Metadata(
    use: TypeOnly<current.Metadata>);
use_current_TypeAliasDeclaration_Metadata(
    get_old_TypeAliasDeclaration_Metadata());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_Metadata": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_Metadata():
    TypeOnly<current.Metadata>;
declare function use_old_TypeAliasDeclaration_Metadata(
    use: TypeOnly<old.Metadata>);
use_old_TypeAliasDeclaration_Metadata(
    get_current_TypeAliasDeclaration_Metadata());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "EnumDeclaration_OpKind": {"forwardCompat": false}
*/
declare function get_old_EnumDeclaration_OpKind():
    TypeOnly<old.OpKind>;
declare function use_current_EnumDeclaration_OpKind(
    use: TypeOnly<current.OpKind>);
use_current_EnumDeclaration_OpKind(
    get_old_EnumDeclaration_OpKind());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "EnumDeclaration_OpKind": {"backCompat": false}
*/
declare function get_current_EnumDeclaration_OpKind():
    TypeOnly<current.OpKind>;
declare function use_old_EnumDeclaration_OpKind(
    use: TypeOnly<old.OpKind>);
use_old_EnumDeclaration_OpKind(
    get_current_EnumDeclaration_OpKind());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_PropertyTreeFactory": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_PropertyTreeFactory():
    TypeOnly<old.PropertyTreeFactory>;
declare function use_current_ClassDeclaration_PropertyTreeFactory(
    use: TypeOnly<current.PropertyTreeFactory>);
use_current_ClassDeclaration_PropertyTreeFactory(
    get_old_ClassDeclaration_PropertyTreeFactory());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_PropertyTreeFactory": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_PropertyTreeFactory():
    TypeOnly<current.PropertyTreeFactory>;
declare function use_old_ClassDeclaration_PropertyTreeFactory(
    use: TypeOnly<old.PropertyTreeFactory>);
use_old_ClassDeclaration_PropertyTreeFactory(
    get_current_ClassDeclaration_PropertyTreeFactory());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_SerializedChangeSet": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_SerializedChangeSet():
    TypeOnly<old.SerializedChangeSet>;
declare function use_current_TypeAliasDeclaration_SerializedChangeSet(
    use: TypeOnly<current.SerializedChangeSet>);
use_current_TypeAliasDeclaration_SerializedChangeSet(
    get_old_TypeAliasDeclaration_SerializedChangeSet());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_SerializedChangeSet": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_SerializedChangeSet():
    TypeOnly<current.SerializedChangeSet>;
declare function use_old_TypeAliasDeclaration_SerializedChangeSet(
    use: TypeOnly<old.SerializedChangeSet>);
use_old_TypeAliasDeclaration_SerializedChangeSet(
    get_current_TypeAliasDeclaration_SerializedChangeSet());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SharedPropertyTree": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_SharedPropertyTree():
    TypeOnly<old.SharedPropertyTree>;
declare function use_current_ClassDeclaration_SharedPropertyTree(
    use: TypeOnly<current.SharedPropertyTree>);
use_current_ClassDeclaration_SharedPropertyTree(
    get_old_ClassDeclaration_SharedPropertyTree());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SharedPropertyTree": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_SharedPropertyTree():
    TypeOnly<current.SharedPropertyTree>;
declare function use_old_ClassDeclaration_SharedPropertyTree(
    use: TypeOnly<old.SharedPropertyTree>);
use_old_ClassDeclaration_SharedPropertyTree(
    get_current_ClassDeclaration_SharedPropertyTree());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_SharedPropertyTreeOptions": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_SharedPropertyTreeOptions():
    TypeOnly<old.SharedPropertyTreeOptions>;
declare function use_current_InterfaceDeclaration_SharedPropertyTreeOptions(
    use: TypeOnly<current.SharedPropertyTreeOptions>);
use_current_InterfaceDeclaration_SharedPropertyTreeOptions(
    get_old_InterfaceDeclaration_SharedPropertyTreeOptions());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_SharedPropertyTreeOptions": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_SharedPropertyTreeOptions():
    TypeOnly<current.SharedPropertyTreeOptions>;
declare function use_old_InterfaceDeclaration_SharedPropertyTreeOptions(
    use: TypeOnly<old.SharedPropertyTreeOptions>);
use_old_InterfaceDeclaration_SharedPropertyTreeOptions(
    get_current_InterfaceDeclaration_SharedPropertyTreeOptions());
