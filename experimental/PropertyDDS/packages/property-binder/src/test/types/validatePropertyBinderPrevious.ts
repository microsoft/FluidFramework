/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-validator in @fluidframework/build-tools.
 */
import * as old from "@fluid-experimental/property-binder-previous";
import * as current from "../../index";

type TypeOnly<T> = {
    [P in keyof T]: TypeOnly<T[P]>;
};

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DataBinder": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_DataBinder():
    TypeOnly<old.DataBinder>;
declare function use_current_ClassDeclaration_DataBinder(
    use: TypeOnly<current.DataBinder>);
use_current_ClassDeclaration_DataBinder(
    get_old_ClassDeclaration_DataBinder());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DataBinder": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_DataBinder():
    TypeOnly<current.DataBinder>;
declare function use_old_ClassDeclaration_DataBinder(
    use: TypeOnly<old.DataBinder>);
use_old_ClassDeclaration_DataBinder(
    get_current_ClassDeclaration_DataBinder());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DataBinderHandle": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_DataBinderHandle():
    TypeOnly<old.DataBinderHandle>;
declare function use_current_ClassDeclaration_DataBinderHandle(
    use: TypeOnly<current.DataBinderHandle>);
use_current_ClassDeclaration_DataBinderHandle(
    get_old_ClassDeclaration_DataBinderHandle());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DataBinderHandle": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_DataBinderHandle():
    TypeOnly<current.DataBinderHandle>;
declare function use_old_ClassDeclaration_DataBinderHandle(
    use: TypeOnly<old.DataBinderHandle>);
use_old_ClassDeclaration_DataBinderHandle(
    get_current_ClassDeclaration_DataBinderHandle());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DataBinding": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_DataBinding():
    TypeOnly<old.DataBinding>;
declare function use_current_ClassDeclaration_DataBinding(
    use: TypeOnly<current.DataBinding>);
use_current_ClassDeclaration_DataBinding(
    get_old_ClassDeclaration_DataBinding());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DataBinding": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_DataBinding():
    TypeOnly<current.DataBinding>;
declare function use_old_ClassDeclaration_DataBinding(
    use: TypeOnly<old.DataBinding>);
use_old_ClassDeclaration_DataBinding(
    get_current_ClassDeclaration_DataBinding());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_forEachProperty": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_forEachProperty():
    TypeOnly<typeof old.forEachProperty>;
declare function use_current_VariableDeclaration_forEachProperty(
    use: TypeOnly<typeof current.forEachProperty>);
use_current_VariableDeclaration_forEachProperty(
    get_old_VariableDeclaration_forEachProperty());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_forEachProperty": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_forEachProperty():
    TypeOnly<typeof current.forEachProperty>;
declare function use_old_VariableDeclaration_forEachProperty(
    use: TypeOnly<typeof old.forEachProperty>);
use_old_VariableDeclaration_forEachProperty(
    get_current_VariableDeclaration_forEachProperty());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IActivateDataBindingOptions": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IActivateDataBindingOptions():
    TypeOnly<old.IActivateDataBindingOptions>;
declare function use_current_InterfaceDeclaration_IActivateDataBindingOptions(
    use: TypeOnly<current.IActivateDataBindingOptions>);
use_current_InterfaceDeclaration_IActivateDataBindingOptions(
    get_old_InterfaceDeclaration_IActivateDataBindingOptions());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IActivateDataBindingOptions": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IActivateDataBindingOptions():
    TypeOnly<current.IActivateDataBindingOptions>;
declare function use_old_InterfaceDeclaration_IActivateDataBindingOptions(
    use: TypeOnly<old.IActivateDataBindingOptions>);
use_old_InterfaceDeclaration_IActivateDataBindingOptions(
    get_current_InterfaceDeclaration_IActivateDataBindingOptions());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IDefineRepresentationOptions": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IDefineRepresentationOptions():
    TypeOnly<old.IDefineRepresentationOptions>;
declare function use_current_InterfaceDeclaration_IDefineRepresentationOptions(
    use: TypeOnly<current.IDefineRepresentationOptions>);
use_current_InterfaceDeclaration_IDefineRepresentationOptions(
    get_old_InterfaceDeclaration_IDefineRepresentationOptions());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IDefineRepresentationOptions": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IDefineRepresentationOptions():
    TypeOnly<current.IDefineRepresentationOptions>;
declare function use_old_InterfaceDeclaration_IDefineRepresentationOptions(
    use: TypeOnly<old.IDefineRepresentationOptions>);
use_old_InterfaceDeclaration_IDefineRepresentationOptions(
    get_current_InterfaceDeclaration_IDefineRepresentationOptions());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IRegisterOnPathOptions": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IRegisterOnPathOptions():
    TypeOnly<old.IRegisterOnPathOptions>;
declare function use_current_InterfaceDeclaration_IRegisterOnPathOptions(
    use: TypeOnly<current.IRegisterOnPathOptions>);
use_current_InterfaceDeclaration_IRegisterOnPathOptions(
    get_old_InterfaceDeclaration_IRegisterOnPathOptions());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IRegisterOnPathOptions": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IRegisterOnPathOptions():
    TypeOnly<current.IRegisterOnPathOptions>;
declare function use_old_InterfaceDeclaration_IRegisterOnPathOptions(
    use: TypeOnly<old.IRegisterOnPathOptions>);
use_old_InterfaceDeclaration_IRegisterOnPathOptions(
    get_current_InterfaceDeclaration_IRegisterOnPathOptions());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_onPathChanged": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_onPathChanged():
    TypeOnly<typeof old.onPathChanged>;
declare function use_current_VariableDeclaration_onPathChanged(
    use: TypeOnly<typeof current.onPathChanged>);
use_current_VariableDeclaration_onPathChanged(
    get_old_VariableDeclaration_onPathChanged());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_onPathChanged": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_onPathChanged():
    TypeOnly<typeof current.onPathChanged>;
declare function use_old_VariableDeclaration_onPathChanged(
    use: TypeOnly<typeof old.onPathChanged>);
use_old_VariableDeclaration_onPathChanged(
    get_current_VariableDeclaration_onPathChanged());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_onPropertyChanged": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_onPropertyChanged():
    TypeOnly<typeof old.onPropertyChanged>;
declare function use_current_VariableDeclaration_onPropertyChanged(
    use: TypeOnly<typeof current.onPropertyChanged>);
use_current_VariableDeclaration_onPropertyChanged(
    get_old_VariableDeclaration_onPropertyChanged());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_onPropertyChanged": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_onPropertyChanged():
    TypeOnly<typeof current.onPropertyChanged>;
declare function use_old_VariableDeclaration_onPropertyChanged(
    use: TypeOnly<typeof old.onPropertyChanged>);
use_old_VariableDeclaration_onPropertyChanged(
    get_current_VariableDeclaration_onPropertyChanged());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_onValuesChanged": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_onValuesChanged():
    TypeOnly<typeof old.onValuesChanged>;
declare function use_current_VariableDeclaration_onValuesChanged(
    use: TypeOnly<typeof current.onValuesChanged>);
use_current_VariableDeclaration_onValuesChanged(
    get_old_VariableDeclaration_onValuesChanged());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_onValuesChanged": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_onValuesChanged():
    TypeOnly<typeof current.onValuesChanged>;
declare function use_old_VariableDeclaration_onValuesChanged(
    use: TypeOnly<typeof old.onValuesChanged>);
use_old_VariableDeclaration_onValuesChanged(
    get_current_VariableDeclaration_onValuesChanged());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_PropertyElement": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_PropertyElement():
    TypeOnly<old.PropertyElement>;
declare function use_current_ClassDeclaration_PropertyElement(
    use: TypeOnly<current.PropertyElement>);
use_current_ClassDeclaration_PropertyElement(
    get_old_ClassDeclaration_PropertyElement());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_PropertyElement": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_PropertyElement():
    TypeOnly<current.PropertyElement>;
declare function use_old_ClassDeclaration_PropertyElement(
    use: TypeOnly<old.PropertyElement>);
use_old_ClassDeclaration_PropertyElement(
    get_current_ClassDeclaration_PropertyElement());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_representationDestroyer": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_representationDestroyer():
    TypeOnly<old.representationDestroyer>;
declare function use_current_TypeAliasDeclaration_representationDestroyer(
    use: TypeOnly<current.representationDestroyer>);
use_current_TypeAliasDeclaration_representationDestroyer(
    get_old_TypeAliasDeclaration_representationDestroyer());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_representationDestroyer": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_representationDestroyer():
    TypeOnly<current.representationDestroyer>;
declare function use_old_TypeAliasDeclaration_representationDestroyer(
    use: TypeOnly<old.representationDestroyer>);
use_old_TypeAliasDeclaration_representationDestroyer(
    get_current_TypeAliasDeclaration_representationDestroyer());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_representationGenerator": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_representationGenerator():
    TypeOnly<old.representationGenerator>;
declare function use_current_TypeAliasDeclaration_representationGenerator(
    use: TypeOnly<current.representationGenerator>);
use_current_TypeAliasDeclaration_representationGenerator(
    get_old_TypeAliasDeclaration_representationGenerator());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_representationGenerator": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_representationGenerator():
    TypeOnly<current.representationGenerator>;
declare function use_old_TypeAliasDeclaration_representationGenerator(
    use: TypeOnly<old.representationGenerator>);
use_old_TypeAliasDeclaration_representationGenerator(
    get_current_TypeAliasDeclaration_representationGenerator());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_representationInitializer": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_representationInitializer():
    TypeOnly<old.representationInitializer>;
declare function use_current_TypeAliasDeclaration_representationInitializer(
    use: TypeOnly<current.representationInitializer>);
use_current_TypeAliasDeclaration_representationInitializer(
    get_old_TypeAliasDeclaration_representationInitializer());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_representationInitializer": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_representationInitializer():
    TypeOnly<current.representationInitializer>;
declare function use_old_TypeAliasDeclaration_representationInitializer(
    use: TypeOnly<old.representationInitializer>);
use_old_TypeAliasDeclaration_representationInitializer(
    get_current_TypeAliasDeclaration_representationInitializer());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_StatelessDataBinding": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_StatelessDataBinding():
    TypeOnly<old.StatelessDataBinding>;
declare function use_current_ClassDeclaration_StatelessDataBinding(
    use: TypeOnly<current.StatelessDataBinding>);
use_current_ClassDeclaration_StatelessDataBinding(
    get_old_ClassDeclaration_StatelessDataBinding());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_StatelessDataBinding": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_StatelessDataBinding():
    TypeOnly<current.StatelessDataBinding>;
declare function use_old_ClassDeclaration_StatelessDataBinding(
    use: TypeOnly<old.StatelessDataBinding>);
use_old_ClassDeclaration_StatelessDataBinding(
    get_current_ClassDeclaration_StatelessDataBinding());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "EnumDeclaration_UpgradeType": {"forwardCompat": false}
*/
declare function get_old_EnumDeclaration_UpgradeType():
    TypeOnly<old.UpgradeType>;
declare function use_current_EnumDeclaration_UpgradeType(
    use: TypeOnly<current.UpgradeType>);
use_current_EnumDeclaration_UpgradeType(
    get_old_EnumDeclaration_UpgradeType());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "EnumDeclaration_UpgradeType": {"backCompat": false}
*/
declare function get_current_EnumDeclaration_UpgradeType():
    TypeOnly<current.UpgradeType>;
declare function use_old_EnumDeclaration_UpgradeType(
    use: TypeOnly<old.UpgradeType>);
use_old_EnumDeclaration_UpgradeType(
    get_current_EnumDeclaration_UpgradeType());
