/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-validator in @fluidframework/build-tools.
 */
import * as old from "@fluid-experimental/schemas-previous";
import * as current from "../../index";

type TypeOnly<T> = {
    [P in keyof T]: TypeOnly<T[P]>;
};

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_ALL_SCHEMAS": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_ALL_SCHEMAS():
    TypeOnly<typeof old.ALL_SCHEMAS>;
declare function use_current_VariableDeclaration_ALL_SCHEMAS(
    use: TypeOnly<typeof current.ALL_SCHEMAS>);
use_current_VariableDeclaration_ALL_SCHEMAS(
    get_old_VariableDeclaration_ALL_SCHEMAS());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_ALL_SCHEMAS": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_ALL_SCHEMAS():
    TypeOnly<typeof current.ALL_SCHEMAS>;
declare function use_old_VariableDeclaration_ALL_SCHEMAS(
    use: TypeOnly<typeof old.ALL_SCHEMAS>);
use_old_VariableDeclaration_ALL_SCHEMAS(
    get_current_VariableDeclaration_ALL_SCHEMAS());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_registerSchemas": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_registerSchemas():
    TypeOnly<typeof old.registerSchemas>;
declare function use_current_VariableDeclaration_registerSchemas(
    use: TypeOnly<typeof current.registerSchemas>);
use_current_VariableDeclaration_registerSchemas(
    get_old_VariableDeclaration_registerSchemas());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_registerSchemas": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_registerSchemas():
    TypeOnly<typeof current.registerSchemas>;
declare function use_old_VariableDeclaration_registerSchemas(
    use: TypeOnly<typeof old.registerSchemas>);
use_old_VariableDeclaration_registerSchemas(
    get_current_VariableDeclaration_registerSchemas());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_schemas": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_schemas():
    TypeOnly<typeof old.schemas>;
declare function use_current_VariableDeclaration_schemas(
    use: TypeOnly<typeof current.schemas>);
use_current_VariableDeclaration_schemas(
    get_old_VariableDeclaration_schemas());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_schemas": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_schemas():
    TypeOnly<typeof current.schemas>;
declare function use_old_VariableDeclaration_schemas(
    use: TypeOnly<typeof old.schemas>);
use_old_VariableDeclaration_schemas(
    get_current_VariableDeclaration_schemas());
