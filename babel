{"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-version-utils\\\\dist\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-version-utils\\\\dist\\\\compatOptions.mjs\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.22.6:development":{"value":{"code":"/*!\r\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nimport nconf from \"nconf\";\nimport { resolveVersion } from \"./versionUtils.js\";\nimport { pkgVersion } from \"./packageVersion.js\";\n/**\r\n * Different kind of compat version config\r\n */\nexport var CompatKind;\n(function (CompatKind) {\n  CompatKind[\"None\"] = \"None\";\n  CompatKind[\"Loader\"] = \"Loader\";\n  CompatKind[\"NewLoader\"] = \"NewLoader\";\n  CompatKind[\"Driver\"] = \"Driver\";\n  CompatKind[\"NewDriver\"] = \"NewDriver\";\n  CompatKind[\"ContainerRuntime\"] = \"ContainerRuntime\";\n  CompatKind[\"NewContainerRuntime\"] = \"NewContainerRuntime\";\n  CompatKind[\"DataRuntime\"] = \"DataRuntime\";\n  CompatKind[\"NewDataRuntime\"] = \"NewDataRuntime\";\n  CompatKind[\"LoaderDriver\"] = \"LoaderDriver\";\n})(CompatKind || (CompatKind = {}));\n/*\r\n * Parse the command line argument and environment variables.  Arguments take precedent over environment variable\r\n * NOTE: Please update this packages README.md if the default versions and config combination changes\r\n */\nconst options = {\n  compatKind: {\n    description: \"Compat kind to run\",\n    choices: [CompatKind.None, CompatKind.Loader, CompatKind.NewLoader, CompatKind.Driver, CompatKind.NewDriver, CompatKind.ContainerRuntime, CompatKind.NewContainerRuntime, CompatKind.DataRuntime, CompatKind.NewDataRuntime, CompatKind.LoaderDriver],\n    requiresArg: true,\n    array: true\n  },\n  compatVersion: {\n    description: \"Compat version to run\",\n    requiresArg: true,\n    array: true,\n    type: \"string\"\n  },\n  reinstall: {\n    default: false,\n    description: \"Force compat package to be installed\",\n    boolean: true\n  },\n  driver: {\n    choices: [\"tinylicious\", \"t9s\", \"routerlicious\", \"r11s\", \"odsp\", \"local\"],\n    requiresArg: true\n  },\n  r11sEndpointName: {\n    type: \"string\"\n  },\n  tenantIndex: {\n    type: \"number\"\n  },\n  baseVersion: {\n    type: \"string\"\n  }\n};\nnconf.argv(Object.assign(Object.assign({}, options), {\n  transform: obj => {\n    if (options[obj.key] !== undefined) {\n      obj.key = `fluid:test:${obj.key}`;\n    }\n    return obj;\n  }\n})).env({\n  separator: \"__\",\n  whitelist: [\"fluid__test__compatKind\", \"fluid__test__compatVersion\", \"fluid__test__backCompat\", \"fluid__test__driver\", \"fluid__test__r11sEndpointName\", \"fluid__test__baseVersion\"],\n  transform: obj => {\n    var _a;\n    if (!obj.key.startsWith(\"fluid__test__\")) {\n      return obj;\n    }\n    const key = obj.key.substring(\"fluid__test__\".length);\n    if ((_a = options[key]) === null || _a === void 0 ? void 0 : _a.array) {\n      try {\n        obj.value = JSON.parse(obj.value);\n      } catch (_b) {\n        // ignore\n      }\n    }\n    return obj;\n  }\n}).defaults({\n  fluid: {\n    test: {\n      driver: \"local\",\n      baseVersion: pkgVersion,\n      r11sEndpointName: \"r11s\",\n      tenantIndex: 0\n    }\n  }\n});\nexport const compatKind = nconf.get(\"fluid:test:compatKind\");\nexport const compatVersions = nconf.get(\"fluid:test:compatVersion\");\nexport const driver = nconf.get(\"fluid:test:driver\");\nexport const r11sEndpointName = nconf.get(\"fluid:test:r11sEndpointName\");\nexport const baseVersion = resolveVersion(nconf.get(\"fluid:test:baseVersion\"), false);\nexport const reinstall = nconf.get(\"fluid:test:reinstall\");\nexport const tenantIndex = nconf.get(\"fluid:test:tenantIndex\");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["nconf","resolveVersion","pkgVersion","CompatKind","options","compatKind","description","choices","None","Loader","NewLoader","Driver","NewDriver","ContainerRuntime","NewContainerRuntime","DataRuntime","NewDataRuntime","LoaderDriver","requiresArg","array","compatVersion","type","reinstall","default","boolean","driver","r11sEndpointName","tenantIndex","baseVersion","argv","Object","assign","transform","obj","key","undefined","env","separator","whitelist","startsWith","substring","length","_a","value","JSON","parse","_b","defaults","fluid","test","get","compatVersions"],"sourceRoot":"C:\\code\\FluidFramework5\\packages\\test\\test-version-utils\\dist\\","sources":["../src/compatOptions.ts"],"sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport nconf from \"nconf\";\nimport { RouterliciousEndpoint, TestDriverTypes } from \"@fluidframework/test-driver-definitions\";\nimport { resolveVersion } from \"./versionUtils.js\";\nimport { pkgVersion } from \"./packageVersion.js\";\n\n/**\n * Different kind of compat version config\n */\nexport enum CompatKind {\n\tNone = \"None\",\n\tLoader = \"Loader\",\n\tNewLoader = \"NewLoader\",\n\tDriver = \"Driver\",\n\tNewDriver = \"NewDriver\",\n\tContainerRuntime = \"ContainerRuntime\",\n\tNewContainerRuntime = \"NewContainerRuntime\",\n\tDataRuntime = \"DataRuntime\",\n\tNewDataRuntime = \"NewDataRuntime\",\n\tLoaderDriver = \"LoaderDriver\",\n}\n\n/*\n * Parse the command line argument and environment variables.  Arguments take precedent over environment variable\n * NOTE: Please update this packages README.md if the default versions and config combination changes\n */\nconst options = {\n\tcompatKind: {\n\t\tdescription: \"Compat kind to run\",\n\t\tchoices: [\n\t\t\tCompatKind.None,\n\t\t\tCompatKind.Loader,\n\t\t\tCompatKind.NewLoader,\n\t\t\tCompatKind.Driver,\n\t\t\tCompatKind.NewDriver,\n\t\t\tCompatKind.ContainerRuntime,\n\t\t\tCompatKind.NewContainerRuntime,\n\t\t\tCompatKind.DataRuntime,\n\t\t\tCompatKind.NewDataRuntime,\n\t\t\tCompatKind.LoaderDriver,\n\t\t],\n\t\trequiresArg: true,\n\t\tarray: true,\n\t},\n\tcompatVersion: {\n\t\tdescription: \"Compat version to run\",\n\t\trequiresArg: true,\n\t\tarray: true,\n\t\ttype: \"string\",\n\t},\n\treinstall: {\n\t\tdefault: false,\n\t\tdescription: \"Force compat package to be installed\",\n\t\tboolean: true,\n\t},\n\tdriver: {\n\t\tchoices: [\"tinylicious\", \"t9s\", \"routerlicious\", \"r11s\", \"odsp\", \"local\"],\n\t\trequiresArg: true,\n\t},\n\tr11sEndpointName: {\n\t\ttype: \"string\",\n\t},\n\ttenantIndex: {\n\t\ttype: \"number\",\n\t},\n\tbaseVersion: {\n\t\ttype: \"string\",\n\t},\n};\n\nnconf\n\t.argv({\n\t\t...options,\n\t\ttransform: (obj: { key: string; value: string }) => {\n\t\t\tif (options[obj.key] !== undefined) {\n\t\t\t\tobj.key = `fluid:test:${obj.key}`;\n\t\t\t}\n\t\t\treturn obj;\n\t\t},\n\t})\n\t.env({\n\t\tseparator: \"__\",\n\t\twhitelist: [\n\t\t\t\"fluid__test__compatKind\",\n\t\t\t\"fluid__test__compatVersion\",\n\t\t\t\"fluid__test__backCompat\",\n\t\t\t\"fluid__test__driver\",\n\t\t\t\"fluid__test__r11sEndpointName\",\n\t\t\t\"fluid__test__baseVersion\",\n\t\t],\n\t\ttransform: (obj: { key: string; value: string }) => {\n\t\t\tif (!obj.key.startsWith(\"fluid__test__\")) {\n\t\t\t\treturn obj;\n\t\t\t}\n\t\t\tconst key = obj.key.substring(\"fluid__test__\".length);\n\t\t\tif (options[key]?.array) {\n\t\t\t\ttry {\n\t\t\t\t\tobj.value = JSON.parse(obj.value);\n\t\t\t\t} catch {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn obj;\n\t\t},\n\t})\n\t.defaults({\n\t\tfluid: {\n\t\t\ttest: {\n\t\t\t\tdriver: \"local\",\n\t\t\t\tbaseVersion: pkgVersion,\n\t\t\t\tr11sEndpointName: \"r11s\",\n\t\t\t\ttenantIndex: 0,\n\t\t\t},\n\t\t},\n\t});\n\nexport const compatKind = nconf.get(\"fluid:test:compatKind\") as CompatKind[] | undefined;\nexport const compatVersions = nconf.get(\"fluid:test:compatVersion\") as string[] | undefined;\nexport const driver = nconf.get(\"fluid:test:driver\") as TestDriverTypes;\nexport const r11sEndpointName = nconf.get(\"fluid:test:r11sEndpointName\") as RouterliciousEndpoint;\nexport const baseVersion = resolveVersion(nconf.get(\"fluid:test:baseVersion\") as string, false);\nexport const reinstall = nconf.get(\"fluid:test:reinstall\");\nexport const tenantIndex = nconf.get(\"fluid:test:tenantIndex\") as number;\n"],"mappings":"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"}},"mtime":1688579758629},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-version-utils\\\\dist\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-version-utils\\\\dist\\\\compatOptions.mjs\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.22.6:development":{"value":{"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tenantIndex = exports.reinstall = exports.r11sEndpointName = exports.driver = exports.compatVersions = exports.compatKind = exports.CompatKind = void 0;\nvar _nconf = _interopRequireDefault(require(\"nconf\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/*!\r\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Different kind of compat version config\r\n */\nvar CompatKind;\nexports.CompatKind = CompatKind;\n(function (CompatKind) {\n  CompatKind[\"None\"] = \"None\";\n  CompatKind[\"Loader\"] = \"Loader\";\n  CompatKind[\"NewLoader\"] = \"NewLoader\";\n  CompatKind[\"Driver\"] = \"Driver\";\n  CompatKind[\"NewDriver\"] = \"NewDriver\";\n  CompatKind[\"ContainerRuntime\"] = \"ContainerRuntime\";\n  CompatKind[\"NewContainerRuntime\"] = \"NewContainerRuntime\";\n  CompatKind[\"DataRuntime\"] = \"DataRuntime\";\n  CompatKind[\"NewDataRuntime\"] = \"NewDataRuntime\";\n  CompatKind[\"LoaderDriver\"] = \"LoaderDriver\";\n})(CompatKind || (exports.CompatKind = CompatKind = {}));\n/*\r\n * Parse the command line argument and environment variables. Arguments take precedent over environment variable\r\n * NOTE: Please update this packages README.md if the default versions and config combination changes\r\n */\nconst options = {\n  compatKind: {\n    description: \"Compat kind to run\",\n    choices: [CompatKind.None, CompatKind.Loader, CompatKind.NewLoader, CompatKind.Driver, CompatKind.NewDriver, CompatKind.ContainerRuntime, CompatKind.NewContainerRuntime, CompatKind.DataRuntime, CompatKind.NewDataRuntime, CompatKind.LoaderDriver],\n    requiresArg: true,\n    array: true\n  },\n  compatVersion: {\n    description: \"Compat version to run\",\n    requiresArg: true,\n    array: true,\n    type: \"string\"\n  },\n  reinstall: {\n    default: false,\n    description: \"Force compat package to be installed\",\n    boolean: true\n  },\n  driver: {\n    choices: [\"tinylicious\", \"t9s\", \"routerlicious\", \"r11s\", \"odsp\", \"local\"],\n    requiresArg: true\n  },\n  r11sEndpointName: {\n    type: \"string\"\n  },\n  tenantIndex: {\n    type: \"number\"\n  },\n  baseVersion: {\n    type: \"string\"\n  }\n};\n_nconf.default.argv(Object.assign(Object.assign({}, options), {\n  transform: obj => {\n    if (options[obj.key] !== undefined) {\n      obj.key = `fluid:test:${obj.key}`;\n    }\n    return obj;\n  }\n})).env({\n  separator: \"__\",\n  whitelist: [\"fluid__test__compatKind\", \"fluid__test__compatVersion\", \"fluid__test__backCompat\", \"fluid__test__driver\", \"fluid__test__r11sEndpointName\", \"fluid__test__baseVersion\"],\n  transform: obj => {\n    var _a;\n    if (!obj.key.startsWith(\"fluid__test__\")) {\n      return obj;\n    }\n    const key = obj.key.substring(\"fluid__test__\".length);\n    if ((_a = options[key]) === null || _a === void 0 ? void 0 : _a.array) {\n      try {\n        obj.value = JSON.parse(obj.value);\n      } catch (_b) {\n        // ignore\n      }\n    }\n    return obj;\n  }\n}).defaults({\n  fluid: {\n    test: {\n      driver: \"local\",\n      r11sEndpointName: \"r11s\",\n      tenantIndex: 0\n    }\n  }\n});\nconst compatKind = _nconf.default.get(\"fluid:test:compatKind\");\nexports.compatKind = compatKind;\nconst compatVersions = _nconf.default.get(\"fluid:test:compatVersion\");\nexports.compatVersions = compatVersions;\nconst driver = _nconf.default.get(\"fluid:test:driver\");\nexports.driver = driver;\nconst r11sEndpointName = _nconf.default.get(\"fluid:test:r11sEndpointName\");\nexports.r11sEndpointName = r11sEndpointName;\nconst reinstall = _nconf.default.get(\"fluid:test:reinstall\");\nexports.reinstall = reinstall;\nconst tenantIndex = _nconf.default.get(\"fluid:test:tenantIndex\");\nexports.tenantIndex = tenantIndex;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["_nconf","_interopRequireDefault","require","obj","__esModule","default","CompatKind","exports","options","compatKind","description","choices","None","Loader","NewLoader","Driver","NewDriver","ContainerRuntime","NewContainerRuntime","DataRuntime","NewDataRuntime","LoaderDriver","requiresArg","array","compatVersion","type","reinstall","boolean","driver","r11sEndpointName","tenantIndex","baseVersion","nconf","argv","Object","assign","transform","key","undefined","env","separator","whitelist","startsWith","substring","length","_a","value","JSON","parse","_b","defaults","fluid","test","get","compatVersions"],"sourceRoot":"C:\\code\\FluidFramework5\\packages\\test\\test-version-utils\\dist\\","sources":["../src/compatOptions.mts"],"sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport nconf from \"nconf\";\nimport { RouterliciousEndpoint, TestDriverTypes } from \"@fluidframework/test-driver-definitions\";\n\n/**\n * Different kind of compat version config\n */\nexport enum CompatKind {\n\tNone = \"None\",\n\tLoader = \"Loader\",\n\tNewLoader = \"NewLoader\",\n\tDriver = \"Driver\",\n\tNewDriver = \"NewDriver\",\n\tContainerRuntime = \"ContainerRuntime\",\n\tNewContainerRuntime = \"NewContainerRuntime\",\n\tDataRuntime = \"DataRuntime\",\n\tNewDataRuntime = \"NewDataRuntime\",\n\tLoaderDriver = \"LoaderDriver\",\n}\n\n/*\n * Parse the command line argument and environment variables. Arguments take precedent over environment variable\n * NOTE: Please update this packages README.md if the default versions and config combination changes\n */\nconst options = {\n\tcompatKind: {\n\t\tdescription: \"Compat kind to run\",\n\t\tchoices: [\n\t\t\tCompatKind.None,\n\t\t\tCompatKind.Loader,\n\t\t\tCompatKind.NewLoader,\n\t\t\tCompatKind.Driver,\n\t\t\tCompatKind.NewDriver,\n\t\t\tCompatKind.ContainerRuntime,\n\t\t\tCompatKind.NewContainerRuntime,\n\t\t\tCompatKind.DataRuntime,\n\t\t\tCompatKind.NewDataRuntime,\n\t\t\tCompatKind.LoaderDriver,\n\t\t],\n\t\trequiresArg: true,\n\t\tarray: true,\n\t},\n\tcompatVersion: {\n\t\tdescription: \"Compat version to run\",\n\t\trequiresArg: true,\n\t\tarray: true,\n\t\ttype: \"string\",\n\t},\n\treinstall: {\n\t\tdefault: false,\n\t\tdescription: \"Force compat package to be installed\",\n\t\tboolean: true,\n\t},\n\tdriver: {\n\t\tchoices: [\"tinylicious\", \"t9s\", \"routerlicious\", \"r11s\", \"odsp\", \"local\"],\n\t\trequiresArg: true,\n\t},\n\tr11sEndpointName: {\n\t\ttype: \"string\",\n\t},\n\ttenantIndex: {\n\t\ttype: \"number\",\n\t},\n\tbaseVersion: {\n\t\ttype: \"string\",\n\t},\n};\n\nnconf\n\t.argv({\n\t\t...options,\n\t\ttransform: (obj: { key: string; value: string }) => {\n\t\t\tif (options[obj.key] !== undefined) {\n\t\t\t\tobj.key = `fluid:test:${obj.key}`;\n\t\t\t}\n\t\t\treturn obj;\n\t\t},\n\t})\n\t.env({\n\t\tseparator: \"__\",\n\t\twhitelist: [\n\t\t\t\"fluid__test__compatKind\",\n\t\t\t\"fluid__test__compatVersion\",\n\t\t\t\"fluid__test__backCompat\",\n\t\t\t\"fluid__test__driver\",\n\t\t\t\"fluid__test__r11sEndpointName\",\n\t\t\t\"fluid__test__baseVersion\",\n\t\t],\n\t\ttransform: (obj: { key: string; value: string }) => {\n\t\t\tif (!obj.key.startsWith(\"fluid__test__\")) {\n\t\t\t\treturn obj;\n\t\t\t}\n\t\t\tconst key = obj.key.substring(\"fluid__test__\".length);\n\t\t\tif (options[key]?.array) {\n\t\t\t\ttry {\n\t\t\t\t\tobj.value = JSON.parse(obj.value);\n\t\t\t\t} catch {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn obj;\n\t\t},\n\t})\n\t.defaults({\n\t\tfluid: {\n\t\t\ttest: {\n\t\t\t\tdriver: \"local\",\n\t\t\t\tr11sEndpointName: \"r11s\",\n\t\t\t\ttenantIndex: 0,\n\t\t\t},\n\t\t},\n\t});\n\nexport const compatKind = nconf.get(\"fluid:test:compatKind\") as CompatKind[] | undefined;\nexport const compatVersions = nconf.get(\"fluid:test:compatVersion\") as string[] | undefined;\nexport const driver = nconf.get(\"fluid:test:driver\") as TestDriverTypes;\nexport const r11sEndpointName = nconf.get(\"fluid:test:r11sEndpointName\") as RouterliciousEndpoint;\nexport const reinstall = nconf.get(\"fluid:test:reinstall\");\nexport const tenantIndex = nconf.get(\"fluid:test:tenantIndex\") as number;\n"],"mappings":"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"}},"mtime":1688583781488},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\nconf@0.12.0\\\\node_modules\\\\nconf\\\\lib\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\nconf@0.12.0\\\\node_modules\\\\nconf\\\\lib\\\\nconf.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.22.6:development":{"value":{"code":"\"use strict\";\n\n/*\n * nconf.js: Top-level include for the nconf module\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar common = require('./nconf/common'),\n  Provider = require('./nconf/provider').Provider;\n\n//\n// `nconf` is by default an instance of `nconf.Provider`.\n//\nvar nconf = module.exports = new Provider();\n\n//\n// Expose the version from the package.json\n//\nnconf.version = require('../package.json').version;\n\n//\n// Setup all stores as lazy-loaded getters.\n//\n['argv', 'env', 'file', 'literal', 'memory'].forEach(function (store) {\n  var name = common.capitalize(store);\n  nconf.__defineGetter__(name, function () {\n    return require('./nconf/stores/' + store)[name];\n  });\n});\n\n//\n// Expose the various components included with nconf\n//\nnconf.key = common.key;\nnconf.path = common.path;\nnconf.loadFiles = common.loadFiles;\nnconf.loadFilesSync = common.loadFilesSync;\nnconf.formats = require('./nconf/formats');\nnconf.Provider = Provider;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21tb24iLCJyZXF1aXJlIiwiUHJvdmlkZXIiLCJuY29uZiIsIm1vZHVsZSIsImV4cG9ydHMiLCJ2ZXJzaW9uIiwiZm9yRWFjaCIsInN0b3JlIiwibmFtZSIsImNhcGl0YWxpemUiLCJfX2RlZmluZUdldHRlcl9fIiwia2V5IiwicGF0aCIsImxvYWRGaWxlcyIsImxvYWRGaWxlc1N5bmMiLCJmb3JtYXRzIl0sInNvdXJjZVJvb3QiOiJDOlxcY29kZVxcRmx1aWRGcmFtZXdvcms1XFxub2RlX21vZHVsZXNcXC5wbnBtXFxuY29uZkAwLjEyLjBcXG5vZGVfbW9kdWxlc1xcbmNvbmZcXGxpYlxcIiwic291cmNlcyI6WyJuY29uZi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogbmNvbmYuanM6IFRvcC1sZXZlbCBpbmNsdWRlIGZvciB0aGUgbmNvbmYgbW9kdWxlXG4gKlxuICogKEMpIDIwMTEsIENoYXJsaWUgUm9iYmlucyBhbmQgdGhlIENvbnRyaWJ1dG9ycy5cbiAqXG4gKi9cblxudmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4vbmNvbmYvY29tbW9uJyksXG4gICAgUHJvdmlkZXIgPSByZXF1aXJlKCcuL25jb25mL3Byb3ZpZGVyJykuUHJvdmlkZXI7XG5cbi8vXG4vLyBgbmNvbmZgIGlzIGJ5IGRlZmF1bHQgYW4gaW5zdGFuY2Ugb2YgYG5jb25mLlByb3ZpZGVyYC5cbi8vXG52YXIgbmNvbmYgPSBtb2R1bGUuZXhwb3J0cyA9IG5ldyBQcm92aWRlcigpO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSB2ZXJzaW9uIGZyb20gdGhlIHBhY2thZ2UuanNvblxuLy9cbm5jb25mLnZlcnNpb24gPSByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uO1xuXG4vL1xuLy8gU2V0dXAgYWxsIHN0b3JlcyBhcyBsYXp5LWxvYWRlZCBnZXR0ZXJzLlxuLy9cblsnYXJndicsICdlbnYnLCAnZmlsZScsICdsaXRlcmFsJywgJ21lbW9yeSddLmZvckVhY2goZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgdmFyIG5hbWUgPSBjb21tb24uY2FwaXRhbGl6ZShzdG9yZSk7XG5cbiAgICBuY29uZi5fX2RlZmluZUdldHRlcl9fKG5hbWUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoJy4vbmNvbmYvc3RvcmVzLycgKyBzdG9yZSlbbmFtZV07XG4gICAgfSk7XG59KTtcblxuLy9cbi8vIEV4cG9zZSB0aGUgdmFyaW91cyBjb21wb25lbnRzIGluY2x1ZGVkIHdpdGggbmNvbmZcbi8vXG5uY29uZi5rZXkgICAgICAgICAgID0gY29tbW9uLmtleTtcbm5jb25mLnBhdGggICAgICAgICAgPSBjb21tb24ucGF0aDtcbm5jb25mLmxvYWRGaWxlcyAgICAgPSBjb21tb24ubG9hZEZpbGVzO1xubmNvbmYubG9hZEZpbGVzU3luYyA9IGNvbW1vbi5sb2FkRmlsZXNTeW5jO1xubmNvbmYuZm9ybWF0cyAgICAgICA9IHJlcXVpcmUoJy4vbmNvbmYvZm9ybWF0cycpO1xubmNvbmYuUHJvdmlkZXIgICAgICA9IFByb3ZpZGVyO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJQSxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztFQUNsQ0MsUUFBUSxHQUFHRCxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQ0MsUUFBUTs7QUFFbkQ7QUFDQTtBQUNBO0FBQ0EsSUFBSUMsS0FBSyxHQUFHQyxNQUFNLENBQUNDLE9BQU8sR0FBRyxJQUFJSCxRQUFRLENBQUMsQ0FBQzs7QUFFM0M7QUFDQTtBQUNBO0FBQ0FDLEtBQUssQ0FBQ0csT0FBTyxHQUFHTCxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQ0ssT0FBTzs7QUFFbEQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUNDLE9BQU8sQ0FBQyxVQUFVQyxLQUFLLEVBQUU7RUFDbEUsSUFBSUMsSUFBSSxHQUFHVCxNQUFNLENBQUNVLFVBQVUsQ0FBQ0YsS0FBSyxDQUFDO0VBRW5DTCxLQUFLLENBQUNRLGdCQUFnQixDQUFDRixJQUFJLEVBQUUsWUFBWTtJQUNyQyxPQUFPUixPQUFPLENBQUMsaUJBQWlCLEdBQUdPLEtBQUssQ0FBQyxDQUFDQyxJQUFJLENBQUM7RUFDbkQsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDOztBQUVGO0FBQ0E7QUFDQTtBQUNBTixLQUFLLENBQUNTLEdBQUcsR0FBYVosTUFBTSxDQUFDWSxHQUFHO0FBQ2hDVCxLQUFLLENBQUNVLElBQUksR0FBWWIsTUFBTSxDQUFDYSxJQUFJO0FBQ2pDVixLQUFLLENBQUNXLFNBQVMsR0FBT2QsTUFBTSxDQUFDYyxTQUFTO0FBQ3RDWCxLQUFLLENBQUNZLGFBQWEsR0FBR2YsTUFBTSxDQUFDZSxhQUFhO0FBQzFDWixLQUFLLENBQUNhLE9BQU8sR0FBU2YsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0FBQ2hERSxLQUFLLENBQUNELFFBQVEsR0FBUUEsUUFBUSJ9","map":{"version":3,"names":["common","require","Provider","nconf","module","exports","version","forEach","store","name","capitalize","__defineGetter__","key","path","loadFiles","loadFilesSync","formats"],"sourceRoot":"C:\\code\\FluidFramework5\\node_modules\\.pnpm\\nconf@0.12.0\\node_modules\\nconf\\lib\\","sources":["nconf.js"],"sourcesContent":["/*\n * nconf.js: Top-level include for the nconf module\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar common = require('./nconf/common'),\n    Provider = require('./nconf/provider').Provider;\n\n//\n// `nconf` is by default an instance of `nconf.Provider`.\n//\nvar nconf = module.exports = new Provider();\n\n//\n// Expose the version from the package.json\n//\nnconf.version = require('../package.json').version;\n\n//\n// Setup all stores as lazy-loaded getters.\n//\n['argv', 'env', 'file', 'literal', 'memory'].forEach(function (store) {\n    var name = common.capitalize(store);\n\n    nconf.__defineGetter__(name, function () {\n        return require('./nconf/stores/' + store)[name];\n    });\n});\n\n//\n// Expose the various components included with nconf\n//\nnconf.key           = common.key;\nnconf.path          = common.path;\nnconf.loadFiles     = common.loadFiles;\nnconf.loadFilesSync = common.loadFilesSync;\nnconf.formats       = require('./nconf/formats');\nnconf.Provider      = Provider;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,gBAAgB,CAAC;EAClCC,QAAQ,GAAGD,OAAO,CAAC,kBAAkB,CAAC,CAACC,QAAQ;;AAEnD;AACA;AACA;AACA,IAAIC,KAAK,GAAGC,MAAM,CAACC,OAAO,GAAG,IAAIH,QAAQ,CAAC,CAAC;;AAE3C;AACA;AACA;AACAC,KAAK,CAACG,OAAO,GAAGL,OAAO,CAAC,iBAAiB,CAAC,CAACK,OAAO;;AAElD;AACA;AACA;AACA,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,CAAC,CAACC,OAAO,CAAC,UAAUC,KAAK,EAAE;EAClE,IAAIC,IAAI,GAAGT,MAAM,CAACU,UAAU,CAACF,KAAK,CAAC;EAEnCL,KAAK,CAACQ,gBAAgB,CAACF,IAAI,EAAE,YAAY;IACrC,OAAOR,OAAO,CAAC,iBAAiB,GAAGO,KAAK,CAAC,CAACC,IAAI,CAAC;EACnD,CAAC,CAAC;AACN,CAAC,CAAC;;AAEF;AACA;AACA;AACAN,KAAK,CAACS,GAAG,GAAaZ,MAAM,CAACY,GAAG;AAChCT,KAAK,CAACU,IAAI,GAAYb,MAAM,CAACa,IAAI;AACjCV,KAAK,CAACW,SAAS,GAAOd,MAAM,CAACc,SAAS;AACtCX,KAAK,CAACY,aAAa,GAAGf,MAAM,CAACe,aAAa;AAC1CZ,KAAK,CAACa,OAAO,GAASf,OAAO,CAAC,iBAAiB,CAAC;AAChDE,KAAK,CAACD,QAAQ,GAAQA,QAAQ"}},"mtime":1674865250595},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\nconf@0.12.0\\\\node_modules\\\\nconf\\\\lib\\\\nconf\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\nconf@0.12.0\\\\node_modules\\\\nconf\\\\lib\\\\nconf\\\\common.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.22.6:development":{"value":{"code":"\"use strict\";\n\n/*\n * utils.js: Utility functions for the nconf module.\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar fs = require('fs'),\n  async = require('async'),\n  formats = require('./formats'),\n  Memory = require('./stores/memory').Memory;\nvar common = exports;\n\n//\n// ### function path (key)\n// #### @key {string} The ':' delimited key to split\n// Returns a fully-qualified path to a nested nconf key.\n// If given null or undefined it should return an empty path.\n// '' should still be respected as a path.\n//\ncommon.path = function (key, separator) {\n  separator = separator || ':';\n  return key == null ? [] : key.split(separator);\n};\n\n//\n// ### function key (arguments)\n// Returns a `:` joined string from the `arguments`.\n//\ncommon.key = function () {\n  return Array.prototype.slice.call(arguments).join(':');\n};\n\n//\n// ### function key (arguments)\n// Returns a joined string from the `arguments`,\n// first argument is the join delimiter.\n//\ncommon.keyed = function () {\n  return Array.prototype.slice.call(arguments, 1).join(arguments[0]);\n};\n\n//\n// ### function loadFiles (files, callback)\n// #### @files {Object|Array} List of files (or settings object) to load.\n// #### @callback {function} Continuation to respond to when complete.\n// Loads all the data in the specified `files`.\n//\ncommon.loadFiles = function (files, callback) {\n  if (!files) {\n    return callback(null, {});\n  }\n  var options = Array.isArray(files) ? {\n    files: files\n  } : files;\n\n  //\n  // Set the default JSON format if not already\n  // specified\n  //\n  options.format = options.format || formats.json;\n  function parseFile(file, next) {\n    fs.readFile(file, function (err, data) {\n      return !err ? next(null, options.format.parse(data.toString())) : next(err);\n    });\n  }\n  async.map(options.files, parseFile, function (err, objs) {\n    return err ? callback(err) : callback(null, common.merge(objs));\n  });\n};\n\n//\n// ### function loadFilesSync (files)\n// #### @files {Object|Array} List of files (or settings object) to load.\n// Loads all the data in the specified `files` synchronously.\n//\ncommon.loadFilesSync = function (files) {\n  if (!files) {\n    return;\n  }\n\n  //\n  // Set the default JSON format if not already\n  // specified\n  //\n  var options = Array.isArray(files) ? {\n    files: files\n  } : files;\n  options.format = options.format || formats.json;\n  return common.merge(options.files.map(function (file) {\n    return options.format.parse(fs.readFileSync(file, 'utf8'));\n  }));\n};\n\n//\n// ### function merge (objs)\n// #### @objs {Array} Array of object literals to merge\n// Merges the specified `objs` using a temporary instance\n// of `stores.Memory`.\n//\ncommon.merge = function (objs) {\n  var store = new Memory();\n  objs.forEach(function (obj) {\n    Object.keys(obj).forEach(function (key) {\n      store.merge(key, obj[key]);\n    });\n  });\n  return store.store;\n};\n\n//\n// ### function capitalize (str)\n// #### @str {string} String to capitalize\n// Capitalizes the specified `str`.\n//\ncommon.capitalize = function (str) {\n  return str && str[0].toUpperCase() + str.slice(1);\n};\n\n//\n// ### function parseValues (any)\n// #### @any {string} String to parse as native data-type or return as is\n// try to parse `any` as a native data-type\n//\ncommon.parseValues = function (value) {\n  var val = value;\n  try {\n    val = JSON.parse(value);\n  } catch (ignore) {\n    // Check for any other well-known strings that should be \"parsed\"\n    if (value === 'undefined') {\n      val = void 0;\n    }\n  }\n  return val;\n};\n\n//\n// ### function transform(map, fn)\n// #### @map {object} Object of key/value pairs to apply `fn` to\n// #### @fn {function} Transformation function that will be applied to every key/value pair\n// transform a set of key/value pairs and return the transformed result\ncommon.transform = function (map, fn) {\n  var pairs = Object.keys(map).map(function (key) {\n    var obj = {\n      key: key,\n      value: map[key]\n    };\n    var result = fn.call(null, obj);\n    if (!result) {\n      return null;\n    } else if (result.key) {\n      return result;\n    }\n    var error = new Error('Transform function passed to store returned an invalid format: ' + JSON.stringify(result));\n    error.name = 'RuntimeError';\n    throw error;\n  });\n  return pairs.filter(function (pair) {\n    return pair !== null;\n  }).reduce(function (accumulator, pair) {\n    accumulator[pair.key] = pair.value;\n    return accumulator;\n  }, {});\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["fs","require","async","formats","Memory","common","exports","path","key","separator","split","Array","prototype","slice","call","arguments","join","keyed","loadFiles","files","callback","options","isArray","format","json","parseFile","file","next","readFile","err","data","parse","toString","map","objs","merge","loadFilesSync","readFileSync","store","forEach","obj","Object","keys","capitalize","str","toUpperCase","parseValues","value","val","JSON","ignore","transform","fn","pairs","result","error","Error","stringify","name","filter","pair","reduce","accumulator"],"sourceRoot":"C:\\code\\FluidFramework5\\node_modules\\.pnpm\\nconf@0.12.0\\node_modules\\nconf\\lib\\nconf\\","sources":["common.js"],"sourcesContent":["/*\n * utils.js: Utility functions for the nconf module.\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar fs = require('fs'),\n    async = require('async'),\n    formats = require('./formats'),\n    Memory = require('./stores/memory').Memory;\n\nvar common = exports;\n\n//\n// ### function path (key)\n// #### @key {string} The ':' delimited key to split\n// Returns a fully-qualified path to a nested nconf key.\n// If given null or undefined it should return an empty path.\n// '' should still be respected as a path.\n//\ncommon.path = function (key, separator) {\n  separator = separator || ':';\n  return key == null ? [] : key.split(separator);\n};\n\n//\n// ### function key (arguments)\n// Returns a `:` joined string from the `arguments`.\n//\ncommon.key = function () {\n  return Array.prototype.slice.call(arguments).join(':');\n};\n\n//\n// ### function key (arguments)\n// Returns a joined string from the `arguments`,\n// first argument is the join delimiter.\n//\ncommon.keyed = function () {\n  return Array.prototype.slice.call(arguments, 1).join(arguments[0]);\n};\n\n//\n// ### function loadFiles (files, callback)\n// #### @files {Object|Array} List of files (or settings object) to load.\n// #### @callback {function} Continuation to respond to when complete.\n// Loads all the data in the specified `files`.\n//\ncommon.loadFiles = function (files, callback) {\n  if (!files) {\n    return callback(null, {});\n  }\n\n  var options = Array.isArray(files) ? { files: files } : files;\n\n  //\n  // Set the default JSON format if not already\n  // specified\n  //\n  options.format = options.format || formats.json;\n\n  function parseFile (file, next) {\n    fs.readFile(file, function (err, data) {\n      return !err\n        ? next(null, options.format.parse(data.toString()))\n        : next(err);\n    });\n  }\n\n  async.map(options.files, parseFile, function (err, objs) {\n    return err ? callback(err) : callback(null, common.merge(objs));\n  });\n};\n\n//\n// ### function loadFilesSync (files)\n// #### @files {Object|Array} List of files (or settings object) to load.\n// Loads all the data in the specified `files` synchronously.\n//\ncommon.loadFilesSync = function (files) {\n  if (!files) {\n    return;\n  }\n\n  //\n  // Set the default JSON format if not already\n  // specified\n  //\n  var options = Array.isArray(files) ? { files: files } : files;\n  options.format = options.format || formats.json;\n\n  return common.merge(options.files.map(function (file) {\n    return options.format.parse(fs.readFileSync(file, 'utf8'));\n  }));\n};\n\n//\n// ### function merge (objs)\n// #### @objs {Array} Array of object literals to merge\n// Merges the specified `objs` using a temporary instance\n// of `stores.Memory`.\n//\ncommon.merge = function (objs) {\n  var store = new Memory();\n\n  objs.forEach(function (obj) {\n    Object.keys(obj).forEach(function (key) {\n      store.merge(key, obj[key]);\n    });\n  });\n\n  return store.store;\n};\n\n//\n// ### function capitalize (str)\n// #### @str {string} String to capitalize\n// Capitalizes the specified `str`.\n//\ncommon.capitalize = function (str) {\n  return str && str[0].toUpperCase() + str.slice(1);\n};\n\n//\n// ### function parseValues (any)\n// #### @any {string} String to parse as native data-type or return as is\n// try to parse `any` as a native data-type\n//\ncommon.parseValues = function (value) {\n  var val = value;\n  \n  try {\n    val = JSON.parse(value);\n  } catch (ignore) {\n    // Check for any other well-known strings that should be \"parsed\"\n    if (value === 'undefined'){\n      val = void 0;\n    }\n  }\n\n  return val;\n};\n\n//\n// ### function transform(map, fn)\n// #### @map {object} Object of key/value pairs to apply `fn` to\n// #### @fn {function} Transformation function that will be applied to every key/value pair\n// transform a set of key/value pairs and return the transformed result\ncommon.transform = function(map, fn) {\n  var pairs = Object.keys(map).map(function(key) {\n    var obj = { key: key, value: map[key]};\n    var result = fn.call(null, obj);\n\n    if (!result) {\n      return null;\n    } else if (result.key) {\n      return result;\n    }\n\n    var error = new Error('Transform function passed to store returned an invalid format: ' + JSON.stringify(result));\n    error.name = 'RuntimeError';\n    throw error;\n  });\n\n\n  return pairs\n    .filter(function(pair) {\n      return pair !== null;\n    })\n    .reduce(function(accumulator, pair) {\n      accumulator[pair.key] = pair.value;\n      return accumulator;\n    }, {});\n}\n"],"mappings":"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"}},"mtime":1674865250449},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\async@3.2.4\\\\node_modules\\\\async\\\\dist\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\async@3.2.4\\\\node_modules\\\\async\\\\dist\\\\async.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.22.6:development":{"value":{"code":"\"use strict\";\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.async = {});\n})(void 0, function (exports) {\n  'use strict';\n\n  /**\n   * Creates a continuation function with some arguments already applied.\n   *\n   * Useful as a shorthand when combined with other control flow functions. Any\n   * arguments passed to the returned function are added to the arguments\n   * originally passed to apply.\n   *\n   * @name apply\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {Function} fn - The function you want to eventually apply all\n   * arguments to. Invokes with (arguments...).\n   * @param {...*} arguments... - Any number of arguments to automatically apply\n   * when the continuation is called.\n   * @returns {Function} the partially-applied function\n   * @example\n   *\n   * // using apply\n   * async.parallel([\n   *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n   *     async.apply(fs.writeFile, 'testfile2', 'test2')\n   * ]);\n   *\n   *\n   * // the same process without using apply\n   * async.parallel([\n   *     function(callback) {\n   *         fs.writeFile('testfile1', 'test1', callback);\n   *     },\n   *     function(callback) {\n   *         fs.writeFile('testfile2', 'test2', callback);\n   *     }\n   * ]);\n   *\n   * // It's possible to pass any number of additional arguments when calling the\n   * // continuation:\n   *\n   * node> var fn = async.apply(sys.puts, 'one');\n   * node> fn('two', 'three');\n   * one\n   * two\n   * three\n   */\n  function apply(fn, ...args) {\n    return (...callArgs) => fn(...args, ...callArgs);\n  }\n  function initialParams(fn) {\n    return function (...args /*, callback*/) {\n      var callback = args.pop();\n      return fn.call(this, args, callback);\n    };\n  }\n\n  /* istanbul ignore file */\n\n  var hasQueueMicrotask = typeof queueMicrotask === 'function' && queueMicrotask;\n  var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\n  var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n  function fallback(fn) {\n    setTimeout(fn, 0);\n  }\n  function wrap(defer) {\n    return (fn, ...args) => defer(() => fn(...args));\n  }\n  var _defer;\n  if (hasQueueMicrotask) {\n    _defer = queueMicrotask;\n  } else if (hasSetImmediate) {\n    _defer = setImmediate;\n  } else if (hasNextTick) {\n    _defer = process.nextTick;\n  } else {\n    _defer = fallback;\n  }\n  var setImmediate$1 = wrap(_defer);\n\n  /**\n   * Take a sync function and make it async, passing its return value to a\n   * callback. This is useful for plugging sync functions into a waterfall,\n   * series, or other async functions. Any arguments passed to the generated\n   * function will be passed to the wrapped function (except for the final\n   * callback argument). Errors thrown will be passed to the callback.\n   *\n   * If the function passed to `asyncify` returns a Promise, that promises's\n   * resolved/rejected state will be used to call the callback, rather than simply\n   * the synchronous return value.\n   *\n   * This also means you can asyncify ES2017 `async` functions.\n   *\n   * @name asyncify\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @alias wrapSync\n   * @category Util\n   * @param {Function} func - The synchronous function, or Promise-returning\n   * function to convert to an {@link AsyncFunction}.\n   * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n   * invoked with `(args..., callback)`.\n   * @example\n   *\n   * // passing a regular synchronous function\n   * async.waterfall([\n   *     async.apply(fs.readFile, filename, \"utf8\"),\n   *     async.asyncify(JSON.parse),\n   *     function (data, next) {\n   *         // data is the result of parsing the text.\n   *         // If there was a parsing error, it would have been caught.\n   *     }\n   * ], callback);\n   *\n   * // passing a function returning a promise\n   * async.waterfall([\n   *     async.apply(fs.readFile, filename, \"utf8\"),\n   *     async.asyncify(function (contents) {\n   *         return db.model.create(contents);\n   *     }),\n   *     function (model, next) {\n   *         // `model` is the instantiated model object.\n   *         // If there was an error, this function would be skipped.\n   *     }\n   * ], callback);\n   *\n   * // es2017 example, though `asyncify` is not needed if your JS environment\n   * // supports async functions out of the box\n   * var q = async.queue(async.asyncify(async function(file) {\n   *     var intermediateStep = await processFile(file);\n   *     return await somePromise(intermediateStep)\n   * }));\n   *\n   * q.push(files);\n   */\n  function asyncify(func) {\n    if (isAsync(func)) {\n      return function (...args /*, callback*/) {\n        const callback = args.pop();\n        const promise = func.apply(this, args);\n        return handlePromise(promise, callback);\n      };\n    }\n    return initialParams(function (args, callback) {\n      var result;\n      try {\n        result = func.apply(this, args);\n      } catch (e) {\n        return callback(e);\n      }\n      // if result is Promise object\n      if (result && typeof result.then === 'function') {\n        return handlePromise(result, callback);\n      } else {\n        callback(null, result);\n      }\n    });\n  }\n  function handlePromise(promise, callback) {\n    return promise.then(value => {\n      invokeCallback(callback, null, value);\n    }, err => {\n      invokeCallback(callback, err && err.message ? err : new Error(err));\n    });\n  }\n  function invokeCallback(callback, error, value) {\n    try {\n      callback(error, value);\n    } catch (err) {\n      setImmediate$1(e => {\n        throw e;\n      }, err);\n    }\n  }\n  function isAsync(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncFunction';\n  }\n  function isAsyncGenerator(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncGenerator';\n  }\n  function isAsyncIterable(obj) {\n    return typeof obj[Symbol.asyncIterator] === 'function';\n  }\n  function wrapAsync(asyncFn) {\n    if (typeof asyncFn !== 'function') throw new Error('expected a function');\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n  }\n\n  // conditionally promisify a function.\n  // only return a promise if a callback is omitted\n  function awaitify(asyncFn, arity = asyncFn.length) {\n    if (!arity) throw new Error('arity is undefined');\n    function awaitable(...args) {\n      if (typeof args[arity - 1] === 'function') {\n        return asyncFn.apply(this, args);\n      }\n      return new Promise((resolve, reject) => {\n        args[arity - 1] = (err, ...cbArgs) => {\n          if (err) return reject(err);\n          resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);\n        };\n        asyncFn.apply(this, args);\n      });\n    }\n    return awaitable;\n  }\n  function applyEach(eachfn) {\n    return function applyEach(fns, ...callArgs) {\n      const go = awaitify(function (callback) {\n        var that = this;\n        return eachfn(fns, (fn, cb) => {\n          wrapAsync(fn).apply(that, callArgs.concat(cb));\n        }, callback);\n      });\n      return go;\n    };\n  }\n  function _asyncMap(eachfn, arr, iteratee, callback) {\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n    var _iteratee = wrapAsync(iteratee);\n    return eachfn(arr, (value, _, iterCb) => {\n      var index = counter++;\n      _iteratee(value, (err, v) => {\n        results[index] = v;\n        iterCb(err);\n      });\n    }, err => {\n      callback(err, results);\n    });\n  }\n  function isArrayLike(value) {\n    return value && typeof value.length === 'number' && value.length >= 0 && value.length % 1 === 0;\n  }\n\n  // A temporary value used to identify if the loop should be broken.\n  // See #1064, #1293\n  const breakLoop = {};\n  function once(fn) {\n    function wrapper(...args) {\n      if (fn === null) return;\n      var callFn = fn;\n      fn = null;\n      callFn.apply(this, args);\n    }\n    Object.assign(wrapper, fn);\n    return wrapper;\n  }\n  function getIterator(coll) {\n    return coll[Symbol.iterator] && coll[Symbol.iterator]();\n  }\n  function createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n      return ++i < len ? {\n        value: coll[i],\n        key: i\n      } : null;\n    };\n  }\n  function createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n      var item = iterator.next();\n      if (item.done) return null;\n      i++;\n      return {\n        value: item.value,\n        key: i\n      };\n    };\n  }\n  function createObjectIterator(obj) {\n    var okeys = obj ? Object.keys(obj) : [];\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n      var key = okeys[++i];\n      if (key === '__proto__') {\n        return next();\n      }\n      return i < len ? {\n        value: obj[key],\n        key\n      } : null;\n    };\n  }\n  function createIterator(coll) {\n    if (isArrayLike(coll)) {\n      return createArrayIterator(coll);\n    }\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n  }\n  function onlyOnce(fn) {\n    return function (...args) {\n      if (fn === null) throw new Error(\"Callback was already called.\");\n      var callFn = fn;\n      fn = null;\n      callFn.apply(this, args);\n    };\n  }\n\n  // for async generators\n  function asyncEachOfLimit(generator, limit, iteratee, callback) {\n    let done = false;\n    let canceled = false;\n    let awaiting = false;\n    let running = 0;\n    let idx = 0;\n    function replenish() {\n      //console.log('replenish')\n      if (running >= limit || awaiting || done) return;\n      //console.log('replenish awaiting')\n      awaiting = true;\n      generator.next().then(({\n        value,\n        done: iterDone\n      }) => {\n        //console.log('got value', value)\n        if (canceled || done) return;\n        awaiting = false;\n        if (iterDone) {\n          done = true;\n          if (running <= 0) {\n            //console.log('done nextCb')\n            callback(null);\n          }\n          return;\n        }\n        running++;\n        iteratee(value, idx, iterateeCallback);\n        idx++;\n        replenish();\n      }).catch(handleError);\n    }\n    function iterateeCallback(err, result) {\n      //console.log('iterateeCallback')\n      running -= 1;\n      if (canceled) return;\n      if (err) return handleError(err);\n      if (err === false) {\n        done = true;\n        canceled = true;\n        return;\n      }\n      if (result === breakLoop || done && running <= 0) {\n        done = true;\n        //console.log('done iterCb')\n        return callback(null);\n      }\n      replenish();\n    }\n    function handleError(err) {\n      if (canceled) return;\n      awaiting = false;\n      done = true;\n      callback(err);\n    }\n    replenish();\n  }\n  var eachOfLimit = limit => {\n    return (obj, iteratee, callback) => {\n      callback = once(callback);\n      if (limit <= 0) {\n        throw new RangeError('concurrency limit cannot be less than 1');\n      }\n      if (!obj) {\n        return callback(null);\n      }\n      if (isAsyncGenerator(obj)) {\n        return asyncEachOfLimit(obj, limit, iteratee, callback);\n      }\n      if (isAsyncIterable(obj)) {\n        return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback);\n      }\n      var nextElem = createIterator(obj);\n      var done = false;\n      var canceled = false;\n      var running = 0;\n      var looping = false;\n      function iterateeCallback(err, value) {\n        if (canceled) return;\n        running -= 1;\n        if (err) {\n          done = true;\n          callback(err);\n        } else if (err === false) {\n          done = true;\n          canceled = true;\n        } else if (value === breakLoop || done && running <= 0) {\n          done = true;\n          return callback(null);\n        } else if (!looping) {\n          replenish();\n        }\n      }\n      function replenish() {\n        looping = true;\n        while (running < limit && !done) {\n          var elem = nextElem();\n          if (elem === null) {\n            done = true;\n            if (running <= 0) {\n              callback(null);\n            }\n            return;\n          }\n          running += 1;\n          iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n        }\n        looping = false;\n      }\n      replenish();\n    };\n  };\n\n  /**\n   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name eachOfLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.eachOf]{@link module:Collections.eachOf}\n   * @alias forEachOfLimit\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async function to apply to each\n   * item in `coll`. The `key` is the item's key, or index in the case of an\n   * array.\n   * Invoked with (item, key, callback).\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   * @returns {Promise} a promise, if a callback is omitted\n   */\n  function eachOfLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n  }\n  var eachOfLimit$2 = awaitify(eachOfLimit$1, 4);\n\n  // eachOf implementation optimized for array-likes\n  function eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback);\n    var index = 0,\n      completed = 0,\n      {\n        length\n      } = coll,\n      canceled = false;\n    if (length === 0) {\n      callback(null);\n    }\n    function iteratorCallback(err, value) {\n      if (err === false) {\n        canceled = true;\n      }\n      if (canceled === true) return;\n      if (err) {\n        callback(err);\n      } else if (++completed === length || value === breakLoop) {\n        callback(null);\n      }\n    }\n    for (; index < length; index++) {\n      iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n  }\n\n  // a generic version of eachOf which can handle array, object, and iterator cases.\n  function eachOfGeneric(coll, iteratee, callback) {\n    return eachOfLimit$2(coll, Infinity, iteratee, callback);\n  }\n\n  /**\n   * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n   * to the iteratee.\n   *\n   * @name eachOf\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias forEachOf\n   * @category Collection\n   * @see [async.each]{@link module:Collections.each}\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A function to apply to each\n   * item in `coll`.\n   * The `key` is the item's key, or index in the case of an array.\n   * Invoked with (item, key, callback).\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   * @returns {Promise} a promise, if a callback is omitted\n   * @example\n   *\n   * // dev.json is a file containing a valid json object config for dev environment\n   * // dev.json is a file containing a valid json object config for test environment\n   * // prod.json is a file containing a valid json object config for prod environment\n   * // invalid.json is a file with a malformed json object\n   *\n   * let configs = {}; //global variable\n   * let validConfigFileMap = {dev: 'dev.json', test: 'test.json', prod: 'prod.json'};\n   * let invalidConfigFileMap = {dev: 'dev.json', test: 'test.json', invalid: 'invalid.json'};\n   *\n   * // asynchronous function that reads a json file and parses the contents as json object\n   * function parseFile(file, key, callback) {\n   *     fs.readFile(file, \"utf8\", function(err, data) {\n   *         if (err) return calback(err);\n   *         try {\n   *             configs[key] = JSON.parse(data);\n   *         } catch (e) {\n   *             return callback(e);\n   *         }\n   *         callback();\n   *     });\n   * }\n   *\n   * // Using callbacks\n   * async.forEachOf(validConfigFileMap, parseFile, function (err) {\n   *     if (err) {\n   *         console.error(err);\n   *     } else {\n   *         console.log(configs);\n   *         // configs is now a map of JSON data, e.g.\n   *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n   *     }\n   * });\n   *\n   * //Error handing\n   * async.forEachOf(invalidConfigFileMap, parseFile, function (err) {\n   *     if (err) {\n   *         console.error(err);\n   *         // JSON parse error exception\n   *     } else {\n   *         console.log(configs);\n   *     }\n   * });\n   *\n   * // Using Promises\n   * async.forEachOf(validConfigFileMap, parseFile)\n   * .then( () => {\n   *     console.log(configs);\n   *     // configs is now a map of JSON data, e.g.\n   *     // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n   * }).catch( err => {\n   *     console.error(err);\n   * });\n   *\n   * //Error handing\n   * async.forEachOf(invalidConfigFileMap, parseFile)\n   * .then( () => {\n   *     console.log(configs);\n   * }).catch( err => {\n   *     console.error(err);\n   *     // JSON parse error exception\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let result = await async.forEachOf(validConfigFileMap, parseFile);\n   *         console.log(configs);\n   *         // configs is now a map of JSON data, e.g.\n   *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * //Error handing\n   * async () => {\n   *     try {\n   *         let result = await async.forEachOf(invalidConfigFileMap, parseFile);\n   *         console.log(configs);\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *         // JSON parse error exception\n   *     }\n   * }\n   *\n   */\n  function eachOf(coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    return eachOfImplementation(coll, wrapAsync(iteratee), callback);\n  }\n  var eachOf$1 = awaitify(eachOf, 3);\n\n  /**\n   * Produces a new collection of values by mapping each value in `coll` through\n   * the `iteratee` function. The `iteratee` is called with an item from `coll`\n   * and a callback for when it has finished processing. Each of these callbacks\n   * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n   * `iteratee` passes an error to its callback, the main `callback` (for the\n   * `map` function) is immediately called with the error.\n   *\n   * Note, that since this function applies the `iteratee` to each item in\n   * parallel, there is no guarantee that the `iteratee` functions will complete\n   * in order. However, the results array will be in the same order as the\n   * original `coll`.\n   *\n   * If `map` is passed an Object, the results will be an Array.  The results\n   * will roughly be in the order of the original Objects' keys (but this can\n   * vary across JavaScript engines).\n   *\n   * @name map\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with the transformed item.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Results is an Array of the\n   * transformed items from the `coll`. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback is passed\n   * @example\n   *\n   * // file1.txt is a file that is 1000 bytes in size\n   * // file2.txt is a file that is 2000 bytes in size\n   * // file3.txt is a file that is 3000 bytes in size\n   * // file4.txt does not exist\n   *\n   * const fileList = ['file1.txt','file2.txt','file3.txt'];\n   * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n   *\n   * // asynchronous function that returns the file size in bytes\n   * function getFileSizeInBytes(file, callback) {\n   *     fs.stat(file, function(err, stat) {\n   *         if (err) {\n   *             return callback(err);\n   *         }\n   *         callback(null, stat.size);\n   *     });\n   * }\n   *\n   * // Using callbacks\n   * async.map(fileList, getFileSizeInBytes, function(err, results) {\n   *     if (err) {\n   *         console.log(err);\n   *     } else {\n   *         console.log(results);\n   *         // results is now an array of the file size in bytes for each file, e.g.\n   *         // [ 1000, 2000, 3000]\n   *     }\n   * });\n   *\n   * // Error Handling\n   * async.map(withMissingFileList, getFileSizeInBytes, function(err, results) {\n   *     if (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *     } else {\n   *         console.log(results);\n   *     }\n   * });\n   *\n   * // Using Promises\n   * async.map(fileList, getFileSizeInBytes)\n   * .then( results => {\n   *     console.log(results);\n   *     // results is now an array of the file size in bytes for each file, e.g.\n   *     // [ 1000, 2000, 3000]\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * // Error Handling\n   * async.map(withMissingFileList, getFileSizeInBytes)\n   * .then( results => {\n   *     console.log(results);\n   * }).catch( err => {\n   *     console.log(err);\n   *     // [ Error: ENOENT: no such file or directory ]\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let results = await async.map(fileList, getFileSizeInBytes);\n   *         console.log(results);\n   *         // results is now an array of the file size in bytes for each file, e.g.\n   *         // [ 1000, 2000, 3000]\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * // Error Handling\n   * async () => {\n   *     try {\n   *         let results = await async.map(withMissingFileList, getFileSizeInBytes);\n   *         console.log(results);\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *     }\n   * }\n   *\n   */\n  function map(coll, iteratee, callback) {\n    return _asyncMap(eachOf$1, coll, iteratee, callback);\n  }\n  var map$1 = awaitify(map, 3);\n\n  /**\n   * Applies the provided arguments to each function in the array, calling\n   * `callback` after all functions have completed. If you only provide the first\n   * argument, `fns`, then it will return a function which lets you pass in the\n   * arguments as if it were a single function call. If more arguments are\n   * provided, `callback` is required while `args` is still optional. The results\n   * for each of the applied async functions are passed to the final callback\n   * as an array.\n   *\n   * @name applyEach\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n   * to all call with the same arguments\n   * @param {...*} [args] - any number of separate arguments to pass to the\n   * function.\n   * @param {Function} [callback] - the final argument should be the callback,\n   * called when all functions have completed processing.\n   * @returns {AsyncFunction} - Returns a function that takes no args other than\n   * an optional callback, that is the result of applying the `args` to each\n   * of the functions.\n   * @example\n   *\n   * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')\n   *\n   * appliedFn((err, results) => {\n   *     // results[0] is the results for `enableSearch`\n   *     // results[1] is the results for `updateSchema`\n   * });\n   *\n   * // partial application example:\n   * async.each(\n   *     buckets,\n   *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),\n   *     callback\n   * );\n   */\n  var applyEach$1 = applyEach(map$1);\n\n  /**\n   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n   *\n   * @name eachOfSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.eachOf]{@link module:Collections.eachOf}\n   * @alias forEachOfSeries\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * Invoked with (item, key, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Invoked with (err).\n   * @returns {Promise} a promise, if a callback is omitted\n   */\n  function eachOfSeries(coll, iteratee, callback) {\n    return eachOfLimit$2(coll, 1, iteratee, callback);\n  }\n  var eachOfSeries$1 = awaitify(eachOfSeries, 3);\n\n  /**\n   * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n   *\n   * @name mapSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.map]{@link module:Collections.map}\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with the transformed item.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Results is an array of the\n   * transformed items from the `coll`. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback is passed\n   */\n  function mapSeries(coll, iteratee, callback) {\n    return _asyncMap(eachOfSeries$1, coll, iteratee, callback);\n  }\n  var mapSeries$1 = awaitify(mapSeries, 3);\n\n  /**\n   * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n   *\n   * @name applyEachSeries\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n   * @category Control Flow\n   * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all\n   * call with the same arguments\n   * @param {...*} [args] - any number of separate arguments to pass to the\n   * function.\n   * @param {Function} [callback] - the final argument should be the callback,\n   * called when all functions have completed processing.\n   * @returns {AsyncFunction} - A function, that when called, is the result of\n   * appling the `args` to the list of functions.  It takes no args, other than\n   * a callback.\n   */\n  var applyEachSeries = applyEach(mapSeries$1);\n  const PROMISE_SYMBOL = Symbol('promiseCallback');\n  function promiseCallback() {\n    let resolve, reject;\n    function callback(err, ...args) {\n      if (err) return reject(err);\n      resolve(args.length > 1 ? args : args[0]);\n    }\n    callback[PROMISE_SYMBOL] = new Promise((res, rej) => {\n      resolve = res, reject = rej;\n    });\n    return callback;\n  }\n\n  /**\n   * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n   * their requirements. Each function can optionally depend on other functions\n   * being completed first, and each function is run as soon as its requirements\n   * are satisfied.\n   *\n   * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n   * will stop. Further tasks will not execute (so any other functions depending\n   * on it will not run), and the main `callback` is immediately called with the\n   * error.\n   *\n   * {@link AsyncFunction}s also receive an object containing the results of functions which\n   * have completed so far as the first argument, if they have dependencies. If a\n   * task function has no dependencies, it will only be passed a callback.\n   *\n   * @name auto\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Object} tasks - An object. Each of its properties is either a\n   * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n   * in the array. The object's key of a property serves as the name of the task\n   * defined by that property, i.e. can be used when specifying requirements for\n   * other tasks. The function receives one or two arguments:\n   * * a `results` object, containing the results of the previously executed\n   *   functions, only passed if the task has any dependencies,\n   * * a `callback(err, result)` function, which must be called when finished,\n   *   passing an `error` (which can be `null`) and the result of the function's\n   *   execution.\n   * @param {number} [concurrency=Infinity] - An optional `integer` for\n   * determining the maximum number of tasks that can be run in parallel. By\n   * default, as many as possible.\n   * @param {Function} [callback] - An optional callback which is called when all\n   * the tasks have been completed. It receives the `err` argument if any `tasks`\n   * pass an error to their callback. Results are always returned; however, if an\n   * error occurs, no further `tasks` will be performed, and the results object\n   * will only contain partial results. Invoked with (err, results).\n   * @returns {Promise} a promise, if a callback is not passed\n   * @example\n   *\n   * //Using Callbacks\n   * async.auto({\n   *     get_data: function(callback) {\n   *         // async code to get some data\n   *         callback(null, 'data', 'converted to array');\n   *     },\n   *     make_folder: function(callback) {\n   *         // async code to create a directory to store a file in\n   *         // this is run at the same time as getting the data\n   *         callback(null, 'folder');\n   *     },\n   *     write_file: ['get_data', 'make_folder', function(results, callback) {\n   *         // once there is some data and the directory exists,\n   *         // write the data to a file in the directory\n   *         callback(null, 'filename');\n   *     }],\n   *     email_link: ['write_file', function(results, callback) {\n   *         // once the file is written let's email a link to it...\n   *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n   *     }]\n   * }, function(err, results) {\n   *     if (err) {\n   *         console.log('err = ', err);\n   *     }\n   *     console.log('results = ', results);\n   *     // results = {\n   *     //     get_data: ['data', 'converted to array']\n   *     //     make_folder; 'folder',\n   *     //     write_file: 'filename'\n   *     //     email_link: { file: 'filename', email: 'user@example.com' }\n   *     // }\n   * });\n   *\n   * //Using Promises\n   * async.auto({\n   *     get_data: function(callback) {\n   *         console.log('in get_data');\n   *         // async code to get some data\n   *         callback(null, 'data', 'converted to array');\n   *     },\n   *     make_folder: function(callback) {\n   *         console.log('in make_folder');\n   *         // async code to create a directory to store a file in\n   *         // this is run at the same time as getting the data\n   *         callback(null, 'folder');\n   *     },\n   *     write_file: ['get_data', 'make_folder', function(results, callback) {\n   *         // once there is some data and the directory exists,\n   *         // write the data to a file in the directory\n   *         callback(null, 'filename');\n   *     }],\n   *     email_link: ['write_file', function(results, callback) {\n   *         // once the file is written let's email a link to it...\n   *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n   *     }]\n   * }).then(results => {\n   *     console.log('results = ', results);\n   *     // results = {\n   *     //     get_data: ['data', 'converted to array']\n   *     //     make_folder; 'folder',\n   *     //     write_file: 'filename'\n   *     //     email_link: { file: 'filename', email: 'user@example.com' }\n   *     // }\n   * }).catch(err => {\n   *     console.log('err = ', err);\n   * });\n   *\n   * //Using async/await\n   * async () => {\n   *     try {\n   *         let results = await async.auto({\n   *             get_data: function(callback) {\n   *                 // async code to get some data\n   *                 callback(null, 'data', 'converted to array');\n   *             },\n   *             make_folder: function(callback) {\n   *                 // async code to create a directory to store a file in\n   *                 // this is run at the same time as getting the data\n   *                 callback(null, 'folder');\n   *             },\n   *             write_file: ['get_data', 'make_folder', function(results, callback) {\n   *                 // once there is some data and the directory exists,\n   *                 // write the data to a file in the directory\n   *                 callback(null, 'filename');\n   *             }],\n   *             email_link: ['write_file', function(results, callback) {\n   *                 // once the file is written let's email a link to it...\n   *                 callback(null, {'file':results.write_file, 'email':'user@example.com'});\n   *             }]\n   *         });\n   *         console.log('results = ', results);\n   *         // results = {\n   *         //     get_data: ['data', 'converted to array']\n   *         //     make_folder; 'folder',\n   *         //     write_file: 'filename'\n   *         //     email_link: { file: 'filename', email: 'user@example.com' }\n   *         // }\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n  function auto(tasks, concurrency, callback) {\n    if (typeof concurrency !== 'number') {\n      // concurrency is optional, shift the args.\n      callback = concurrency;\n      concurrency = null;\n    }\n    callback = once(callback || promiseCallback());\n    var numTasks = Object.keys(tasks).length;\n    if (!numTasks) {\n      return callback(null);\n    }\n    if (!concurrency) {\n      concurrency = numTasks;\n    }\n    var results = {};\n    var runningTasks = 0;\n    var canceled = false;\n    var hasError = false;\n    var listeners = Object.create(null);\n    var readyTasks = [];\n\n    // for cycle detection:\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n    var uncheckedDependencies = {};\n    Object.keys(tasks).forEach(key => {\n      var task = tasks[key];\n      if (!Array.isArray(task)) {\n        // no dependencies\n        enqueueTask(key, [task]);\n        readyToCheck.push(key);\n        return;\n      }\n      var dependencies = task.slice(0, task.length - 1);\n      var remainingDependencies = dependencies.length;\n      if (remainingDependencies === 0) {\n        enqueueTask(key, task);\n        readyToCheck.push(key);\n        return;\n      }\n      uncheckedDependencies[key] = remainingDependencies;\n      dependencies.forEach(dependencyName => {\n        if (!tasks[dependencyName]) {\n          throw new Error('async.auto task `' + key + '` has a non-existent dependency `' + dependencyName + '` in ' + dependencies.join(', '));\n        }\n        addListener(dependencyName, () => {\n          remainingDependencies--;\n          if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n          }\n        });\n      });\n    });\n    checkForDeadlocks();\n    processQueue();\n    function enqueueTask(key, task) {\n      readyTasks.push(() => runTask(key, task));\n    }\n    function processQueue() {\n      if (canceled) return;\n      if (readyTasks.length === 0 && runningTasks === 0) {\n        return callback(null, results);\n      }\n      while (readyTasks.length && runningTasks < concurrency) {\n        var run = readyTasks.shift();\n        run();\n      }\n    }\n    function addListener(taskName, fn) {\n      var taskListeners = listeners[taskName];\n      if (!taskListeners) {\n        taskListeners = listeners[taskName] = [];\n      }\n      taskListeners.push(fn);\n    }\n    function taskComplete(taskName) {\n      var taskListeners = listeners[taskName] || [];\n      taskListeners.forEach(fn => fn());\n      processQueue();\n    }\n    function runTask(key, task) {\n      if (hasError) return;\n      var taskCallback = onlyOnce((err, ...result) => {\n        runningTasks--;\n        if (err === false) {\n          canceled = true;\n          return;\n        }\n        if (result.length < 2) {\n          [result] = result;\n        }\n        if (err) {\n          var safeResults = {};\n          Object.keys(results).forEach(rkey => {\n            safeResults[rkey] = results[rkey];\n          });\n          safeResults[key] = result;\n          hasError = true;\n          listeners = Object.create(null);\n          if (canceled) return;\n          callback(err, safeResults);\n        } else {\n          results[key] = result;\n          taskComplete(key);\n        }\n      });\n      runningTasks++;\n      var taskFn = wrapAsync(task[task.length - 1]);\n      if (task.length > 1) {\n        taskFn(results, taskCallback);\n      } else {\n        taskFn(taskCallback);\n      }\n    }\n    function checkForDeadlocks() {\n      // Kahn's algorithm\n      // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n      // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n      var currentTask;\n      var counter = 0;\n      while (readyToCheck.length) {\n        currentTask = readyToCheck.pop();\n        counter++;\n        getDependents(currentTask).forEach(dependent => {\n          if (--uncheckedDependencies[dependent] === 0) {\n            readyToCheck.push(dependent);\n          }\n        });\n      }\n      if (counter !== numTasks) {\n        throw new Error('async.auto cannot execute tasks due to a recursive dependency');\n      }\n    }\n    function getDependents(taskName) {\n      var result = [];\n      Object.keys(tasks).forEach(key => {\n        const task = tasks[key];\n        if (Array.isArray(task) && task.indexOf(taskName) >= 0) {\n          result.push(key);\n        }\n      });\n      return result;\n    }\n    return callback[PROMISE_SYMBOL];\n  }\n  var FN_ARGS = /^(?:async\\s+)?(?:function)?\\s*\\w*\\s*\\(\\s*([^)]+)\\s*\\)(?:\\s*{)/;\n  var ARROW_FN_ARGS = /^(?:async\\s+)?\\(?\\s*([^)=]+)\\s*\\)?(?:\\s*=>)/;\n  var FN_ARG_SPLIT = /,/;\n  var FN_ARG = /(=.+)?(\\s*)$/;\n  function stripComments(string) {\n    let stripped = '';\n    let index = 0;\n    let endBlockComment = string.indexOf('*/');\n    while (index < string.length) {\n      if (string[index] === '/' && string[index + 1] === '/') {\n        // inline comment\n        let endIndex = string.indexOf('\\n', index);\n        index = endIndex === -1 ? string.length : endIndex;\n      } else if (endBlockComment !== -1 && string[index] === '/' && string[index + 1] === '*') {\n        // block comment\n        let endIndex = string.indexOf('*/', index);\n        if (endIndex !== -1) {\n          index = endIndex + 2;\n          endBlockComment = string.indexOf('*/', index);\n        } else {\n          stripped += string[index];\n          index++;\n        }\n      } else {\n        stripped += string[index];\n        index++;\n      }\n    }\n    return stripped;\n  }\n  function parseParams(func) {\n    const src = stripComments(func.toString());\n    let match = src.match(FN_ARGS);\n    if (!match) {\n      match = src.match(ARROW_FN_ARGS);\n    }\n    if (!match) throw new Error('could not parse args in autoInject\\nSource:\\n' + src);\n    let [, args] = match;\n    return args.replace(/\\s/g, '').split(FN_ARG_SPLIT).map(arg => arg.replace(FN_ARG, '').trim());\n  }\n\n  /**\n   * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n   * tasks are specified as parameters to the function, after the usual callback\n   * parameter, with the parameter names matching the names of the tasks it\n   * depends on. This can provide even more readable task graphs which can be\n   * easier to maintain.\n   *\n   * If a final callback is specified, the task results are similarly injected,\n   * specified as named parameters after the initial error parameter.\n   *\n   * The autoInject function is purely syntactic sugar and its semantics are\n   * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n   *\n   * @name autoInject\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.auto]{@link module:ControlFlow.auto}\n   * @category Control Flow\n   * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n   * the form 'func([dependencies...], callback). The object's key of a property\n   * serves as the name of the task defined by that property, i.e. can be used\n   * when specifying requirements for other tasks.\n   * * The `callback` parameter is a `callback(err, result)` which must be called\n   *   when finished, passing an `error` (which can be `null`) and the result of\n   *   the function's execution. The remaining parameters name other tasks on\n   *   which the task is dependent, and the results from those tasks are the\n   *   arguments of those parameters.\n   * @param {Function} [callback] - An optional callback which is called when all\n   * the tasks have been completed. It receives the `err` argument if any `tasks`\n   * pass an error to their callback, and a `results` object with any completed\n   * task results, similar to `auto`.\n   * @returns {Promise} a promise, if no callback is passed\n   * @example\n   *\n   * //  The example from `auto` can be rewritten as follows:\n   * async.autoInject({\n   *     get_data: function(callback) {\n   *         // async code to get some data\n   *         callback(null, 'data', 'converted to array');\n   *     },\n   *     make_folder: function(callback) {\n   *         // async code to create a directory to store a file in\n   *         // this is run at the same time as getting the data\n   *         callback(null, 'folder');\n   *     },\n   *     write_file: function(get_data, make_folder, callback) {\n   *         // once there is some data and the directory exists,\n   *         // write the data to a file in the directory\n   *         callback(null, 'filename');\n   *     },\n   *     email_link: function(write_file, callback) {\n   *         // once the file is written let's email a link to it...\n   *         // write_file contains the filename returned by write_file.\n   *         callback(null, {'file':write_file, 'email':'user@example.com'});\n   *     }\n   * }, function(err, results) {\n   *     console.log('err = ', err);\n   *     console.log('email_link = ', results.email_link);\n   * });\n   *\n   * // If you are using a JS minifier that mangles parameter names, `autoInject`\n   * // will not work with plain functions, since the parameter names will be\n   * // collapsed to a single letter identifier.  To work around this, you can\n   * // explicitly specify the names of the parameters your task function needs\n   * // in an array, similar to Angular.js dependency injection.\n   *\n   * // This still has an advantage over plain `auto`, since the results a task\n   * // depends on are still spread into arguments.\n   * async.autoInject({\n   *     //...\n   *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n   *         callback(null, 'filename');\n   *     }],\n   *     email_link: ['write_file', function(write_file, callback) {\n   *         callback(null, {'file':write_file, 'email':'user@example.com'});\n   *     }]\n   *     //...\n   * }, function(err, results) {\n   *     console.log('err = ', err);\n   *     console.log('email_link = ', results.email_link);\n   * });\n   */\n  function autoInject(tasks, callback) {\n    var newTasks = {};\n    Object.keys(tasks).forEach(key => {\n      var taskFn = tasks[key];\n      var params;\n      var fnIsAsync = isAsync(taskFn);\n      var hasNoDeps = !fnIsAsync && taskFn.length === 1 || fnIsAsync && taskFn.length === 0;\n      if (Array.isArray(taskFn)) {\n        params = [...taskFn];\n        taskFn = params.pop();\n        newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n      } else if (hasNoDeps) {\n        // no dependencies, use the function as-is\n        newTasks[key] = taskFn;\n      } else {\n        params = parseParams(taskFn);\n        if (taskFn.length === 0 && !fnIsAsync && params.length === 0) {\n          throw new Error(\"autoInject task functions require explicit parameters.\");\n        }\n\n        // remove callback param\n        if (!fnIsAsync) params.pop();\n        newTasks[key] = params.concat(newTask);\n      }\n      function newTask(results, taskCb) {\n        var newArgs = params.map(name => results[name]);\n        newArgs.push(taskCb);\n        wrapAsync(taskFn)(...newArgs);\n      }\n    });\n    return auto(newTasks, callback);\n  }\n\n  // Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n  // used for queues. This implementation assumes that the node provided by the user can be modified\n  // to adjust the next and last properties. We implement only the minimal functionality\n  // for queue support.\n  class DLL {\n    constructor() {\n      this.head = this.tail = null;\n      this.length = 0;\n    }\n    removeLink(node) {\n      if (node.prev) node.prev.next = node.next;else this.head = node.next;\n      if (node.next) node.next.prev = node.prev;else this.tail = node.prev;\n      node.prev = node.next = null;\n      this.length -= 1;\n      return node;\n    }\n    empty() {\n      while (this.head) this.shift();\n      return this;\n    }\n    insertAfter(node, newNode) {\n      newNode.prev = node;\n      newNode.next = node.next;\n      if (node.next) node.next.prev = newNode;else this.tail = newNode;\n      node.next = newNode;\n      this.length += 1;\n    }\n    insertBefore(node, newNode) {\n      newNode.prev = node.prev;\n      newNode.next = node;\n      if (node.prev) node.prev.next = newNode;else this.head = newNode;\n      node.prev = newNode;\n      this.length += 1;\n    }\n    unshift(node) {\n      if (this.head) this.insertBefore(this.head, node);else setInitial(this, node);\n    }\n    push(node) {\n      if (this.tail) this.insertAfter(this.tail, node);else setInitial(this, node);\n    }\n    shift() {\n      return this.head && this.removeLink(this.head);\n    }\n    pop() {\n      return this.tail && this.removeLink(this.tail);\n    }\n    toArray() {\n      return [...this];\n    }\n    *[Symbol.iterator]() {\n      var cur = this.head;\n      while (cur) {\n        yield cur.data;\n        cur = cur.next;\n      }\n    }\n    remove(testFn) {\n      var curr = this.head;\n      while (curr) {\n        var {\n          next\n        } = curr;\n        if (testFn(curr)) {\n          this.removeLink(curr);\n        }\n        curr = next;\n      }\n      return this;\n    }\n  }\n  function setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n  }\n  function queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n      concurrency = 1;\n    } else if (concurrency === 0) {\n      throw new RangeError('Concurrency must not be zero');\n    }\n    var _worker = wrapAsync(worker);\n    var numRunning = 0;\n    var workersList = [];\n    const events = {\n      error: [],\n      drain: [],\n      saturated: [],\n      unsaturated: [],\n      empty: []\n    };\n    function on(event, handler) {\n      events[event].push(handler);\n    }\n    function once(event, handler) {\n      const handleAndRemove = (...args) => {\n        off(event, handleAndRemove);\n        handler(...args);\n      };\n      events[event].push(handleAndRemove);\n    }\n    function off(event, handler) {\n      if (!event) return Object.keys(events).forEach(ev => events[ev] = []);\n      if (!handler) return events[event] = [];\n      events[event] = events[event].filter(ev => ev !== handler);\n    }\n    function trigger(event, ...args) {\n      events[event].forEach(handler => handler(...args));\n    }\n    var processingScheduled = false;\n    function _insert(data, insertAtFront, rejectOnError, callback) {\n      if (callback != null && typeof callback !== 'function') {\n        throw new Error('task callback must be a function');\n      }\n      q.started = true;\n      var res, rej;\n      function promiseCallback(err, ...args) {\n        // we don't care about the error, let the global error handler\n        // deal with it\n        if (err) return rejectOnError ? rej(err) : res();\n        if (args.length <= 1) return res(args[0]);\n        res(args);\n      }\n      var item = q._createTaskItem(data, rejectOnError ? promiseCallback : callback || promiseCallback);\n      if (insertAtFront) {\n        q._tasks.unshift(item);\n      } else {\n        q._tasks.push(item);\n      }\n      if (!processingScheduled) {\n        processingScheduled = true;\n        setImmediate$1(() => {\n          processingScheduled = false;\n          q.process();\n        });\n      }\n      if (rejectOnError || !callback) {\n        return new Promise((resolve, reject) => {\n          res = resolve;\n          rej = reject;\n        });\n      }\n    }\n    function _createCB(tasks) {\n      return function (err, ...args) {\n        numRunning -= 1;\n        for (var i = 0, l = tasks.length; i < l; i++) {\n          var task = tasks[i];\n          var index = workersList.indexOf(task);\n          if (index === 0) {\n            workersList.shift();\n          } else if (index > 0) {\n            workersList.splice(index, 1);\n          }\n          task.callback(err, ...args);\n          if (err != null) {\n            trigger('error', err, task.data);\n          }\n        }\n        if (numRunning <= q.concurrency - q.buffer) {\n          trigger('unsaturated');\n        }\n        if (q.idle()) {\n          trigger('drain');\n        }\n        q.process();\n      };\n    }\n    function _maybeDrain(data) {\n      if (data.length === 0 && q.idle()) {\n        // call drain immediately if there are no tasks\n        setImmediate$1(() => trigger('drain'));\n        return true;\n      }\n      return false;\n    }\n    const eventMethod = name => handler => {\n      if (!handler) {\n        return new Promise((resolve, reject) => {\n          once(name, (err, data) => {\n            if (err) return reject(err);\n            resolve(data);\n          });\n        });\n      }\n      off(name);\n      on(name, handler);\n    };\n    var isProcessing = false;\n    var q = {\n      _tasks: new DLL(),\n      _createTaskItem(data, callback) {\n        return {\n          data,\n          callback\n        };\n      },\n      *[Symbol.iterator]() {\n        yield* q._tasks[Symbol.iterator]();\n      },\n      concurrency,\n      payload,\n      buffer: concurrency / 4,\n      started: false,\n      paused: false,\n      push(data, callback) {\n        if (Array.isArray(data)) {\n          if (_maybeDrain(data)) return;\n          return data.map(datum => _insert(datum, false, false, callback));\n        }\n        return _insert(data, false, false, callback);\n      },\n      pushAsync(data, callback) {\n        if (Array.isArray(data)) {\n          if (_maybeDrain(data)) return;\n          return data.map(datum => _insert(datum, false, true, callback));\n        }\n        return _insert(data, false, true, callback);\n      },\n      kill() {\n        off();\n        q._tasks.empty();\n      },\n      unshift(data, callback) {\n        if (Array.isArray(data)) {\n          if (_maybeDrain(data)) return;\n          return data.map(datum => _insert(datum, true, false, callback));\n        }\n        return _insert(data, true, false, callback);\n      },\n      unshiftAsync(data, callback) {\n        if (Array.isArray(data)) {\n          if (_maybeDrain(data)) return;\n          return data.map(datum => _insert(datum, true, true, callback));\n        }\n        return _insert(data, true, true, callback);\n      },\n      remove(testFn) {\n        q._tasks.remove(testFn);\n      },\n      process() {\n        // Avoid trying to start too many processing operations. This can occur\n        // when callbacks resolve synchronously (#1267).\n        if (isProcessing) {\n          return;\n        }\n        isProcessing = true;\n        while (!q.paused && numRunning < q.concurrency && q._tasks.length) {\n          var tasks = [],\n            data = [];\n          var l = q._tasks.length;\n          if (q.payload) l = Math.min(l, q.payload);\n          for (var i = 0; i < l; i++) {\n            var node = q._tasks.shift();\n            tasks.push(node);\n            workersList.push(node);\n            data.push(node.data);\n          }\n          numRunning += 1;\n          if (q._tasks.length === 0) {\n            trigger('empty');\n          }\n          if (numRunning === q.concurrency) {\n            trigger('saturated');\n          }\n          var cb = onlyOnce(_createCB(tasks));\n          _worker(data, cb);\n        }\n        isProcessing = false;\n      },\n      length() {\n        return q._tasks.length;\n      },\n      running() {\n        return numRunning;\n      },\n      workersList() {\n        return workersList;\n      },\n      idle() {\n        return q._tasks.length + numRunning === 0;\n      },\n      pause() {\n        q.paused = true;\n      },\n      resume() {\n        if (q.paused === false) {\n          return;\n        }\n        q.paused = false;\n        setImmediate$1(q.process);\n      }\n    };\n    // define these as fixed properties, so people get useful errors when updating\n    Object.defineProperties(q, {\n      saturated: {\n        writable: false,\n        value: eventMethod('saturated')\n      },\n      unsaturated: {\n        writable: false,\n        value: eventMethod('unsaturated')\n      },\n      empty: {\n        writable: false,\n        value: eventMethod('empty')\n      },\n      drain: {\n        writable: false,\n        value: eventMethod('drain')\n      },\n      error: {\n        writable: false,\n        value: eventMethod('error')\n      }\n    });\n    return q;\n  }\n\n  /**\n   * Creates a `cargo` object with the specified payload. Tasks added to the\n   * cargo will be processed altogether (up to the `payload` limit). If the\n   * `worker` is in progress, the task is queued until it becomes available. Once\n   * the `worker` has completed some tasks, each callback of those tasks is\n   * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n   * for how `cargo` and `queue` work.\n   *\n   * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n   * at a time, cargo passes an array of tasks to a single worker, repeating\n   * when the worker is finished.\n   *\n   * @name cargo\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.queue]{@link module:ControlFlow.queue}\n   * @category Control Flow\n   * @param {AsyncFunction} worker - An asynchronous function for processing an array\n   * of queued tasks. Invoked with `(tasks, callback)`.\n   * @param {number} [payload=Infinity] - An optional `integer` for determining\n   * how many tasks should be processed per round; if omitted, the default is\n   * unlimited.\n   * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can\n   * attached as certain properties to listen for specific events during the\n   * lifecycle of the cargo and inner queue.\n   * @example\n   *\n   * // create a cargo object with payload 2\n   * var cargo = async.cargo(function(tasks, callback) {\n   *     for (var i=0; i<tasks.length; i++) {\n   *         console.log('hello ' + tasks[i].name);\n   *     }\n   *     callback();\n   * }, 2);\n   *\n   * // add some items\n   * cargo.push({name: 'foo'}, function(err) {\n   *     console.log('finished processing foo');\n   * });\n   * cargo.push({name: 'bar'}, function(err) {\n   *     console.log('finished processing bar');\n   * });\n   * await cargo.push({name: 'baz'});\n   * console.log('finished processing baz');\n   */\n  function cargo(worker, payload) {\n    return queue(worker, 1, payload);\n  }\n\n  /**\n   * Creates a `cargoQueue` object with the specified payload. Tasks added to the\n   * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.\n   * If the all `workers` are in progress, the task is queued until one becomes available. Once\n   * a `worker` has completed some tasks, each callback of those tasks is\n   * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n   * for how `cargo` and `queue` work.\n   *\n   * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n   * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,\n   * the cargoQueue passes an array of tasks to multiple parallel workers.\n   *\n   * @name cargoQueue\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.queue]{@link module:ControlFlow.queue}\n   * @see [async.cargo]{@link module:ControlFLow.cargo}\n   * @category Control Flow\n   * @param {AsyncFunction} worker - An asynchronous function for processing an array\n   * of queued tasks. Invoked with `(tasks, callback)`.\n   * @param {number} [concurrency=1] - An `integer` for determining how many\n   * `worker` functions should be run in parallel.  If omitted, the concurrency\n   * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n   * @param {number} [payload=Infinity] - An optional `integer` for determining\n   * how many tasks should be processed per round; if omitted, the default is\n   * unlimited.\n   * @returns {module:ControlFlow.QueueObject} A cargoQueue object to manage the tasks. Callbacks can\n   * attached as certain properties to listen for specific events during the\n   * lifecycle of the cargoQueue and inner queue.\n   * @example\n   *\n   * // create a cargoQueue object with payload 2 and concurrency 2\n   * var cargoQueue = async.cargoQueue(function(tasks, callback) {\n   *     for (var i=0; i<tasks.length; i++) {\n   *         console.log('hello ' + tasks[i].name);\n   *     }\n   *     callback();\n   * }, 2, 2);\n   *\n   * // add some items\n   * cargoQueue.push({name: 'foo'}, function(err) {\n   *     console.log('finished processing foo');\n   * });\n   * cargoQueue.push({name: 'bar'}, function(err) {\n   *     console.log('finished processing bar');\n   * });\n   * cargoQueue.push({name: 'baz'}, function(err) {\n   *     console.log('finished processing baz');\n   * });\n   * cargoQueue.push({name: 'boo'}, function(err) {\n   *     console.log('finished processing boo');\n   * });\n   */\n  function cargo$1(worker, concurrency, payload) {\n    return queue(worker, concurrency, payload);\n  }\n\n  /**\n   * Reduces `coll` into a single value using an async `iteratee` to return each\n   * successive step. `memo` is the initial state of the reduction. This function\n   * only operates in series.\n   *\n   * For performance reasons, it may make sense to split a call to this function\n   * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n   * results. This function is for situations where each step in the reduction\n   * needs to be async; if you can get the data before reducing it, then it's\n   * probably a good idea to do so.\n   *\n   * @name reduce\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias inject\n   * @alias foldl\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {*} memo - The initial state of the reduction.\n   * @param {AsyncFunction} iteratee - A function applied to each item in the\n   * array to produce the next step in the reduction.\n   * The `iteratee` should complete with the next state of the reduction.\n   * If the iteratee completes with an error, the reduction is stopped and the\n   * main `callback` is immediately called with the error.\n   * Invoked with (memo, item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result is the reduced value. Invoked with\n   * (err, result).\n   * @returns {Promise} a promise, if no callback is passed\n   * @example\n   *\n   * // file1.txt is a file that is 1000 bytes in size\n   * // file2.txt is a file that is 2000 bytes in size\n   * // file3.txt is a file that is 3000 bytes in size\n   * // file4.txt does not exist\n   *\n   * const fileList = ['file1.txt','file2.txt','file3.txt'];\n   * const withMissingFileList = ['file1.txt','file2.txt','file3.txt', 'file4.txt'];\n   *\n   * // asynchronous function that computes the file size in bytes\n   * // file size is added to the memoized value, then returned\n   * function getFileSizeInBytes(memo, file, callback) {\n   *     fs.stat(file, function(err, stat) {\n   *         if (err) {\n   *             return callback(err);\n   *         }\n   *         callback(null, memo + stat.size);\n   *     });\n   * }\n   *\n   * // Using callbacks\n   * async.reduce(fileList, 0, getFileSizeInBytes, function(err, result) {\n   *     if (err) {\n   *         console.log(err);\n   *     } else {\n   *         console.log(result);\n   *         // 6000\n   *         // which is the sum of the file sizes of the three files\n   *     }\n   * });\n   *\n   * // Error Handling\n   * async.reduce(withMissingFileList, 0, getFileSizeInBytes, function(err, result) {\n   *     if (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *     } else {\n   *         console.log(result);\n   *     }\n   * });\n   *\n   * // Using Promises\n   * async.reduce(fileList, 0, getFileSizeInBytes)\n   * .then( result => {\n   *     console.log(result);\n   *     // 6000\n   *     // which is the sum of the file sizes of the three files\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * // Error Handling\n   * async.reduce(withMissingFileList, 0, getFileSizeInBytes)\n   * .then( result => {\n   *     console.log(result);\n   * }).catch( err => {\n   *     console.log(err);\n   *     // [ Error: ENOENT: no such file or directory ]\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let result = await async.reduce(fileList, 0, getFileSizeInBytes);\n   *         console.log(result);\n   *         // 6000\n   *         // which is the sum of the file sizes of the three files\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * // Error Handling\n   * async () => {\n   *     try {\n   *         let result = await async.reduce(withMissingFileList, 0, getFileSizeInBytes);\n   *         console.log(result);\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *     }\n   * }\n   *\n   */\n  function reduce(coll, memo, iteratee, callback) {\n    callback = once(callback);\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfSeries$1(coll, (x, i, iterCb) => {\n      _iteratee(memo, x, (err, v) => {\n        memo = v;\n        iterCb(err);\n      });\n    }, err => callback(err, memo));\n  }\n  var reduce$1 = awaitify(reduce, 4);\n\n  /**\n   * Version of the compose function that is more natural to read. Each function\n   * consumes the return value of the previous function. It is the equivalent of\n   * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n   *\n   * Each function is executed with the `this` binding of the composed function.\n   *\n   * @name seq\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.compose]{@link module:ControlFlow.compose}\n   * @category Control Flow\n   * @param {...AsyncFunction} functions - the asynchronous functions to compose\n   * @returns {Function} a function that composes the `functions` in order\n   * @example\n   *\n   * // Requires lodash (or underscore), express3 and dresende's orm2.\n   * // Part of an app, that fetches cats of the logged user.\n   * // This example uses `seq` function to avoid overnesting and error\n   * // handling clutter.\n   * app.get('/cats', function(request, response) {\n   *     var User = request.models.User;\n   *     async.seq(\n   *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))\n   *         function(user, fn) {\n   *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n   *         }\n   *     )(req.session.user_id, function (err, cats) {\n   *         if (err) {\n   *             console.error(err);\n   *             response.json({ status: 'error', message: err.message });\n   *         } else {\n   *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n   *         }\n   *     });\n   * });\n   */\n  function seq(...functions) {\n    var _functions = functions.map(wrapAsync);\n    return function (...args) {\n      var that = this;\n      var cb = args[args.length - 1];\n      if (typeof cb == 'function') {\n        args.pop();\n      } else {\n        cb = promiseCallback();\n      }\n      reduce$1(_functions, args, (newargs, fn, iterCb) => {\n        fn.apply(that, newargs.concat((err, ...nextargs) => {\n          iterCb(err, nextargs);\n        }));\n      }, (err, results) => cb(err, ...results));\n      return cb[PROMISE_SYMBOL];\n    };\n  }\n\n  /**\n   * Creates a function which is a composition of the passed asynchronous\n   * functions. Each function consumes the return value of the function that\n   * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n   * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n   *\n   * If the last argument to the composed function is not a function, a promise\n   * is returned when you call it.\n   *\n   * Each function is executed with the `this` binding of the composed function.\n   *\n   * @name compose\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {...AsyncFunction} functions - the asynchronous functions to compose\n   * @returns {Function} an asynchronous function that is the composed\n   * asynchronous `functions`\n   * @example\n   *\n   * function add1(n, callback) {\n   *     setTimeout(function () {\n   *         callback(null, n + 1);\n   *     }, 10);\n   * }\n   *\n   * function mul3(n, callback) {\n   *     setTimeout(function () {\n   *         callback(null, n * 3);\n   *     }, 10);\n   * }\n   *\n   * var add1mul3 = async.compose(mul3, add1);\n   * add1mul3(4, function (err, result) {\n   *     // result now equals 15\n   * });\n   */\n  function compose(...args) {\n    return seq(...args.reverse());\n  }\n\n  /**\n   * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name mapLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.map]{@link module:Collections.map}\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with the transformed item.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Results is an array of the\n   * transformed items from the `coll`. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback is passed\n   */\n  function mapLimit(coll, limit, iteratee, callback) {\n    return _asyncMap(eachOfLimit(limit), coll, iteratee, callback);\n  }\n  var mapLimit$1 = awaitify(mapLimit, 4);\n\n  /**\n   * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name concatLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.concat]{@link module:Collections.concat}\n   * @category Collection\n   * @alias flatMapLimit\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n   * which should use an array as its result. Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished, or an error occurs. Results is an array\n   * containing the concatenated results of the `iteratee` function. Invoked with\n   * (err, results).\n   * @returns A Promise, if no callback is passed\n   */\n  function concatLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n      _iteratee(val, (err, ...args) => {\n        if (err) return iterCb(err);\n        return iterCb(err, args);\n      });\n    }, (err, mapResults) => {\n      var result = [];\n      for (var i = 0; i < mapResults.length; i++) {\n        if (mapResults[i]) {\n          result = result.concat(...mapResults[i]);\n        }\n      }\n      return callback(err, result);\n    });\n  }\n  var concatLimit$1 = awaitify(concatLimit, 4);\n\n  /**\n   * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n   * the concatenated list. The `iteratee`s are called in parallel, and the\n   * results are concatenated as they return. The results array will be returned in\n   * the original order of `coll` passed to the `iteratee` function.\n   *\n   * @name concat\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @alias flatMap\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n   * which should use an array as its result. Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished, or an error occurs. Results is an array\n   * containing the concatenated results of the `iteratee` function. Invoked with\n   * (err, results).\n   * @returns A Promise, if no callback is passed\n   * @example\n   *\n   * // dir1 is a directory that contains file1.txt, file2.txt\n   * // dir2 is a directory that contains file3.txt, file4.txt\n   * // dir3 is a directory that contains file5.txt\n   * // dir4 does not exist\n   *\n   * let directoryList = ['dir1','dir2','dir3'];\n   * let withMissingDirectoryList = ['dir1','dir2','dir3', 'dir4'];\n   *\n   * // Using callbacks\n   * async.concat(directoryList, fs.readdir, function(err, results) {\n   *    if (err) {\n   *        console.log(err);\n   *    } else {\n   *        console.log(results);\n   *        // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n   *    }\n   * });\n   *\n   * // Error Handling\n   * async.concat(withMissingDirectoryList, fs.readdir, function(err, results) {\n   *    if (err) {\n   *        console.log(err);\n   *        // [ Error: ENOENT: no such file or directory ]\n   *        // since dir4 does not exist\n   *    } else {\n   *        console.log(results);\n   *    }\n   * });\n   *\n   * // Using Promises\n   * async.concat(directoryList, fs.readdir)\n   * .then(results => {\n   *     console.log(results);\n   *     // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n   * }).catch(err => {\n   *      console.log(err);\n   * });\n   *\n   * // Error Handling\n   * async.concat(withMissingDirectoryList, fs.readdir)\n   * .then(results => {\n   *     console.log(results);\n   * }).catch(err => {\n   *     console.log(err);\n   *     // [ Error: ENOENT: no such file or directory ]\n   *     // since dir4 does not exist\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let results = await async.concat(directoryList, fs.readdir);\n   *         console.log(results);\n   *         // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n   *     } catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * // Error Handling\n   * async () => {\n   *     try {\n   *         let results = await async.concat(withMissingDirectoryList, fs.readdir);\n   *         console.log(results);\n   *     } catch (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *         // since dir4 does not exist\n   *     }\n   * }\n   *\n   */\n  function concat(coll, iteratee, callback) {\n    return concatLimit$1(coll, Infinity, iteratee, callback);\n  }\n  var concat$1 = awaitify(concat, 3);\n\n  /**\n   * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n   *\n   * @name concatSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.concat]{@link module:Collections.concat}\n   * @category Collection\n   * @alias flatMapSeries\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n   * The iteratee should complete with an array an array of results.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished, or an error occurs. Results is an array\n   * containing the concatenated results of the `iteratee` function. Invoked with\n   * (err, results).\n   * @returns A Promise, if no callback is passed\n   */\n  function concatSeries(coll, iteratee, callback) {\n    return concatLimit$1(coll, 1, iteratee, callback);\n  }\n  var concatSeries$1 = awaitify(concatSeries, 3);\n\n  /**\n   * Returns a function that when called, calls-back with the values provided.\n   * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n   * [`auto`]{@link module:ControlFlow.auto}.\n   *\n   * @name constant\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {...*} arguments... - Any number of arguments to automatically invoke\n   * callback with.\n   * @returns {AsyncFunction} Returns a function that when invoked, automatically\n   * invokes the callback with the previous given arguments.\n   * @example\n   *\n   * async.waterfall([\n   *     async.constant(42),\n   *     function (value, next) {\n   *         // value === 42\n   *     },\n   *     //...\n   * ], callback);\n   *\n   * async.waterfall([\n   *     async.constant(filename, \"utf8\"),\n   *     fs.readFile,\n   *     function (fileData, next) {\n   *         //...\n   *     }\n   *     //...\n   * ], callback);\n   *\n   * async.auto({\n   *     hostname: async.constant(\"https://server.net/\"),\n   *     port: findFreePort,\n   *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n   *         startServer(options, cb);\n   *     }],\n   *     //...\n   * }, callback);\n   */\n  function constant(...args) {\n    return function (...ignoredArgs /*, callback*/) {\n      var callback = ignoredArgs.pop();\n      return callback(null, ...args);\n    };\n  }\n  function _createTester(check, getResult) {\n    return (eachfn, arr, _iteratee, cb) => {\n      var testPassed = false;\n      var testResult;\n      const iteratee = wrapAsync(_iteratee);\n      eachfn(arr, (value, _, callback) => {\n        iteratee(value, (err, result) => {\n          if (err || err === false) return callback(err);\n          if (check(result) && !testResult) {\n            testPassed = true;\n            testResult = getResult(true, value);\n            return callback(null, breakLoop);\n          }\n          callback();\n        });\n      }, err => {\n        if (err) return cb(err);\n        cb(null, testPassed ? testResult : getResult(false));\n      });\n    };\n  }\n\n  /**\n   * Returns the first value in `coll` that passes an async truth test. The\n   * `iteratee` is applied in parallel, meaning the first iteratee to return\n   * `true` will fire the detect `callback` with that result. That means the\n   * result might not be the first item in the original `coll` (in terms of order)\n   * that passes the test.\n    * If order within the original `coll` is important, then look at\n   * [`detectSeries`]{@link module:Collections.detectSeries}.\n   *\n   * @name detect\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias find\n   * @category Collections\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n   * The iteratee must complete with a boolean value as its result.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the `iteratee` functions have finished.\n   * Result will be the first item in the array that passes the truth test\n   * (iteratee) or the value `undefined` if none passed. Invoked with\n   * (err, result).\n   * @returns {Promise} a promise, if a callback is omitted\n   * @example\n   *\n   * // dir1 is a directory that contains file1.txt, file2.txt\n   * // dir2 is a directory that contains file3.txt, file4.txt\n   * // dir3 is a directory that contains file5.txt\n   *\n   * // asynchronous function that checks if a file exists\n   * function fileExists(file, callback) {\n   *    fs.access(file, fs.constants.F_OK, (err) => {\n   *        callback(null, !err);\n   *    });\n   * }\n   *\n   * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists,\n   *    function(err, result) {\n   *        console.log(result);\n   *        // dir1/file1.txt\n   *        // result now equals the first file in the list that exists\n   *    }\n   *);\n   *\n   * // Using Promises\n   * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists)\n   * .then(result => {\n   *     console.log(result);\n   *     // dir1/file1.txt\n   *     // result now equals the first file in the list that exists\n   * }).catch(err => {\n   *     console.log(err);\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let result = await async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists);\n   *         console.log(result);\n   *         // dir1/file1.txt\n   *         // result now equals the file in the list that exists\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n  function detect(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback);\n  }\n  var detect$1 = awaitify(detect, 3);\n\n  /**\n   * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name detectLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.detect]{@link module:Collections.detect}\n   * @alias findLimit\n   * @category Collections\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n   * The iteratee must complete with a boolean value as its result.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the `iteratee` functions have finished.\n   * Result will be the first item in the array that passes the truth test\n   * (iteratee) or the value `undefined` if none passed. Invoked with\n   * (err, result).\n   * @returns {Promise} a promise, if a callback is omitted\n   */\n  function detectLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(limit), coll, iteratee, callback);\n  }\n  var detectLimit$1 = awaitify(detectLimit, 4);\n\n  /**\n   * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n   *\n   * @name detectSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.detect]{@link module:Collections.detect}\n   * @alias findSeries\n   * @category Collections\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n   * The iteratee must complete with a boolean value as its result.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the `iteratee` functions have finished.\n   * Result will be the first item in the array that passes the truth test\n   * (iteratee) or the value `undefined` if none passed. Invoked with\n   * (err, result).\n   * @returns {Promise} a promise, if a callback is omitted\n   */\n  function detectSeries(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(1), coll, iteratee, callback);\n  }\n  var detectSeries$1 = awaitify(detectSeries, 3);\n  function consoleFunc(name) {\n    return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {\n      /* istanbul ignore else */\n      if (typeof console === 'object') {\n        /* istanbul ignore else */\n        if (err) {\n          /* istanbul ignore else */\n          if (console.error) {\n            console.error(err);\n          }\n        } else if (console[name]) {\n          /* istanbul ignore else */\n          resultArgs.forEach(x => console[name](x));\n        }\n      }\n    });\n  }\n\n  /**\n   * Logs the result of an [`async` function]{@link AsyncFunction} to the\n   * `console` using `console.dir` to display the properties of the resulting object.\n   * Only works in Node.js or in browsers that support `console.dir` and\n   * `console.error` (such as FF and Chrome).\n   * If multiple arguments are returned from the async function,\n   * `console.dir` is called on each argument in order.\n   *\n   * @name dir\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} function - The function you want to eventually apply\n   * all arguments to.\n   * @param {...*} arguments... - Any number of arguments to apply to the function.\n   * @example\n   *\n   * // in a module\n   * var hello = function(name, callback) {\n   *     setTimeout(function() {\n   *         callback(null, {hello: name});\n   *     }, 1000);\n   * };\n   *\n   * // in the node repl\n   * node> async.dir(hello, 'world');\n   * {hello: 'world'}\n   */\n  var dir = consoleFunc('dir');\n\n  /**\n   * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n   * the order of operations, the arguments `test` and `iteratee` are switched.\n   *\n   * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n   *\n   * @name doWhilst\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.whilst]{@link module:ControlFlow.whilst}\n   * @category Control Flow\n   * @param {AsyncFunction} iteratee - A function which is called each time `test`\n   * passes. Invoked with (callback).\n   * @param {AsyncFunction} test - asynchronous truth test to perform after each\n   * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n   * non-error args from the previous callback of `iteratee`.\n   * @param {Function} [callback] - A callback which is called after the test\n   * function has failed and repeated execution of `iteratee` has stopped.\n   * `callback` will be passed an error and any arguments passed to the final\n   * `iteratee`'s callback. Invoked with (err, [results]);\n   * @returns {Promise} a promise, if no callback is passed\n   */\n  function doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results;\n    function next(err, ...args) {\n      if (err) return callback(err);\n      if (err === false) return;\n      results = args;\n      _test(...args, check);\n    }\n    function check(err, truth) {\n      if (err) return callback(err);\n      if (err === false) return;\n      if (!truth) return callback(null, ...results);\n      _fn(next);\n    }\n    return check(null, true);\n  }\n  var doWhilst$1 = awaitify(doWhilst, 3);\n\n  /**\n   * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n   * argument ordering differs from `until`.\n   *\n   * @name doUntil\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n   * @category Control Flow\n   * @param {AsyncFunction} iteratee - An async function which is called each time\n   * `test` fails. Invoked with (callback).\n   * @param {AsyncFunction} test - asynchronous truth test to perform after each\n   * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n   * non-error args from the previous callback of `iteratee`\n   * @param {Function} [callback] - A callback which is called after the test\n   * function has passed and repeated execution of `iteratee` has stopped. `callback`\n   * will be passed an error and any arguments passed to the final `iteratee`'s\n   * callback. Invoked with (err, [results]);\n   * @returns {Promise} a promise, if no callback is passed\n   */\n  function doUntil(iteratee, test, callback) {\n    const _test = wrapAsync(test);\n    return doWhilst$1(iteratee, (...args) => {\n      const cb = args.pop();\n      _test(...args, (err, truth) => cb(err, !truth));\n    }, callback);\n  }\n  function _withoutIndex(iteratee) {\n    return (value, index, callback) => iteratee(value, callback);\n  }\n\n  /**\n   * Applies the function `iteratee` to each item in `coll`, in parallel.\n   * The `iteratee` is called with an item from the list, and a callback for when\n   * it has finished. If the `iteratee` passes an error to its `callback`, the\n   * main `callback` (for the `each` function) is immediately called with the\n   * error.\n   *\n   * Note, that since this function applies `iteratee` to each item in parallel,\n   * there is no guarantee that the iteratee functions will complete in order.\n   *\n   * @name each\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias forEach\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to\n   * each item in `coll`. Invoked with (item, callback).\n   * The array index is not passed to the iteratee.\n   * If you need the index, use `eachOf`.\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   * @returns {Promise} a promise, if a callback is omitted\n   * @example\n   *\n   * // dir1 is a directory that contains file1.txt, file2.txt\n   * // dir2 is a directory that contains file3.txt, file4.txt\n   * // dir3 is a directory that contains file5.txt\n   * // dir4 does not exist\n   *\n   * const fileList = [ 'dir1/file2.txt', 'dir2/file3.txt', 'dir/file5.txt'];\n   * const withMissingFileList = ['dir1/file1.txt', 'dir4/file2.txt'];\n   *\n   * // asynchronous function that deletes a file\n   * const deleteFile = function(file, callback) {\n   *     fs.unlink(file, callback);\n   * };\n   *\n   * // Using callbacks\n   * async.each(fileList, deleteFile, function(err) {\n   *     if( err ) {\n   *         console.log(err);\n   *     } else {\n   *         console.log('All files have been deleted successfully');\n   *     }\n   * });\n   *\n   * // Error Handling\n   * async.each(withMissingFileList, deleteFile, function(err){\n   *     console.log(err);\n   *     // [ Error: ENOENT: no such file or directory ]\n   *     // since dir4/file2.txt does not exist\n   *     // dir1/file1.txt could have been deleted\n   * });\n   *\n   * // Using Promises\n   * async.each(fileList, deleteFile)\n   * .then( () => {\n   *     console.log('All files have been deleted successfully');\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * // Error Handling\n   * async.each(fileList, deleteFile)\n   * .then( () => {\n   *     console.log('All files have been deleted successfully');\n   * }).catch( err => {\n   *     console.log(err);\n   *     // [ Error: ENOENT: no such file or directory ]\n   *     // since dir4/file2.txt does not exist\n   *     // dir1/file1.txt could have been deleted\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         await async.each(files, deleteFile);\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * // Error Handling\n   * async () => {\n   *     try {\n   *         await async.each(withMissingFileList, deleteFile);\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *         // since dir4/file2.txt does not exist\n   *         // dir1/file1.txt could have been deleted\n   *     }\n   * }\n   *\n   */\n  function eachLimit(coll, iteratee, callback) {\n    return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n  }\n  var each = awaitify(eachLimit, 3);\n\n  /**\n   * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name eachLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.each]{@link module:Collections.each}\n   * @alias forEachLimit\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The array index is not passed to the iteratee.\n   * If you need the index, use `eachOfLimit`.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   * @returns {Promise} a promise, if a callback is omitted\n   */\n  function eachLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n  }\n  var eachLimit$2 = awaitify(eachLimit$1, 4);\n\n  /**\n   * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n   *\n   * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item\n   * in series and therefore the iteratee functions will complete in order.\n    * @name eachSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.each]{@link module:Collections.each}\n   * @alias forEachSeries\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each\n   * item in `coll`.\n   * The array index is not passed to the iteratee.\n   * If you need the index, use `eachOfSeries`.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   * @returns {Promise} a promise, if a callback is omitted\n   */\n  function eachSeries(coll, iteratee, callback) {\n    return eachLimit$2(coll, 1, iteratee, callback);\n  }\n  var eachSeries$1 = awaitify(eachSeries, 3);\n\n  /**\n   * Wrap an async function and ensure it calls its callback on a later tick of\n   * the event loop.  If the function already calls its callback on a next tick,\n   * no extra deferral is added. This is useful for preventing stack overflows\n   * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n   * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n   * contained. ES2017 `async` functions are returned as-is -- they are immune\n   * to Zalgo's corrupting influences, as they always resolve on a later tick.\n   *\n   * @name ensureAsync\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} fn - an async function, one that expects a node-style\n   * callback as its last argument.\n   * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n   * signature as the function passed in.\n   * @example\n   *\n   * function sometimesAsync(arg, callback) {\n   *     if (cache[arg]) {\n   *         return callback(null, cache[arg]); // this would be synchronous!!\n   *     } else {\n   *         doSomeIO(arg, callback); // this IO would be asynchronous\n   *     }\n   * }\n   *\n   * // this has a risk of stack overflows if many results are cached in a row\n   * async.mapSeries(args, sometimesAsync, done);\n   *\n   * // this will defer sometimesAsync's callback if necessary,\n   * // preventing stack overflows\n   * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n   */\n  function ensureAsync(fn) {\n    if (isAsync(fn)) return fn;\n    return function (...args /*, callback*/) {\n      var callback = args.pop();\n      var sync = true;\n      args.push((...innerArgs) => {\n        if (sync) {\n          setImmediate$1(() => callback(...innerArgs));\n        } else {\n          callback(...innerArgs);\n        }\n      });\n      fn.apply(this, args);\n      sync = false;\n    };\n  }\n\n  /**\n   * Returns `true` if every element in `coll` satisfies an async test. If any\n   * iteratee call returns `false`, the main `callback` is immediately called.\n   *\n   * @name every\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias all\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collection in parallel.\n   * The iteratee must complete with a boolean result value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result will be either `true` or `false`\n   * depending on the values of the async tests. Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback provided\n   * @example\n   *\n   * // dir1 is a directory that contains file1.txt, file2.txt\n   * // dir2 is a directory that contains file3.txt, file4.txt\n   * // dir3 is a directory that contains file5.txt\n   * // dir4 does not exist\n   *\n   * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file5.txt'];\n   * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n   *\n   * // asynchronous function that checks if a file exists\n   * function fileExists(file, callback) {\n   *    fs.access(file, fs.constants.F_OK, (err) => {\n   *        callback(null, !err);\n   *    });\n   * }\n   *\n   * // Using callbacks\n   * async.every(fileList, fileExists, function(err, result) {\n   *     console.log(result);\n   *     // true\n   *     // result is true since every file exists\n   * });\n   *\n   * async.every(withMissingFileList, fileExists, function(err, result) {\n   *     console.log(result);\n   *     // false\n   *     // result is false since NOT every file exists\n   * });\n   *\n   * // Using Promises\n   * async.every(fileList, fileExists)\n   * .then( result => {\n   *     console.log(result);\n   *     // true\n   *     // result is true since every file exists\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * async.every(withMissingFileList, fileExists)\n   * .then( result => {\n   *     console.log(result);\n   *     // false\n   *     // result is false since NOT every file exists\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let result = await async.every(fileList, fileExists);\n   *         console.log(result);\n   *         // true\n   *         // result is true since every file exists\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * async () => {\n   *     try {\n   *         let result = await async.every(withMissingFileList, fileExists);\n   *         console.log(result);\n   *         // false\n   *         // result is false since NOT every file exists\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n  function every(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback);\n  }\n  var every$1 = awaitify(every, 3);\n\n  /**\n   * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name everyLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.every]{@link module:Collections.every}\n   * @alias allLimit\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collection in parallel.\n   * The iteratee must complete with a boolean result value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result will be either `true` or `false`\n   * depending on the values of the async tests. Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback provided\n   */\n  function everyLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfLimit(limit), coll, iteratee, callback);\n  }\n  var everyLimit$1 = awaitify(everyLimit, 4);\n\n  /**\n   * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n   *\n   * @name everySeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.every]{@link module:Collections.every}\n   * @alias allSeries\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collection in series.\n   * The iteratee must complete with a boolean result value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result will be either `true` or `false`\n   * depending on the values of the async tests. Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback provided\n   */\n  function everySeries(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback);\n  }\n  var everySeries$1 = awaitify(everySeries, 3);\n  function filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, (x, index, iterCb) => {\n      iteratee(x, (err, v) => {\n        truthValues[index] = !!v;\n        iterCb(err);\n      });\n    }, err => {\n      if (err) return callback(err);\n      var results = [];\n      for (var i = 0; i < arr.length; i++) {\n        if (truthValues[i]) results.push(arr[i]);\n      }\n      callback(null, results);\n    });\n  }\n  function filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, (x, index, iterCb) => {\n      iteratee(x, (err, v) => {\n        if (err) return iterCb(err);\n        if (v) {\n          results.push({\n            index,\n            value: x\n          });\n        }\n        iterCb(err);\n      });\n    }, err => {\n      if (err) return callback(err);\n      callback(null, results.sort((a, b) => a.index - b.index).map(v => v.value));\n    });\n  }\n  function _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    return filter(eachfn, coll, wrapAsync(iteratee), callback);\n  }\n\n  /**\n   * Returns a new array of all the values in `coll` which pass an async truth\n   * test. This operation is performed in parallel, but the results array will be\n   * in the same order as the original.\n   *\n   * @name filter\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias select\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n   * with a boolean argument once it has completed. Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback provided\n   * @example\n   *\n   * // dir1 is a directory that contains file1.txt, file2.txt\n   * // dir2 is a directory that contains file3.txt, file4.txt\n   * // dir3 is a directory that contains file5.txt\n   *\n   * const files = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n   *\n   * // asynchronous function that checks if a file exists\n   * function fileExists(file, callback) {\n   *    fs.access(file, fs.constants.F_OK, (err) => {\n   *        callback(null, !err);\n   *    });\n   * }\n   *\n   * // Using callbacks\n   * async.filter(files, fileExists, function(err, results) {\n   *    if(err) {\n   *        console.log(err);\n   *    } else {\n   *        console.log(results);\n   *        // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n   *        // results is now an array of the existing files\n   *    }\n   * });\n   *\n   * // Using Promises\n   * async.filter(files, fileExists)\n   * .then(results => {\n   *     console.log(results);\n   *     // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n   *     // results is now an array of the existing files\n   * }).catch(err => {\n   *     console.log(err);\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let results = await async.filter(files, fileExists);\n   *         console.log(results);\n   *         // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n   *         // results is now an array of the existing files\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n  function filter(coll, iteratee, callback) {\n    return _filter(eachOf$1, coll, iteratee, callback);\n  }\n  var filter$1 = awaitify(filter, 3);\n\n  /**\n   * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name filterLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.filter]{@link module:Collections.filter}\n   * @alias selectLimit\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n   * with a boolean argument once it has completed. Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback provided\n   */\n  function filterLimit(coll, limit, iteratee, callback) {\n    return _filter(eachOfLimit(limit), coll, iteratee, callback);\n  }\n  var filterLimit$1 = awaitify(filterLimit, 4);\n\n  /**\n   * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n   *\n   * @name filterSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.filter]{@link module:Collections.filter}\n   * @alias selectSeries\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n   * with a boolean argument once it has completed. Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results)\n   * @returns {Promise} a promise, if no callback provided\n   */\n  function filterSeries(coll, iteratee, callback) {\n    return _filter(eachOfSeries$1, coll, iteratee, callback);\n  }\n  var filterSeries$1 = awaitify(filterSeries, 3);\n\n  /**\n   * Calls the asynchronous function `fn` with a callback parameter that allows it\n   * to call itself again, in series, indefinitely.\n    * If an error is passed to the callback then `errback` is called with the\n   * error, and execution stops, otherwise it will never be called.\n   *\n   * @name forever\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {AsyncFunction} fn - an async function to call repeatedly.\n   * Invoked with (next).\n   * @param {Function} [errback] - when `fn` passes an error to it's callback,\n   * this function will be called, and execution stops. Invoked with (err).\n   * @returns {Promise} a promise that rejects if an error occurs and an errback\n   * is not passed\n   * @example\n   *\n   * async.forever(\n   *     function(next) {\n   *         // next is suitable for passing to things that need a callback(err [, whatever]);\n   *         // it will result in this function being called again.\n   *     },\n   *     function(err) {\n   *         // if next is called with a value in its first parameter, it will appear\n   *         // in here as 'err', and execution will stop.\n   *     }\n   * );\n   */\n  function forever(fn, errback) {\n    var done = onlyOnce(errback);\n    var task = wrapAsync(ensureAsync(fn));\n    function next(err) {\n      if (err) return done(err);\n      if (err === false) return;\n      task(next);\n    }\n    return next();\n  }\n  var forever$1 = awaitify(forever, 2);\n\n  /**\n   * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name groupByLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.groupBy]{@link module:Collections.groupBy}\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with a `key` to group the value under.\n   * Invoked with (value, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Result is an `Object` whoses\n   * properties are arrays of values which returned the corresponding key.\n   * @returns {Promise} a promise, if no callback is passed\n   */\n  function groupByLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n      _iteratee(val, (err, key) => {\n        if (err) return iterCb(err);\n        return iterCb(err, {\n          key,\n          val\n        });\n      });\n    }, (err, mapResults) => {\n      var result = {};\n      // from MDN, handle object having an `hasOwnProperty` prop\n      var {\n        hasOwnProperty\n      } = Object.prototype;\n      for (var i = 0; i < mapResults.length; i++) {\n        if (mapResults[i]) {\n          var {\n            key\n          } = mapResults[i];\n          var {\n            val\n          } = mapResults[i];\n          if (hasOwnProperty.call(result, key)) {\n            result[key].push(val);\n          } else {\n            result[key] = [val];\n          }\n        }\n      }\n      return callback(err, result);\n    });\n  }\n  var groupByLimit$1 = awaitify(groupByLimit, 4);\n\n  /**\n   * Returns a new object, where each value corresponds to an array of items, from\n   * `coll`, that returned the corresponding key. That is, the keys of the object\n   * correspond to the values passed to the `iteratee` callback.\n   *\n   * Note: Since this function applies the `iteratee` to each item in parallel,\n   * there is no guarantee that the `iteratee` functions will complete in order.\n   * However, the values for each key in the `result` will be in the same order as\n   * the original `coll`. For Objects, the values will roughly be in the order of\n   * the original Objects' keys (but this can vary across JavaScript engines).\n   *\n   * @name groupBy\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with a `key` to group the value under.\n   * Invoked with (value, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Result is an `Object` whoses\n   * properties are arrays of values which returned the corresponding key.\n   * @returns {Promise} a promise, if no callback is passed\n   * @example\n   *\n   * // dir1 is a directory that contains file1.txt, file2.txt\n   * // dir2 is a directory that contains file3.txt, file4.txt\n   * // dir3 is a directory that contains file5.txt\n   * // dir4 does not exist\n   *\n   * const files = ['dir1/file1.txt','dir2','dir4']\n   *\n   * // asynchronous function that detects file type as none, file, or directory\n   * function detectFile(file, callback) {\n   *     fs.stat(file, function(err, stat) {\n   *         if (err) {\n   *             return callback(null, 'none');\n   *         }\n   *         callback(null, stat.isDirectory() ? 'directory' : 'file');\n   *     });\n   * }\n   *\n   * //Using callbacks\n   * async.groupBy(files, detectFile, function(err, result) {\n   *     if(err) {\n   *         console.log(err);\n   *     } else {\n   *\t       console.log(result);\n   *         // {\n   *         //     file: [ 'dir1/file1.txt' ],\n   *         //     none: [ 'dir4' ],\n   *         //     directory: [ 'dir2']\n   *         // }\n   *         // result is object containing the files grouped by type\n   *     }\n   * });\n   *\n   * // Using Promises\n   * async.groupBy(files, detectFile)\n   * .then( result => {\n   *     console.log(result);\n   *     // {\n   *     //     file: [ 'dir1/file1.txt' ],\n   *     //     none: [ 'dir4' ],\n   *     //     directory: [ 'dir2']\n   *     // }\n   *     // result is object containing the files grouped by type\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let result = await async.groupBy(files, detectFile);\n   *         console.log(result);\n   *         // {\n   *         //     file: [ 'dir1/file1.txt' ],\n   *         //     none: [ 'dir4' ],\n   *         //     directory: [ 'dir2']\n   *         // }\n   *         // result is object containing the files grouped by type\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n  function groupBy(coll, iteratee, callback) {\n    return groupByLimit$1(coll, Infinity, iteratee, callback);\n  }\n\n  /**\n   * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n   *\n   * @name groupBySeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.groupBy]{@link module:Collections.groupBy}\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with a `key` to group the value under.\n   * Invoked with (value, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Result is an `Object` whose\n   * properties are arrays of values which returned the corresponding key.\n   * @returns {Promise} a promise, if no callback is passed\n   */\n  function groupBySeries(coll, iteratee, callback) {\n    return groupByLimit$1(coll, 1, iteratee, callback);\n  }\n\n  /**\n   * Logs the result of an `async` function to the `console`. Only works in\n   * Node.js or in browsers that support `console.log` and `console.error` (such\n   * as FF and Chrome). If multiple arguments are returned from the async\n   * function, `console.log` is called on each argument in order.\n   *\n   * @name log\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} function - The function you want to eventually apply\n   * all arguments to.\n   * @param {...*} arguments... - Any number of arguments to apply to the function.\n   * @example\n   *\n   * // in a module\n   * var hello = function(name, callback) {\n   *     setTimeout(function() {\n   *         callback(null, 'hello ' + name);\n   *     }, 1000);\n   * };\n   *\n   * // in the node repl\n   * node> async.log(hello, 'world');\n   * 'hello world'\n   */\n  var log = consoleFunc('log');\n\n  /**\n   * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name mapValuesLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.mapValues]{@link module:Collections.mapValues}\n   * @category Collection\n   * @param {Object} obj - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - A function to apply to each value and key\n   * in `coll`.\n   * The iteratee should complete with the transformed value as its result.\n   * Invoked with (value, key, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. `result` is a new object consisting\n   * of each key from `obj`, with each transformed value on the right-hand side.\n   * Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback is passed\n   */\n  function mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback);\n    var newObj = {};\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfLimit(limit)(obj, (val, key, next) => {\n      _iteratee(val, key, (err, result) => {\n        if (err) return next(err);\n        newObj[key] = result;\n        next(err);\n      });\n    }, err => callback(err, newObj));\n  }\n  var mapValuesLimit$1 = awaitify(mapValuesLimit, 4);\n\n  /**\n   * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n   *\n   * Produces a new Object by mapping each value of `obj` through the `iteratee`\n   * function. The `iteratee` is called each `value` and `key` from `obj` and a\n   * callback for when it has finished processing. Each of these callbacks takes\n   * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n   * passes an error to its callback, the main `callback` (for the `mapValues`\n   * function) is immediately called with the error.\n   *\n   * Note, the order of the keys in the result is not guaranteed.  The keys will\n   * be roughly in the order they complete, (but this is very engine-specific)\n   *\n   * @name mapValues\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Object} obj - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A function to apply to each value and key\n   * in `coll`.\n   * The iteratee should complete with the transformed value as its result.\n   * Invoked with (value, key, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. `result` is a new object consisting\n   * of each key from `obj`, with each transformed value on the right-hand side.\n   * Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback is passed\n   * @example\n   *\n   * // file1.txt is a file that is 1000 bytes in size\n   * // file2.txt is a file that is 2000 bytes in size\n   * // file3.txt is a file that is 3000 bytes in size\n   * // file4.txt does not exist\n   *\n   * const fileMap = {\n   *     f1: 'file1.txt',\n   *     f2: 'file2.txt',\n   *     f3: 'file3.txt'\n   * };\n   *\n   * const withMissingFileMap = {\n   *     f1: 'file1.txt',\n   *     f2: 'file2.txt',\n   *     f3: 'file4.txt'\n   * };\n   *\n   * // asynchronous function that returns the file size in bytes\n   * function getFileSizeInBytes(file, key, callback) {\n   *     fs.stat(file, function(err, stat) {\n   *         if (err) {\n   *             return callback(err);\n   *         }\n   *         callback(null, stat.size);\n   *     });\n   * }\n   *\n   * // Using callbacks\n   * async.mapValues(fileMap, getFileSizeInBytes, function(err, result) {\n   *     if (err) {\n   *         console.log(err);\n   *     } else {\n   *         console.log(result);\n   *         // result is now a map of file size in bytes for each file, e.g.\n   *         // {\n   *         //     f1: 1000,\n   *         //     f2: 2000,\n   *         //     f3: 3000\n   *         // }\n   *     }\n   * });\n   *\n   * // Error handling\n   * async.mapValues(withMissingFileMap, getFileSizeInBytes, function(err, result) {\n   *     if (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *     } else {\n   *         console.log(result);\n   *     }\n   * });\n   *\n   * // Using Promises\n   * async.mapValues(fileMap, getFileSizeInBytes)\n   * .then( result => {\n   *     console.log(result);\n   *     // result is now a map of file size in bytes for each file, e.g.\n   *     // {\n   *     //     f1: 1000,\n   *     //     f2: 2000,\n   *     //     f3: 3000\n   *     // }\n   * }).catch (err => {\n   *     console.log(err);\n   * });\n   *\n   * // Error Handling\n   * async.mapValues(withMissingFileMap, getFileSizeInBytes)\n   * .then( result => {\n   *     console.log(result);\n   * }).catch (err => {\n   *     console.log(err);\n   *     // [ Error: ENOENT: no such file or directory ]\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let result = await async.mapValues(fileMap, getFileSizeInBytes);\n   *         console.log(result);\n   *         // result is now a map of file size in bytes for each file, e.g.\n   *         // {\n   *         //     f1: 1000,\n   *         //     f2: 2000,\n   *         //     f3: 3000\n   *         // }\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * // Error Handling\n   * async () => {\n   *     try {\n   *         let result = await async.mapValues(withMissingFileMap, getFileSizeInBytes);\n   *         console.log(result);\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *     }\n   * }\n   *\n   */\n  function mapValues(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, Infinity, iteratee, callback);\n  }\n\n  /**\n   * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n   *\n   * @name mapValuesSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.mapValues]{@link module:Collections.mapValues}\n   * @category Collection\n   * @param {Object} obj - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A function to apply to each value and key\n   * in `coll`.\n   * The iteratee should complete with the transformed value as its result.\n   * Invoked with (value, key, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. `result` is a new object consisting\n   * of each key from `obj`, with each transformed value on the right-hand side.\n   * Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback is passed\n   */\n  function mapValuesSeries(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, 1, iteratee, callback);\n  }\n\n  /**\n   * Caches the results of an async function. When creating a hash to store\n   * function results against, the callback is omitted from the hash and an\n   * optional hash function can be used.\n   *\n   * **Note: if the async function errs, the result will not be cached and\n   * subsequent calls will call the wrapped function.**\n   *\n   * If no hash function is specified, the first argument is used as a hash key,\n   * which may work reasonably if it is a string or a data type that converts to a\n   * distinct string. Note that objects and arrays will not behave reasonably.\n   * Neither will cases where the other arguments are significant. In such cases,\n   * specify your own hash function.\n   *\n   * The cache of results is exposed as the `memo` property of the function\n   * returned by `memoize`.\n   *\n   * @name memoize\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n   * @param {Function} hasher - An optional function for generating a custom hash\n   * for storing results. It has all the arguments applied to it apart from the\n   * callback, and must be synchronous.\n   * @returns {AsyncFunction} a memoized version of `fn`\n   * @example\n   *\n   * var slow_fn = function(name, callback) {\n   *     // do something\n   *     callback(null, result);\n   * };\n   * var fn = async.memoize(slow_fn);\n   *\n   * // fn can now be used as if it were slow_fn\n   * fn('some name', function() {\n   *     // callback\n   * });\n   */\n  function memoize(fn, hasher = v => v) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    var _fn = wrapAsync(fn);\n    var memoized = initialParams((args, callback) => {\n      var key = hasher(...args);\n      if (key in memo) {\n        setImmediate$1(() => callback(null, ...memo[key]));\n      } else if (key in queues) {\n        queues[key].push(callback);\n      } else {\n        queues[key] = [callback];\n        _fn(...args, (err, ...resultArgs) => {\n          // #1465 don't memoize if an error occurred\n          if (!err) {\n            memo[key] = resultArgs;\n          }\n          var q = queues[key];\n          delete queues[key];\n          for (var i = 0, l = q.length; i < l; i++) {\n            q[i](err, ...resultArgs);\n          }\n        });\n      }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n  }\n\n  /* istanbul ignore file */\n\n  /**\n   * Calls `callback` on a later loop around the event loop. In Node.js this just\n   * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n   * available, otherwise `setTimeout(callback, 0)`, which means other higher\n   * priority events may precede the execution of `callback`.\n   *\n   * This is used internally for browser-compatibility purposes.\n   *\n   * @name nextTick\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @see [async.setImmediate]{@link module:Utils.setImmediate}\n   * @category Util\n   * @param {Function} callback - The function to call on a later loop around\n   * the event loop. Invoked with (args...).\n   * @param {...*} args... - any number of additional arguments to pass to the\n   * callback on the next tick.\n   * @example\n   *\n   * var call_order = [];\n   * async.nextTick(function() {\n   *     call_order.push('two');\n   *     // call_order now equals ['one','two']\n   * });\n   * call_order.push('one');\n   *\n   * async.setImmediate(function (a, b, c) {\n   *     // a, b, and c equal 1, 2, and 3\n   * }, 1, 2, 3);\n   */\n  var _defer$1;\n  if (hasNextTick) {\n    _defer$1 = process.nextTick;\n  } else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n  } else {\n    _defer$1 = fallback;\n  }\n  var nextTick = wrap(_defer$1);\n  var parallel = awaitify((eachfn, tasks, callback) => {\n    var results = isArrayLike(tasks) ? [] : {};\n    eachfn(tasks, (task, key, taskCb) => {\n      wrapAsync(task)((err, ...result) => {\n        if (result.length < 2) {\n          [result] = result;\n        }\n        results[key] = result;\n        taskCb(err);\n      });\n    }, err => callback(err, results));\n  }, 3);\n\n  /**\n   * Run the `tasks` collection of functions in parallel, without waiting until\n   * the previous function has completed. If any of the functions pass an error to\n   * its callback, the main `callback` is immediately called with the value of the\n   * error. Once the `tasks` have completed, the results are passed to the final\n   * `callback` as an array.\n   *\n   * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n   * parallel execution of code.  If your tasks do not use any timers or perform\n   * any I/O, they will actually be executed in series.  Any synchronous setup\n   * sections for each task will happen one after the other.  JavaScript remains\n   * single-threaded.\n   *\n   * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n   * execution of other tasks when a task fails.\n   *\n   * It is also possible to use an object instead of an array. Each property will\n   * be run as a function and the results will be passed to the final `callback`\n   * as an object instead of an array. This can be a more readable way of handling\n   * results from {@link async.parallel}.\n   *\n   * @name parallel\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n   * [async functions]{@link AsyncFunction} to run.\n   * Each async function can complete with any number of optional `result` values.\n   * @param {Function} [callback] - An optional callback to run once all the\n   * functions have completed successfully. This function gets a results array\n   * (or object) containing all the result arguments passed to the task callbacks.\n   * Invoked with (err, results).\n   * @returns {Promise} a promise, if a callback is not passed\n   *\n   * @example\n   *\n   * //Using Callbacks\n   * async.parallel([\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'two');\n   *         }, 100);\n   *     }\n   * ], function(err, results) {\n   *     console.log(results);\n   *     // results is equal to ['one','two'] even though\n   *     // the second function had a shorter timeout.\n   * });\n   *\n   * // an example using an object instead of an array\n   * async.parallel({\n   *     one: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 1);\n   *         }, 200);\n   *     },\n   *     two: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 2);\n   *         }, 100);\n   *     }\n   * }, function(err, results) {\n   *     console.log(results);\n   *     // results is equal to: { one: 1, two: 2 }\n   * });\n   *\n   * //Using Promises\n   * async.parallel([\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'two');\n   *         }, 100);\n   *     }\n   * ]).then(results => {\n   *     console.log(results);\n   *     // results is equal to ['one','two'] even though\n   *     // the second function had a shorter timeout.\n   * }).catch(err => {\n   *     console.log(err);\n   * });\n   *\n   * // an example using an object instead of an array\n   * async.parallel({\n   *     one: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 1);\n   *         }, 200);\n   *     },\n   *     two: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 2);\n   *         }, 100);\n   *     }\n   * }).then(results => {\n   *     console.log(results);\n   *     // results is equal to: { one: 1, two: 2 }\n   * }).catch(err => {\n   *     console.log(err);\n   * });\n   *\n   * //Using async/await\n   * async () => {\n   *     try {\n   *         let results = await async.parallel([\n   *             function(callback) {\n   *                 setTimeout(function() {\n   *                     callback(null, 'one');\n   *                 }, 200);\n   *             },\n   *             function(callback) {\n   *                 setTimeout(function() {\n   *                     callback(null, 'two');\n   *                 }, 100);\n   *             }\n   *         ]);\n   *         console.log(results);\n   *         // results is equal to ['one','two'] even though\n   *         // the second function had a shorter timeout.\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * // an example using an object instead of an array\n   * async () => {\n   *     try {\n   *         let results = await async.parallel({\n   *             one: function(callback) {\n   *                 setTimeout(function() {\n   *                     callback(null, 1);\n   *                 }, 200);\n   *             },\n   *            two: function(callback) {\n   *                 setTimeout(function() {\n   *                     callback(null, 2);\n   *                 }, 100);\n   *            }\n   *         });\n   *         console.log(results);\n   *         // results is equal to: { one: 1, two: 2 }\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n  function parallel$1(tasks, callback) {\n    return parallel(eachOf$1, tasks, callback);\n  }\n\n  /**\n   * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name parallelLimit\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.parallel]{@link module:ControlFlow.parallel}\n   * @category Control Flow\n   * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n   * [async functions]{@link AsyncFunction} to run.\n   * Each async function can complete with any number of optional `result` values.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {Function} [callback] - An optional callback to run once all the\n   * functions have completed successfully. This function gets a results array\n   * (or object) containing all the result arguments passed to the task callbacks.\n   * Invoked with (err, results).\n   * @returns {Promise} a promise, if a callback is not passed\n   */\n  function parallelLimit(tasks, limit, callback) {\n    return parallel(eachOfLimit(limit), tasks, callback);\n  }\n\n  /**\n   * A queue of tasks for the worker function to complete.\n   * @typedef {Iterable} QueueObject\n   * @memberOf module:ControlFlow\n   * @property {Function} length - a function returning the number of items\n   * waiting to be processed. Invoke with `queue.length()`.\n   * @property {boolean} started - a boolean indicating whether or not any\n   * items have been pushed and processed by the queue.\n   * @property {Function} running - a function returning the number of items\n   * currently being processed. Invoke with `queue.running()`.\n   * @property {Function} workersList - a function returning the array of items\n   * currently being processed. Invoke with `queue.workersList()`.\n   * @property {Function} idle - a function returning false if there are items\n   * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n   * @property {number} concurrency - an integer for determining how many `worker`\n   * functions should be run in parallel. This property can be changed after a\n   * `queue` is created to alter the concurrency on-the-fly.\n   * @property {number} payload - an integer that specifies how many items are\n   * passed to the worker function at a time. only applies if this is a\n   * [cargo]{@link module:ControlFlow.cargo} object\n   * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n   * once the `worker` has finished processing the task. Instead of a single task,\n   * a `tasks` array can be submitted. The respective callback is used for every\n   * task in the list. Invoke with `queue.push(task, [callback])`,\n   * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.\n   * Invoke with `queue.unshift(task, [callback])`.\n   * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns\n   * a promise that rejects if an error occurs.\n   * @property {AsyncFunction} unshiftAsync - the same as `q.unshift`, except this returns\n   * a promise that rejects if an error occurs.\n   * @property {Function} remove - remove items from the queue that match a test\n   * function.  The test function will be passed an object with a `data` property,\n   * and a `priority` property, if this is a\n   * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n   * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n   * `function ({data, priority}) {}` and returns a Boolean.\n   * @property {Function} saturated - a function that sets a callback that is\n   * called when the number of running workers hits the `concurrency` limit, and\n   * further tasks will be queued.  If the callback is omitted, `q.saturated()`\n   * returns a promise for the next occurrence.\n   * @property {Function} unsaturated - a function that sets a callback that is\n   * called when the number of running workers is less than the `concurrency` &\n   * `buffer` limits, and further tasks will not be queued. If the callback is\n   * omitted, `q.unsaturated()` returns a promise for the next occurrence.\n   * @property {number} buffer - A minimum threshold buffer in order to say that\n   * the `queue` is `unsaturated`.\n   * @property {Function} empty - a function that sets a callback that is called\n   * when the last item from the `queue` is given to a `worker`. If the callback\n   * is omitted, `q.empty()` returns a promise for the next occurrence.\n   * @property {Function} drain - a function that sets a callback that is called\n   * when the last item from the `queue` has returned from the `worker`. If the\n   * callback is omitted, `q.drain()` returns a promise for the next occurrence.\n   * @property {Function} error - a function that sets a callback that is called\n   * when a task errors. Has the signature `function(error, task)`. If the\n   * callback is omitted, `error()` returns a promise that rejects on the next\n   * error.\n   * @property {boolean} paused - a boolean for determining whether the queue is\n   * in a paused state.\n   * @property {Function} pause - a function that pauses the processing of tasks\n   * until `resume()` is called. Invoke with `queue.pause()`.\n   * @property {Function} resume - a function that resumes the processing of\n   * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n   * @property {Function} kill - a function that removes the `drain` callback and\n   * empties remaining tasks from the queue forcing it to go idle. No more tasks\n   * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n   *\n   * @example\n   * const q = async.queue(worker, 2)\n   * q.push(item1)\n   * q.push(item2)\n   * q.push(item3)\n   * // queues are iterable, spread into an array to inspect\n   * const items = [...q] // [item1, item2, item3]\n   * // or use for of\n   * for (let item of q) {\n   *     console.log(item)\n   * }\n   *\n   * q.drain(() => {\n   *     console.log('all done')\n   * })\n   * // or\n   * await q.drain()\n   */\n\n  /**\n   * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n   * `queue` are processed in parallel (up to the `concurrency` limit). If all\n   * `worker`s are in progress, the task is queued until one becomes available.\n   * Once a `worker` completes a `task`, that `task`'s callback is called.\n   *\n   * @name queue\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {AsyncFunction} worker - An async function for processing a queued task.\n   * If you want to handle errors from an individual task, pass a callback to\n   * `q.push()`. Invoked with (task, callback).\n   * @param {number} [concurrency=1] - An `integer` for determining how many\n   * `worker` functions should be run in parallel.  If omitted, the concurrency\n   * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n   * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be\n   * attached as certain properties to listen for specific events during the\n   * lifecycle of the queue.\n   * @example\n   *\n   * // create a queue object with concurrency 2\n   * var q = async.queue(function(task, callback) {\n   *     console.log('hello ' + task.name);\n   *     callback();\n   * }, 2);\n   *\n   * // assign a callback\n   * q.drain(function() {\n   *     console.log('all items have been processed');\n   * });\n   * // or await the end\n   * await q.drain()\n   *\n   * // assign an error callback\n   * q.error(function(err, task) {\n   *     console.error('task experienced an error');\n   * });\n   *\n   * // add some items to the queue\n   * q.push({name: 'foo'}, function(err) {\n   *     console.log('finished processing foo');\n   * });\n   * // callback is optional\n   * q.push({name: 'bar'});\n   *\n   * // add some items to the queue (batch-wise)\n   * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n   *     console.log('finished processing item');\n   * });\n   *\n   * // add some items to the front of the queue\n   * q.unshift({name: 'bar'}, function (err) {\n   *     console.log('finished processing bar');\n   * });\n   */\n  function queue$1(worker, concurrency) {\n    var _worker = wrapAsync(worker);\n    return queue((items, cb) => {\n      _worker(items[0], cb);\n    }, concurrency, 1);\n  }\n\n  // Binary min-heap implementation used for priority queue.\n  // Implementation is stable, i.e. push time is considered for equal priorities\n  class Heap {\n    constructor() {\n      this.heap = [];\n      this.pushCount = Number.MIN_SAFE_INTEGER;\n    }\n    get length() {\n      return this.heap.length;\n    }\n    empty() {\n      this.heap = [];\n      return this;\n    }\n    percUp(index) {\n      let p;\n      while (index > 0 && smaller(this.heap[index], this.heap[p = parent(index)])) {\n        let t = this.heap[index];\n        this.heap[index] = this.heap[p];\n        this.heap[p] = t;\n        index = p;\n      }\n    }\n    percDown(index) {\n      let l;\n      while ((l = leftChi(index)) < this.heap.length) {\n        if (l + 1 < this.heap.length && smaller(this.heap[l + 1], this.heap[l])) {\n          l = l + 1;\n        }\n        if (smaller(this.heap[index], this.heap[l])) {\n          break;\n        }\n        let t = this.heap[index];\n        this.heap[index] = this.heap[l];\n        this.heap[l] = t;\n        index = l;\n      }\n    }\n    push(node) {\n      node.pushCount = ++this.pushCount;\n      this.heap.push(node);\n      this.percUp(this.heap.length - 1);\n    }\n    unshift(node) {\n      return this.heap.push(node);\n    }\n    shift() {\n      let [top] = this.heap;\n      this.heap[0] = this.heap[this.heap.length - 1];\n      this.heap.pop();\n      this.percDown(0);\n      return top;\n    }\n    toArray() {\n      return [...this];\n    }\n    *[Symbol.iterator]() {\n      for (let i = 0; i < this.heap.length; i++) {\n        yield this.heap[i].data;\n      }\n    }\n    remove(testFn) {\n      let j = 0;\n      for (let i = 0; i < this.heap.length; i++) {\n        if (!testFn(this.heap[i])) {\n          this.heap[j] = this.heap[i];\n          j++;\n        }\n      }\n      this.heap.splice(j);\n      for (let i = parent(this.heap.length - 1); i >= 0; i--) {\n        this.percDown(i);\n      }\n      return this;\n    }\n  }\n  function leftChi(i) {\n    return (i << 1) + 1;\n  }\n  function parent(i) {\n    return (i + 1 >> 1) - 1;\n  }\n  function smaller(x, y) {\n    if (x.priority !== y.priority) {\n      return x.priority < y.priority;\n    } else {\n      return x.pushCount < y.pushCount;\n    }\n  }\n\n  /**\n   * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n   * completed in ascending priority order.\n   *\n   * @name priorityQueue\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.queue]{@link module:ControlFlow.queue}\n   * @category Control Flow\n   * @param {AsyncFunction} worker - An async function for processing a queued task.\n   * If you want to handle errors from an individual task, pass a callback to\n   * `q.push()`.\n   * Invoked with (task, callback).\n   * @param {number} concurrency - An `integer` for determining how many `worker`\n   * functions should be run in parallel.  If omitted, the concurrency defaults to\n   * `1`.  If the concurrency is `0`, an error is thrown.\n   * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are three\n   * differences between `queue` and `priorityQueue` objects:\n   * * `push(task, priority, [callback])` - `priority` should be a number. If an\n   *   array of `tasks` is given, all tasks will be assigned the same priority.\n   * * `pushAsync(task, priority, [callback])` - the same as `priorityQueue.push`,\n   *   except this returns a promise that rejects if an error occurs.\n   * * The `unshift` and `unshiftAsync` methods were removed.\n   */\n  function priorityQueue(worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency);\n    var {\n      push,\n      pushAsync\n    } = q;\n    q._tasks = new Heap();\n    q._createTaskItem = ({\n      data,\n      priority\n    }, callback) => {\n      return {\n        data,\n        priority,\n        callback\n      };\n    };\n    function createDataItems(tasks, priority) {\n      if (!Array.isArray(tasks)) {\n        return {\n          data: tasks,\n          priority\n        };\n      }\n      return tasks.map(data => {\n        return {\n          data,\n          priority\n        };\n      });\n    }\n\n    // Override push to accept second parameter representing priority\n    q.push = function (data, priority = 0, callback) {\n      return push(createDataItems(data, priority), callback);\n    };\n    q.pushAsync = function (data, priority = 0, callback) {\n      return pushAsync(createDataItems(data, priority), callback);\n    };\n\n    // Remove unshift functions\n    delete q.unshift;\n    delete q.unshiftAsync;\n    return q;\n  }\n\n  /**\n   * Runs the `tasks` array of functions in parallel, without waiting until the\n   * previous function has completed. Once any of the `tasks` complete or pass an\n   * error to its callback, the main `callback` is immediately called. It's\n   * equivalent to `Promise.race()`.\n   *\n   * @name race\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n   * to run. Each function can complete with an optional `result` value.\n   * @param {Function} callback - A callback to run once any of the functions have\n   * completed. This function gets an error or result from the first function that\n   * completed. Invoked with (err, result).\n   * @returns {Promise} a promise, if a callback is omitted\n   * @example\n   *\n   * async.race([\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'two');\n   *         }, 100);\n   *     }\n   * ],\n   * // main callback\n   * function(err, result) {\n   *     // the result will be equal to 'two' as it finishes earlier\n   * });\n   */\n  function race(tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n      wrapAsync(tasks[i])(callback);\n    }\n  }\n  var race$1 = awaitify(race, 2);\n\n  /**\n   * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n   *\n   * @name reduceRight\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.reduce]{@link module:Collections.reduce}\n   * @alias foldr\n   * @category Collection\n   * @param {Array} array - A collection to iterate over.\n   * @param {*} memo - The initial state of the reduction.\n   * @param {AsyncFunction} iteratee - A function applied to each item in the\n   * array to produce the next step in the reduction.\n   * The `iteratee` should complete with the next state of the reduction.\n   * If the iteratee completes with an error, the reduction is stopped and the\n   * main `callback` is immediately called with the error.\n   * Invoked with (memo, item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result is the reduced value. Invoked with\n   * (err, result).\n   * @returns {Promise} a promise, if no callback is passed\n   */\n  function reduceRight(array, memo, iteratee, callback) {\n    var reversed = [...array].reverse();\n    return reduce$1(reversed, memo, iteratee, callback);\n  }\n\n  /**\n   * Wraps the async function in another function that always completes with a\n   * result object, even when it errors.\n   *\n   * The result object has either the property `error` or `value`.\n   *\n   * @name reflect\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} fn - The async function you want to wrap\n   * @returns {Function} - A function that always passes null to it's callback as\n   * the error. The second argument to the callback will be an `object` with\n   * either an `error` or a `value` property.\n   * @example\n   *\n   * async.parallel([\n   *     async.reflect(function(callback) {\n   *         // do some stuff ...\n   *         callback(null, 'one');\n   *     }),\n   *     async.reflect(function(callback) {\n   *         // do some more stuff but error ...\n   *         callback('bad stuff happened');\n   *     }),\n   *     async.reflect(function(callback) {\n   *         // do some more stuff ...\n   *         callback(null, 'two');\n   *     })\n   * ],\n   * // optional callback\n   * function(err, results) {\n   *     // values\n   *     // results[0].value = 'one'\n   *     // results[1].error = 'bad stuff happened'\n   *     // results[2].value = 'two'\n   * });\n   */\n  function reflect(fn) {\n    var _fn = wrapAsync(fn);\n    return initialParams(function reflectOn(args, reflectCallback) {\n      args.push((error, ...cbArgs) => {\n        let retVal = {};\n        if (error) {\n          retVal.error = error;\n        }\n        if (cbArgs.length > 0) {\n          var value = cbArgs;\n          if (cbArgs.length <= 1) {\n            [value] = cbArgs;\n          }\n          retVal.value = value;\n        }\n        reflectCallback(null, retVal);\n      });\n      return _fn.apply(this, args);\n    });\n  }\n\n  /**\n   * A helper function that wraps an array or an object of functions with `reflect`.\n   *\n   * @name reflectAll\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @see [async.reflect]{@link module:Utils.reflect}\n   * @category Util\n   * @param {Array|Object|Iterable} tasks - The collection of\n   * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n   * @returns {Array} Returns an array of async functions, each wrapped in\n   * `async.reflect`\n   * @example\n   *\n   * let tasks = [\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     function(callback) {\n   *         // do some more stuff but error ...\n   *         callback(new Error('bad stuff happened'));\n   *     },\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'two');\n   *         }, 100);\n   *     }\n   * ];\n   *\n   * async.parallel(async.reflectAll(tasks),\n   * // optional callback\n   * function(err, results) {\n   *     // values\n   *     // results[0].value = 'one'\n   *     // results[1].error = Error('bad stuff happened')\n   *     // results[2].value = 'two'\n   * });\n   *\n   * // an example using an object instead of an array\n   * let tasks = {\n   *     one: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     two: function(callback) {\n   *         callback('two');\n   *     },\n   *     three: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'three');\n   *         }, 100);\n   *     }\n   * };\n   *\n   * async.parallel(async.reflectAll(tasks),\n   * // optional callback\n   * function(err, results) {\n   *     // values\n   *     // results.one.value = 'one'\n   *     // results.two.error = 'two'\n   *     // results.three.value = 'three'\n   * });\n   */\n  function reflectAll(tasks) {\n    var results;\n    if (Array.isArray(tasks)) {\n      results = tasks.map(reflect);\n    } else {\n      results = {};\n      Object.keys(tasks).forEach(key => {\n        results[key] = reflect.call(this, tasks[key]);\n      });\n    }\n    return results;\n  }\n  function reject(eachfn, arr, _iteratee, callback) {\n    const iteratee = wrapAsync(_iteratee);\n    return _filter(eachfn, arr, (value, cb) => {\n      iteratee(value, (err, v) => {\n        cb(err, !v);\n      });\n    }, callback);\n  }\n\n  /**\n   * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n   *\n   * @name reject\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.filter]{@link module:Collections.filter}\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {Function} iteratee - An async truth test to apply to each item in\n   * `coll`.\n   * The should complete with a boolean value as its `result`.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback is passed\n   * @example\n   *\n   * // dir1 is a directory that contains file1.txt, file2.txt\n   * // dir2 is a directory that contains file3.txt, file4.txt\n   * // dir3 is a directory that contains file5.txt\n   *\n   * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n   *\n   * // asynchronous function that checks if a file exists\n   * function fileExists(file, callback) {\n   *    fs.access(file, fs.constants.F_OK, (err) => {\n   *        callback(null, !err);\n   *    });\n   * }\n   *\n   * // Using callbacks\n   * async.reject(fileList, fileExists, function(err, results) {\n   *    // [ 'dir3/file6.txt' ]\n   *    // results now equals an array of the non-existing files\n   * });\n   *\n   * // Using Promises\n   * async.reject(fileList, fileExists)\n   * .then( results => {\n   *     console.log(results);\n   *     // [ 'dir3/file6.txt' ]\n   *     // results now equals an array of the non-existing files\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let results = await async.reject(fileList, fileExists);\n   *         console.log(results);\n   *         // [ 'dir3/file6.txt' ]\n   *         // results now equals an array of the non-existing files\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n  function reject$1(coll, iteratee, callback) {\n    return reject(eachOf$1, coll, iteratee, callback);\n  }\n  var reject$2 = awaitify(reject$1, 3);\n\n  /**\n   * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name rejectLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.reject]{@link module:Collections.reject}\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {Function} iteratee - An async truth test to apply to each item in\n   * `coll`.\n   * The should complete with a boolean value as its `result`.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback is passed\n   */\n  function rejectLimit(coll, limit, iteratee, callback) {\n    return reject(eachOfLimit(limit), coll, iteratee, callback);\n  }\n  var rejectLimit$1 = awaitify(rejectLimit, 4);\n\n  /**\n   * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n   *\n   * @name rejectSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.reject]{@link module:Collections.reject}\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {Function} iteratee - An async truth test to apply to each item in\n   * `coll`.\n   * The should complete with a boolean value as its `result`.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback is passed\n   */\n  function rejectSeries(coll, iteratee, callback) {\n    return reject(eachOfSeries$1, coll, iteratee, callback);\n  }\n  var rejectSeries$1 = awaitify(rejectSeries, 3);\n  function constant$1(value) {\n    return function () {\n      return value;\n    };\n  }\n\n  /**\n   * Attempts to get a successful response from `task` no more than `times` times\n   * before returning an error. If the task is successful, the `callback` will be\n   * passed the result of the successful task. If all attempts fail, the callback\n   * will be passed the error and result (if any) of the final attempt.\n   *\n   * @name retry\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @see [async.retryable]{@link module:ControlFlow.retryable}\n   * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n   * object with `times` and `interval` or a number.\n   * * `times` - The number of attempts to make before giving up.  The default\n   *   is `5`.\n   * * `interval` - The time to wait between retries, in milliseconds.  The\n   *   default is `0`. The interval may also be specified as a function of the\n   *   retry count (see example).\n   * * `errorFilter` - An optional synchronous function that is invoked on\n   *   erroneous result. If it returns `true` the retry attempts will continue;\n   *   if the function returns `false` the retry flow is aborted with the current\n   *   attempt's error and result being returned to the final callback.\n   *   Invoked with (err).\n   * * If `opts` is a number, the number specifies the number of times to retry,\n   *   with the default interval of `0`.\n   * @param {AsyncFunction} task - An async function to retry.\n   * Invoked with (callback).\n   * @param {Function} [callback] - An optional callback which is called when the\n   * task has succeeded, or after the final failed attempt. It receives the `err`\n   * and `result` arguments of the last attempt at completing the `task`. Invoked\n   * with (err, results).\n   * @returns {Promise} a promise if no callback provided\n   *\n   * @example\n   *\n   * // The `retry` function can be used as a stand-alone control flow by passing\n   * // a callback, as shown below:\n   *\n   * // try calling apiMethod 3 times\n   * async.retry(3, apiMethod, function(err, result) {\n   *     // do something with the result\n   * });\n   *\n   * // try calling apiMethod 3 times, waiting 200 ms between each retry\n   * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n   *     // do something with the result\n   * });\n   *\n   * // try calling apiMethod 10 times with exponential backoff\n   * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n   * async.retry({\n   *   times: 10,\n   *   interval: function(retryCount) {\n   *     return 50 * Math.pow(2, retryCount);\n   *   }\n   * }, apiMethod, function(err, result) {\n   *     // do something with the result\n   * });\n   *\n   * // try calling apiMethod the default 5 times no delay between each retry\n   * async.retry(apiMethod, function(err, result) {\n   *     // do something with the result\n   * });\n   *\n   * // try calling apiMethod only when error condition satisfies, all other\n   * // errors will abort the retry control flow and return to final callback\n   * async.retry({\n   *   errorFilter: function(err) {\n   *     return err.message === 'Temporary error'; // only retry on a specific error\n   *   }\n   * }, apiMethod, function(err, result) {\n   *     // do something with the result\n   * });\n   *\n   * // to retry individual methods that are not as reliable within other\n   * // control flow functions, use the `retryable` wrapper:\n   * async.auto({\n   *     users: api.getUsers.bind(api),\n   *     payments: async.retryable(3, api.getPayments.bind(api))\n   * }, function(err, results) {\n   *     // do something with the results\n   * });\n   *\n   */\n  const DEFAULT_TIMES = 5;\n  const DEFAULT_INTERVAL = 0;\n  function retry(opts, task, callback) {\n    var options = {\n      times: DEFAULT_TIMES,\n      intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n    if (arguments.length < 3 && typeof opts === 'function') {\n      callback = task || promiseCallback();\n      task = opts;\n    } else {\n      parseTimes(options, opts);\n      callback = callback || promiseCallback();\n    }\n    if (typeof task !== 'function') {\n      throw new Error(\"Invalid arguments for async.retry\");\n    }\n    var _task = wrapAsync(task);\n    var attempt = 1;\n    function retryAttempt() {\n      _task((err, ...args) => {\n        if (err === false) return;\n        if (err && attempt++ < options.times && (typeof options.errorFilter != 'function' || options.errorFilter(err))) {\n          setTimeout(retryAttempt, options.intervalFunc(attempt - 1));\n        } else {\n          callback(err, ...args);\n        }\n      });\n    }\n    retryAttempt();\n    return callback[PROMISE_SYMBOL];\n  }\n  function parseTimes(acc, t) {\n    if (typeof t === 'object') {\n      acc.times = +t.times || DEFAULT_TIMES;\n      acc.intervalFunc = typeof t.interval === 'function' ? t.interval : constant$1(+t.interval || DEFAULT_INTERVAL);\n      acc.errorFilter = t.errorFilter;\n    } else if (typeof t === 'number' || typeof t === 'string') {\n      acc.times = +t || DEFAULT_TIMES;\n    } else {\n      throw new Error(\"Invalid arguments for async.retry\");\n    }\n  }\n\n  /**\n   * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n   * wraps a task and makes it retryable, rather than immediately calling it\n   * with retries.\n   *\n   * @name retryable\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.retry]{@link module:ControlFlow.retry}\n   * @category Control Flow\n   * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n   * options, exactly the same as from `retry`, except for a `opts.arity` that\n   * is the arity of the `task` function, defaulting to `task.length`\n   * @param {AsyncFunction} task - the asynchronous function to wrap.\n   * This function will be passed any arguments passed to the returned wrapper.\n   * Invoked with (...args, callback).\n   * @returns {AsyncFunction} The wrapped function, which when invoked, will\n   * retry on an error, based on the parameters specified in `opts`.\n   * This function will accept the same parameters as `task`.\n   * @example\n   *\n   * async.auto({\n   *     dep1: async.retryable(3, getFromFlakyService),\n   *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n   *         maybeProcessData(results.dep1, cb);\n   *     })]\n   * }, callback);\n   */\n  function retryable(opts, task) {\n    if (!task) {\n      task = opts;\n      opts = null;\n    }\n    let arity = opts && opts.arity || task.length;\n    if (isAsync(task)) {\n      arity += 1;\n    }\n    var _task = wrapAsync(task);\n    return initialParams((args, callback) => {\n      if (args.length < arity - 1 || callback == null) {\n        args.push(callback);\n        callback = promiseCallback();\n      }\n      function taskFn(cb) {\n        _task(...args, cb);\n      }\n      if (opts) retry(opts, taskFn, callback);else retry(taskFn, callback);\n      return callback[PROMISE_SYMBOL];\n    });\n  }\n\n  /**\n   * Run the functions in the `tasks` collection in series, each one running once\n   * the previous function has completed. If any functions in the series pass an\n   * error to its callback, no more functions are run, and `callback` is\n   * immediately called with the value of the error. Otherwise, `callback`\n   * receives an array of results when `tasks` have completed.\n   *\n   * It is also possible to use an object instead of an array. Each property will\n   * be run as a function, and the results will be passed to the final `callback`\n   * as an object instead of an array. This can be a more readable way of handling\n   *  results from {@link async.series}.\n   *\n   * **Note** that while many implementations preserve the order of object\n   * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n   * explicitly states that\n   *\n   * > The mechanics and order of enumerating the properties is not specified.\n   *\n   * So if you rely on the order in which your series of functions are executed,\n   * and want this to work on all platforms, consider using an array.\n   *\n   * @name series\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n   * [async functions]{@link AsyncFunction} to run in series.\n   * Each function can complete with any number of optional `result` values.\n   * @param {Function} [callback] - An optional callback to run once all the\n   * functions have completed. This function gets a results array (or object)\n   * containing all the result arguments passed to the `task` callbacks. Invoked\n   * with (err, result).\n   * @return {Promise} a promise, if no callback is passed\n   * @example\n   *\n   * //Using Callbacks\n   * async.series([\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             // do some async task\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             // then do another async task\n   *             callback(null, 'two');\n   *         }, 100);\n   *     }\n   * ], function(err, results) {\n   *     console.log(results);\n   *     // results is equal to ['one','two']\n   * });\n   *\n   * // an example using objects instead of arrays\n   * async.series({\n   *     one: function(callback) {\n   *         setTimeout(function() {\n   *             // do some async task\n   *             callback(null, 1);\n   *         }, 200);\n   *     },\n   *     two: function(callback) {\n   *         setTimeout(function() {\n   *             // then do another async task\n   *             callback(null, 2);\n   *         }, 100);\n   *     }\n   * }, function(err, results) {\n   *     console.log(results);\n   *     // results is equal to: { one: 1, two: 2 }\n   * });\n   *\n   * //Using Promises\n   * async.series([\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'two');\n   *         }, 100);\n   *     }\n   * ]).then(results => {\n   *     console.log(results);\n   *     // results is equal to ['one','two']\n   * }).catch(err => {\n   *     console.log(err);\n   * });\n   *\n   * // an example using an object instead of an array\n   * async.series({\n   *     one: function(callback) {\n   *         setTimeout(function() {\n   *             // do some async task\n   *             callback(null, 1);\n   *         }, 200);\n   *     },\n   *     two: function(callback) {\n   *         setTimeout(function() {\n   *             // then do another async task\n   *             callback(null, 2);\n   *         }, 100);\n   *     }\n   * }).then(results => {\n   *     console.log(results);\n   *     // results is equal to: { one: 1, two: 2 }\n   * }).catch(err => {\n   *     console.log(err);\n   * });\n   *\n   * //Using async/await\n   * async () => {\n   *     try {\n   *         let results = await async.series([\n   *             function(callback) {\n   *                 setTimeout(function() {\n   *                     // do some async task\n   *                     callback(null, 'one');\n   *                 }, 200);\n   *             },\n   *             function(callback) {\n   *                 setTimeout(function() {\n   *                     // then do another async task\n   *                     callback(null, 'two');\n   *                 }, 100);\n   *             }\n   *         ]);\n   *         console.log(results);\n   *         // results is equal to ['one','two']\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * // an example using an object instead of an array\n   * async () => {\n   *     try {\n   *         let results = await async.parallel({\n   *             one: function(callback) {\n   *                 setTimeout(function() {\n   *                     // do some async task\n   *                     callback(null, 1);\n   *                 }, 200);\n   *             },\n   *            two: function(callback) {\n   *                 setTimeout(function() {\n   *                     // then do another async task\n   *                     callback(null, 2);\n   *                 }, 100);\n   *            }\n   *         });\n   *         console.log(results);\n   *         // results is equal to: { one: 1, two: 2 }\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n  function series(tasks, callback) {\n    return parallel(eachOfSeries$1, tasks, callback);\n  }\n\n  /**\n   * Returns `true` if at least one element in the `coll` satisfies an async test.\n   * If any iteratee call returns `true`, the main `callback` is immediately\n   * called.\n   *\n   * @name some\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias any\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collections in parallel.\n   * The iteratee should complete with a boolean `result` value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the iteratee functions have finished.\n   * Result will be either `true` or `false` depending on the values of the async\n   * tests. Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback provided\n   * @example\n   *\n   * // dir1 is a directory that contains file1.txt, file2.txt\n   * // dir2 is a directory that contains file3.txt, file4.txt\n   * // dir3 is a directory that contains file5.txt\n   * // dir4 does not exist\n   *\n   * // asynchronous function that checks if a file exists\n   * function fileExists(file, callback) {\n   *    fs.access(file, fs.constants.F_OK, (err) => {\n   *        callback(null, !err);\n   *    });\n   * }\n   *\n   * // Using callbacks\n   * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists,\n   *    function(err, result) {\n   *        console.log(result);\n   *        // true\n   *        // result is true since some file in the list exists\n   *    }\n   *);\n   *\n   * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists,\n   *    function(err, result) {\n   *        console.log(result);\n   *        // false\n   *        // result is false since none of the files exists\n   *    }\n   *);\n   *\n   * // Using Promises\n   * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists)\n   * .then( result => {\n   *     console.log(result);\n   *     // true\n   *     // result is true since some file in the list exists\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists)\n   * .then( result => {\n   *     console.log(result);\n   *     // false\n   *     // result is false since none of the files exists\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists);\n   *         console.log(result);\n   *         // true\n   *         // result is true since some file in the list exists\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * async () => {\n   *     try {\n   *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists);\n   *         console.log(result);\n   *         // false\n   *         // result is false since none of the files exists\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n  function some(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback);\n  }\n  var some$1 = awaitify(some, 3);\n\n  /**\n   * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name someLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.some]{@link module:Collections.some}\n   * @alias anyLimit\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collections in parallel.\n   * The iteratee should complete with a boolean `result` value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the iteratee functions have finished.\n   * Result will be either `true` or `false` depending on the values of the async\n   * tests. Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback provided\n   */\n  function someLimit(coll, limit, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfLimit(limit), coll, iteratee, callback);\n  }\n  var someLimit$1 = awaitify(someLimit, 4);\n\n  /**\n   * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n   *\n   * @name someSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.some]{@link module:Collections.some}\n   * @alias anySeries\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collections in series.\n   * The iteratee should complete with a boolean `result` value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the iteratee functions have finished.\n   * Result will be either `true` or `false` depending on the values of the async\n   * tests. Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback provided\n   */\n  function someSeries(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback);\n  }\n  var someSeries$1 = awaitify(someSeries, 3);\n\n  /**\n   * Sorts a list by the results of running each `coll` value through an async\n   * `iteratee`.\n   *\n   * @name sortBy\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with a value to use as the sort criteria as\n   * its `result`.\n   * Invoked with (item, callback).\n   * @param {Function} callback - A callback which is called after all the\n   * `iteratee` functions have finished, or an error occurs. Results is the items\n   * from the original `coll` sorted by the values returned by the `iteratee`\n   * calls. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback passed\n   * @example\n   *\n   * // bigfile.txt is a file that is 251100 bytes in size\n   * // mediumfile.txt is a file that is 11000 bytes in size\n   * // smallfile.txt is a file that is 121 bytes in size\n   *\n   * // asynchronous function that returns the file size in bytes\n   * function getFileSizeInBytes(file, callback) {\n   *     fs.stat(file, function(err, stat) {\n   *         if (err) {\n   *             return callback(err);\n   *         }\n   *         callback(null, stat.size);\n   *     });\n   * }\n   *\n   * // Using callbacks\n   * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes,\n   *     function(err, results) {\n   *         if (err) {\n   *             console.log(err);\n   *         } else {\n   *             console.log(results);\n   *             // results is now the original array of files sorted by\n   *             // file size (ascending by default), e.g.\n   *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n   *         }\n   *     }\n   * );\n   *\n   * // By modifying the callback parameter the\n   * // sorting order can be influenced:\n   *\n   * // ascending order\n   * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], function(file, callback) {\n   *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n   *         if (getFileSizeErr) return callback(getFileSizeErr);\n   *         callback(null, fileSize);\n   *     });\n   * }, function(err, results) {\n   *         if (err) {\n   *             console.log(err);\n   *         } else {\n   *             console.log(results);\n   *             // results is now the original array of files sorted by\n   *             // file size (ascending by default), e.g.\n   *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n   *         }\n   *     }\n   * );\n   *\n   * // descending order\n   * async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], function(file, callback) {\n   *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n   *         if (getFileSizeErr) {\n   *             return callback(getFileSizeErr);\n   *         }\n   *         callback(null, fileSize * -1);\n   *     });\n   * }, function(err, results) {\n   *         if (err) {\n   *             console.log(err);\n   *         } else {\n   *             console.log(results);\n   *             // results is now the original array of files sorted by\n   *             // file size (ascending by default), e.g.\n   *             // [ 'bigfile.txt', 'mediumfile.txt', 'smallfile.txt']\n   *         }\n   *     }\n   * );\n   *\n   * // Error handling\n   * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes,\n   *     function(err, results) {\n   *         if (err) {\n   *             console.log(err);\n   *             // [ Error: ENOENT: no such file or directory ]\n   *         } else {\n   *             console.log(results);\n   *         }\n   *     }\n   * );\n   *\n   * // Using Promises\n   * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes)\n   * .then( results => {\n   *     console.log(results);\n   *     // results is now the original array of files sorted by\n   *     // file size (ascending by default), e.g.\n   *     // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * // Error handling\n   * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes)\n   * .then( results => {\n   *     console.log(results);\n   * }).catch( err => {\n   *     console.log(err);\n   *     // [ Error: ENOENT: no such file or directory ]\n   * });\n   *\n   * // Using async/await\n   * (async () => {\n   *     try {\n   *         let results = await async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n   *         console.log(results);\n   *         // results is now the original array of files sorted by\n   *         // file size (ascending by default), e.g.\n   *         // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * })();\n   *\n   * // Error handling\n   * async () => {\n   *     try {\n   *         let results = await async.sortBy(['missingfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n   *         console.log(results);\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *     }\n   * }\n   *\n   */\n  function sortBy(coll, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return map$1(coll, (x, iterCb) => {\n      _iteratee(x, (err, criteria) => {\n        if (err) return iterCb(err);\n        iterCb(err, {\n          value: x,\n          criteria\n        });\n      });\n    }, (err, results) => {\n      if (err) return callback(err);\n      callback(null, results.sort(comparator).map(v => v.value));\n    });\n    function comparator(left, right) {\n      var a = left.criteria,\n        b = right.criteria;\n      return a < b ? -1 : a > b ? 1 : 0;\n    }\n  }\n  var sortBy$1 = awaitify(sortBy, 3);\n\n  /**\n   * Sets a time limit on an asynchronous function. If the function does not call\n   * its callback within the specified milliseconds, it will be called with a\n   * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n   *\n   * @name timeout\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} asyncFn - The async function to limit in time.\n   * @param {number} milliseconds - The specified time limit.\n   * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n   * to timeout Error for more information..\n   * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n   * of the control flow functions.\n   * Invoke this function with the same parameters as you would `asyncFunc`.\n   * @example\n   *\n   * function myFunction(foo, callback) {\n   *     doAsyncTask(foo, function(err, data) {\n   *         // handle errors\n   *         if (err) return callback(err);\n   *\n   *         // do some stuff ...\n   *\n   *         // return processed data\n   *         return callback(null, data);\n   *     });\n   * }\n   *\n   * var wrapped = async.timeout(myFunction, 1000);\n   *\n   * // call `wrapped` as you would `myFunction`\n   * wrapped({ bar: 'bar' }, function(err, data) {\n   *     // if `myFunction` takes < 1000 ms to execute, `err`\n   *     // and `data` will have their expected values\n   *\n   *     // else `err` will be an Error with the code 'ETIMEDOUT'\n   * });\n   */\n  function timeout(asyncFn, milliseconds, info) {\n    var fn = wrapAsync(asyncFn);\n    return initialParams((args, callback) => {\n      var timedOut = false;\n      var timer;\n      function timeoutCallback() {\n        var name = asyncFn.name || 'anonymous';\n        var error = new Error('Callback function \"' + name + '\" timed out.');\n        error.code = 'ETIMEDOUT';\n        if (info) {\n          error.info = info;\n        }\n        timedOut = true;\n        callback(error);\n      }\n      args.push((...cbArgs) => {\n        if (!timedOut) {\n          callback(...cbArgs);\n          clearTimeout(timer);\n        }\n      });\n\n      // setup timer and call original function\n      timer = setTimeout(timeoutCallback, milliseconds);\n      fn(...args);\n    });\n  }\n  function range(size) {\n    var result = Array(size);\n    while (size--) {\n      result[size] = size;\n    }\n    return result;\n  }\n\n  /**\n   * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name timesLimit\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.times]{@link module:ControlFlow.times}\n   * @category Control Flow\n   * @param {number} count - The number of times to run the function.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - The async function to call `n` times.\n   * Invoked with the iteration index and a callback: (n, next).\n   * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n   * @returns {Promise} a promise, if no callback is provided\n   */\n  function timesLimit(count, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(range(count), limit, _iteratee, callback);\n  }\n\n  /**\n   * Calls the `iteratee` function `n` times, and accumulates results in the same\n   * manner you would use with [map]{@link module:Collections.map}.\n   *\n   * @name times\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.map]{@link module:Collections.map}\n   * @category Control Flow\n   * @param {number} n - The number of times to run the function.\n   * @param {AsyncFunction} iteratee - The async function to call `n` times.\n   * Invoked with the iteration index and a callback: (n, next).\n   * @param {Function} callback - see {@link module:Collections.map}.\n   * @returns {Promise} a promise, if no callback is provided\n   * @example\n   *\n   * // Pretend this is some complicated async factory\n   * var createUser = function(id, callback) {\n   *     callback(null, {\n   *         id: 'user' + id\n   *     });\n   * };\n   *\n   * // generate 5 users\n   * async.times(5, function(n, next) {\n   *     createUser(n, function(err, user) {\n   *         next(err, user);\n   *     });\n   * }, function(err, users) {\n   *     // we should now have 5 users\n   * });\n   */\n  function times(n, iteratee, callback) {\n    return timesLimit(n, Infinity, iteratee, callback);\n  }\n\n  /**\n   * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n   *\n   * @name timesSeries\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.times]{@link module:ControlFlow.times}\n   * @category Control Flow\n   * @param {number} n - The number of times to run the function.\n   * @param {AsyncFunction} iteratee - The async function to call `n` times.\n   * Invoked with the iteration index and a callback: (n, next).\n   * @param {Function} callback - see {@link module:Collections.map}.\n   * @returns {Promise} a promise, if no callback is provided\n   */\n  function timesSeries(n, iteratee, callback) {\n    return timesLimit(n, 1, iteratee, callback);\n  }\n\n  /**\n   * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n   * element in parallel, each step potentially mutating an `accumulator` value.\n   * The type of the accumulator defaults to the type of collection passed in.\n   *\n   * @name transform\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n   * it will default to an empty Object or Array, depending on the type of `coll`\n   * @param {AsyncFunction} iteratee - A function applied to each item in the\n   * collection that potentially modifies the accumulator.\n   * Invoked with (accumulator, item, key, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result is the transformed accumulator.\n   * Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback provided\n   * @example\n   *\n   * // file1.txt is a file that is 1000 bytes in size\n   * // file2.txt is a file that is 2000 bytes in size\n   * // file3.txt is a file that is 3000 bytes in size\n   *\n   * // helper function that returns human-readable size format from bytes\n   * function formatBytes(bytes, decimals = 2) {\n   *   // implementation not included for brevity\n   *   return humanReadbleFilesize;\n   * }\n   *\n   * const fileList = ['file1.txt','file2.txt','file3.txt'];\n   *\n   * // asynchronous function that returns the file size, transformed to human-readable format\n   * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n   * function transformFileSize(acc, value, key, callback) {\n   *     fs.stat(value, function(err, stat) {\n   *         if (err) {\n   *             return callback(err);\n   *         }\n   *         acc[key] = formatBytes(stat.size);\n   *         callback(null);\n   *     });\n   * }\n   *\n   * // Using callbacks\n   * async.transform(fileList, transformFileSize, function(err, result) {\n   *     if(err) {\n   *         console.log(err);\n   *     } else {\n   *         console.log(result);\n   *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n   *     }\n   * });\n   *\n   * // Using Promises\n   * async.transform(fileList, transformFileSize)\n   * .then(result => {\n   *     console.log(result);\n   *     // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n   * }).catch(err => {\n   *     console.log(err);\n   * });\n   *\n   * // Using async/await\n   * (async () => {\n   *     try {\n   *         let result = await async.transform(fileList, transformFileSize);\n   *         console.log(result);\n   *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * })();\n   *\n   * @example\n   *\n   * // file1.txt is a file that is 1000 bytes in size\n   * // file2.txt is a file that is 2000 bytes in size\n   * // file3.txt is a file that is 3000 bytes in size\n   *\n   * // helper function that returns human-readable size format from bytes\n   * function formatBytes(bytes, decimals = 2) {\n   *   // implementation not included for brevity\n   *   return humanReadbleFilesize;\n   * }\n   *\n   * const fileMap = { f1: 'file1.txt', f2: 'file2.txt', f3: 'file3.txt' };\n   *\n   * // asynchronous function that returns the file size, transformed to human-readable format\n   * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n   * function transformFileSize(acc, value, key, callback) {\n   *     fs.stat(value, function(err, stat) {\n   *         if (err) {\n   *             return callback(err);\n   *         }\n   *         acc[key] = formatBytes(stat.size);\n   *         callback(null);\n   *     });\n   * }\n   *\n   * // Using callbacks\n   * async.transform(fileMap, transformFileSize, function(err, result) {\n   *     if(err) {\n   *         console.log(err);\n   *     } else {\n   *         console.log(result);\n   *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n   *     }\n   * });\n   *\n   * // Using Promises\n   * async.transform(fileMap, transformFileSize)\n   * .then(result => {\n   *     console.log(result);\n   *     // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n   * }).catch(err => {\n   *     console.log(err);\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let result = await async.transform(fileMap, transformFileSize);\n   *         console.log(result);\n   *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n  function transform(coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3 && typeof accumulator === 'function') {\n      callback = iteratee;\n      iteratee = accumulator;\n      accumulator = Array.isArray(coll) ? [] : {};\n    }\n    callback = once(callback || promiseCallback());\n    var _iteratee = wrapAsync(iteratee);\n    eachOf$1(coll, (v, k, cb) => {\n      _iteratee(accumulator, v, k, cb);\n    }, err => callback(err, accumulator));\n    return callback[PROMISE_SYMBOL];\n  }\n\n  /**\n   * It runs each task in series but stops whenever any of the functions were\n   * successful. If one of the tasks were successful, the `callback` will be\n   * passed the result of the successful task. If all tasks fail, the callback\n   * will be passed the error and result (if any) of the final attempt.\n   *\n   * @name tryEach\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n   * run, each function is passed a `callback(err, result)` it must call on\n   * completion with an error `err` (which can be `null`) and an optional `result`\n   * value.\n   * @param {Function} [callback] - An optional callback which is called when one\n   * of the tasks has succeeded, or all have failed. It receives the `err` and\n   * `result` arguments of the last attempt at completing the `task`. Invoked with\n   * (err, results).\n   * @returns {Promise} a promise, if no callback is passed\n   * @example\n   * async.tryEach([\n   *     function getDataFromFirstWebsite(callback) {\n   *         // Try getting the data from the first website\n   *         callback(err, data);\n   *     },\n   *     function getDataFromSecondWebsite(callback) {\n   *         // First website failed,\n   *         // Try getting the data from the backup website\n   *         callback(err, data);\n   *     }\n   * ],\n   * // optional callback\n   * function(err, results) {\n   *     Now do something with the data.\n   * });\n   *\n   */\n  function tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    return eachSeries$1(tasks, (task, taskCb) => {\n      wrapAsync(task)((err, ...args) => {\n        if (err === false) return taskCb(err);\n        if (args.length < 2) {\n          [result] = args;\n        } else {\n          result = args;\n        }\n        error = err;\n        taskCb(err ? null : {});\n      });\n    }, () => callback(error, result));\n  }\n  var tryEach$1 = awaitify(tryEach);\n\n  /**\n   * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n   * unmemoized form. Handy for testing.\n   *\n   * @name unmemoize\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @see [async.memoize]{@link module:Utils.memoize}\n   * @category Util\n   * @param {AsyncFunction} fn - the memoized function\n   * @returns {AsyncFunction} a function that calls the original unmemoized function\n   */\n  function unmemoize(fn) {\n    return (...args) => {\n      return (fn.unmemoized || fn)(...args);\n    };\n  }\n\n  /**\n   * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n   * stopped, or an error occurs.\n   *\n   * @name whilst\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {AsyncFunction} test - asynchronous truth test to perform before each\n   * execution of `iteratee`. Invoked with ().\n   * @param {AsyncFunction} iteratee - An async function which is called each time\n   * `test` passes. Invoked with (callback).\n   * @param {Function} [callback] - A callback which is called after the test\n   * function has failed and repeated execution of `iteratee` has stopped. `callback`\n   * will be passed an error and any arguments passed to the final `iteratee`'s\n   * callback. Invoked with (err, [results]);\n   * @returns {Promise} a promise, if no callback is passed\n   * @example\n   *\n   * var count = 0;\n   * async.whilst(\n   *     function test(cb) { cb(null, count < 5); },\n   *     function iter(callback) {\n   *         count++;\n   *         setTimeout(function() {\n   *             callback(null, count);\n   *         }, 1000);\n   *     },\n   *     function (err, n) {\n   *         // 5 seconds have passed, n = 5\n   *     }\n   * );\n   */\n  function whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results = [];\n    function next(err, ...rest) {\n      if (err) return callback(err);\n      results = rest;\n      if (err === false) return;\n      _test(check);\n    }\n    function check(err, truth) {\n      if (err) return callback(err);\n      if (err === false) return;\n      if (!truth) return callback(null, ...results);\n      _fn(next);\n    }\n    return _test(check);\n  }\n  var whilst$1 = awaitify(whilst, 3);\n\n  /**\n   * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n   * stopped, or an error occurs. `callback` will be passed an error and any\n   * arguments passed to the final `iteratee`'s callback.\n   *\n   * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n   *\n   * @name until\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.whilst]{@link module:ControlFlow.whilst}\n   * @category Control Flow\n   * @param {AsyncFunction} test - asynchronous truth test to perform before each\n   * execution of `iteratee`. Invoked with (callback).\n   * @param {AsyncFunction} iteratee - An async function which is called each time\n   * `test` fails. Invoked with (callback).\n   * @param {Function} [callback] - A callback which is called after the test\n   * function has passed and repeated execution of `iteratee` has stopped. `callback`\n   * will be passed an error and any arguments passed to the final `iteratee`'s\n   * callback. Invoked with (err, [results]);\n   * @returns {Promise} a promise, if a callback is not passed\n   *\n   * @example\n   * const results = []\n   * let finished = false\n   * async.until(function test(cb) {\n   *     cb(null, finished)\n   * }, function iter(next) {\n   *     fetchPage(url, (err, body) => {\n   *         if (err) return next(err)\n   *         results = results.concat(body.objects)\n   *         finished = !!body.next\n   *         next(err)\n   *     })\n   * }, function done (err) {\n   *     // all pages have been fetched\n   * })\n   */\n  function until(test, iteratee, callback) {\n    const _test = wrapAsync(test);\n    return whilst$1(cb => _test((err, truth) => cb(err, !truth)), iteratee, callback);\n  }\n\n  /**\n   * Runs the `tasks` array of functions in series, each passing their results to\n   * the next in the array. However, if any of the `tasks` pass an error to their\n   * own callback, the next function is not executed, and the main `callback` is\n   * immediately called with the error.\n   *\n   * @name waterfall\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n   * to run.\n   * Each function should complete with any number of `result` values.\n   * The `result` values will be passed as arguments, in order, to the next task.\n   * @param {Function} [callback] - An optional callback to run once all the\n   * functions have completed. This will be passed the results of the last task's\n   * callback. Invoked with (err, [results]).\n   * @returns {Promise} a promise, if a callback is omitted\n   * @example\n   *\n   * async.waterfall([\n   *     function(callback) {\n   *         callback(null, 'one', 'two');\n   *     },\n   *     function(arg1, arg2, callback) {\n   *         // arg1 now equals 'one' and arg2 now equals 'two'\n   *         callback(null, 'three');\n   *     },\n   *     function(arg1, callback) {\n   *         // arg1 now equals 'three'\n   *         callback(null, 'done');\n   *     }\n   * ], function (err, result) {\n   *     // result now equals 'done'\n   * });\n   *\n   * // Or, with named functions:\n   * async.waterfall([\n   *     myFirstFunction,\n   *     mySecondFunction,\n   *     myLastFunction,\n   * ], function (err, result) {\n   *     // result now equals 'done'\n   * });\n   * function myFirstFunction(callback) {\n   *     callback(null, 'one', 'two');\n   * }\n   * function mySecondFunction(arg1, arg2, callback) {\n   *     // arg1 now equals 'one' and arg2 now equals 'two'\n   *     callback(null, 'three');\n   * }\n   * function myLastFunction(arg1, callback) {\n   *     // arg1 now equals 'three'\n   *     callback(null, 'done');\n   * }\n   */\n  function waterfall(tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n    function nextTask(args) {\n      var task = wrapAsync(tasks[taskIndex++]);\n      task(...args, onlyOnce(next));\n    }\n    function next(err, ...args) {\n      if (err === false) return;\n      if (err || taskIndex === tasks.length) {\n        return callback(err, ...args);\n      }\n      nextTask(args);\n    }\n    nextTask([]);\n  }\n  var waterfall$1 = awaitify(waterfall);\n\n  /**\n   * An \"async function\" in the context of Async is an asynchronous function with\n   * a variable number of parameters, with the final parameter being a callback.\n   * (`function (arg1, arg2, ..., callback) {}`)\n   * The final callback is of the form `callback(err, results...)`, which must be\n   * called once the function is completed.  The callback should be called with a\n   * Error as its first argument to signal that an error occurred.\n   * Otherwise, if no error occurred, it should be called with `null` as the first\n   * argument, and any additional `result` arguments that may apply, to signal\n   * successful completion.\n   * The callback must be called exactly once, ideally on a later tick of the\n   * JavaScript event loop.\n   *\n   * This type of function is also referred to as a \"Node-style async function\",\n   * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n   * library are themselves CPS/Node-style async functions, or functions that\n   * return CPS/Node-style async functions.\n   *\n   * Wherever we accept a Node-style async function, we also directly accept an\n   * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n   * In this case, the `async` function will not be passed a final callback\n   * argument, and any thrown error will be used as the `err` argument of the\n   * implicit callback, and the return value will be used as the `result` value.\n   * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n   * argument, and a `resolved` value becomes the `result`.)\n   *\n   * Note, due to JavaScript limitations, we can only detect native `async`\n   * functions and not transpilied implementations.\n   * Your environment must have `async`/`await` support for this to work.\n   * (e.g. Node > v7.6, or a recent version of a modern browser).\n   * If you are using `async` functions through a transpiler (e.g. Babel), you\n   * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n   * because the `async function` will be compiled to an ordinary function that\n   * returns a promise.\n   *\n   * @typedef {Function} AsyncFunction\n   * @static\n   */\n\n  var index = {\n    apply,\n    applyEach: applyEach$1,\n    applyEachSeries,\n    asyncify,\n    auto,\n    autoInject,\n    cargo,\n    cargoQueue: cargo$1,\n    compose,\n    concat: concat$1,\n    concatLimit: concatLimit$1,\n    concatSeries: concatSeries$1,\n    constant,\n    detect: detect$1,\n    detectLimit: detectLimit$1,\n    detectSeries: detectSeries$1,\n    dir,\n    doUntil,\n    doWhilst: doWhilst$1,\n    each,\n    eachLimit: eachLimit$2,\n    eachOf: eachOf$1,\n    eachOfLimit: eachOfLimit$2,\n    eachOfSeries: eachOfSeries$1,\n    eachSeries: eachSeries$1,\n    ensureAsync,\n    every: every$1,\n    everyLimit: everyLimit$1,\n    everySeries: everySeries$1,\n    filter: filter$1,\n    filterLimit: filterLimit$1,\n    filterSeries: filterSeries$1,\n    forever: forever$1,\n    groupBy,\n    groupByLimit: groupByLimit$1,\n    groupBySeries,\n    log,\n    map: map$1,\n    mapLimit: mapLimit$1,\n    mapSeries: mapSeries$1,\n    mapValues,\n    mapValuesLimit: mapValuesLimit$1,\n    mapValuesSeries,\n    memoize,\n    nextTick,\n    parallel: parallel$1,\n    parallelLimit,\n    priorityQueue,\n    queue: queue$1,\n    race: race$1,\n    reduce: reduce$1,\n    reduceRight,\n    reflect,\n    reflectAll,\n    reject: reject$2,\n    rejectLimit: rejectLimit$1,\n    rejectSeries: rejectSeries$1,\n    retry,\n    retryable,\n    seq,\n    series,\n    setImmediate: setImmediate$1,\n    some: some$1,\n    someLimit: someLimit$1,\n    someSeries: someSeries$1,\n    sortBy: sortBy$1,\n    timeout,\n    times,\n    timesLimit,\n    timesSeries,\n    transform,\n    tryEach: tryEach$1,\n    unmemoize,\n    until,\n    waterfall: waterfall$1,\n    whilst: whilst$1,\n    // aliases\n    all: every$1,\n    allLimit: everyLimit$1,\n    allSeries: everySeries$1,\n    any: some$1,\n    anyLimit: someLimit$1,\n    anySeries: someSeries$1,\n    find: detect$1,\n    findLimit: detectLimit$1,\n    findSeries: detectSeries$1,\n    flatMap: concat$1,\n    flatMapLimit: concatLimit$1,\n    flatMapSeries: concatSeries$1,\n    forEach: each,\n    forEachSeries: eachSeries$1,\n    forEachLimit: eachLimit$2,\n    forEachOf: eachOf$1,\n    forEachOfSeries: eachOfSeries$1,\n    forEachOfLimit: eachOfLimit$2,\n    inject: reduce$1,\n    foldl: reduce$1,\n    foldr: reduceRight,\n    select: filter$1,\n    selectLimit: filterLimit$1,\n    selectSeries: filterSeries$1,\n    wrapSync: asyncify,\n    during: whilst$1,\n    doDuring: doWhilst$1\n  };\n  exports.default = index;\n  exports.apply = apply;\n  exports.applyEach = applyEach$1;\n  exports.applyEachSeries = applyEachSeries;\n  exports.asyncify = asyncify;\n  exports.auto = auto;\n  exports.autoInject = autoInject;\n  exports.cargo = cargo;\n  exports.cargoQueue = cargo$1;\n  exports.compose = compose;\n  exports.concat = concat$1;\n  exports.concatLimit = concatLimit$1;\n  exports.concatSeries = concatSeries$1;\n  exports.constant = constant;\n  exports.detect = detect$1;\n  exports.detectLimit = detectLimit$1;\n  exports.detectSeries = detectSeries$1;\n  exports.dir = dir;\n  exports.doUntil = doUntil;\n  exports.doWhilst = doWhilst$1;\n  exports.each = each;\n  exports.eachLimit = eachLimit$2;\n  exports.eachOf = eachOf$1;\n  exports.eachOfLimit = eachOfLimit$2;\n  exports.eachOfSeries = eachOfSeries$1;\n  exports.eachSeries = eachSeries$1;\n  exports.ensureAsync = ensureAsync;\n  exports.every = every$1;\n  exports.everyLimit = everyLimit$1;\n  exports.everySeries = everySeries$1;\n  exports.filter = filter$1;\n  exports.filterLimit = filterLimit$1;\n  exports.filterSeries = filterSeries$1;\n  exports.forever = forever$1;\n  exports.groupBy = groupBy;\n  exports.groupByLimit = groupByLimit$1;\n  exports.groupBySeries = groupBySeries;\n  exports.log = log;\n  exports.map = map$1;\n  exports.mapLimit = mapLimit$1;\n  exports.mapSeries = mapSeries$1;\n  exports.mapValues = mapValues;\n  exports.mapValuesLimit = mapValuesLimit$1;\n  exports.mapValuesSeries = mapValuesSeries;\n  exports.memoize = memoize;\n  exports.nextTick = nextTick;\n  exports.parallel = parallel$1;\n  exports.parallelLimit = parallelLimit;\n  exports.priorityQueue = priorityQueue;\n  exports.queue = queue$1;\n  exports.race = race$1;\n  exports.reduce = reduce$1;\n  exports.reduceRight = reduceRight;\n  exports.reflect = reflect;\n  exports.reflectAll = reflectAll;\n  exports.reject = reject$2;\n  exports.rejectLimit = rejectLimit$1;\n  exports.rejectSeries = rejectSeries$1;\n  exports.retry = retry;\n  exports.retryable = retryable;\n  exports.seq = seq;\n  exports.series = series;\n  exports.setImmediate = setImmediate$1;\n  exports.some = some$1;\n  exports.someLimit = someLimit$1;\n  exports.someSeries = someSeries$1;\n  exports.sortBy = sortBy$1;\n  exports.timeout = timeout;\n  exports.times = times;\n  exports.timesLimit = timesLimit;\n  exports.timesSeries = timesSeries;\n  exports.transform = transform;\n  exports.tryEach = tryEach$1;\n  exports.unmemoize = unmemoize;\n  exports.until = until;\n  exports.waterfall = waterfall$1;\n  exports.whilst = whilst$1;\n  exports.all = every$1;\n  exports.allLimit = everyLimit$1;\n  exports.allSeries = everySeries$1;\n  exports.any = some$1;\n  exports.anyLimit = someLimit$1;\n  exports.anySeries = someSeries$1;\n  exports.find = detect$1;\n  exports.findLimit = detectLimit$1;\n  exports.findSeries = detectSeries$1;\n  exports.flatMap = concat$1;\n  exports.flatMapLimit = concatLimit$1;\n  exports.flatMapSeries = concatSeries$1;\n  exports.forEach = each;\n  exports.forEachSeries = eachSeries$1;\n  exports.forEachLimit = eachLimit$2;\n  exports.forEachOf = eachOf$1;\n  exports.forEachOfSeries = eachOfSeries$1;\n  exports.forEachOfLimit = eachOfLimit$2;\n  exports.inject = reduce$1;\n  exports.foldl = reduce$1;\n  exports.foldr = reduceRight;\n  exports.select = filter$1;\n  exports.selectLimit = filterLimit$1;\n  exports.selectSeries = filterSeries$1;\n  exports.wrapSync = asyncify;\n  exports.during = whilst$1;\n  exports.doDuring = doWhilst$1;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["global","factory","exports","module","define","amd","async","apply","fn","args","callArgs","initialParams","callback","pop","call","hasQueueMicrotask","queueMicrotask","hasSetImmediate","setImmediate","hasNextTick","process","nextTick","fallback","setTimeout","wrap","defer","_defer","setImmediate$1","asyncify","func","isAsync","promise","handlePromise","result","e","then","value","invokeCallback","err","message","Error","error","Symbol","toStringTag","isAsyncGenerator","isAsyncIterable","obj","asyncIterator","wrapAsync","asyncFn","awaitify","arity","length","awaitable","Promise","resolve","reject","cbArgs","applyEach","eachfn","fns","go","that","cb","concat","_asyncMap","arr","iteratee","results","counter","_iteratee","_","iterCb","index","v","isArrayLike","breakLoop","once","wrapper","callFn","Object","assign","getIterator","coll","iterator","createArrayIterator","i","len","next","key","createES2015Iterator","item","done","createObjectIterator","okeys","keys","createIterator","onlyOnce","asyncEachOfLimit","generator","limit","canceled","awaiting","running","idx","replenish","iterDone","iterateeCallback","catch","handleError","eachOfLimit","RangeError","nextElem","looping","elem","eachOfLimit$1","eachOfLimit$2","eachOfArrayLike","completed","iteratorCallback","eachOfGeneric","Infinity","eachOf","eachOfImplementation","eachOf$1","map","map$1","applyEach$1","eachOfSeries","eachOfSeries$1","mapSeries","mapSeries$1","applyEachSeries","PROMISE_SYMBOL","promiseCallback","res","rej","auto","tasks","concurrency","numTasks","runningTasks","hasError","listeners","create","readyTasks","readyToCheck","uncheckedDependencies","forEach","task","Array","isArray","enqueueTask","push","dependencies","slice","remainingDependencies","dependencyName","join","addListener","checkForDeadlocks","processQueue","runTask","run","shift","taskName","taskListeners","taskComplete","taskCallback","safeResults","rkey","taskFn","currentTask","getDependents","dependent","indexOf","FN_ARGS","ARROW_FN_ARGS","FN_ARG_SPLIT","FN_ARG","stripComments","string","stripped","endBlockComment","endIndex","parseParams","src","toString","match","replace","split","arg","trim","autoInject","newTasks","params","fnIsAsync","hasNoDeps","newTask","taskCb","newArgs","name","DLL","constructor","head","tail","removeLink","node","prev","empty","insertAfter","newNode","insertBefore","unshift","setInitial","toArray","cur","data","remove","testFn","curr","dll","queue","worker","payload","_worker","numRunning","workersList","events","drain","saturated","unsaturated","on","event","handler","handleAndRemove","off","ev","filter","trigger","processingScheduled","_insert","insertAtFront","rejectOnError","q","started","_createTaskItem","_tasks","_createCB","l","splice","buffer","idle","_maybeDrain","eventMethod","isProcessing","paused","datum","pushAsync","kill","unshiftAsync","Math","min","pause","resume","defineProperties","writable","cargo","cargo$1","reduce","memo","x","reduce$1","seq","functions","_functions","newargs","nextargs","compose","reverse","mapLimit","mapLimit$1","concatLimit","val","mapResults","concatLimit$1","concat$1","concatSeries","concatSeries$1","constant","ignoredArgs","_createTester","check","getResult","testPassed","testResult","detect","bool","detect$1","detectLimit","detectLimit$1","detectSeries","detectSeries$1","consoleFunc","resultArgs","console","dir","doWhilst","test","_fn","_test","truth","doWhilst$1","doUntil","_withoutIndex","eachLimit","each","eachLimit$1","eachLimit$2","eachSeries","eachSeries$1","ensureAsync","sync","innerArgs","every","every$1","everyLimit","everyLimit$1","everySeries","everySeries$1","filterArray","truthValues","filterGeneric","sort","a","b","_filter","filter$1","filterLimit","filterLimit$1","filterSeries","filterSeries$1","forever","errback","forever$1","groupByLimit","hasOwnProperty","prototype","groupByLimit$1","groupBy","groupBySeries","log","mapValuesLimit","newObj","mapValuesLimit$1","mapValues","mapValuesSeries","memoize","hasher","queues","memoized","unmemoized","_defer$1","parallel","parallel$1","parallelLimit","queue$1","items","Heap","heap","pushCount","Number","MIN_SAFE_INTEGER","percUp","p","smaller","parent","t","percDown","leftChi","top","j","y","priority","priorityQueue","createDataItems","race","TypeError","race$1","reduceRight","array","reversed","reflect","reflectOn","reflectCallback","retVal","reflectAll","reject$1","reject$2","rejectLimit","rejectLimit$1","rejectSeries","rejectSeries$1","constant$1","DEFAULT_TIMES","DEFAULT_INTERVAL","retry","opts","options","times","intervalFunc","arguments","parseTimes","_task","attempt","retryAttempt","errorFilter","acc","interval","retryable","series","some","Boolean","some$1","someLimit","someLimit$1","someSeries","someSeries$1","sortBy","criteria","comparator","left","right","sortBy$1","timeout","milliseconds","info","timedOut","timer","timeoutCallback","code","clearTimeout","range","size","timesLimit","count","n","timesSeries","transform","accumulator","k","tryEach","tryEach$1","unmemoize","whilst","rest","whilst$1","until","waterfall","taskIndex","nextTask","waterfall$1","cargoQueue","all","allLimit","allSeries","any","anyLimit","anySeries","find","findLimit","findSeries","flatMap","flatMapLimit","flatMapSeries","forEachSeries","forEachLimit","forEachOf","forEachOfSeries","forEachOfLimit","inject","foldl","foldr","select","selectLimit","selectSeries","wrapSync","during","doDuring","default","defineProperty"],"sourceRoot":"C:\\code\\FluidFramework5\\node_modules\\.pnpm\\async@3.2.4\\node_modules\\async\\dist\\","sources":["async.js"],"sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (factory((global.async = {})));\n}(this, (function (exports) { 'use strict';\n\n    /**\n     * Creates a continuation function with some arguments already applied.\n     *\n     * Useful as a shorthand when combined with other control flow functions. Any\n     * arguments passed to the returned function are added to the arguments\n     * originally passed to apply.\n     *\n     * @name apply\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {Function} fn - The function you want to eventually apply all\n     * arguments to. Invokes with (arguments...).\n     * @param {...*} arguments... - Any number of arguments to automatically apply\n     * when the continuation is called.\n     * @returns {Function} the partially-applied function\n     * @example\n     *\n     * // using apply\n     * async.parallel([\n     *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n     *     async.apply(fs.writeFile, 'testfile2', 'test2')\n     * ]);\n     *\n     *\n     * // the same process without using apply\n     * async.parallel([\n     *     function(callback) {\n     *         fs.writeFile('testfile1', 'test1', callback);\n     *     },\n     *     function(callback) {\n     *         fs.writeFile('testfile2', 'test2', callback);\n     *     }\n     * ]);\n     *\n     * // It's possible to pass any number of additional arguments when calling the\n     * // continuation:\n     *\n     * node> var fn = async.apply(sys.puts, 'one');\n     * node> fn('two', 'three');\n     * one\n     * two\n     * three\n     */\n    function apply(fn, ...args) {\n        return (...callArgs) => fn(...args,...callArgs);\n    }\n\n    function initialParams (fn) {\n        return function (...args/*, callback*/) {\n            var callback = args.pop();\n            return fn.call(this, args, callback);\n        };\n    }\n\n    /* istanbul ignore file */\n\n    var hasQueueMicrotask = typeof queueMicrotask === 'function' && queueMicrotask;\n    var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\n    var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\n    function fallback(fn) {\n        setTimeout(fn, 0);\n    }\n\n    function wrap(defer) {\n        return (fn, ...args) => defer(() => fn(...args));\n    }\n\n    var _defer;\n\n    if (hasQueueMicrotask) {\n        _defer = queueMicrotask;\n    } else if (hasSetImmediate) {\n        _defer = setImmediate;\n    } else if (hasNextTick) {\n        _defer = process.nextTick;\n    } else {\n        _defer = fallback;\n    }\n\n    var setImmediate$1 = wrap(_defer);\n\n    /**\n     * Take a sync function and make it async, passing its return value to a\n     * callback. This is useful for plugging sync functions into a waterfall,\n     * series, or other async functions. Any arguments passed to the generated\n     * function will be passed to the wrapped function (except for the final\n     * callback argument). Errors thrown will be passed to the callback.\n     *\n     * If the function passed to `asyncify` returns a Promise, that promises's\n     * resolved/rejected state will be used to call the callback, rather than simply\n     * the synchronous return value.\n     *\n     * This also means you can asyncify ES2017 `async` functions.\n     *\n     * @name asyncify\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @alias wrapSync\n     * @category Util\n     * @param {Function} func - The synchronous function, or Promise-returning\n     * function to convert to an {@link AsyncFunction}.\n     * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n     * invoked with `(args..., callback)`.\n     * @example\n     *\n     * // passing a regular synchronous function\n     * async.waterfall([\n     *     async.apply(fs.readFile, filename, \"utf8\"),\n     *     async.asyncify(JSON.parse),\n     *     function (data, next) {\n     *         // data is the result of parsing the text.\n     *         // If there was a parsing error, it would have been caught.\n     *     }\n     * ], callback);\n     *\n     * // passing a function returning a promise\n     * async.waterfall([\n     *     async.apply(fs.readFile, filename, \"utf8\"),\n     *     async.asyncify(function (contents) {\n     *         return db.model.create(contents);\n     *     }),\n     *     function (model, next) {\n     *         // `model` is the instantiated model object.\n     *         // If there was an error, this function would be skipped.\n     *     }\n     * ], callback);\n     *\n     * // es2017 example, though `asyncify` is not needed if your JS environment\n     * // supports async functions out of the box\n     * var q = async.queue(async.asyncify(async function(file) {\n     *     var intermediateStep = await processFile(file);\n     *     return await somePromise(intermediateStep)\n     * }));\n     *\n     * q.push(files);\n     */\n    function asyncify(func) {\n        if (isAsync(func)) {\n            return function (...args/*, callback*/) {\n                const callback = args.pop();\n                const promise = func.apply(this, args);\n                return handlePromise(promise, callback)\n            }\n        }\n\n        return initialParams(function (args, callback) {\n            var result;\n            try {\n                result = func.apply(this, args);\n            } catch (e) {\n                return callback(e);\n            }\n            // if result is Promise object\n            if (result && typeof result.then === 'function') {\n                return handlePromise(result, callback)\n            } else {\n                callback(null, result);\n            }\n        });\n    }\n\n    function handlePromise(promise, callback) {\n        return promise.then(value => {\n            invokeCallback(callback, null, value);\n        }, err => {\n            invokeCallback(callback, err && err.message ? err : new Error(err));\n        });\n    }\n\n    function invokeCallback(callback, error, value) {\n        try {\n            callback(error, value);\n        } catch (err) {\n            setImmediate$1(e => { throw e }, err);\n        }\n    }\n\n    function isAsync(fn) {\n        return fn[Symbol.toStringTag] === 'AsyncFunction';\n    }\n\n    function isAsyncGenerator(fn) {\n        return fn[Symbol.toStringTag] === 'AsyncGenerator';\n    }\n\n    function isAsyncIterable(obj) {\n        return typeof obj[Symbol.asyncIterator] === 'function';\n    }\n\n    function wrapAsync(asyncFn) {\n        if (typeof asyncFn !== 'function') throw new Error('expected a function')\n        return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n    }\n\n    // conditionally promisify a function.\n    // only return a promise if a callback is omitted\n    function awaitify (asyncFn, arity = asyncFn.length) {\n        if (!arity) throw new Error('arity is undefined')\n        function awaitable (...args) {\n            if (typeof args[arity - 1] === 'function') {\n                return asyncFn.apply(this, args)\n            }\n\n            return new Promise((resolve, reject) => {\n                args[arity - 1] = (err, ...cbArgs) => {\n                    if (err) return reject(err)\n                    resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);\n                };\n                asyncFn.apply(this, args);\n            })\n        }\n\n        return awaitable\n    }\n\n    function applyEach (eachfn) {\n        return function applyEach(fns, ...callArgs) {\n            const go = awaitify(function (callback) {\n                var that = this;\n                return eachfn(fns, (fn, cb) => {\n                    wrapAsync(fn).apply(that, callArgs.concat(cb));\n                }, callback);\n            });\n            return go;\n        };\n    }\n\n    function _asyncMap(eachfn, arr, iteratee, callback) {\n        arr = arr || [];\n        var results = [];\n        var counter = 0;\n        var _iteratee = wrapAsync(iteratee);\n\n        return eachfn(arr, (value, _, iterCb) => {\n            var index = counter++;\n            _iteratee(value, (err, v) => {\n                results[index] = v;\n                iterCb(err);\n            });\n        }, err => {\n            callback(err, results);\n        });\n    }\n\n    function isArrayLike(value) {\n        return value &&\n            typeof value.length === 'number' &&\n            value.length >= 0 &&\n            value.length % 1 === 0;\n    }\n\n    // A temporary value used to identify if the loop should be broken.\n    // See #1064, #1293\n    const breakLoop = {};\n\n    function once(fn) {\n        function wrapper (...args) {\n            if (fn === null) return;\n            var callFn = fn;\n            fn = null;\n            callFn.apply(this, args);\n        }\n        Object.assign(wrapper, fn);\n        return wrapper\n    }\n\n    function getIterator (coll) {\n        return coll[Symbol.iterator] && coll[Symbol.iterator]();\n    }\n\n    function createArrayIterator(coll) {\n        var i = -1;\n        var len = coll.length;\n        return function next() {\n            return ++i < len ? {value: coll[i], key: i} : null;\n        }\n    }\n\n    function createES2015Iterator(iterator) {\n        var i = -1;\n        return function next() {\n            var item = iterator.next();\n            if (item.done)\n                return null;\n            i++;\n            return {value: item.value, key: i};\n        }\n    }\n\n    function createObjectIterator(obj) {\n        var okeys = obj ? Object.keys(obj) : [];\n        var i = -1;\n        var len = okeys.length;\n        return function next() {\n            var key = okeys[++i];\n            if (key === '__proto__') {\n                return next();\n            }\n            return i < len ? {value: obj[key], key} : null;\n        };\n    }\n\n    function createIterator(coll) {\n        if (isArrayLike(coll)) {\n            return createArrayIterator(coll);\n        }\n\n        var iterator = getIterator(coll);\n        return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n    }\n\n    function onlyOnce(fn) {\n        return function (...args) {\n            if (fn === null) throw new Error(\"Callback was already called.\");\n            var callFn = fn;\n            fn = null;\n            callFn.apply(this, args);\n        };\n    }\n\n    // for async generators\n    function asyncEachOfLimit(generator, limit, iteratee, callback) {\n        let done = false;\n        let canceled = false;\n        let awaiting = false;\n        let running = 0;\n        let idx = 0;\n\n        function replenish() {\n            //console.log('replenish')\n            if (running >= limit || awaiting || done) return\n            //console.log('replenish awaiting')\n            awaiting = true;\n            generator.next().then(({value, done: iterDone}) => {\n                //console.log('got value', value)\n                if (canceled || done) return\n                awaiting = false;\n                if (iterDone) {\n                    done = true;\n                    if (running <= 0) {\n                        //console.log('done nextCb')\n                        callback(null);\n                    }\n                    return;\n                }\n                running++;\n                iteratee(value, idx, iterateeCallback);\n                idx++;\n                replenish();\n            }).catch(handleError);\n        }\n\n        function iterateeCallback(err, result) {\n            //console.log('iterateeCallback')\n            running -= 1;\n            if (canceled) return\n            if (err) return handleError(err)\n\n            if (err === false) {\n                done = true;\n                canceled = true;\n                return\n            }\n\n            if (result === breakLoop || (done && running <= 0)) {\n                done = true;\n                //console.log('done iterCb')\n                return callback(null);\n            }\n            replenish();\n        }\n\n        function handleError(err) {\n            if (canceled) return\n            awaiting = false;\n            done = true;\n            callback(err);\n        }\n\n        replenish();\n    }\n\n    var eachOfLimit = (limit) => {\n        return (obj, iteratee, callback) => {\n            callback = once(callback);\n            if (limit <= 0) {\n                throw new RangeError('concurrency limit cannot be less than 1')\n            }\n            if (!obj) {\n                return callback(null);\n            }\n            if (isAsyncGenerator(obj)) {\n                return asyncEachOfLimit(obj, limit, iteratee, callback)\n            }\n            if (isAsyncIterable(obj)) {\n                return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback)\n            }\n            var nextElem = createIterator(obj);\n            var done = false;\n            var canceled = false;\n            var running = 0;\n            var looping = false;\n\n            function iterateeCallback(err, value) {\n                if (canceled) return\n                running -= 1;\n                if (err) {\n                    done = true;\n                    callback(err);\n                }\n                else if (err === false) {\n                    done = true;\n                    canceled = true;\n                }\n                else if (value === breakLoop || (done && running <= 0)) {\n                    done = true;\n                    return callback(null);\n                }\n                else if (!looping) {\n                    replenish();\n                }\n            }\n\n            function replenish () {\n                looping = true;\n                while (running < limit && !done) {\n                    var elem = nextElem();\n                    if (elem === null) {\n                        done = true;\n                        if (running <= 0) {\n                            callback(null);\n                        }\n                        return;\n                    }\n                    running += 1;\n                    iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n                }\n                looping = false;\n            }\n\n            replenish();\n        };\n    };\n\n    /**\n     * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name eachOfLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.eachOf]{@link module:Collections.eachOf}\n     * @alias forEachOfLimit\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - An async function to apply to each\n     * item in `coll`. The `key` is the item's key, or index in the case of an\n     * array.\n     * Invoked with (item, key, callback).\n     * @param {Function} [callback] - A callback which is called when all\n     * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n     * @returns {Promise} a promise, if a callback is omitted\n     */\n    function eachOfLimit$1(coll, limit, iteratee, callback) {\n        return eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n    }\n\n    var eachOfLimit$2 = awaitify(eachOfLimit$1, 4);\n\n    // eachOf implementation optimized for array-likes\n    function eachOfArrayLike(coll, iteratee, callback) {\n        callback = once(callback);\n        var index = 0,\n            completed = 0,\n            {length} = coll,\n            canceled = false;\n        if (length === 0) {\n            callback(null);\n        }\n\n        function iteratorCallback(err, value) {\n            if (err === false) {\n                canceled = true;\n            }\n            if (canceled === true) return\n            if (err) {\n                callback(err);\n            } else if ((++completed === length) || value === breakLoop) {\n                callback(null);\n            }\n        }\n\n        for (; index < length; index++) {\n            iteratee(coll[index], index, onlyOnce(iteratorCallback));\n        }\n    }\n\n    // a generic version of eachOf which can handle array, object, and iterator cases.\n    function eachOfGeneric (coll, iteratee, callback) {\n        return eachOfLimit$2(coll, Infinity, iteratee, callback);\n    }\n\n    /**\n     * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n     * to the iteratee.\n     *\n     * @name eachOf\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias forEachOf\n     * @category Collection\n     * @see [async.each]{@link module:Collections.each}\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A function to apply to each\n     * item in `coll`.\n     * The `key` is the item's key, or index in the case of an array.\n     * Invoked with (item, key, callback).\n     * @param {Function} [callback] - A callback which is called when all\n     * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n     * @returns {Promise} a promise, if a callback is omitted\n     * @example\n     *\n     * // dev.json is a file containing a valid json object config for dev environment\n     * // dev.json is a file containing a valid json object config for test environment\n     * // prod.json is a file containing a valid json object config for prod environment\n     * // invalid.json is a file with a malformed json object\n     *\n     * let configs = {}; //global variable\n     * let validConfigFileMap = {dev: 'dev.json', test: 'test.json', prod: 'prod.json'};\n     * let invalidConfigFileMap = {dev: 'dev.json', test: 'test.json', invalid: 'invalid.json'};\n     *\n     * // asynchronous function that reads a json file and parses the contents as json object\n     * function parseFile(file, key, callback) {\n     *     fs.readFile(file, \"utf8\", function(err, data) {\n     *         if (err) return calback(err);\n     *         try {\n     *             configs[key] = JSON.parse(data);\n     *         } catch (e) {\n     *             return callback(e);\n     *         }\n     *         callback();\n     *     });\n     * }\n     *\n     * // Using callbacks\n     * async.forEachOf(validConfigFileMap, parseFile, function (err) {\n     *     if (err) {\n     *         console.error(err);\n     *     } else {\n     *         console.log(configs);\n     *         // configs is now a map of JSON data, e.g.\n     *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n     *     }\n     * });\n     *\n     * //Error handing\n     * async.forEachOf(invalidConfigFileMap, parseFile, function (err) {\n     *     if (err) {\n     *         console.error(err);\n     *         // JSON parse error exception\n     *     } else {\n     *         console.log(configs);\n     *     }\n     * });\n     *\n     * // Using Promises\n     * async.forEachOf(validConfigFileMap, parseFile)\n     * .then( () => {\n     *     console.log(configs);\n     *     // configs is now a map of JSON data, e.g.\n     *     // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n     * }).catch( err => {\n     *     console.error(err);\n     * });\n     *\n     * //Error handing\n     * async.forEachOf(invalidConfigFileMap, parseFile)\n     * .then( () => {\n     *     console.log(configs);\n     * }).catch( err => {\n     *     console.error(err);\n     *     // JSON parse error exception\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let result = await async.forEachOf(validConfigFileMap, parseFile);\n     *         console.log(configs);\n     *         // configs is now a map of JSON data, e.g.\n     *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * //Error handing\n     * async () => {\n     *     try {\n     *         let result = await async.forEachOf(invalidConfigFileMap, parseFile);\n     *         console.log(configs);\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *         // JSON parse error exception\n     *     }\n     * }\n     *\n     */\n    function eachOf(coll, iteratee, callback) {\n        var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n        return eachOfImplementation(coll, wrapAsync(iteratee), callback);\n    }\n\n    var eachOf$1 = awaitify(eachOf, 3);\n\n    /**\n     * Produces a new collection of values by mapping each value in `coll` through\n     * the `iteratee` function. The `iteratee` is called with an item from `coll`\n     * and a callback for when it has finished processing. Each of these callbacks\n     * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n     * `iteratee` passes an error to its callback, the main `callback` (for the\n     * `map` function) is immediately called with the error.\n     *\n     * Note, that since this function applies the `iteratee` to each item in\n     * parallel, there is no guarantee that the `iteratee` functions will complete\n     * in order. However, the results array will be in the same order as the\n     * original `coll`.\n     *\n     * If `map` is passed an Object, the results will be an Array.  The results\n     * will roughly be in the order of the original Objects' keys (but this can\n     * vary across JavaScript engines).\n     *\n     * @name map\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with the transformed item.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Results is an Array of the\n     * transformed items from the `coll`. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * // file1.txt is a file that is 1000 bytes in size\n     * // file2.txt is a file that is 2000 bytes in size\n     * // file3.txt is a file that is 3000 bytes in size\n     * // file4.txt does not exist\n     *\n     * const fileList = ['file1.txt','file2.txt','file3.txt'];\n     * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n     *\n     * // asynchronous function that returns the file size in bytes\n     * function getFileSizeInBytes(file, callback) {\n     *     fs.stat(file, function(err, stat) {\n     *         if (err) {\n     *             return callback(err);\n     *         }\n     *         callback(null, stat.size);\n     *     });\n     * }\n     *\n     * // Using callbacks\n     * async.map(fileList, getFileSizeInBytes, function(err, results) {\n     *     if (err) {\n     *         console.log(err);\n     *     } else {\n     *         console.log(results);\n     *         // results is now an array of the file size in bytes for each file, e.g.\n     *         // [ 1000, 2000, 3000]\n     *     }\n     * });\n     *\n     * // Error Handling\n     * async.map(withMissingFileList, getFileSizeInBytes, function(err, results) {\n     *     if (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *     } else {\n     *         console.log(results);\n     *     }\n     * });\n     *\n     * // Using Promises\n     * async.map(fileList, getFileSizeInBytes)\n     * .then( results => {\n     *     console.log(results);\n     *     // results is now an array of the file size in bytes for each file, e.g.\n     *     // [ 1000, 2000, 3000]\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * // Error Handling\n     * async.map(withMissingFileList, getFileSizeInBytes)\n     * .then( results => {\n     *     console.log(results);\n     * }).catch( err => {\n     *     console.log(err);\n     *     // [ Error: ENOENT: no such file or directory ]\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let results = await async.map(fileList, getFileSizeInBytes);\n     *         console.log(results);\n     *         // results is now an array of the file size in bytes for each file, e.g.\n     *         // [ 1000, 2000, 3000]\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * // Error Handling\n     * async () => {\n     *     try {\n     *         let results = await async.map(withMissingFileList, getFileSizeInBytes);\n     *         console.log(results);\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *     }\n     * }\n     *\n     */\n    function map (coll, iteratee, callback) {\n        return _asyncMap(eachOf$1, coll, iteratee, callback)\n    }\n    var map$1 = awaitify(map, 3);\n\n    /**\n     * Applies the provided arguments to each function in the array, calling\n     * `callback` after all functions have completed. If you only provide the first\n     * argument, `fns`, then it will return a function which lets you pass in the\n     * arguments as if it were a single function call. If more arguments are\n     * provided, `callback` is required while `args` is still optional. The results\n     * for each of the applied async functions are passed to the final callback\n     * as an array.\n     *\n     * @name applyEach\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n     * to all call with the same arguments\n     * @param {...*} [args] - any number of separate arguments to pass to the\n     * function.\n     * @param {Function} [callback] - the final argument should be the callback,\n     * called when all functions have completed processing.\n     * @returns {AsyncFunction} - Returns a function that takes no args other than\n     * an optional callback, that is the result of applying the `args` to each\n     * of the functions.\n     * @example\n     *\n     * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')\n     *\n     * appliedFn((err, results) => {\n     *     // results[0] is the results for `enableSearch`\n     *     // results[1] is the results for `updateSchema`\n     * });\n     *\n     * // partial application example:\n     * async.each(\n     *     buckets,\n     *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),\n     *     callback\n     * );\n     */\n    var applyEach$1 = applyEach(map$1);\n\n    /**\n     * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n     *\n     * @name eachOfSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.eachOf]{@link module:Collections.eachOf}\n     * @alias forEachOfSeries\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * Invoked with (item, key, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Invoked with (err).\n     * @returns {Promise} a promise, if a callback is omitted\n     */\n    function eachOfSeries(coll, iteratee, callback) {\n        return eachOfLimit$2(coll, 1, iteratee, callback)\n    }\n    var eachOfSeries$1 = awaitify(eachOfSeries, 3);\n\n    /**\n     * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n     *\n     * @name mapSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.map]{@link module:Collections.map}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with the transformed item.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Results is an array of the\n     * transformed items from the `coll`. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function mapSeries (coll, iteratee, callback) {\n        return _asyncMap(eachOfSeries$1, coll, iteratee, callback)\n    }\n    var mapSeries$1 = awaitify(mapSeries, 3);\n\n    /**\n     * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n     *\n     * @name applyEachSeries\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n     * @category Control Flow\n     * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all\n     * call with the same arguments\n     * @param {...*} [args] - any number of separate arguments to pass to the\n     * function.\n     * @param {Function} [callback] - the final argument should be the callback,\n     * called when all functions have completed processing.\n     * @returns {AsyncFunction} - A function, that when called, is the result of\n     * appling the `args` to the list of functions.  It takes no args, other than\n     * a callback.\n     */\n    var applyEachSeries = applyEach(mapSeries$1);\n\n    const PROMISE_SYMBOL = Symbol('promiseCallback');\n\n    function promiseCallback () {\n        let resolve, reject;\n        function callback (err, ...args) {\n            if (err) return reject(err)\n            resolve(args.length > 1 ? args : args[0]);\n        }\n\n        callback[PROMISE_SYMBOL] = new Promise((res, rej) => {\n            resolve = res,\n            reject = rej;\n        });\n\n        return callback\n    }\n\n    /**\n     * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n     * their requirements. Each function can optionally depend on other functions\n     * being completed first, and each function is run as soon as its requirements\n     * are satisfied.\n     *\n     * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n     * will stop. Further tasks will not execute (so any other functions depending\n     * on it will not run), and the main `callback` is immediately called with the\n     * error.\n     *\n     * {@link AsyncFunction}s also receive an object containing the results of functions which\n     * have completed so far as the first argument, if they have dependencies. If a\n     * task function has no dependencies, it will only be passed a callback.\n     *\n     * @name auto\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Object} tasks - An object. Each of its properties is either a\n     * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n     * in the array. The object's key of a property serves as the name of the task\n     * defined by that property, i.e. can be used when specifying requirements for\n     * other tasks. The function receives one or two arguments:\n     * * a `results` object, containing the results of the previously executed\n     *   functions, only passed if the task has any dependencies,\n     * * a `callback(err, result)` function, which must be called when finished,\n     *   passing an `error` (which can be `null`) and the result of the function's\n     *   execution.\n     * @param {number} [concurrency=Infinity] - An optional `integer` for\n     * determining the maximum number of tasks that can be run in parallel. By\n     * default, as many as possible.\n     * @param {Function} [callback] - An optional callback which is called when all\n     * the tasks have been completed. It receives the `err` argument if any `tasks`\n     * pass an error to their callback. Results are always returned; however, if an\n     * error occurs, no further `tasks` will be performed, and the results object\n     * will only contain partial results. Invoked with (err, results).\n     * @returns {Promise} a promise, if a callback is not passed\n     * @example\n     *\n     * //Using Callbacks\n     * async.auto({\n     *     get_data: function(callback) {\n     *         // async code to get some data\n     *         callback(null, 'data', 'converted to array');\n     *     },\n     *     make_folder: function(callback) {\n     *         // async code to create a directory to store a file in\n     *         // this is run at the same time as getting the data\n     *         callback(null, 'folder');\n     *     },\n     *     write_file: ['get_data', 'make_folder', function(results, callback) {\n     *         // once there is some data and the directory exists,\n     *         // write the data to a file in the directory\n     *         callback(null, 'filename');\n     *     }],\n     *     email_link: ['write_file', function(results, callback) {\n     *         // once the file is written let's email a link to it...\n     *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n     *     }]\n     * }, function(err, results) {\n     *     if (err) {\n     *         console.log('err = ', err);\n     *     }\n     *     console.log('results = ', results);\n     *     // results = {\n     *     //     get_data: ['data', 'converted to array']\n     *     //     make_folder; 'folder',\n     *     //     write_file: 'filename'\n     *     //     email_link: { file: 'filename', email: 'user@example.com' }\n     *     // }\n     * });\n     *\n     * //Using Promises\n     * async.auto({\n     *     get_data: function(callback) {\n     *         console.log('in get_data');\n     *         // async code to get some data\n     *         callback(null, 'data', 'converted to array');\n     *     },\n     *     make_folder: function(callback) {\n     *         console.log('in make_folder');\n     *         // async code to create a directory to store a file in\n     *         // this is run at the same time as getting the data\n     *         callback(null, 'folder');\n     *     },\n     *     write_file: ['get_data', 'make_folder', function(results, callback) {\n     *         // once there is some data and the directory exists,\n     *         // write the data to a file in the directory\n     *         callback(null, 'filename');\n     *     }],\n     *     email_link: ['write_file', function(results, callback) {\n     *         // once the file is written let's email a link to it...\n     *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n     *     }]\n     * }).then(results => {\n     *     console.log('results = ', results);\n     *     // results = {\n     *     //     get_data: ['data', 'converted to array']\n     *     //     make_folder; 'folder',\n     *     //     write_file: 'filename'\n     *     //     email_link: { file: 'filename', email: 'user@example.com' }\n     *     // }\n     * }).catch(err => {\n     *     console.log('err = ', err);\n     * });\n     *\n     * //Using async/await\n     * async () => {\n     *     try {\n     *         let results = await async.auto({\n     *             get_data: function(callback) {\n     *                 // async code to get some data\n     *                 callback(null, 'data', 'converted to array');\n     *             },\n     *             make_folder: function(callback) {\n     *                 // async code to create a directory to store a file in\n     *                 // this is run at the same time as getting the data\n     *                 callback(null, 'folder');\n     *             },\n     *             write_file: ['get_data', 'make_folder', function(results, callback) {\n     *                 // once there is some data and the directory exists,\n     *                 // write the data to a file in the directory\n     *                 callback(null, 'filename');\n     *             }],\n     *             email_link: ['write_file', function(results, callback) {\n     *                 // once the file is written let's email a link to it...\n     *                 callback(null, {'file':results.write_file, 'email':'user@example.com'});\n     *             }]\n     *         });\n     *         console.log('results = ', results);\n     *         // results = {\n     *         //     get_data: ['data', 'converted to array']\n     *         //     make_folder; 'folder',\n     *         //     write_file: 'filename'\n     *         //     email_link: { file: 'filename', email: 'user@example.com' }\n     *         // }\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function auto(tasks, concurrency, callback) {\n        if (typeof concurrency !== 'number') {\n            // concurrency is optional, shift the args.\n            callback = concurrency;\n            concurrency = null;\n        }\n        callback = once(callback || promiseCallback());\n        var numTasks = Object.keys(tasks).length;\n        if (!numTasks) {\n            return callback(null);\n        }\n        if (!concurrency) {\n            concurrency = numTasks;\n        }\n\n        var results = {};\n        var runningTasks = 0;\n        var canceled = false;\n        var hasError = false;\n\n        var listeners = Object.create(null);\n\n        var readyTasks = [];\n\n        // for cycle detection:\n        var readyToCheck = []; // tasks that have been identified as reachable\n        // without the possibility of returning to an ancestor task\n        var uncheckedDependencies = {};\n\n        Object.keys(tasks).forEach(key => {\n            var task = tasks[key];\n            if (!Array.isArray(task)) {\n                // no dependencies\n                enqueueTask(key, [task]);\n                readyToCheck.push(key);\n                return;\n            }\n\n            var dependencies = task.slice(0, task.length - 1);\n            var remainingDependencies = dependencies.length;\n            if (remainingDependencies === 0) {\n                enqueueTask(key, task);\n                readyToCheck.push(key);\n                return;\n            }\n            uncheckedDependencies[key] = remainingDependencies;\n\n            dependencies.forEach(dependencyName => {\n                if (!tasks[dependencyName]) {\n                    throw new Error('async.auto task `' + key +\n                        '` has a non-existent dependency `' +\n                        dependencyName + '` in ' +\n                        dependencies.join(', '));\n                }\n                addListener(dependencyName, () => {\n                    remainingDependencies--;\n                    if (remainingDependencies === 0) {\n                        enqueueTask(key, task);\n                    }\n                });\n            });\n        });\n\n        checkForDeadlocks();\n        processQueue();\n\n        function enqueueTask(key, task) {\n            readyTasks.push(() => runTask(key, task));\n        }\n\n        function processQueue() {\n            if (canceled) return\n            if (readyTasks.length === 0 && runningTasks === 0) {\n                return callback(null, results);\n            }\n            while(readyTasks.length && runningTasks < concurrency) {\n                var run = readyTasks.shift();\n                run();\n            }\n\n        }\n\n        function addListener(taskName, fn) {\n            var taskListeners = listeners[taskName];\n            if (!taskListeners) {\n                taskListeners = listeners[taskName] = [];\n            }\n\n            taskListeners.push(fn);\n        }\n\n        function taskComplete(taskName) {\n            var taskListeners = listeners[taskName] || [];\n            taskListeners.forEach(fn => fn());\n            processQueue();\n        }\n\n\n        function runTask(key, task) {\n            if (hasError) return;\n\n            var taskCallback = onlyOnce((err, ...result) => {\n                runningTasks--;\n                if (err === false) {\n                    canceled = true;\n                    return\n                }\n                if (result.length < 2) {\n                    [result] = result;\n                }\n                if (err) {\n                    var safeResults = {};\n                    Object.keys(results).forEach(rkey => {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[key] = result;\n                    hasError = true;\n                    listeners = Object.create(null);\n                    if (canceled) return\n                    callback(err, safeResults);\n                } else {\n                    results[key] = result;\n                    taskComplete(key);\n                }\n            });\n\n            runningTasks++;\n            var taskFn = wrapAsync(task[task.length - 1]);\n            if (task.length > 1) {\n                taskFn(results, taskCallback);\n            } else {\n                taskFn(taskCallback);\n            }\n        }\n\n        function checkForDeadlocks() {\n            // Kahn's algorithm\n            // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n            // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n            var currentTask;\n            var counter = 0;\n            while (readyToCheck.length) {\n                currentTask = readyToCheck.pop();\n                counter++;\n                getDependents(currentTask).forEach(dependent => {\n                    if (--uncheckedDependencies[dependent] === 0) {\n                        readyToCheck.push(dependent);\n                    }\n                });\n            }\n\n            if (counter !== numTasks) {\n                throw new Error(\n                    'async.auto cannot execute tasks due to a recursive dependency'\n                );\n            }\n        }\n\n        function getDependents(taskName) {\n            var result = [];\n            Object.keys(tasks).forEach(key => {\n                const task = tasks[key];\n                if (Array.isArray(task) && task.indexOf(taskName) >= 0) {\n                    result.push(key);\n                }\n            });\n            return result;\n        }\n\n        return callback[PROMISE_SYMBOL]\n    }\n\n    var FN_ARGS = /^(?:async\\s+)?(?:function)?\\s*\\w*\\s*\\(\\s*([^)]+)\\s*\\)(?:\\s*{)/;\n    var ARROW_FN_ARGS = /^(?:async\\s+)?\\(?\\s*([^)=]+)\\s*\\)?(?:\\s*=>)/;\n    var FN_ARG_SPLIT = /,/;\n    var FN_ARG = /(=.+)?(\\s*)$/;\n\n    function stripComments(string) {\n        let stripped = '';\n        let index = 0;\n        let endBlockComment = string.indexOf('*/');\n        while (index < string.length) {\n            if (string[index] === '/' && string[index+1] === '/') {\n                // inline comment\n                let endIndex = string.indexOf('\\n', index);\n                index = (endIndex === -1) ? string.length : endIndex;\n            } else if ((endBlockComment !== -1) && (string[index] === '/') && (string[index+1] === '*')) {\n                // block comment\n                let endIndex = string.indexOf('*/', index);\n                if (endIndex !== -1) {\n                    index = endIndex + 2;\n                    endBlockComment = string.indexOf('*/', index);\n                } else {\n                    stripped += string[index];\n                    index++;\n                }\n            } else {\n                stripped += string[index];\n                index++;\n            }\n        }\n        return stripped;\n    }\n\n    function parseParams(func) {\n        const src = stripComments(func.toString());\n        let match = src.match(FN_ARGS);\n        if (!match) {\n            match = src.match(ARROW_FN_ARGS);\n        }\n        if (!match) throw new Error('could not parse args in autoInject\\nSource:\\n' + src)\n        let [, args] = match;\n        return args\n            .replace(/\\s/g, '')\n            .split(FN_ARG_SPLIT)\n            .map((arg) => arg.replace(FN_ARG, '').trim());\n    }\n\n    /**\n     * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n     * tasks are specified as parameters to the function, after the usual callback\n     * parameter, with the parameter names matching the names of the tasks it\n     * depends on. This can provide even more readable task graphs which can be\n     * easier to maintain.\n     *\n     * If a final callback is specified, the task results are similarly injected,\n     * specified as named parameters after the initial error parameter.\n     *\n     * The autoInject function is purely syntactic sugar and its semantics are\n     * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n     *\n     * @name autoInject\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.auto]{@link module:ControlFlow.auto}\n     * @category Control Flow\n     * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n     * the form 'func([dependencies...], callback). The object's key of a property\n     * serves as the name of the task defined by that property, i.e. can be used\n     * when specifying requirements for other tasks.\n     * * The `callback` parameter is a `callback(err, result)` which must be called\n     *   when finished, passing an `error` (which can be `null`) and the result of\n     *   the function's execution. The remaining parameters name other tasks on\n     *   which the task is dependent, and the results from those tasks are the\n     *   arguments of those parameters.\n     * @param {Function} [callback] - An optional callback which is called when all\n     * the tasks have been completed. It receives the `err` argument if any `tasks`\n     * pass an error to their callback, and a `results` object with any completed\n     * task results, similar to `auto`.\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * //  The example from `auto` can be rewritten as follows:\n     * async.autoInject({\n     *     get_data: function(callback) {\n     *         // async code to get some data\n     *         callback(null, 'data', 'converted to array');\n     *     },\n     *     make_folder: function(callback) {\n     *         // async code to create a directory to store a file in\n     *         // this is run at the same time as getting the data\n     *         callback(null, 'folder');\n     *     },\n     *     write_file: function(get_data, make_folder, callback) {\n     *         // once there is some data and the directory exists,\n     *         // write the data to a file in the directory\n     *         callback(null, 'filename');\n     *     },\n     *     email_link: function(write_file, callback) {\n     *         // once the file is written let's email a link to it...\n     *         // write_file contains the filename returned by write_file.\n     *         callback(null, {'file':write_file, 'email':'user@example.com'});\n     *     }\n     * }, function(err, results) {\n     *     console.log('err = ', err);\n     *     console.log('email_link = ', results.email_link);\n     * });\n     *\n     * // If you are using a JS minifier that mangles parameter names, `autoInject`\n     * // will not work with plain functions, since the parameter names will be\n     * // collapsed to a single letter identifier.  To work around this, you can\n     * // explicitly specify the names of the parameters your task function needs\n     * // in an array, similar to Angular.js dependency injection.\n     *\n     * // This still has an advantage over plain `auto`, since the results a task\n     * // depends on are still spread into arguments.\n     * async.autoInject({\n     *     //...\n     *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n     *         callback(null, 'filename');\n     *     }],\n     *     email_link: ['write_file', function(write_file, callback) {\n     *         callback(null, {'file':write_file, 'email':'user@example.com'});\n     *     }]\n     *     //...\n     * }, function(err, results) {\n     *     console.log('err = ', err);\n     *     console.log('email_link = ', results.email_link);\n     * });\n     */\n    function autoInject(tasks, callback) {\n        var newTasks = {};\n\n        Object.keys(tasks).forEach(key => {\n            var taskFn = tasks[key];\n            var params;\n            var fnIsAsync = isAsync(taskFn);\n            var hasNoDeps =\n                (!fnIsAsync && taskFn.length === 1) ||\n                (fnIsAsync && taskFn.length === 0);\n\n            if (Array.isArray(taskFn)) {\n                params = [...taskFn];\n                taskFn = params.pop();\n\n                newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n            } else if (hasNoDeps) {\n                // no dependencies, use the function as-is\n                newTasks[key] = taskFn;\n            } else {\n                params = parseParams(taskFn);\n                if ((taskFn.length === 0 && !fnIsAsync) && params.length === 0) {\n                    throw new Error(\"autoInject task functions require explicit parameters.\");\n                }\n\n                // remove callback param\n                if (!fnIsAsync) params.pop();\n\n                newTasks[key] = params.concat(newTask);\n            }\n\n            function newTask(results, taskCb) {\n                var newArgs = params.map(name => results[name]);\n                newArgs.push(taskCb);\n                wrapAsync(taskFn)(...newArgs);\n            }\n        });\n\n        return auto(newTasks, callback);\n    }\n\n    // Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n    // used for queues. This implementation assumes that the node provided by the user can be modified\n    // to adjust the next and last properties. We implement only the minimal functionality\n    // for queue support.\n    class DLL {\n        constructor() {\n            this.head = this.tail = null;\n            this.length = 0;\n        }\n\n        removeLink(node) {\n            if (node.prev) node.prev.next = node.next;\n            else this.head = node.next;\n            if (node.next) node.next.prev = node.prev;\n            else this.tail = node.prev;\n\n            node.prev = node.next = null;\n            this.length -= 1;\n            return node;\n        }\n\n        empty () {\n            while(this.head) this.shift();\n            return this;\n        }\n\n        insertAfter(node, newNode) {\n            newNode.prev = node;\n            newNode.next = node.next;\n            if (node.next) node.next.prev = newNode;\n            else this.tail = newNode;\n            node.next = newNode;\n            this.length += 1;\n        }\n\n        insertBefore(node, newNode) {\n            newNode.prev = node.prev;\n            newNode.next = node;\n            if (node.prev) node.prev.next = newNode;\n            else this.head = newNode;\n            node.prev = newNode;\n            this.length += 1;\n        }\n\n        unshift(node) {\n            if (this.head) this.insertBefore(this.head, node);\n            else setInitial(this, node);\n        }\n\n        push(node) {\n            if (this.tail) this.insertAfter(this.tail, node);\n            else setInitial(this, node);\n        }\n\n        shift() {\n            return this.head && this.removeLink(this.head);\n        }\n\n        pop() {\n            return this.tail && this.removeLink(this.tail);\n        }\n\n        toArray() {\n            return [...this]\n        }\n\n        *[Symbol.iterator] () {\n            var cur = this.head;\n            while (cur) {\n                yield cur.data;\n                cur = cur.next;\n            }\n        }\n\n        remove (testFn) {\n            var curr = this.head;\n            while(curr) {\n                var {next} = curr;\n                if (testFn(curr)) {\n                    this.removeLink(curr);\n                }\n                curr = next;\n            }\n            return this;\n        }\n    }\n\n    function setInitial(dll, node) {\n        dll.length = 1;\n        dll.head = dll.tail = node;\n    }\n\n    function queue(worker, concurrency, payload) {\n        if (concurrency == null) {\n            concurrency = 1;\n        }\n        else if(concurrency === 0) {\n            throw new RangeError('Concurrency must not be zero');\n        }\n\n        var _worker = wrapAsync(worker);\n        var numRunning = 0;\n        var workersList = [];\n        const events = {\n            error: [],\n            drain: [],\n            saturated: [],\n            unsaturated: [],\n            empty: []\n        };\n\n        function on (event, handler) {\n            events[event].push(handler);\n        }\n\n        function once (event, handler) {\n            const handleAndRemove = (...args) => {\n                off(event, handleAndRemove);\n                handler(...args);\n            };\n            events[event].push(handleAndRemove);\n        }\n\n        function off (event, handler) {\n            if (!event) return Object.keys(events).forEach(ev => events[ev] = [])\n            if (!handler) return events[event] = []\n            events[event] = events[event].filter(ev => ev !== handler);\n        }\n\n        function trigger (event, ...args) {\n            events[event].forEach(handler => handler(...args));\n        }\n\n        var processingScheduled = false;\n        function _insert(data, insertAtFront, rejectOnError, callback) {\n            if (callback != null && typeof callback !== 'function') {\n                throw new Error('task callback must be a function');\n            }\n            q.started = true;\n\n            var res, rej;\n            function promiseCallback (err, ...args) {\n                // we don't care about the error, let the global error handler\n                // deal with it\n                if (err) return rejectOnError ? rej(err) : res()\n                if (args.length <= 1) return res(args[0])\n                res(args);\n            }\n\n            var item = q._createTaskItem(\n                data,\n                rejectOnError ? promiseCallback :\n                    (callback || promiseCallback)\n            );\n\n            if (insertAtFront) {\n                q._tasks.unshift(item);\n            } else {\n                q._tasks.push(item);\n            }\n\n            if (!processingScheduled) {\n                processingScheduled = true;\n                setImmediate$1(() => {\n                    processingScheduled = false;\n                    q.process();\n                });\n            }\n\n            if (rejectOnError || !callback) {\n                return new Promise((resolve, reject) => {\n                    res = resolve;\n                    rej = reject;\n                })\n            }\n        }\n\n        function _createCB(tasks) {\n            return function (err, ...args) {\n                numRunning -= 1;\n\n                for (var i = 0, l = tasks.length; i < l; i++) {\n                    var task = tasks[i];\n\n                    var index = workersList.indexOf(task);\n                    if (index === 0) {\n                        workersList.shift();\n                    } else if (index > 0) {\n                        workersList.splice(index, 1);\n                    }\n\n                    task.callback(err, ...args);\n\n                    if (err != null) {\n                        trigger('error', err, task.data);\n                    }\n                }\n\n                if (numRunning <= (q.concurrency - q.buffer) ) {\n                    trigger('unsaturated');\n                }\n\n                if (q.idle()) {\n                    trigger('drain');\n                }\n                q.process();\n            };\n        }\n\n        function _maybeDrain(data) {\n            if (data.length === 0 && q.idle()) {\n                // call drain immediately if there are no tasks\n                setImmediate$1(() => trigger('drain'));\n                return true\n            }\n            return false\n        }\n\n        const eventMethod = (name) => (handler) => {\n            if (!handler) {\n                return new Promise((resolve, reject) => {\n                    once(name, (err, data) => {\n                        if (err) return reject(err)\n                        resolve(data);\n                    });\n                })\n            }\n            off(name);\n            on(name, handler);\n\n        };\n\n        var isProcessing = false;\n        var q = {\n            _tasks: new DLL(),\n            _createTaskItem (data, callback) {\n                return {\n                    data,\n                    callback\n                };\n            },\n            *[Symbol.iterator] () {\n                yield* q._tasks[Symbol.iterator]();\n            },\n            concurrency,\n            payload,\n            buffer: concurrency / 4,\n            started: false,\n            paused: false,\n            push (data, callback) {\n                if (Array.isArray(data)) {\n                    if (_maybeDrain(data)) return\n                    return data.map(datum => _insert(datum, false, false, callback))\n                }\n                return _insert(data, false, false, callback);\n            },\n            pushAsync (data, callback) {\n                if (Array.isArray(data)) {\n                    if (_maybeDrain(data)) return\n                    return data.map(datum => _insert(datum, false, true, callback))\n                }\n                return _insert(data, false, true, callback);\n            },\n            kill () {\n                off();\n                q._tasks.empty();\n            },\n            unshift (data, callback) {\n                if (Array.isArray(data)) {\n                    if (_maybeDrain(data)) return\n                    return data.map(datum => _insert(datum, true, false, callback))\n                }\n                return _insert(data, true, false, callback);\n            },\n            unshiftAsync (data, callback) {\n                if (Array.isArray(data)) {\n                    if (_maybeDrain(data)) return\n                    return data.map(datum => _insert(datum, true, true, callback))\n                }\n                return _insert(data, true, true, callback);\n            },\n            remove (testFn) {\n                q._tasks.remove(testFn);\n            },\n            process () {\n                // Avoid trying to start too many processing operations. This can occur\n                // when callbacks resolve synchronously (#1267).\n                if (isProcessing) {\n                    return;\n                }\n                isProcessing = true;\n                while(!q.paused && numRunning < q.concurrency && q._tasks.length){\n                    var tasks = [], data = [];\n                    var l = q._tasks.length;\n                    if (q.payload) l = Math.min(l, q.payload);\n                    for (var i = 0; i < l; i++) {\n                        var node = q._tasks.shift();\n                        tasks.push(node);\n                        workersList.push(node);\n                        data.push(node.data);\n                    }\n\n                    numRunning += 1;\n\n                    if (q._tasks.length === 0) {\n                        trigger('empty');\n                    }\n\n                    if (numRunning === q.concurrency) {\n                        trigger('saturated');\n                    }\n\n                    var cb = onlyOnce(_createCB(tasks));\n                    _worker(data, cb);\n                }\n                isProcessing = false;\n            },\n            length () {\n                return q._tasks.length;\n            },\n            running () {\n                return numRunning;\n            },\n            workersList () {\n                return workersList;\n            },\n            idle() {\n                return q._tasks.length + numRunning === 0;\n            },\n            pause () {\n                q.paused = true;\n            },\n            resume () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                setImmediate$1(q.process);\n            }\n        };\n        // define these as fixed properties, so people get useful errors when updating\n        Object.defineProperties(q, {\n            saturated: {\n                writable: false,\n                value: eventMethod('saturated')\n            },\n            unsaturated: {\n                writable: false,\n                value: eventMethod('unsaturated')\n            },\n            empty: {\n                writable: false,\n                value: eventMethod('empty')\n            },\n            drain: {\n                writable: false,\n                value: eventMethod('drain')\n            },\n            error: {\n                writable: false,\n                value: eventMethod('error')\n            },\n        });\n        return q;\n    }\n\n    /**\n     * Creates a `cargo` object with the specified payload. Tasks added to the\n     * cargo will be processed altogether (up to the `payload` limit). If the\n     * `worker` is in progress, the task is queued until it becomes available. Once\n     * the `worker` has completed some tasks, each callback of those tasks is\n     * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n     * for how `cargo` and `queue` work.\n     *\n     * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n     * at a time, cargo passes an array of tasks to a single worker, repeating\n     * when the worker is finished.\n     *\n     * @name cargo\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.queue]{@link module:ControlFlow.queue}\n     * @category Control Flow\n     * @param {AsyncFunction} worker - An asynchronous function for processing an array\n     * of queued tasks. Invoked with `(tasks, callback)`.\n     * @param {number} [payload=Infinity] - An optional `integer` for determining\n     * how many tasks should be processed per round; if omitted, the default is\n     * unlimited.\n     * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can\n     * attached as certain properties to listen for specific events during the\n     * lifecycle of the cargo and inner queue.\n     * @example\n     *\n     * // create a cargo object with payload 2\n     * var cargo = async.cargo(function(tasks, callback) {\n     *     for (var i=0; i<tasks.length; i++) {\n     *         console.log('hello ' + tasks[i].name);\n     *     }\n     *     callback();\n     * }, 2);\n     *\n     * // add some items\n     * cargo.push({name: 'foo'}, function(err) {\n     *     console.log('finished processing foo');\n     * });\n     * cargo.push({name: 'bar'}, function(err) {\n     *     console.log('finished processing bar');\n     * });\n     * await cargo.push({name: 'baz'});\n     * console.log('finished processing baz');\n     */\n    function cargo(worker, payload) {\n        return queue(worker, 1, payload);\n    }\n\n    /**\n     * Creates a `cargoQueue` object with the specified payload. Tasks added to the\n     * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.\n     * If the all `workers` are in progress, the task is queued until one becomes available. Once\n     * a `worker` has completed some tasks, each callback of those tasks is\n     * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n     * for how `cargo` and `queue` work.\n     *\n     * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n     * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,\n     * the cargoQueue passes an array of tasks to multiple parallel workers.\n     *\n     * @name cargoQueue\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.queue]{@link module:ControlFlow.queue}\n     * @see [async.cargo]{@link module:ControlFLow.cargo}\n     * @category Control Flow\n     * @param {AsyncFunction} worker - An asynchronous function for processing an array\n     * of queued tasks. Invoked with `(tasks, callback)`.\n     * @param {number} [concurrency=1] - An `integer` for determining how many\n     * `worker` functions should be run in parallel.  If omitted, the concurrency\n     * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n     * @param {number} [payload=Infinity] - An optional `integer` for determining\n     * how many tasks should be processed per round; if omitted, the default is\n     * unlimited.\n     * @returns {module:ControlFlow.QueueObject} A cargoQueue object to manage the tasks. Callbacks can\n     * attached as certain properties to listen for specific events during the\n     * lifecycle of the cargoQueue and inner queue.\n     * @example\n     *\n     * // create a cargoQueue object with payload 2 and concurrency 2\n     * var cargoQueue = async.cargoQueue(function(tasks, callback) {\n     *     for (var i=0; i<tasks.length; i++) {\n     *         console.log('hello ' + tasks[i].name);\n     *     }\n     *     callback();\n     * }, 2, 2);\n     *\n     * // add some items\n     * cargoQueue.push({name: 'foo'}, function(err) {\n     *     console.log('finished processing foo');\n     * });\n     * cargoQueue.push({name: 'bar'}, function(err) {\n     *     console.log('finished processing bar');\n     * });\n     * cargoQueue.push({name: 'baz'}, function(err) {\n     *     console.log('finished processing baz');\n     * });\n     * cargoQueue.push({name: 'boo'}, function(err) {\n     *     console.log('finished processing boo');\n     * });\n     */\n    function cargo$1(worker, concurrency, payload) {\n        return queue(worker, concurrency, payload);\n    }\n\n    /**\n     * Reduces `coll` into a single value using an async `iteratee` to return each\n     * successive step. `memo` is the initial state of the reduction. This function\n     * only operates in series.\n     *\n     * For performance reasons, it may make sense to split a call to this function\n     * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n     * results. This function is for situations where each step in the reduction\n     * needs to be async; if you can get the data before reducing it, then it's\n     * probably a good idea to do so.\n     *\n     * @name reduce\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias inject\n     * @alias foldl\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {*} memo - The initial state of the reduction.\n     * @param {AsyncFunction} iteratee - A function applied to each item in the\n     * array to produce the next step in the reduction.\n     * The `iteratee` should complete with the next state of the reduction.\n     * If the iteratee completes with an error, the reduction is stopped and the\n     * main `callback` is immediately called with the error.\n     * Invoked with (memo, item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Result is the reduced value. Invoked with\n     * (err, result).\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * // file1.txt is a file that is 1000 bytes in size\n     * // file2.txt is a file that is 2000 bytes in size\n     * // file3.txt is a file that is 3000 bytes in size\n     * // file4.txt does not exist\n     *\n     * const fileList = ['file1.txt','file2.txt','file3.txt'];\n     * const withMissingFileList = ['file1.txt','file2.txt','file3.txt', 'file4.txt'];\n     *\n     * // asynchronous function that computes the file size in bytes\n     * // file size is added to the memoized value, then returned\n     * function getFileSizeInBytes(memo, file, callback) {\n     *     fs.stat(file, function(err, stat) {\n     *         if (err) {\n     *             return callback(err);\n     *         }\n     *         callback(null, memo + stat.size);\n     *     });\n     * }\n     *\n     * // Using callbacks\n     * async.reduce(fileList, 0, getFileSizeInBytes, function(err, result) {\n     *     if (err) {\n     *         console.log(err);\n     *     } else {\n     *         console.log(result);\n     *         // 6000\n     *         // which is the sum of the file sizes of the three files\n     *     }\n     * });\n     *\n     * // Error Handling\n     * async.reduce(withMissingFileList, 0, getFileSizeInBytes, function(err, result) {\n     *     if (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *     } else {\n     *         console.log(result);\n     *     }\n     * });\n     *\n     * // Using Promises\n     * async.reduce(fileList, 0, getFileSizeInBytes)\n     * .then( result => {\n     *     console.log(result);\n     *     // 6000\n     *     // which is the sum of the file sizes of the three files\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * // Error Handling\n     * async.reduce(withMissingFileList, 0, getFileSizeInBytes)\n     * .then( result => {\n     *     console.log(result);\n     * }).catch( err => {\n     *     console.log(err);\n     *     // [ Error: ENOENT: no such file or directory ]\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let result = await async.reduce(fileList, 0, getFileSizeInBytes);\n     *         console.log(result);\n     *         // 6000\n     *         // which is the sum of the file sizes of the three files\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * // Error Handling\n     * async () => {\n     *     try {\n     *         let result = await async.reduce(withMissingFileList, 0, getFileSizeInBytes);\n     *         console.log(result);\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *     }\n     * }\n     *\n     */\n    function reduce(coll, memo, iteratee, callback) {\n        callback = once(callback);\n        var _iteratee = wrapAsync(iteratee);\n        return eachOfSeries$1(coll, (x, i, iterCb) => {\n            _iteratee(memo, x, (err, v) => {\n                memo = v;\n                iterCb(err);\n            });\n        }, err => callback(err, memo));\n    }\n    var reduce$1 = awaitify(reduce, 4);\n\n    /**\n     * Version of the compose function that is more natural to read. Each function\n     * consumes the return value of the previous function. It is the equivalent of\n     * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n     *\n     * Each function is executed with the `this` binding of the composed function.\n     *\n     * @name seq\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.compose]{@link module:ControlFlow.compose}\n     * @category Control Flow\n     * @param {...AsyncFunction} functions - the asynchronous functions to compose\n     * @returns {Function} a function that composes the `functions` in order\n     * @example\n     *\n     * // Requires lodash (or underscore), express3 and dresende's orm2.\n     * // Part of an app, that fetches cats of the logged user.\n     * // This example uses `seq` function to avoid overnesting and error\n     * // handling clutter.\n     * app.get('/cats', function(request, response) {\n     *     var User = request.models.User;\n     *     async.seq(\n     *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))\n     *         function(user, fn) {\n     *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n     *         }\n     *     )(req.session.user_id, function (err, cats) {\n     *         if (err) {\n     *             console.error(err);\n     *             response.json({ status: 'error', message: err.message });\n     *         } else {\n     *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n     *         }\n     *     });\n     * });\n     */\n    function seq(...functions) {\n        var _functions = functions.map(wrapAsync);\n        return function (...args) {\n            var that = this;\n\n            var cb = args[args.length - 1];\n            if (typeof cb == 'function') {\n                args.pop();\n            } else {\n                cb = promiseCallback();\n            }\n\n            reduce$1(_functions, args, (newargs, fn, iterCb) => {\n                fn.apply(that, newargs.concat((err, ...nextargs) => {\n                    iterCb(err, nextargs);\n                }));\n            },\n            (err, results) => cb(err, ...results));\n\n            return cb[PROMISE_SYMBOL]\n        };\n    }\n\n    /**\n     * Creates a function which is a composition of the passed asynchronous\n     * functions. Each function consumes the return value of the function that\n     * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n     * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n     *\n     * If the last argument to the composed function is not a function, a promise\n     * is returned when you call it.\n     *\n     * Each function is executed with the `this` binding of the composed function.\n     *\n     * @name compose\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {...AsyncFunction} functions - the asynchronous functions to compose\n     * @returns {Function} an asynchronous function that is the composed\n     * asynchronous `functions`\n     * @example\n     *\n     * function add1(n, callback) {\n     *     setTimeout(function () {\n     *         callback(null, n + 1);\n     *     }, 10);\n     * }\n     *\n     * function mul3(n, callback) {\n     *     setTimeout(function () {\n     *         callback(null, n * 3);\n     *     }, 10);\n     * }\n     *\n     * var add1mul3 = async.compose(mul3, add1);\n     * add1mul3(4, function (err, result) {\n     *     // result now equals 15\n     * });\n     */\n    function compose(...args) {\n        return seq(...args.reverse());\n    }\n\n    /**\n     * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n     *\n     * @name mapLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.map]{@link module:Collections.map}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with the transformed item.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Results is an array of the\n     * transformed items from the `coll`. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function mapLimit (coll, limit, iteratee, callback) {\n        return _asyncMap(eachOfLimit(limit), coll, iteratee, callback)\n    }\n    var mapLimit$1 = awaitify(mapLimit, 4);\n\n    /**\n     * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n     *\n     * @name concatLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.concat]{@link module:Collections.concat}\n     * @category Collection\n     * @alias flatMapLimit\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n     * which should use an array as its result. Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished, or an error occurs. Results is an array\n     * containing the concatenated results of the `iteratee` function. Invoked with\n     * (err, results).\n     * @returns A Promise, if no callback is passed\n     */\n    function concatLimit(coll, limit, iteratee, callback) {\n        var _iteratee = wrapAsync(iteratee);\n        return mapLimit$1(coll, limit, (val, iterCb) => {\n            _iteratee(val, (err, ...args) => {\n                if (err) return iterCb(err);\n                return iterCb(err, args);\n            });\n        }, (err, mapResults) => {\n            var result = [];\n            for (var i = 0; i < mapResults.length; i++) {\n                if (mapResults[i]) {\n                    result = result.concat(...mapResults[i]);\n                }\n            }\n\n            return callback(err, result);\n        });\n    }\n    var concatLimit$1 = awaitify(concatLimit, 4);\n\n    /**\n     * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n     * the concatenated list. The `iteratee`s are called in parallel, and the\n     * results are concatenated as they return. The results array will be returned in\n     * the original order of `coll` passed to the `iteratee` function.\n     *\n     * @name concat\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @category Collection\n     * @alias flatMap\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n     * which should use an array as its result. Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished, or an error occurs. Results is an array\n     * containing the concatenated results of the `iteratee` function. Invoked with\n     * (err, results).\n     * @returns A Promise, if no callback is passed\n     * @example\n     *\n     * // dir1 is a directory that contains file1.txt, file2.txt\n     * // dir2 is a directory that contains file3.txt, file4.txt\n     * // dir3 is a directory that contains file5.txt\n     * // dir4 does not exist\n     *\n     * let directoryList = ['dir1','dir2','dir3'];\n     * let withMissingDirectoryList = ['dir1','dir2','dir3', 'dir4'];\n     *\n     * // Using callbacks\n     * async.concat(directoryList, fs.readdir, function(err, results) {\n     *    if (err) {\n     *        console.log(err);\n     *    } else {\n     *        console.log(results);\n     *        // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n     *    }\n     * });\n     *\n     * // Error Handling\n     * async.concat(withMissingDirectoryList, fs.readdir, function(err, results) {\n     *    if (err) {\n     *        console.log(err);\n     *        // [ Error: ENOENT: no such file or directory ]\n     *        // since dir4 does not exist\n     *    } else {\n     *        console.log(results);\n     *    }\n     * });\n     *\n     * // Using Promises\n     * async.concat(directoryList, fs.readdir)\n     * .then(results => {\n     *     console.log(results);\n     *     // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n     * }).catch(err => {\n     *      console.log(err);\n     * });\n     *\n     * // Error Handling\n     * async.concat(withMissingDirectoryList, fs.readdir)\n     * .then(results => {\n     *     console.log(results);\n     * }).catch(err => {\n     *     console.log(err);\n     *     // [ Error: ENOENT: no such file or directory ]\n     *     // since dir4 does not exist\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let results = await async.concat(directoryList, fs.readdir);\n     *         console.log(results);\n     *         // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n     *     } catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * // Error Handling\n     * async () => {\n     *     try {\n     *         let results = await async.concat(withMissingDirectoryList, fs.readdir);\n     *         console.log(results);\n     *     } catch (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *         // since dir4 does not exist\n     *     }\n     * }\n     *\n     */\n    function concat(coll, iteratee, callback) {\n        return concatLimit$1(coll, Infinity, iteratee, callback)\n    }\n    var concat$1 = awaitify(concat, 3);\n\n    /**\n     * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n     *\n     * @name concatSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.concat]{@link module:Collections.concat}\n     * @category Collection\n     * @alias flatMapSeries\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n     * The iteratee should complete with an array an array of results.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished, or an error occurs. Results is an array\n     * containing the concatenated results of the `iteratee` function. Invoked with\n     * (err, results).\n     * @returns A Promise, if no callback is passed\n     */\n    function concatSeries(coll, iteratee, callback) {\n        return concatLimit$1(coll, 1, iteratee, callback)\n    }\n    var concatSeries$1 = awaitify(concatSeries, 3);\n\n    /**\n     * Returns a function that when called, calls-back with the values provided.\n     * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n     * [`auto`]{@link module:ControlFlow.auto}.\n     *\n     * @name constant\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {...*} arguments... - Any number of arguments to automatically invoke\n     * callback with.\n     * @returns {AsyncFunction} Returns a function that when invoked, automatically\n     * invokes the callback with the previous given arguments.\n     * @example\n     *\n     * async.waterfall([\n     *     async.constant(42),\n     *     function (value, next) {\n     *         // value === 42\n     *     },\n     *     //...\n     * ], callback);\n     *\n     * async.waterfall([\n     *     async.constant(filename, \"utf8\"),\n     *     fs.readFile,\n     *     function (fileData, next) {\n     *         //...\n     *     }\n     *     //...\n     * ], callback);\n     *\n     * async.auto({\n     *     hostname: async.constant(\"https://server.net/\"),\n     *     port: findFreePort,\n     *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n     *         startServer(options, cb);\n     *     }],\n     *     //...\n     * }, callback);\n     */\n    function constant(...args) {\n        return function (...ignoredArgs/*, callback*/) {\n            var callback = ignoredArgs.pop();\n            return callback(null, ...args);\n        };\n    }\n\n    function _createTester(check, getResult) {\n        return (eachfn, arr, _iteratee, cb) => {\n            var testPassed = false;\n            var testResult;\n            const iteratee = wrapAsync(_iteratee);\n            eachfn(arr, (value, _, callback) => {\n                iteratee(value, (err, result) => {\n                    if (err || err === false) return callback(err);\n\n                    if (check(result) && !testResult) {\n                        testPassed = true;\n                        testResult = getResult(true, value);\n                        return callback(null, breakLoop);\n                    }\n                    callback();\n                });\n            }, err => {\n                if (err) return cb(err);\n                cb(null, testPassed ? testResult : getResult(false));\n            });\n        };\n    }\n\n    /**\n     * Returns the first value in `coll` that passes an async truth test. The\n     * `iteratee` is applied in parallel, meaning the first iteratee to return\n     * `true` will fire the detect `callback` with that result. That means the\n     * result might not be the first item in the original `coll` (in terms of order)\n     * that passes the test.\n\n     * If order within the original `coll` is important, then look at\n     * [`detectSeries`]{@link module:Collections.detectSeries}.\n     *\n     * @name detect\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias find\n     * @category Collections\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n     * The iteratee must complete with a boolean value as its result.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called as soon as any\n     * iteratee returns `true`, or after all the `iteratee` functions have finished.\n     * Result will be the first item in the array that passes the truth test\n     * (iteratee) or the value `undefined` if none passed. Invoked with\n     * (err, result).\n     * @returns {Promise} a promise, if a callback is omitted\n     * @example\n     *\n     * // dir1 is a directory that contains file1.txt, file2.txt\n     * // dir2 is a directory that contains file3.txt, file4.txt\n     * // dir3 is a directory that contains file5.txt\n     *\n     * // asynchronous function that checks if a file exists\n     * function fileExists(file, callback) {\n     *    fs.access(file, fs.constants.F_OK, (err) => {\n     *        callback(null, !err);\n     *    });\n     * }\n     *\n     * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists,\n     *    function(err, result) {\n     *        console.log(result);\n     *        // dir1/file1.txt\n     *        // result now equals the first file in the list that exists\n     *    }\n     *);\n     *\n     * // Using Promises\n     * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists)\n     * .then(result => {\n     *     console.log(result);\n     *     // dir1/file1.txt\n     *     // result now equals the first file in the list that exists\n     * }).catch(err => {\n     *     console.log(err);\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let result = await async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists);\n     *         console.log(result);\n     *         // dir1/file1.txt\n     *         // result now equals the file in the list that exists\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function detect(coll, iteratee, callback) {\n        return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback)\n    }\n    var detect$1 = awaitify(detect, 3);\n\n    /**\n     * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name detectLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.detect]{@link module:Collections.detect}\n     * @alias findLimit\n     * @category Collections\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n     * The iteratee must complete with a boolean value as its result.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called as soon as any\n     * iteratee returns `true`, or after all the `iteratee` functions have finished.\n     * Result will be the first item in the array that passes the truth test\n     * (iteratee) or the value `undefined` if none passed. Invoked with\n     * (err, result).\n     * @returns {Promise} a promise, if a callback is omitted\n     */\n    function detectLimit(coll, limit, iteratee, callback) {\n        return _createTester(bool => bool, (res, item) => item)(eachOfLimit(limit), coll, iteratee, callback)\n    }\n    var detectLimit$1 = awaitify(detectLimit, 4);\n\n    /**\n     * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n     *\n     * @name detectSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.detect]{@link module:Collections.detect}\n     * @alias findSeries\n     * @category Collections\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n     * The iteratee must complete with a boolean value as its result.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called as soon as any\n     * iteratee returns `true`, or after all the `iteratee` functions have finished.\n     * Result will be the first item in the array that passes the truth test\n     * (iteratee) or the value `undefined` if none passed. Invoked with\n     * (err, result).\n     * @returns {Promise} a promise, if a callback is omitted\n     */\n    function detectSeries(coll, iteratee, callback) {\n        return _createTester(bool => bool, (res, item) => item)(eachOfLimit(1), coll, iteratee, callback)\n    }\n\n    var detectSeries$1 = awaitify(detectSeries, 3);\n\n    function consoleFunc(name) {\n        return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {\n            /* istanbul ignore else */\n            if (typeof console === 'object') {\n                /* istanbul ignore else */\n                if (err) {\n                    /* istanbul ignore else */\n                    if (console.error) {\n                        console.error(err);\n                    }\n                } else if (console[name]) { /* istanbul ignore else */\n                    resultArgs.forEach(x => console[name](x));\n                }\n            }\n        })\n    }\n\n    /**\n     * Logs the result of an [`async` function]{@link AsyncFunction} to the\n     * `console` using `console.dir` to display the properties of the resulting object.\n     * Only works in Node.js or in browsers that support `console.dir` and\n     * `console.error` (such as FF and Chrome).\n     * If multiple arguments are returned from the async function,\n     * `console.dir` is called on each argument in order.\n     *\n     * @name dir\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {AsyncFunction} function - The function you want to eventually apply\n     * all arguments to.\n     * @param {...*} arguments... - Any number of arguments to apply to the function.\n     * @example\n     *\n     * // in a module\n     * var hello = function(name, callback) {\n     *     setTimeout(function() {\n     *         callback(null, {hello: name});\n     *     }, 1000);\n     * };\n     *\n     * // in the node repl\n     * node> async.dir(hello, 'world');\n     * {hello: 'world'}\n     */\n    var dir = consoleFunc('dir');\n\n    /**\n     * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n     * the order of operations, the arguments `test` and `iteratee` are switched.\n     *\n     * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n     *\n     * @name doWhilst\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.whilst]{@link module:ControlFlow.whilst}\n     * @category Control Flow\n     * @param {AsyncFunction} iteratee - A function which is called each time `test`\n     * passes. Invoked with (callback).\n     * @param {AsyncFunction} test - asynchronous truth test to perform after each\n     * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n     * non-error args from the previous callback of `iteratee`.\n     * @param {Function} [callback] - A callback which is called after the test\n     * function has failed and repeated execution of `iteratee` has stopped.\n     * `callback` will be passed an error and any arguments passed to the final\n     * `iteratee`'s callback. Invoked with (err, [results]);\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function doWhilst(iteratee, test, callback) {\n        callback = onlyOnce(callback);\n        var _fn = wrapAsync(iteratee);\n        var _test = wrapAsync(test);\n        var results;\n\n        function next(err, ...args) {\n            if (err) return callback(err);\n            if (err === false) return;\n            results = args;\n            _test(...args, check);\n        }\n\n        function check(err, truth) {\n            if (err) return callback(err);\n            if (err === false) return;\n            if (!truth) return callback(null, ...results);\n            _fn(next);\n        }\n\n        return check(null, true);\n    }\n\n    var doWhilst$1 = awaitify(doWhilst, 3);\n\n    /**\n     * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n     * argument ordering differs from `until`.\n     *\n     * @name doUntil\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n     * @category Control Flow\n     * @param {AsyncFunction} iteratee - An async function which is called each time\n     * `test` fails. Invoked with (callback).\n     * @param {AsyncFunction} test - asynchronous truth test to perform after each\n     * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n     * non-error args from the previous callback of `iteratee`\n     * @param {Function} [callback] - A callback which is called after the test\n     * function has passed and repeated execution of `iteratee` has stopped. `callback`\n     * will be passed an error and any arguments passed to the final `iteratee`'s\n     * callback. Invoked with (err, [results]);\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function doUntil(iteratee, test, callback) {\n        const _test = wrapAsync(test);\n        return doWhilst$1(iteratee, (...args) => {\n            const cb = args.pop();\n            _test(...args, (err, truth) => cb (err, !truth));\n        }, callback);\n    }\n\n    function _withoutIndex(iteratee) {\n        return (value, index, callback) => iteratee(value, callback);\n    }\n\n    /**\n     * Applies the function `iteratee` to each item in `coll`, in parallel.\n     * The `iteratee` is called with an item from the list, and a callback for when\n     * it has finished. If the `iteratee` passes an error to its `callback`, the\n     * main `callback` (for the `each` function) is immediately called with the\n     * error.\n     *\n     * Note, that since this function applies `iteratee` to each item in parallel,\n     * there is no guarantee that the iteratee functions will complete in order.\n     *\n     * @name each\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias forEach\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to\n     * each item in `coll`. Invoked with (item, callback).\n     * The array index is not passed to the iteratee.\n     * If you need the index, use `eachOf`.\n     * @param {Function} [callback] - A callback which is called when all\n     * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n     * @returns {Promise} a promise, if a callback is omitted\n     * @example\n     *\n     * // dir1 is a directory that contains file1.txt, file2.txt\n     * // dir2 is a directory that contains file3.txt, file4.txt\n     * // dir3 is a directory that contains file5.txt\n     * // dir4 does not exist\n     *\n     * const fileList = [ 'dir1/file2.txt', 'dir2/file3.txt', 'dir/file5.txt'];\n     * const withMissingFileList = ['dir1/file1.txt', 'dir4/file2.txt'];\n     *\n     * // asynchronous function that deletes a file\n     * const deleteFile = function(file, callback) {\n     *     fs.unlink(file, callback);\n     * };\n     *\n     * // Using callbacks\n     * async.each(fileList, deleteFile, function(err) {\n     *     if( err ) {\n     *         console.log(err);\n     *     } else {\n     *         console.log('All files have been deleted successfully');\n     *     }\n     * });\n     *\n     * // Error Handling\n     * async.each(withMissingFileList, deleteFile, function(err){\n     *     console.log(err);\n     *     // [ Error: ENOENT: no such file or directory ]\n     *     // since dir4/file2.txt does not exist\n     *     // dir1/file1.txt could have been deleted\n     * });\n     *\n     * // Using Promises\n     * async.each(fileList, deleteFile)\n     * .then( () => {\n     *     console.log('All files have been deleted successfully');\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * // Error Handling\n     * async.each(fileList, deleteFile)\n     * .then( () => {\n     *     console.log('All files have been deleted successfully');\n     * }).catch( err => {\n     *     console.log(err);\n     *     // [ Error: ENOENT: no such file or directory ]\n     *     // since dir4/file2.txt does not exist\n     *     // dir1/file1.txt could have been deleted\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         await async.each(files, deleteFile);\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * // Error Handling\n     * async () => {\n     *     try {\n     *         await async.each(withMissingFileList, deleteFile);\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *         // since dir4/file2.txt does not exist\n     *         // dir1/file1.txt could have been deleted\n     *     }\n     * }\n     *\n     */\n    function eachLimit(coll, iteratee, callback) {\n        return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n    }\n\n    var each = awaitify(eachLimit, 3);\n\n    /**\n     * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n     *\n     * @name eachLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.each]{@link module:Collections.each}\n     * @alias forEachLimit\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The array index is not passed to the iteratee.\n     * If you need the index, use `eachOfLimit`.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called when all\n     * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n     * @returns {Promise} a promise, if a callback is omitted\n     */\n    function eachLimit$1(coll, limit, iteratee, callback) {\n        return eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n    }\n    var eachLimit$2 = awaitify(eachLimit$1, 4);\n\n    /**\n     * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n     *\n     * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item\n     * in series and therefore the iteratee functions will complete in order.\n\n     * @name eachSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.each]{@link module:Collections.each}\n     * @alias forEachSeries\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each\n     * item in `coll`.\n     * The array index is not passed to the iteratee.\n     * If you need the index, use `eachOfSeries`.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called when all\n     * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n     * @returns {Promise} a promise, if a callback is omitted\n     */\n    function eachSeries(coll, iteratee, callback) {\n        return eachLimit$2(coll, 1, iteratee, callback)\n    }\n    var eachSeries$1 = awaitify(eachSeries, 3);\n\n    /**\n     * Wrap an async function and ensure it calls its callback on a later tick of\n     * the event loop.  If the function already calls its callback on a next tick,\n     * no extra deferral is added. This is useful for preventing stack overflows\n     * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n     * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n     * contained. ES2017 `async` functions are returned as-is -- they are immune\n     * to Zalgo's corrupting influences, as they always resolve on a later tick.\n     *\n     * @name ensureAsync\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {AsyncFunction} fn - an async function, one that expects a node-style\n     * callback as its last argument.\n     * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n     * signature as the function passed in.\n     * @example\n     *\n     * function sometimesAsync(arg, callback) {\n     *     if (cache[arg]) {\n     *         return callback(null, cache[arg]); // this would be synchronous!!\n     *     } else {\n     *         doSomeIO(arg, callback); // this IO would be asynchronous\n     *     }\n     * }\n     *\n     * // this has a risk of stack overflows if many results are cached in a row\n     * async.mapSeries(args, sometimesAsync, done);\n     *\n     * // this will defer sometimesAsync's callback if necessary,\n     * // preventing stack overflows\n     * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n     */\n    function ensureAsync(fn) {\n        if (isAsync(fn)) return fn;\n        return function (...args/*, callback*/) {\n            var callback = args.pop();\n            var sync = true;\n            args.push((...innerArgs) => {\n                if (sync) {\n                    setImmediate$1(() => callback(...innerArgs));\n                } else {\n                    callback(...innerArgs);\n                }\n            });\n            fn.apply(this, args);\n            sync = false;\n        };\n    }\n\n    /**\n     * Returns `true` if every element in `coll` satisfies an async test. If any\n     * iteratee call returns `false`, the main `callback` is immediately called.\n     *\n     * @name every\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias all\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n     * in the collection in parallel.\n     * The iteratee must complete with a boolean result value.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Result will be either `true` or `false`\n     * depending on the values of the async tests. Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     * @example\n     *\n     * // dir1 is a directory that contains file1.txt, file2.txt\n     * // dir2 is a directory that contains file3.txt, file4.txt\n     * // dir3 is a directory that contains file5.txt\n     * // dir4 does not exist\n     *\n     * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file5.txt'];\n     * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n     *\n     * // asynchronous function that checks if a file exists\n     * function fileExists(file, callback) {\n     *    fs.access(file, fs.constants.F_OK, (err) => {\n     *        callback(null, !err);\n     *    });\n     * }\n     *\n     * // Using callbacks\n     * async.every(fileList, fileExists, function(err, result) {\n     *     console.log(result);\n     *     // true\n     *     // result is true since every file exists\n     * });\n     *\n     * async.every(withMissingFileList, fileExists, function(err, result) {\n     *     console.log(result);\n     *     // false\n     *     // result is false since NOT every file exists\n     * });\n     *\n     * // Using Promises\n     * async.every(fileList, fileExists)\n     * .then( result => {\n     *     console.log(result);\n     *     // true\n     *     // result is true since every file exists\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * async.every(withMissingFileList, fileExists)\n     * .then( result => {\n     *     console.log(result);\n     *     // false\n     *     // result is false since NOT every file exists\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let result = await async.every(fileList, fileExists);\n     *         console.log(result);\n     *         // true\n     *         // result is true since every file exists\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * async () => {\n     *     try {\n     *         let result = await async.every(withMissingFileList, fileExists);\n     *         console.log(result);\n     *         // false\n     *         // result is false since NOT every file exists\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function every(coll, iteratee, callback) {\n        return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback)\n    }\n    var every$1 = awaitify(every, 3);\n\n    /**\n     * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n     *\n     * @name everyLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.every]{@link module:Collections.every}\n     * @alias allLimit\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n     * in the collection in parallel.\n     * The iteratee must complete with a boolean result value.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Result will be either `true` or `false`\n     * depending on the values of the async tests. Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     */\n    function everyLimit(coll, limit, iteratee, callback) {\n        return _createTester(bool => !bool, res => !res)(eachOfLimit(limit), coll, iteratee, callback)\n    }\n    var everyLimit$1 = awaitify(everyLimit, 4);\n\n    /**\n     * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n     *\n     * @name everySeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.every]{@link module:Collections.every}\n     * @alias allSeries\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n     * in the collection in series.\n     * The iteratee must complete with a boolean result value.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Result will be either `true` or `false`\n     * depending on the values of the async tests. Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     */\n    function everySeries(coll, iteratee, callback) {\n        return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback)\n    }\n    var everySeries$1 = awaitify(everySeries, 3);\n\n    function filterArray(eachfn, arr, iteratee, callback) {\n        var truthValues = new Array(arr.length);\n        eachfn(arr, (x, index, iterCb) => {\n            iteratee(x, (err, v) => {\n                truthValues[index] = !!v;\n                iterCb(err);\n            });\n        }, err => {\n            if (err) return callback(err);\n            var results = [];\n            for (var i = 0; i < arr.length; i++) {\n                if (truthValues[i]) results.push(arr[i]);\n            }\n            callback(null, results);\n        });\n    }\n\n    function filterGeneric(eachfn, coll, iteratee, callback) {\n        var results = [];\n        eachfn(coll, (x, index, iterCb) => {\n            iteratee(x, (err, v) => {\n                if (err) return iterCb(err);\n                if (v) {\n                    results.push({index, value: x});\n                }\n                iterCb(err);\n            });\n        }, err => {\n            if (err) return callback(err);\n            callback(null, results\n                .sort((a, b) => a.index - b.index)\n                .map(v => v.value));\n        });\n    }\n\n    function _filter(eachfn, coll, iteratee, callback) {\n        var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n        return filter(eachfn, coll, wrapAsync(iteratee), callback);\n    }\n\n    /**\n     * Returns a new array of all the values in `coll` which pass an async truth\n     * test. This operation is performed in parallel, but the results array will be\n     * in the same order as the original.\n     *\n     * @name filter\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias select\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n     * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n     * with a boolean argument once it has completed. Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback provided\n     * @example\n     *\n     * // dir1 is a directory that contains file1.txt, file2.txt\n     * // dir2 is a directory that contains file3.txt, file4.txt\n     * // dir3 is a directory that contains file5.txt\n     *\n     * const files = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n     *\n     * // asynchronous function that checks if a file exists\n     * function fileExists(file, callback) {\n     *    fs.access(file, fs.constants.F_OK, (err) => {\n     *        callback(null, !err);\n     *    });\n     * }\n     *\n     * // Using callbacks\n     * async.filter(files, fileExists, function(err, results) {\n     *    if(err) {\n     *        console.log(err);\n     *    } else {\n     *        console.log(results);\n     *        // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n     *        // results is now an array of the existing files\n     *    }\n     * });\n     *\n     * // Using Promises\n     * async.filter(files, fileExists)\n     * .then(results => {\n     *     console.log(results);\n     *     // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n     *     // results is now an array of the existing files\n     * }).catch(err => {\n     *     console.log(err);\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let results = await async.filter(files, fileExists);\n     *         console.log(results);\n     *         // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n     *         // results is now an array of the existing files\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function filter (coll, iteratee, callback) {\n        return _filter(eachOf$1, coll, iteratee, callback)\n    }\n    var filter$1 = awaitify(filter, 3);\n\n    /**\n     * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name filterLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.filter]{@link module:Collections.filter}\n     * @alias selectLimit\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n     * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n     * with a boolean argument once it has completed. Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback provided\n     */\n    function filterLimit (coll, limit, iteratee, callback) {\n        return _filter(eachOfLimit(limit), coll, iteratee, callback)\n    }\n    var filterLimit$1 = awaitify(filterLimit, 4);\n\n    /**\n     * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n     *\n     * @name filterSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.filter]{@link module:Collections.filter}\n     * @alias selectSeries\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n     * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n     * with a boolean argument once it has completed. Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Invoked with (err, results)\n     * @returns {Promise} a promise, if no callback provided\n     */\n    function filterSeries (coll, iteratee, callback) {\n        return _filter(eachOfSeries$1, coll, iteratee, callback)\n    }\n    var filterSeries$1 = awaitify(filterSeries, 3);\n\n    /**\n     * Calls the asynchronous function `fn` with a callback parameter that allows it\n     * to call itself again, in series, indefinitely.\n\n     * If an error is passed to the callback then `errback` is called with the\n     * error, and execution stops, otherwise it will never be called.\n     *\n     * @name forever\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {AsyncFunction} fn - an async function to call repeatedly.\n     * Invoked with (next).\n     * @param {Function} [errback] - when `fn` passes an error to it's callback,\n     * this function will be called, and execution stops. Invoked with (err).\n     * @returns {Promise} a promise that rejects if an error occurs and an errback\n     * is not passed\n     * @example\n     *\n     * async.forever(\n     *     function(next) {\n     *         // next is suitable for passing to things that need a callback(err [, whatever]);\n     *         // it will result in this function being called again.\n     *     },\n     *     function(err) {\n     *         // if next is called with a value in its first parameter, it will appear\n     *         // in here as 'err', and execution will stop.\n     *     }\n     * );\n     */\n    function forever(fn, errback) {\n        var done = onlyOnce(errback);\n        var task = wrapAsync(ensureAsync(fn));\n\n        function next(err) {\n            if (err) return done(err);\n            if (err === false) return;\n            task(next);\n        }\n        return next();\n    }\n    var forever$1 = awaitify(forever, 2);\n\n    /**\n     * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n     *\n     * @name groupByLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.groupBy]{@link module:Collections.groupBy}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with a `key` to group the value under.\n     * Invoked with (value, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Result is an `Object` whoses\n     * properties are arrays of values which returned the corresponding key.\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function groupByLimit(coll, limit, iteratee, callback) {\n        var _iteratee = wrapAsync(iteratee);\n        return mapLimit$1(coll, limit, (val, iterCb) => {\n            _iteratee(val, (err, key) => {\n                if (err) return iterCb(err);\n                return iterCb(err, {key, val});\n            });\n        }, (err, mapResults) => {\n            var result = {};\n            // from MDN, handle object having an `hasOwnProperty` prop\n            var {hasOwnProperty} = Object.prototype;\n\n            for (var i = 0; i < mapResults.length; i++) {\n                if (mapResults[i]) {\n                    var {key} = mapResults[i];\n                    var {val} = mapResults[i];\n\n                    if (hasOwnProperty.call(result, key)) {\n                        result[key].push(val);\n                    } else {\n                        result[key] = [val];\n                    }\n                }\n            }\n\n            return callback(err, result);\n        });\n    }\n\n    var groupByLimit$1 = awaitify(groupByLimit, 4);\n\n    /**\n     * Returns a new object, where each value corresponds to an array of items, from\n     * `coll`, that returned the corresponding key. That is, the keys of the object\n     * correspond to the values passed to the `iteratee` callback.\n     *\n     * Note: Since this function applies the `iteratee` to each item in parallel,\n     * there is no guarantee that the `iteratee` functions will complete in order.\n     * However, the values for each key in the `result` will be in the same order as\n     * the original `coll`. For Objects, the values will roughly be in the order of\n     * the original Objects' keys (but this can vary across JavaScript engines).\n     *\n     * @name groupBy\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with a `key` to group the value under.\n     * Invoked with (value, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Result is an `Object` whoses\n     * properties are arrays of values which returned the corresponding key.\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * // dir1 is a directory that contains file1.txt, file2.txt\n     * // dir2 is a directory that contains file3.txt, file4.txt\n     * // dir3 is a directory that contains file5.txt\n     * // dir4 does not exist\n     *\n     * const files = ['dir1/file1.txt','dir2','dir4']\n     *\n     * // asynchronous function that detects file type as none, file, or directory\n     * function detectFile(file, callback) {\n     *     fs.stat(file, function(err, stat) {\n     *         if (err) {\n     *             return callback(null, 'none');\n     *         }\n     *         callback(null, stat.isDirectory() ? 'directory' : 'file');\n     *     });\n     * }\n     *\n     * //Using callbacks\n     * async.groupBy(files, detectFile, function(err, result) {\n     *     if(err) {\n     *         console.log(err);\n     *     } else {\n     *\t       console.log(result);\n     *         // {\n     *         //     file: [ 'dir1/file1.txt' ],\n     *         //     none: [ 'dir4' ],\n     *         //     directory: [ 'dir2']\n     *         // }\n     *         // result is object containing the files grouped by type\n     *     }\n     * });\n     *\n     * // Using Promises\n     * async.groupBy(files, detectFile)\n     * .then( result => {\n     *     console.log(result);\n     *     // {\n     *     //     file: [ 'dir1/file1.txt' ],\n     *     //     none: [ 'dir4' ],\n     *     //     directory: [ 'dir2']\n     *     // }\n     *     // result is object containing the files grouped by type\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let result = await async.groupBy(files, detectFile);\n     *         console.log(result);\n     *         // {\n     *         //     file: [ 'dir1/file1.txt' ],\n     *         //     none: [ 'dir4' ],\n     *         //     directory: [ 'dir2']\n     *         // }\n     *         // result is object containing the files grouped by type\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function groupBy (coll, iteratee, callback) {\n        return groupByLimit$1(coll, Infinity, iteratee, callback)\n    }\n\n    /**\n     * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n     *\n     * @name groupBySeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.groupBy]{@link module:Collections.groupBy}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with a `key` to group the value under.\n     * Invoked with (value, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Result is an `Object` whose\n     * properties are arrays of values which returned the corresponding key.\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function groupBySeries (coll, iteratee, callback) {\n        return groupByLimit$1(coll, 1, iteratee, callback)\n    }\n\n    /**\n     * Logs the result of an `async` function to the `console`. Only works in\n     * Node.js or in browsers that support `console.log` and `console.error` (such\n     * as FF and Chrome). If multiple arguments are returned from the async\n     * function, `console.log` is called on each argument in order.\n     *\n     * @name log\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {AsyncFunction} function - The function you want to eventually apply\n     * all arguments to.\n     * @param {...*} arguments... - Any number of arguments to apply to the function.\n     * @example\n     *\n     * // in a module\n     * var hello = function(name, callback) {\n     *     setTimeout(function() {\n     *         callback(null, 'hello ' + name);\n     *     }, 1000);\n     * };\n     *\n     * // in the node repl\n     * node> async.log(hello, 'world');\n     * 'hello world'\n     */\n    var log = consoleFunc('log');\n\n    /**\n     * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name mapValuesLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.mapValues]{@link module:Collections.mapValues}\n     * @category Collection\n     * @param {Object} obj - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - A function to apply to each value and key\n     * in `coll`.\n     * The iteratee should complete with the transformed value as its result.\n     * Invoked with (value, key, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. `result` is a new object consisting\n     * of each key from `obj`, with each transformed value on the right-hand side.\n     * Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function mapValuesLimit(obj, limit, iteratee, callback) {\n        callback = once(callback);\n        var newObj = {};\n        var _iteratee = wrapAsync(iteratee);\n        return eachOfLimit(limit)(obj, (val, key, next) => {\n            _iteratee(val, key, (err, result) => {\n                if (err) return next(err);\n                newObj[key] = result;\n                next(err);\n            });\n        }, err => callback(err, newObj));\n    }\n\n    var mapValuesLimit$1 = awaitify(mapValuesLimit, 4);\n\n    /**\n     * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n     *\n     * Produces a new Object by mapping each value of `obj` through the `iteratee`\n     * function. The `iteratee` is called each `value` and `key` from `obj` and a\n     * callback for when it has finished processing. Each of these callbacks takes\n     * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n     * passes an error to its callback, the main `callback` (for the `mapValues`\n     * function) is immediately called with the error.\n     *\n     * Note, the order of the keys in the result is not guaranteed.  The keys will\n     * be roughly in the order they complete, (but this is very engine-specific)\n     *\n     * @name mapValues\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @category Collection\n     * @param {Object} obj - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A function to apply to each value and key\n     * in `coll`.\n     * The iteratee should complete with the transformed value as its result.\n     * Invoked with (value, key, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. `result` is a new object consisting\n     * of each key from `obj`, with each transformed value on the right-hand side.\n     * Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * // file1.txt is a file that is 1000 bytes in size\n     * // file2.txt is a file that is 2000 bytes in size\n     * // file3.txt is a file that is 3000 bytes in size\n     * // file4.txt does not exist\n     *\n     * const fileMap = {\n     *     f1: 'file1.txt',\n     *     f2: 'file2.txt',\n     *     f3: 'file3.txt'\n     * };\n     *\n     * const withMissingFileMap = {\n     *     f1: 'file1.txt',\n     *     f2: 'file2.txt',\n     *     f3: 'file4.txt'\n     * };\n     *\n     * // asynchronous function that returns the file size in bytes\n     * function getFileSizeInBytes(file, key, callback) {\n     *     fs.stat(file, function(err, stat) {\n     *         if (err) {\n     *             return callback(err);\n     *         }\n     *         callback(null, stat.size);\n     *     });\n     * }\n     *\n     * // Using callbacks\n     * async.mapValues(fileMap, getFileSizeInBytes, function(err, result) {\n     *     if (err) {\n     *         console.log(err);\n     *     } else {\n     *         console.log(result);\n     *         // result is now a map of file size in bytes for each file, e.g.\n     *         // {\n     *         //     f1: 1000,\n     *         //     f2: 2000,\n     *         //     f3: 3000\n     *         // }\n     *     }\n     * });\n     *\n     * // Error handling\n     * async.mapValues(withMissingFileMap, getFileSizeInBytes, function(err, result) {\n     *     if (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *     } else {\n     *         console.log(result);\n     *     }\n     * });\n     *\n     * // Using Promises\n     * async.mapValues(fileMap, getFileSizeInBytes)\n     * .then( result => {\n     *     console.log(result);\n     *     // result is now a map of file size in bytes for each file, e.g.\n     *     // {\n     *     //     f1: 1000,\n     *     //     f2: 2000,\n     *     //     f3: 3000\n     *     // }\n     * }).catch (err => {\n     *     console.log(err);\n     * });\n     *\n     * // Error Handling\n     * async.mapValues(withMissingFileMap, getFileSizeInBytes)\n     * .then( result => {\n     *     console.log(result);\n     * }).catch (err => {\n     *     console.log(err);\n     *     // [ Error: ENOENT: no such file or directory ]\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let result = await async.mapValues(fileMap, getFileSizeInBytes);\n     *         console.log(result);\n     *         // result is now a map of file size in bytes for each file, e.g.\n     *         // {\n     *         //     f1: 1000,\n     *         //     f2: 2000,\n     *         //     f3: 3000\n     *         // }\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * // Error Handling\n     * async () => {\n     *     try {\n     *         let result = await async.mapValues(withMissingFileMap, getFileSizeInBytes);\n     *         console.log(result);\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *     }\n     * }\n     *\n     */\n    function mapValues(obj, iteratee, callback) {\n        return mapValuesLimit$1(obj, Infinity, iteratee, callback)\n    }\n\n    /**\n     * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n     *\n     * @name mapValuesSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.mapValues]{@link module:Collections.mapValues}\n     * @category Collection\n     * @param {Object} obj - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A function to apply to each value and key\n     * in `coll`.\n     * The iteratee should complete with the transformed value as its result.\n     * Invoked with (value, key, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. `result` is a new object consisting\n     * of each key from `obj`, with each transformed value on the right-hand side.\n     * Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function mapValuesSeries(obj, iteratee, callback) {\n        return mapValuesLimit$1(obj, 1, iteratee, callback)\n    }\n\n    /**\n     * Caches the results of an async function. When creating a hash to store\n     * function results against, the callback is omitted from the hash and an\n     * optional hash function can be used.\n     *\n     * **Note: if the async function errs, the result will not be cached and\n     * subsequent calls will call the wrapped function.**\n     *\n     * If no hash function is specified, the first argument is used as a hash key,\n     * which may work reasonably if it is a string or a data type that converts to a\n     * distinct string. Note that objects and arrays will not behave reasonably.\n     * Neither will cases where the other arguments are significant. In such cases,\n     * specify your own hash function.\n     *\n     * The cache of results is exposed as the `memo` property of the function\n     * returned by `memoize`.\n     *\n     * @name memoize\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n     * @param {Function} hasher - An optional function for generating a custom hash\n     * for storing results. It has all the arguments applied to it apart from the\n     * callback, and must be synchronous.\n     * @returns {AsyncFunction} a memoized version of `fn`\n     * @example\n     *\n     * var slow_fn = function(name, callback) {\n     *     // do something\n     *     callback(null, result);\n     * };\n     * var fn = async.memoize(slow_fn);\n     *\n     * // fn can now be used as if it were slow_fn\n     * fn('some name', function() {\n     *     // callback\n     * });\n     */\n    function memoize(fn, hasher = v => v) {\n        var memo = Object.create(null);\n        var queues = Object.create(null);\n        var _fn = wrapAsync(fn);\n        var memoized = initialParams((args, callback) => {\n            var key = hasher(...args);\n            if (key in memo) {\n                setImmediate$1(() => callback(null, ...memo[key]));\n            } else if (key in queues) {\n                queues[key].push(callback);\n            } else {\n                queues[key] = [callback];\n                _fn(...args, (err, ...resultArgs) => {\n                    // #1465 don't memoize if an error occurred\n                    if (!err) {\n                        memo[key] = resultArgs;\n                    }\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                        q[i](err, ...resultArgs);\n                    }\n                });\n            }\n        });\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    }\n\n    /* istanbul ignore file */\n\n    /**\n     * Calls `callback` on a later loop around the event loop. In Node.js this just\n     * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n     * available, otherwise `setTimeout(callback, 0)`, which means other higher\n     * priority events may precede the execution of `callback`.\n     *\n     * This is used internally for browser-compatibility purposes.\n     *\n     * @name nextTick\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @see [async.setImmediate]{@link module:Utils.setImmediate}\n     * @category Util\n     * @param {Function} callback - The function to call on a later loop around\n     * the event loop. Invoked with (args...).\n     * @param {...*} args... - any number of additional arguments to pass to the\n     * callback on the next tick.\n     * @example\n     *\n     * var call_order = [];\n     * async.nextTick(function() {\n     *     call_order.push('two');\n     *     // call_order now equals ['one','two']\n     * });\n     * call_order.push('one');\n     *\n     * async.setImmediate(function (a, b, c) {\n     *     // a, b, and c equal 1, 2, and 3\n     * }, 1, 2, 3);\n     */\n    var _defer$1;\n\n    if (hasNextTick) {\n        _defer$1 = process.nextTick;\n    } else if (hasSetImmediate) {\n        _defer$1 = setImmediate;\n    } else {\n        _defer$1 = fallback;\n    }\n\n    var nextTick = wrap(_defer$1);\n\n    var parallel = awaitify((eachfn, tasks, callback) => {\n        var results = isArrayLike(tasks) ? [] : {};\n\n        eachfn(tasks, (task, key, taskCb) => {\n            wrapAsync(task)((err, ...result) => {\n                if (result.length < 2) {\n                    [result] = result;\n                }\n                results[key] = result;\n                taskCb(err);\n            });\n        }, err => callback(err, results));\n    }, 3);\n\n    /**\n     * Run the `tasks` collection of functions in parallel, without waiting until\n     * the previous function has completed. If any of the functions pass an error to\n     * its callback, the main `callback` is immediately called with the value of the\n     * error. Once the `tasks` have completed, the results are passed to the final\n     * `callback` as an array.\n     *\n     * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n     * parallel execution of code.  If your tasks do not use any timers or perform\n     * any I/O, they will actually be executed in series.  Any synchronous setup\n     * sections for each task will happen one after the other.  JavaScript remains\n     * single-threaded.\n     *\n     * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n     * execution of other tasks when a task fails.\n     *\n     * It is also possible to use an object instead of an array. Each property will\n     * be run as a function and the results will be passed to the final `callback`\n     * as an object instead of an array. This can be a more readable way of handling\n     * results from {@link async.parallel}.\n     *\n     * @name parallel\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n     * [async functions]{@link AsyncFunction} to run.\n     * Each async function can complete with any number of optional `result` values.\n     * @param {Function} [callback] - An optional callback to run once all the\n     * functions have completed successfully. This function gets a results array\n     * (or object) containing all the result arguments passed to the task callbacks.\n     * Invoked with (err, results).\n     * @returns {Promise} a promise, if a callback is not passed\n     *\n     * @example\n     *\n     * //Using Callbacks\n     * async.parallel([\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'one');\n     *         }, 200);\n     *     },\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'two');\n     *         }, 100);\n     *     }\n     * ], function(err, results) {\n     *     console.log(results);\n     *     // results is equal to ['one','two'] even though\n     *     // the second function had a shorter timeout.\n     * });\n     *\n     * // an example using an object instead of an array\n     * async.parallel({\n     *     one: function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 1);\n     *         }, 200);\n     *     },\n     *     two: function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 2);\n     *         }, 100);\n     *     }\n     * }, function(err, results) {\n     *     console.log(results);\n     *     // results is equal to: { one: 1, two: 2 }\n     * });\n     *\n     * //Using Promises\n     * async.parallel([\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'one');\n     *         }, 200);\n     *     },\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'two');\n     *         }, 100);\n     *     }\n     * ]).then(results => {\n     *     console.log(results);\n     *     // results is equal to ['one','two'] even though\n     *     // the second function had a shorter timeout.\n     * }).catch(err => {\n     *     console.log(err);\n     * });\n     *\n     * // an example using an object instead of an array\n     * async.parallel({\n     *     one: function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 1);\n     *         }, 200);\n     *     },\n     *     two: function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 2);\n     *         }, 100);\n     *     }\n     * }).then(results => {\n     *     console.log(results);\n     *     // results is equal to: { one: 1, two: 2 }\n     * }).catch(err => {\n     *     console.log(err);\n     * });\n     *\n     * //Using async/await\n     * async () => {\n     *     try {\n     *         let results = await async.parallel([\n     *             function(callback) {\n     *                 setTimeout(function() {\n     *                     callback(null, 'one');\n     *                 }, 200);\n     *             },\n     *             function(callback) {\n     *                 setTimeout(function() {\n     *                     callback(null, 'two');\n     *                 }, 100);\n     *             }\n     *         ]);\n     *         console.log(results);\n     *         // results is equal to ['one','two'] even though\n     *         // the second function had a shorter timeout.\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * // an example using an object instead of an array\n     * async () => {\n     *     try {\n     *         let results = await async.parallel({\n     *             one: function(callback) {\n     *                 setTimeout(function() {\n     *                     callback(null, 1);\n     *                 }, 200);\n     *             },\n     *            two: function(callback) {\n     *                 setTimeout(function() {\n     *                     callback(null, 2);\n     *                 }, 100);\n     *            }\n     *         });\n     *         console.log(results);\n     *         // results is equal to: { one: 1, two: 2 }\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function parallel$1(tasks, callback) {\n        return parallel(eachOf$1, tasks, callback);\n    }\n\n    /**\n     * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name parallelLimit\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.parallel]{@link module:ControlFlow.parallel}\n     * @category Control Flow\n     * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n     * [async functions]{@link AsyncFunction} to run.\n     * Each async function can complete with any number of optional `result` values.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {Function} [callback] - An optional callback to run once all the\n     * functions have completed successfully. This function gets a results array\n     * (or object) containing all the result arguments passed to the task callbacks.\n     * Invoked with (err, results).\n     * @returns {Promise} a promise, if a callback is not passed\n     */\n    function parallelLimit(tasks, limit, callback) {\n        return parallel(eachOfLimit(limit), tasks, callback);\n    }\n\n    /**\n     * A queue of tasks for the worker function to complete.\n     * @typedef {Iterable} QueueObject\n     * @memberOf module:ControlFlow\n     * @property {Function} length - a function returning the number of items\n     * waiting to be processed. Invoke with `queue.length()`.\n     * @property {boolean} started - a boolean indicating whether or not any\n     * items have been pushed and processed by the queue.\n     * @property {Function} running - a function returning the number of items\n     * currently being processed. Invoke with `queue.running()`.\n     * @property {Function} workersList - a function returning the array of items\n     * currently being processed. Invoke with `queue.workersList()`.\n     * @property {Function} idle - a function returning false if there are items\n     * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n     * @property {number} concurrency - an integer for determining how many `worker`\n     * functions should be run in parallel. This property can be changed after a\n     * `queue` is created to alter the concurrency on-the-fly.\n     * @property {number} payload - an integer that specifies how many items are\n     * passed to the worker function at a time. only applies if this is a\n     * [cargo]{@link module:ControlFlow.cargo} object\n     * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n     * once the `worker` has finished processing the task. Instead of a single task,\n     * a `tasks` array can be submitted. The respective callback is used for every\n     * task in the list. Invoke with `queue.push(task, [callback])`,\n     * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.\n     * Invoke with `queue.unshift(task, [callback])`.\n     * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns\n     * a promise that rejects if an error occurs.\n     * @property {AsyncFunction} unshiftAsync - the same as `q.unshift`, except this returns\n     * a promise that rejects if an error occurs.\n     * @property {Function} remove - remove items from the queue that match a test\n     * function.  The test function will be passed an object with a `data` property,\n     * and a `priority` property, if this is a\n     * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n     * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n     * `function ({data, priority}) {}` and returns a Boolean.\n     * @property {Function} saturated - a function that sets a callback that is\n     * called when the number of running workers hits the `concurrency` limit, and\n     * further tasks will be queued.  If the callback is omitted, `q.saturated()`\n     * returns a promise for the next occurrence.\n     * @property {Function} unsaturated - a function that sets a callback that is\n     * called when the number of running workers is less than the `concurrency` &\n     * `buffer` limits, and further tasks will not be queued. If the callback is\n     * omitted, `q.unsaturated()` returns a promise for the next occurrence.\n     * @property {number} buffer - A minimum threshold buffer in order to say that\n     * the `queue` is `unsaturated`.\n     * @property {Function} empty - a function that sets a callback that is called\n     * when the last item from the `queue` is given to a `worker`. If the callback\n     * is omitted, `q.empty()` returns a promise for the next occurrence.\n     * @property {Function} drain - a function that sets a callback that is called\n     * when the last item from the `queue` has returned from the `worker`. If the\n     * callback is omitted, `q.drain()` returns a promise for the next occurrence.\n     * @property {Function} error - a function that sets a callback that is called\n     * when a task errors. Has the signature `function(error, task)`. If the\n     * callback is omitted, `error()` returns a promise that rejects on the next\n     * error.\n     * @property {boolean} paused - a boolean for determining whether the queue is\n     * in a paused state.\n     * @property {Function} pause - a function that pauses the processing of tasks\n     * until `resume()` is called. Invoke with `queue.pause()`.\n     * @property {Function} resume - a function that resumes the processing of\n     * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n     * @property {Function} kill - a function that removes the `drain` callback and\n     * empties remaining tasks from the queue forcing it to go idle. No more tasks\n     * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n     *\n     * @example\n     * const q = async.queue(worker, 2)\n     * q.push(item1)\n     * q.push(item2)\n     * q.push(item3)\n     * // queues are iterable, spread into an array to inspect\n     * const items = [...q] // [item1, item2, item3]\n     * // or use for of\n     * for (let item of q) {\n     *     console.log(item)\n     * }\n     *\n     * q.drain(() => {\n     *     console.log('all done')\n     * })\n     * // or\n     * await q.drain()\n     */\n\n    /**\n     * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n     * `queue` are processed in parallel (up to the `concurrency` limit). If all\n     * `worker`s are in progress, the task is queued until one becomes available.\n     * Once a `worker` completes a `task`, that `task`'s callback is called.\n     *\n     * @name queue\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {AsyncFunction} worker - An async function for processing a queued task.\n     * If you want to handle errors from an individual task, pass a callback to\n     * `q.push()`. Invoked with (task, callback).\n     * @param {number} [concurrency=1] - An `integer` for determining how many\n     * `worker` functions should be run in parallel.  If omitted, the concurrency\n     * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n     * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be\n     * attached as certain properties to listen for specific events during the\n     * lifecycle of the queue.\n     * @example\n     *\n     * // create a queue object with concurrency 2\n     * var q = async.queue(function(task, callback) {\n     *     console.log('hello ' + task.name);\n     *     callback();\n     * }, 2);\n     *\n     * // assign a callback\n     * q.drain(function() {\n     *     console.log('all items have been processed');\n     * });\n     * // or await the end\n     * await q.drain()\n     *\n     * // assign an error callback\n     * q.error(function(err, task) {\n     *     console.error('task experienced an error');\n     * });\n     *\n     * // add some items to the queue\n     * q.push({name: 'foo'}, function(err) {\n     *     console.log('finished processing foo');\n     * });\n     * // callback is optional\n     * q.push({name: 'bar'});\n     *\n     * // add some items to the queue (batch-wise)\n     * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n     *     console.log('finished processing item');\n     * });\n     *\n     * // add some items to the front of the queue\n     * q.unshift({name: 'bar'}, function (err) {\n     *     console.log('finished processing bar');\n     * });\n     */\n    function queue$1 (worker, concurrency) {\n        var _worker = wrapAsync(worker);\n        return queue((items, cb) => {\n            _worker(items[0], cb);\n        }, concurrency, 1);\n    }\n\n    // Binary min-heap implementation used for priority queue.\n    // Implementation is stable, i.e. push time is considered for equal priorities\n    class Heap {\n        constructor() {\n            this.heap = [];\n            this.pushCount = Number.MIN_SAFE_INTEGER;\n        }\n\n        get length() {\n            return this.heap.length;\n        }\n\n        empty () {\n            this.heap = [];\n            return this;\n        }\n\n        percUp(index) {\n            let p;\n\n            while (index > 0 && smaller(this.heap[index], this.heap[p=parent(index)])) {\n                let t = this.heap[index];\n                this.heap[index] = this.heap[p];\n                this.heap[p] = t;\n\n                index = p;\n            }\n        }\n\n        percDown(index) {\n            let l;\n\n            while ((l=leftChi(index)) < this.heap.length) {\n                if (l+1 < this.heap.length && smaller(this.heap[l+1], this.heap[l])) {\n                    l = l+1;\n                }\n\n                if (smaller(this.heap[index], this.heap[l])) {\n                    break;\n                }\n\n                let t = this.heap[index];\n                this.heap[index] = this.heap[l];\n                this.heap[l] = t;\n\n                index = l;\n            }\n        }\n\n        push(node) {\n            node.pushCount = ++this.pushCount;\n            this.heap.push(node);\n            this.percUp(this.heap.length-1);\n        }\n\n        unshift(node) {\n            return this.heap.push(node);\n        }\n\n        shift() {\n            let [top] = this.heap;\n\n            this.heap[0] = this.heap[this.heap.length-1];\n            this.heap.pop();\n            this.percDown(0);\n\n            return top;\n        }\n\n        toArray() {\n            return [...this];\n        }\n\n        *[Symbol.iterator] () {\n            for (let i = 0; i < this.heap.length; i++) {\n                yield this.heap[i].data;\n            }\n        }\n\n        remove (testFn) {\n            let j = 0;\n            for (let i = 0; i < this.heap.length; i++) {\n                if (!testFn(this.heap[i])) {\n                    this.heap[j] = this.heap[i];\n                    j++;\n                }\n            }\n\n            this.heap.splice(j);\n\n            for (let i = parent(this.heap.length-1); i >= 0; i--) {\n                this.percDown(i);\n            }\n\n            return this;\n        }\n    }\n\n    function leftChi(i) {\n        return (i<<1)+1;\n    }\n\n    function parent(i) {\n        return ((i+1)>>1)-1;\n    }\n\n    function smaller(x, y) {\n        if (x.priority !== y.priority) {\n            return x.priority < y.priority;\n        }\n        else {\n            return x.pushCount < y.pushCount;\n        }\n    }\n\n    /**\n     * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n     * completed in ascending priority order.\n     *\n     * @name priorityQueue\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.queue]{@link module:ControlFlow.queue}\n     * @category Control Flow\n     * @param {AsyncFunction} worker - An async function for processing a queued task.\n     * If you want to handle errors from an individual task, pass a callback to\n     * `q.push()`.\n     * Invoked with (task, callback).\n     * @param {number} concurrency - An `integer` for determining how many `worker`\n     * functions should be run in parallel.  If omitted, the concurrency defaults to\n     * `1`.  If the concurrency is `0`, an error is thrown.\n     * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are three\n     * differences between `queue` and `priorityQueue` objects:\n     * * `push(task, priority, [callback])` - `priority` should be a number. If an\n     *   array of `tasks` is given, all tasks will be assigned the same priority.\n     * * `pushAsync(task, priority, [callback])` - the same as `priorityQueue.push`,\n     *   except this returns a promise that rejects if an error occurs.\n     * * The `unshift` and `unshiftAsync` methods were removed.\n     */\n    function priorityQueue(worker, concurrency) {\n        // Start with a normal queue\n        var q = queue$1(worker, concurrency);\n\n        var {\n            push,\n            pushAsync\n        } = q;\n\n        q._tasks = new Heap();\n        q._createTaskItem = ({data, priority}, callback) => {\n            return {\n                data,\n                priority,\n                callback\n            };\n        };\n\n        function createDataItems(tasks, priority) {\n            if (!Array.isArray(tasks)) {\n                return {data: tasks, priority};\n            }\n            return tasks.map(data => { return {data, priority}; });\n        }\n\n        // Override push to accept second parameter representing priority\n        q.push = function(data, priority = 0, callback) {\n            return push(createDataItems(data, priority), callback);\n        };\n\n        q.pushAsync = function(data, priority = 0, callback) {\n            return pushAsync(createDataItems(data, priority), callback);\n        };\n\n        // Remove unshift functions\n        delete q.unshift;\n        delete q.unshiftAsync;\n\n        return q;\n    }\n\n    /**\n     * Runs the `tasks` array of functions in parallel, without waiting until the\n     * previous function has completed. Once any of the `tasks` complete or pass an\n     * error to its callback, the main `callback` is immediately called. It's\n     * equivalent to `Promise.race()`.\n     *\n     * @name race\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n     * to run. Each function can complete with an optional `result` value.\n     * @param {Function} callback - A callback to run once any of the functions have\n     * completed. This function gets an error or result from the first function that\n     * completed. Invoked with (err, result).\n     * @returns {Promise} a promise, if a callback is omitted\n     * @example\n     *\n     * async.race([\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'one');\n     *         }, 200);\n     *     },\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'two');\n     *         }, 100);\n     *     }\n     * ],\n     * // main callback\n     * function(err, result) {\n     *     // the result will be equal to 'two' as it finishes earlier\n     * });\n     */\n    function race(tasks, callback) {\n        callback = once(callback);\n        if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n        if (!tasks.length) return callback();\n        for (var i = 0, l = tasks.length; i < l; i++) {\n            wrapAsync(tasks[i])(callback);\n        }\n    }\n\n    var race$1 = awaitify(race, 2);\n\n    /**\n     * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n     *\n     * @name reduceRight\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.reduce]{@link module:Collections.reduce}\n     * @alias foldr\n     * @category Collection\n     * @param {Array} array - A collection to iterate over.\n     * @param {*} memo - The initial state of the reduction.\n     * @param {AsyncFunction} iteratee - A function applied to each item in the\n     * array to produce the next step in the reduction.\n     * The `iteratee` should complete with the next state of the reduction.\n     * If the iteratee completes with an error, the reduction is stopped and the\n     * main `callback` is immediately called with the error.\n     * Invoked with (memo, item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Result is the reduced value. Invoked with\n     * (err, result).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function reduceRight (array, memo, iteratee, callback) {\n        var reversed = [...array].reverse();\n        return reduce$1(reversed, memo, iteratee, callback);\n    }\n\n    /**\n     * Wraps the async function in another function that always completes with a\n     * result object, even when it errors.\n     *\n     * The result object has either the property `error` or `value`.\n     *\n     * @name reflect\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {AsyncFunction} fn - The async function you want to wrap\n     * @returns {Function} - A function that always passes null to it's callback as\n     * the error. The second argument to the callback will be an `object` with\n     * either an `error` or a `value` property.\n     * @example\n     *\n     * async.parallel([\n     *     async.reflect(function(callback) {\n     *         // do some stuff ...\n     *         callback(null, 'one');\n     *     }),\n     *     async.reflect(function(callback) {\n     *         // do some more stuff but error ...\n     *         callback('bad stuff happened');\n     *     }),\n     *     async.reflect(function(callback) {\n     *         // do some more stuff ...\n     *         callback(null, 'two');\n     *     })\n     * ],\n     * // optional callback\n     * function(err, results) {\n     *     // values\n     *     // results[0].value = 'one'\n     *     // results[1].error = 'bad stuff happened'\n     *     // results[2].value = 'two'\n     * });\n     */\n    function reflect(fn) {\n        var _fn = wrapAsync(fn);\n        return initialParams(function reflectOn(args, reflectCallback) {\n            args.push((error, ...cbArgs) => {\n                let retVal = {};\n                if (error) {\n                    retVal.error = error;\n                }\n                if (cbArgs.length > 0){\n                    var value = cbArgs;\n                    if (cbArgs.length <= 1) {\n                        [value] = cbArgs;\n                    }\n                    retVal.value = value;\n                }\n                reflectCallback(null, retVal);\n            });\n\n            return _fn.apply(this, args);\n        });\n    }\n\n    /**\n     * A helper function that wraps an array or an object of functions with `reflect`.\n     *\n     * @name reflectAll\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @see [async.reflect]{@link module:Utils.reflect}\n     * @category Util\n     * @param {Array|Object|Iterable} tasks - The collection of\n     * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n     * @returns {Array} Returns an array of async functions, each wrapped in\n     * `async.reflect`\n     * @example\n     *\n     * let tasks = [\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'one');\n     *         }, 200);\n     *     },\n     *     function(callback) {\n     *         // do some more stuff but error ...\n     *         callback(new Error('bad stuff happened'));\n     *     },\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'two');\n     *         }, 100);\n     *     }\n     * ];\n     *\n     * async.parallel(async.reflectAll(tasks),\n     * // optional callback\n     * function(err, results) {\n     *     // values\n     *     // results[0].value = 'one'\n     *     // results[1].error = Error('bad stuff happened')\n     *     // results[2].value = 'two'\n     * });\n     *\n     * // an example using an object instead of an array\n     * let tasks = {\n     *     one: function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'one');\n     *         }, 200);\n     *     },\n     *     two: function(callback) {\n     *         callback('two');\n     *     },\n     *     three: function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'three');\n     *         }, 100);\n     *     }\n     * };\n     *\n     * async.parallel(async.reflectAll(tasks),\n     * // optional callback\n     * function(err, results) {\n     *     // values\n     *     // results.one.value = 'one'\n     *     // results.two.error = 'two'\n     *     // results.three.value = 'three'\n     * });\n     */\n    function reflectAll(tasks) {\n        var results;\n        if (Array.isArray(tasks)) {\n            results = tasks.map(reflect);\n        } else {\n            results = {};\n            Object.keys(tasks).forEach(key => {\n                results[key] = reflect.call(this, tasks[key]);\n            });\n        }\n        return results;\n    }\n\n    function reject(eachfn, arr, _iteratee, callback) {\n        const iteratee = wrapAsync(_iteratee);\n        return _filter(eachfn, arr, (value, cb) => {\n            iteratee(value, (err, v) => {\n                cb(err, !v);\n            });\n        }, callback);\n    }\n\n    /**\n     * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n     *\n     * @name reject\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.filter]{@link module:Collections.filter}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {Function} iteratee - An async truth test to apply to each item in\n     * `coll`.\n     * The should complete with a boolean value as its `result`.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * // dir1 is a directory that contains file1.txt, file2.txt\n     * // dir2 is a directory that contains file3.txt, file4.txt\n     * // dir3 is a directory that contains file5.txt\n     *\n     * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n     *\n     * // asynchronous function that checks if a file exists\n     * function fileExists(file, callback) {\n     *    fs.access(file, fs.constants.F_OK, (err) => {\n     *        callback(null, !err);\n     *    });\n     * }\n     *\n     * // Using callbacks\n     * async.reject(fileList, fileExists, function(err, results) {\n     *    // [ 'dir3/file6.txt' ]\n     *    // results now equals an array of the non-existing files\n     * });\n     *\n     * // Using Promises\n     * async.reject(fileList, fileExists)\n     * .then( results => {\n     *     console.log(results);\n     *     // [ 'dir3/file6.txt' ]\n     *     // results now equals an array of the non-existing files\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let results = await async.reject(fileList, fileExists);\n     *         console.log(results);\n     *         // [ 'dir3/file6.txt' ]\n     *         // results now equals an array of the non-existing files\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function reject$1 (coll, iteratee, callback) {\n        return reject(eachOf$1, coll, iteratee, callback)\n    }\n    var reject$2 = awaitify(reject$1, 3);\n\n    /**\n     * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name rejectLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.reject]{@link module:Collections.reject}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {Function} iteratee - An async truth test to apply to each item in\n     * `coll`.\n     * The should complete with a boolean value as its `result`.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function rejectLimit (coll, limit, iteratee, callback) {\n        return reject(eachOfLimit(limit), coll, iteratee, callback)\n    }\n    var rejectLimit$1 = awaitify(rejectLimit, 4);\n\n    /**\n     * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n     *\n     * @name rejectSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.reject]{@link module:Collections.reject}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {Function} iteratee - An async truth test to apply to each item in\n     * `coll`.\n     * The should complete with a boolean value as its `result`.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function rejectSeries (coll, iteratee, callback) {\n        return reject(eachOfSeries$1, coll, iteratee, callback)\n    }\n    var rejectSeries$1 = awaitify(rejectSeries, 3);\n\n    function constant$1(value) {\n        return function () {\n            return value;\n        }\n    }\n\n    /**\n     * Attempts to get a successful response from `task` no more than `times` times\n     * before returning an error. If the task is successful, the `callback` will be\n     * passed the result of the successful task. If all attempts fail, the callback\n     * will be passed the error and result (if any) of the final attempt.\n     *\n     * @name retry\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @see [async.retryable]{@link module:ControlFlow.retryable}\n     * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n     * object with `times` and `interval` or a number.\n     * * `times` - The number of attempts to make before giving up.  The default\n     *   is `5`.\n     * * `interval` - The time to wait between retries, in milliseconds.  The\n     *   default is `0`. The interval may also be specified as a function of the\n     *   retry count (see example).\n     * * `errorFilter` - An optional synchronous function that is invoked on\n     *   erroneous result. If it returns `true` the retry attempts will continue;\n     *   if the function returns `false` the retry flow is aborted with the current\n     *   attempt's error and result being returned to the final callback.\n     *   Invoked with (err).\n     * * If `opts` is a number, the number specifies the number of times to retry,\n     *   with the default interval of `0`.\n     * @param {AsyncFunction} task - An async function to retry.\n     * Invoked with (callback).\n     * @param {Function} [callback] - An optional callback which is called when the\n     * task has succeeded, or after the final failed attempt. It receives the `err`\n     * and `result` arguments of the last attempt at completing the `task`. Invoked\n     * with (err, results).\n     * @returns {Promise} a promise if no callback provided\n     *\n     * @example\n     *\n     * // The `retry` function can be used as a stand-alone control flow by passing\n     * // a callback, as shown below:\n     *\n     * // try calling apiMethod 3 times\n     * async.retry(3, apiMethod, function(err, result) {\n     *     // do something with the result\n     * });\n     *\n     * // try calling apiMethod 3 times, waiting 200 ms between each retry\n     * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n     *     // do something with the result\n     * });\n     *\n     * // try calling apiMethod 10 times with exponential backoff\n     * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n     * async.retry({\n     *   times: 10,\n     *   interval: function(retryCount) {\n     *     return 50 * Math.pow(2, retryCount);\n     *   }\n     * }, apiMethod, function(err, result) {\n     *     // do something with the result\n     * });\n     *\n     * // try calling apiMethod the default 5 times no delay between each retry\n     * async.retry(apiMethod, function(err, result) {\n     *     // do something with the result\n     * });\n     *\n     * // try calling apiMethod only when error condition satisfies, all other\n     * // errors will abort the retry control flow and return to final callback\n     * async.retry({\n     *   errorFilter: function(err) {\n     *     return err.message === 'Temporary error'; // only retry on a specific error\n     *   }\n     * }, apiMethod, function(err, result) {\n     *     // do something with the result\n     * });\n     *\n     * // to retry individual methods that are not as reliable within other\n     * // control flow functions, use the `retryable` wrapper:\n     * async.auto({\n     *     users: api.getUsers.bind(api),\n     *     payments: async.retryable(3, api.getPayments.bind(api))\n     * }, function(err, results) {\n     *     // do something with the results\n     * });\n     *\n     */\n    const DEFAULT_TIMES = 5;\n    const DEFAULT_INTERVAL = 0;\n\n    function retry(opts, task, callback) {\n        var options = {\n            times: DEFAULT_TIMES,\n            intervalFunc: constant$1(DEFAULT_INTERVAL)\n        };\n\n        if (arguments.length < 3 && typeof opts === 'function') {\n            callback = task || promiseCallback();\n            task = opts;\n        } else {\n            parseTimes(options, opts);\n            callback = callback || promiseCallback();\n        }\n\n        if (typeof task !== 'function') {\n            throw new Error(\"Invalid arguments for async.retry\");\n        }\n\n        var _task = wrapAsync(task);\n\n        var attempt = 1;\n        function retryAttempt() {\n            _task((err, ...args) => {\n                if (err === false) return\n                if (err && attempt++ < options.times &&\n                    (typeof options.errorFilter != 'function' ||\n                        options.errorFilter(err))) {\n                    setTimeout(retryAttempt, options.intervalFunc(attempt - 1));\n                } else {\n                    callback(err, ...args);\n                }\n            });\n        }\n\n        retryAttempt();\n        return callback[PROMISE_SYMBOL]\n    }\n\n    function parseTimes(acc, t) {\n        if (typeof t === 'object') {\n            acc.times = +t.times || DEFAULT_TIMES;\n\n            acc.intervalFunc = typeof t.interval === 'function' ?\n                t.interval :\n                constant$1(+t.interval || DEFAULT_INTERVAL);\n\n            acc.errorFilter = t.errorFilter;\n        } else if (typeof t === 'number' || typeof t === 'string') {\n            acc.times = +t || DEFAULT_TIMES;\n        } else {\n            throw new Error(\"Invalid arguments for async.retry\");\n        }\n    }\n\n    /**\n     * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n     * wraps a task and makes it retryable, rather than immediately calling it\n     * with retries.\n     *\n     * @name retryable\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.retry]{@link module:ControlFlow.retry}\n     * @category Control Flow\n     * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n     * options, exactly the same as from `retry`, except for a `opts.arity` that\n     * is the arity of the `task` function, defaulting to `task.length`\n     * @param {AsyncFunction} task - the asynchronous function to wrap.\n     * This function will be passed any arguments passed to the returned wrapper.\n     * Invoked with (...args, callback).\n     * @returns {AsyncFunction} The wrapped function, which when invoked, will\n     * retry on an error, based on the parameters specified in `opts`.\n     * This function will accept the same parameters as `task`.\n     * @example\n     *\n     * async.auto({\n     *     dep1: async.retryable(3, getFromFlakyService),\n     *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n     *         maybeProcessData(results.dep1, cb);\n     *     })]\n     * }, callback);\n     */\n    function retryable (opts, task) {\n        if (!task) {\n            task = opts;\n            opts = null;\n        }\n        let arity = (opts && opts.arity) || task.length;\n        if (isAsync(task)) {\n            arity += 1;\n        }\n        var _task = wrapAsync(task);\n        return initialParams((args, callback) => {\n            if (args.length < arity - 1 || callback == null) {\n                args.push(callback);\n                callback = promiseCallback();\n            }\n            function taskFn(cb) {\n                _task(...args, cb);\n            }\n\n            if (opts) retry(opts, taskFn, callback);\n            else retry(taskFn, callback);\n\n            return callback[PROMISE_SYMBOL]\n        });\n    }\n\n    /**\n     * Run the functions in the `tasks` collection in series, each one running once\n     * the previous function has completed. If any functions in the series pass an\n     * error to its callback, no more functions are run, and `callback` is\n     * immediately called with the value of the error. Otherwise, `callback`\n     * receives an array of results when `tasks` have completed.\n     *\n     * It is also possible to use an object instead of an array. Each property will\n     * be run as a function, and the results will be passed to the final `callback`\n     * as an object instead of an array. This can be a more readable way of handling\n     *  results from {@link async.series}.\n     *\n     * **Note** that while many implementations preserve the order of object\n     * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n     * explicitly states that\n     *\n     * > The mechanics and order of enumerating the properties is not specified.\n     *\n     * So if you rely on the order in which your series of functions are executed,\n     * and want this to work on all platforms, consider using an array.\n     *\n     * @name series\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n     * [async functions]{@link AsyncFunction} to run in series.\n     * Each function can complete with any number of optional `result` values.\n     * @param {Function} [callback] - An optional callback to run once all the\n     * functions have completed. This function gets a results array (or object)\n     * containing all the result arguments passed to the `task` callbacks. Invoked\n     * with (err, result).\n     * @return {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * //Using Callbacks\n     * async.series([\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             // do some async task\n     *             callback(null, 'one');\n     *         }, 200);\n     *     },\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             // then do another async task\n     *             callback(null, 'two');\n     *         }, 100);\n     *     }\n     * ], function(err, results) {\n     *     console.log(results);\n     *     // results is equal to ['one','two']\n     * });\n     *\n     * // an example using objects instead of arrays\n     * async.series({\n     *     one: function(callback) {\n     *         setTimeout(function() {\n     *             // do some async task\n     *             callback(null, 1);\n     *         }, 200);\n     *     },\n     *     two: function(callback) {\n     *         setTimeout(function() {\n     *             // then do another async task\n     *             callback(null, 2);\n     *         }, 100);\n     *     }\n     * }, function(err, results) {\n     *     console.log(results);\n     *     // results is equal to: { one: 1, two: 2 }\n     * });\n     *\n     * //Using Promises\n     * async.series([\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'one');\n     *         }, 200);\n     *     },\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'two');\n     *         }, 100);\n     *     }\n     * ]).then(results => {\n     *     console.log(results);\n     *     // results is equal to ['one','two']\n     * }).catch(err => {\n     *     console.log(err);\n     * });\n     *\n     * // an example using an object instead of an array\n     * async.series({\n     *     one: function(callback) {\n     *         setTimeout(function() {\n     *             // do some async task\n     *             callback(null, 1);\n     *         }, 200);\n     *     },\n     *     two: function(callback) {\n     *         setTimeout(function() {\n     *             // then do another async task\n     *             callback(null, 2);\n     *         }, 100);\n     *     }\n     * }).then(results => {\n     *     console.log(results);\n     *     // results is equal to: { one: 1, two: 2 }\n     * }).catch(err => {\n     *     console.log(err);\n     * });\n     *\n     * //Using async/await\n     * async () => {\n     *     try {\n     *         let results = await async.series([\n     *             function(callback) {\n     *                 setTimeout(function() {\n     *                     // do some async task\n     *                     callback(null, 'one');\n     *                 }, 200);\n     *             },\n     *             function(callback) {\n     *                 setTimeout(function() {\n     *                     // then do another async task\n     *                     callback(null, 'two');\n     *                 }, 100);\n     *             }\n     *         ]);\n     *         console.log(results);\n     *         // results is equal to ['one','two']\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * // an example using an object instead of an array\n     * async () => {\n     *     try {\n     *         let results = await async.parallel({\n     *             one: function(callback) {\n     *                 setTimeout(function() {\n     *                     // do some async task\n     *                     callback(null, 1);\n     *                 }, 200);\n     *             },\n     *            two: function(callback) {\n     *                 setTimeout(function() {\n     *                     // then do another async task\n     *                     callback(null, 2);\n     *                 }, 100);\n     *            }\n     *         });\n     *         console.log(results);\n     *         // results is equal to: { one: 1, two: 2 }\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function series(tasks, callback) {\n        return parallel(eachOfSeries$1, tasks, callback);\n    }\n\n    /**\n     * Returns `true` if at least one element in the `coll` satisfies an async test.\n     * If any iteratee call returns `true`, the main `callback` is immediately\n     * called.\n     *\n     * @name some\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias any\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n     * in the collections in parallel.\n     * The iteratee should complete with a boolean `result` value.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called as soon as any\n     * iteratee returns `true`, or after all the iteratee functions have finished.\n     * Result will be either `true` or `false` depending on the values of the async\n     * tests. Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     * @example\n     *\n     * // dir1 is a directory that contains file1.txt, file2.txt\n     * // dir2 is a directory that contains file3.txt, file4.txt\n     * // dir3 is a directory that contains file5.txt\n     * // dir4 does not exist\n     *\n     * // asynchronous function that checks if a file exists\n     * function fileExists(file, callback) {\n     *    fs.access(file, fs.constants.F_OK, (err) => {\n     *        callback(null, !err);\n     *    });\n     * }\n     *\n     * // Using callbacks\n     * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists,\n     *    function(err, result) {\n     *        console.log(result);\n     *        // true\n     *        // result is true since some file in the list exists\n     *    }\n     *);\n     *\n     * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists,\n     *    function(err, result) {\n     *        console.log(result);\n     *        // false\n     *        // result is false since none of the files exists\n     *    }\n     *);\n     *\n     * // Using Promises\n     * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists)\n     * .then( result => {\n     *     console.log(result);\n     *     // true\n     *     // result is true since some file in the list exists\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists)\n     * .then( result => {\n     *     console.log(result);\n     *     // false\n     *     // result is false since none of the files exists\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists);\n     *         console.log(result);\n     *         // true\n     *         // result is true since some file in the list exists\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * async () => {\n     *     try {\n     *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists);\n     *         console.log(result);\n     *         // false\n     *         // result is false since none of the files exists\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function some(coll, iteratee, callback) {\n        return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback)\n    }\n    var some$1 = awaitify(some, 3);\n\n    /**\n     * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n     *\n     * @name someLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.some]{@link module:Collections.some}\n     * @alias anyLimit\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n     * in the collections in parallel.\n     * The iteratee should complete with a boolean `result` value.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called as soon as any\n     * iteratee returns `true`, or after all the iteratee functions have finished.\n     * Result will be either `true` or `false` depending on the values of the async\n     * tests. Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     */\n    function someLimit(coll, limit, iteratee, callback) {\n        return _createTester(Boolean, res => res)(eachOfLimit(limit), coll, iteratee, callback)\n    }\n    var someLimit$1 = awaitify(someLimit, 4);\n\n    /**\n     * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n     *\n     * @name someSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.some]{@link module:Collections.some}\n     * @alias anySeries\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n     * in the collections in series.\n     * The iteratee should complete with a boolean `result` value.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called as soon as any\n     * iteratee returns `true`, or after all the iteratee functions have finished.\n     * Result will be either `true` or `false` depending on the values of the async\n     * tests. Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     */\n    function someSeries(coll, iteratee, callback) {\n        return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback)\n    }\n    var someSeries$1 = awaitify(someSeries, 3);\n\n    /**\n     * Sorts a list by the results of running each `coll` value through an async\n     * `iteratee`.\n     *\n     * @name sortBy\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with a value to use as the sort criteria as\n     * its `result`.\n     * Invoked with (item, callback).\n     * @param {Function} callback - A callback which is called after all the\n     * `iteratee` functions have finished, or an error occurs. Results is the items\n     * from the original `coll` sorted by the values returned by the `iteratee`\n     * calls. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback passed\n     * @example\n     *\n     * // bigfile.txt is a file that is 251100 bytes in size\n     * // mediumfile.txt is a file that is 11000 bytes in size\n     * // smallfile.txt is a file that is 121 bytes in size\n     *\n     * // asynchronous function that returns the file size in bytes\n     * function getFileSizeInBytes(file, callback) {\n     *     fs.stat(file, function(err, stat) {\n     *         if (err) {\n     *             return callback(err);\n     *         }\n     *         callback(null, stat.size);\n     *     });\n     * }\n     *\n     * // Using callbacks\n     * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes,\n     *     function(err, results) {\n     *         if (err) {\n     *             console.log(err);\n     *         } else {\n     *             console.log(results);\n     *             // results is now the original array of files sorted by\n     *             // file size (ascending by default), e.g.\n     *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n     *         }\n     *     }\n     * );\n     *\n     * // By modifying the callback parameter the\n     * // sorting order can be influenced:\n     *\n     * // ascending order\n     * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], function(file, callback) {\n     *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n     *         if (getFileSizeErr) return callback(getFileSizeErr);\n     *         callback(null, fileSize);\n     *     });\n     * }, function(err, results) {\n     *         if (err) {\n     *             console.log(err);\n     *         } else {\n     *             console.log(results);\n     *             // results is now the original array of files sorted by\n     *             // file size (ascending by default), e.g.\n     *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n     *         }\n     *     }\n     * );\n     *\n     * // descending order\n     * async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], function(file, callback) {\n     *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n     *         if (getFileSizeErr) {\n     *             return callback(getFileSizeErr);\n     *         }\n     *         callback(null, fileSize * -1);\n     *     });\n     * }, function(err, results) {\n     *         if (err) {\n     *             console.log(err);\n     *         } else {\n     *             console.log(results);\n     *             // results is now the original array of files sorted by\n     *             // file size (ascending by default), e.g.\n     *             // [ 'bigfile.txt', 'mediumfile.txt', 'smallfile.txt']\n     *         }\n     *     }\n     * );\n     *\n     * // Error handling\n     * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes,\n     *     function(err, results) {\n     *         if (err) {\n     *             console.log(err);\n     *             // [ Error: ENOENT: no such file or directory ]\n     *         } else {\n     *             console.log(results);\n     *         }\n     *     }\n     * );\n     *\n     * // Using Promises\n     * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes)\n     * .then( results => {\n     *     console.log(results);\n     *     // results is now the original array of files sorted by\n     *     // file size (ascending by default), e.g.\n     *     // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * // Error handling\n     * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes)\n     * .then( results => {\n     *     console.log(results);\n     * }).catch( err => {\n     *     console.log(err);\n     *     // [ Error: ENOENT: no such file or directory ]\n     * });\n     *\n     * // Using async/await\n     * (async () => {\n     *     try {\n     *         let results = await async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n     *         console.log(results);\n     *         // results is now the original array of files sorted by\n     *         // file size (ascending by default), e.g.\n     *         // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * })();\n     *\n     * // Error handling\n     * async () => {\n     *     try {\n     *         let results = await async.sortBy(['missingfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n     *         console.log(results);\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *     }\n     * }\n     *\n     */\n    function sortBy (coll, iteratee, callback) {\n        var _iteratee = wrapAsync(iteratee);\n        return map$1(coll, (x, iterCb) => {\n            _iteratee(x, (err, criteria) => {\n                if (err) return iterCb(err);\n                iterCb(err, {value: x, criteria});\n            });\n        }, (err, results) => {\n            if (err) return callback(err);\n            callback(null, results.sort(comparator).map(v => v.value));\n        });\n\n        function comparator(left, right) {\n            var a = left.criteria, b = right.criteria;\n            return a < b ? -1 : a > b ? 1 : 0;\n        }\n    }\n    var sortBy$1 = awaitify(sortBy, 3);\n\n    /**\n     * Sets a time limit on an asynchronous function. If the function does not call\n     * its callback within the specified milliseconds, it will be called with a\n     * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n     *\n     * @name timeout\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {AsyncFunction} asyncFn - The async function to limit in time.\n     * @param {number} milliseconds - The specified time limit.\n     * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n     * to timeout Error for more information..\n     * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n     * of the control flow functions.\n     * Invoke this function with the same parameters as you would `asyncFunc`.\n     * @example\n     *\n     * function myFunction(foo, callback) {\n     *     doAsyncTask(foo, function(err, data) {\n     *         // handle errors\n     *         if (err) return callback(err);\n     *\n     *         // do some stuff ...\n     *\n     *         // return processed data\n     *         return callback(null, data);\n     *     });\n     * }\n     *\n     * var wrapped = async.timeout(myFunction, 1000);\n     *\n     * // call `wrapped` as you would `myFunction`\n     * wrapped({ bar: 'bar' }, function(err, data) {\n     *     // if `myFunction` takes < 1000 ms to execute, `err`\n     *     // and `data` will have their expected values\n     *\n     *     // else `err` will be an Error with the code 'ETIMEDOUT'\n     * });\n     */\n    function timeout(asyncFn, milliseconds, info) {\n        var fn = wrapAsync(asyncFn);\n\n        return initialParams((args, callback) => {\n            var timedOut = false;\n            var timer;\n\n            function timeoutCallback() {\n                var name = asyncFn.name || 'anonymous';\n                var error  = new Error('Callback function \"' + name + '\" timed out.');\n                error.code = 'ETIMEDOUT';\n                if (info) {\n                    error.info = info;\n                }\n                timedOut = true;\n                callback(error);\n            }\n\n            args.push((...cbArgs) => {\n                if (!timedOut) {\n                    callback(...cbArgs);\n                    clearTimeout(timer);\n                }\n            });\n\n            // setup timer and call original function\n            timer = setTimeout(timeoutCallback, milliseconds);\n            fn(...args);\n        });\n    }\n\n    function range(size) {\n        var result = Array(size);\n        while (size--) {\n            result[size] = size;\n        }\n        return result;\n    }\n\n    /**\n     * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name timesLimit\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.times]{@link module:ControlFlow.times}\n     * @category Control Flow\n     * @param {number} count - The number of times to run the function.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - The async function to call `n` times.\n     * Invoked with the iteration index and a callback: (n, next).\n     * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n     * @returns {Promise} a promise, if no callback is provided\n     */\n    function timesLimit(count, limit, iteratee, callback) {\n        var _iteratee = wrapAsync(iteratee);\n        return mapLimit$1(range(count), limit, _iteratee, callback);\n    }\n\n    /**\n     * Calls the `iteratee` function `n` times, and accumulates results in the same\n     * manner you would use with [map]{@link module:Collections.map}.\n     *\n     * @name times\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.map]{@link module:Collections.map}\n     * @category Control Flow\n     * @param {number} n - The number of times to run the function.\n     * @param {AsyncFunction} iteratee - The async function to call `n` times.\n     * Invoked with the iteration index and a callback: (n, next).\n     * @param {Function} callback - see {@link module:Collections.map}.\n     * @returns {Promise} a promise, if no callback is provided\n     * @example\n     *\n     * // Pretend this is some complicated async factory\n     * var createUser = function(id, callback) {\n     *     callback(null, {\n     *         id: 'user' + id\n     *     });\n     * };\n     *\n     * // generate 5 users\n     * async.times(5, function(n, next) {\n     *     createUser(n, function(err, user) {\n     *         next(err, user);\n     *     });\n     * }, function(err, users) {\n     *     // we should now have 5 users\n     * });\n     */\n    function times (n, iteratee, callback) {\n        return timesLimit(n, Infinity, iteratee, callback)\n    }\n\n    /**\n     * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n     *\n     * @name timesSeries\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.times]{@link module:ControlFlow.times}\n     * @category Control Flow\n     * @param {number} n - The number of times to run the function.\n     * @param {AsyncFunction} iteratee - The async function to call `n` times.\n     * Invoked with the iteration index and a callback: (n, next).\n     * @param {Function} callback - see {@link module:Collections.map}.\n     * @returns {Promise} a promise, if no callback is provided\n     */\n    function timesSeries (n, iteratee, callback) {\n        return timesLimit(n, 1, iteratee, callback)\n    }\n\n    /**\n     * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n     * element in parallel, each step potentially mutating an `accumulator` value.\n     * The type of the accumulator defaults to the type of collection passed in.\n     *\n     * @name transform\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n     * it will default to an empty Object or Array, depending on the type of `coll`\n     * @param {AsyncFunction} iteratee - A function applied to each item in the\n     * collection that potentially modifies the accumulator.\n     * Invoked with (accumulator, item, key, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Result is the transformed accumulator.\n     * Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     * @example\n     *\n     * // file1.txt is a file that is 1000 bytes in size\n     * // file2.txt is a file that is 2000 bytes in size\n     * // file3.txt is a file that is 3000 bytes in size\n     *\n     * // helper function that returns human-readable size format from bytes\n     * function formatBytes(bytes, decimals = 2) {\n     *   // implementation not included for brevity\n     *   return humanReadbleFilesize;\n     * }\n     *\n     * const fileList = ['file1.txt','file2.txt','file3.txt'];\n     *\n     * // asynchronous function that returns the file size, transformed to human-readable format\n     * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n     * function transformFileSize(acc, value, key, callback) {\n     *     fs.stat(value, function(err, stat) {\n     *         if (err) {\n     *             return callback(err);\n     *         }\n     *         acc[key] = formatBytes(stat.size);\n     *         callback(null);\n     *     });\n     * }\n     *\n     * // Using callbacks\n     * async.transform(fileList, transformFileSize, function(err, result) {\n     *     if(err) {\n     *         console.log(err);\n     *     } else {\n     *         console.log(result);\n     *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n     *     }\n     * });\n     *\n     * // Using Promises\n     * async.transform(fileList, transformFileSize)\n     * .then(result => {\n     *     console.log(result);\n     *     // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n     * }).catch(err => {\n     *     console.log(err);\n     * });\n     *\n     * // Using async/await\n     * (async () => {\n     *     try {\n     *         let result = await async.transform(fileList, transformFileSize);\n     *         console.log(result);\n     *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * })();\n     *\n     * @example\n     *\n     * // file1.txt is a file that is 1000 bytes in size\n     * // file2.txt is a file that is 2000 bytes in size\n     * // file3.txt is a file that is 3000 bytes in size\n     *\n     * // helper function that returns human-readable size format from bytes\n     * function formatBytes(bytes, decimals = 2) {\n     *   // implementation not included for brevity\n     *   return humanReadbleFilesize;\n     * }\n     *\n     * const fileMap = { f1: 'file1.txt', f2: 'file2.txt', f3: 'file3.txt' };\n     *\n     * // asynchronous function that returns the file size, transformed to human-readable format\n     * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n     * function transformFileSize(acc, value, key, callback) {\n     *     fs.stat(value, function(err, stat) {\n     *         if (err) {\n     *             return callback(err);\n     *         }\n     *         acc[key] = formatBytes(stat.size);\n     *         callback(null);\n     *     });\n     * }\n     *\n     * // Using callbacks\n     * async.transform(fileMap, transformFileSize, function(err, result) {\n     *     if(err) {\n     *         console.log(err);\n     *     } else {\n     *         console.log(result);\n     *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n     *     }\n     * });\n     *\n     * // Using Promises\n     * async.transform(fileMap, transformFileSize)\n     * .then(result => {\n     *     console.log(result);\n     *     // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n     * }).catch(err => {\n     *     console.log(err);\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let result = await async.transform(fileMap, transformFileSize);\n     *         console.log(result);\n     *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function transform (coll, accumulator, iteratee, callback) {\n        if (arguments.length <= 3 && typeof accumulator === 'function') {\n            callback = iteratee;\n            iteratee = accumulator;\n            accumulator = Array.isArray(coll) ? [] : {};\n        }\n        callback = once(callback || promiseCallback());\n        var _iteratee = wrapAsync(iteratee);\n\n        eachOf$1(coll, (v, k, cb) => {\n            _iteratee(accumulator, v, k, cb);\n        }, err => callback(err, accumulator));\n        return callback[PROMISE_SYMBOL]\n    }\n\n    /**\n     * It runs each task in series but stops whenever any of the functions were\n     * successful. If one of the tasks were successful, the `callback` will be\n     * passed the result of the successful task. If all tasks fail, the callback\n     * will be passed the error and result (if any) of the final attempt.\n     *\n     * @name tryEach\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n     * run, each function is passed a `callback(err, result)` it must call on\n     * completion with an error `err` (which can be `null`) and an optional `result`\n     * value.\n     * @param {Function} [callback] - An optional callback which is called when one\n     * of the tasks has succeeded, or all have failed. It receives the `err` and\n     * `result` arguments of the last attempt at completing the `task`. Invoked with\n     * (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     * async.tryEach([\n     *     function getDataFromFirstWebsite(callback) {\n     *         // Try getting the data from the first website\n     *         callback(err, data);\n     *     },\n     *     function getDataFromSecondWebsite(callback) {\n     *         // First website failed,\n     *         // Try getting the data from the backup website\n     *         callback(err, data);\n     *     }\n     * ],\n     * // optional callback\n     * function(err, results) {\n     *     Now do something with the data.\n     * });\n     *\n     */\n    function tryEach(tasks, callback) {\n        var error = null;\n        var result;\n        return eachSeries$1(tasks, (task, taskCb) => {\n            wrapAsync(task)((err, ...args) => {\n                if (err === false) return taskCb(err);\n\n                if (args.length < 2) {\n                    [result] = args;\n                } else {\n                    result = args;\n                }\n                error = err;\n                taskCb(err ? null : {});\n            });\n        }, () => callback(error, result));\n    }\n\n    var tryEach$1 = awaitify(tryEach);\n\n    /**\n     * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n     * unmemoized form. Handy for testing.\n     *\n     * @name unmemoize\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @see [async.memoize]{@link module:Utils.memoize}\n     * @category Util\n     * @param {AsyncFunction} fn - the memoized function\n     * @returns {AsyncFunction} a function that calls the original unmemoized function\n     */\n    function unmemoize(fn) {\n        return (...args) => {\n            return (fn.unmemoized || fn)(...args);\n        };\n    }\n\n    /**\n     * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n     * stopped, or an error occurs.\n     *\n     * @name whilst\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {AsyncFunction} test - asynchronous truth test to perform before each\n     * execution of `iteratee`. Invoked with ().\n     * @param {AsyncFunction} iteratee - An async function which is called each time\n     * `test` passes. Invoked with (callback).\n     * @param {Function} [callback] - A callback which is called after the test\n     * function has failed and repeated execution of `iteratee` has stopped. `callback`\n     * will be passed an error and any arguments passed to the final `iteratee`'s\n     * callback. Invoked with (err, [results]);\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * var count = 0;\n     * async.whilst(\n     *     function test(cb) { cb(null, count < 5); },\n     *     function iter(callback) {\n     *         count++;\n     *         setTimeout(function() {\n     *             callback(null, count);\n     *         }, 1000);\n     *     },\n     *     function (err, n) {\n     *         // 5 seconds have passed, n = 5\n     *     }\n     * );\n     */\n    function whilst(test, iteratee, callback) {\n        callback = onlyOnce(callback);\n        var _fn = wrapAsync(iteratee);\n        var _test = wrapAsync(test);\n        var results = [];\n\n        function next(err, ...rest) {\n            if (err) return callback(err);\n            results = rest;\n            if (err === false) return;\n            _test(check);\n        }\n\n        function check(err, truth) {\n            if (err) return callback(err);\n            if (err === false) return;\n            if (!truth) return callback(null, ...results);\n            _fn(next);\n        }\n\n        return _test(check);\n    }\n    var whilst$1 = awaitify(whilst, 3);\n\n    /**\n     * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n     * stopped, or an error occurs. `callback` will be passed an error and any\n     * arguments passed to the final `iteratee`'s callback.\n     *\n     * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n     *\n     * @name until\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.whilst]{@link module:ControlFlow.whilst}\n     * @category Control Flow\n     * @param {AsyncFunction} test - asynchronous truth test to perform before each\n     * execution of `iteratee`. Invoked with (callback).\n     * @param {AsyncFunction} iteratee - An async function which is called each time\n     * `test` fails. Invoked with (callback).\n     * @param {Function} [callback] - A callback which is called after the test\n     * function has passed and repeated execution of `iteratee` has stopped. `callback`\n     * will be passed an error and any arguments passed to the final `iteratee`'s\n     * callback. Invoked with (err, [results]);\n     * @returns {Promise} a promise, if a callback is not passed\n     *\n     * @example\n     * const results = []\n     * let finished = false\n     * async.until(function test(cb) {\n     *     cb(null, finished)\n     * }, function iter(next) {\n     *     fetchPage(url, (err, body) => {\n     *         if (err) return next(err)\n     *         results = results.concat(body.objects)\n     *         finished = !!body.next\n     *         next(err)\n     *     })\n     * }, function done (err) {\n     *     // all pages have been fetched\n     * })\n     */\n    function until(test, iteratee, callback) {\n        const _test = wrapAsync(test);\n        return whilst$1((cb) => _test((err, truth) => cb (err, !truth)), iteratee, callback);\n    }\n\n    /**\n     * Runs the `tasks` array of functions in series, each passing their results to\n     * the next in the array. However, if any of the `tasks` pass an error to their\n     * own callback, the next function is not executed, and the main `callback` is\n     * immediately called with the error.\n     *\n     * @name waterfall\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n     * to run.\n     * Each function should complete with any number of `result` values.\n     * The `result` values will be passed as arguments, in order, to the next task.\n     * @param {Function} [callback] - An optional callback to run once all the\n     * functions have completed. This will be passed the results of the last task's\n     * callback. Invoked with (err, [results]).\n     * @returns {Promise} a promise, if a callback is omitted\n     * @example\n     *\n     * async.waterfall([\n     *     function(callback) {\n     *         callback(null, 'one', 'two');\n     *     },\n     *     function(arg1, arg2, callback) {\n     *         // arg1 now equals 'one' and arg2 now equals 'two'\n     *         callback(null, 'three');\n     *     },\n     *     function(arg1, callback) {\n     *         // arg1 now equals 'three'\n     *         callback(null, 'done');\n     *     }\n     * ], function (err, result) {\n     *     // result now equals 'done'\n     * });\n     *\n     * // Or, with named functions:\n     * async.waterfall([\n     *     myFirstFunction,\n     *     mySecondFunction,\n     *     myLastFunction,\n     * ], function (err, result) {\n     *     // result now equals 'done'\n     * });\n     * function myFirstFunction(callback) {\n     *     callback(null, 'one', 'two');\n     * }\n     * function mySecondFunction(arg1, arg2, callback) {\n     *     // arg1 now equals 'one' and arg2 now equals 'two'\n     *     callback(null, 'three');\n     * }\n     * function myLastFunction(arg1, callback) {\n     *     // arg1 now equals 'three'\n     *     callback(null, 'done');\n     * }\n     */\n    function waterfall (tasks, callback) {\n        callback = once(callback);\n        if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n        if (!tasks.length) return callback();\n        var taskIndex = 0;\n\n        function nextTask(args) {\n            var task = wrapAsync(tasks[taskIndex++]);\n            task(...args, onlyOnce(next));\n        }\n\n        function next(err, ...args) {\n            if (err === false) return\n            if (err || taskIndex === tasks.length) {\n                return callback(err, ...args);\n            }\n            nextTask(args);\n        }\n\n        nextTask([]);\n    }\n\n    var waterfall$1 = awaitify(waterfall);\n\n    /**\n     * An \"async function\" in the context of Async is an asynchronous function with\n     * a variable number of parameters, with the final parameter being a callback.\n     * (`function (arg1, arg2, ..., callback) {}`)\n     * The final callback is of the form `callback(err, results...)`, which must be\n     * called once the function is completed.  The callback should be called with a\n     * Error as its first argument to signal that an error occurred.\n     * Otherwise, if no error occurred, it should be called with `null` as the first\n     * argument, and any additional `result` arguments that may apply, to signal\n     * successful completion.\n     * The callback must be called exactly once, ideally on a later tick of the\n     * JavaScript event loop.\n     *\n     * This type of function is also referred to as a \"Node-style async function\",\n     * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n     * library are themselves CPS/Node-style async functions, or functions that\n     * return CPS/Node-style async functions.\n     *\n     * Wherever we accept a Node-style async function, we also directly accept an\n     * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n     * In this case, the `async` function will not be passed a final callback\n     * argument, and any thrown error will be used as the `err` argument of the\n     * implicit callback, and the return value will be used as the `result` value.\n     * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n     * argument, and a `resolved` value becomes the `result`.)\n     *\n     * Note, due to JavaScript limitations, we can only detect native `async`\n     * functions and not transpilied implementations.\n     * Your environment must have `async`/`await` support for this to work.\n     * (e.g. Node > v7.6, or a recent version of a modern browser).\n     * If you are using `async` functions through a transpiler (e.g. Babel), you\n     * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n     * because the `async function` will be compiled to an ordinary function that\n     * returns a promise.\n     *\n     * @typedef {Function} AsyncFunction\n     * @static\n     */\n\n    var index = {\n        apply,\n        applyEach: applyEach$1,\n        applyEachSeries,\n        asyncify,\n        auto,\n        autoInject,\n        cargo,\n        cargoQueue: cargo$1,\n        compose,\n        concat: concat$1,\n        concatLimit: concatLimit$1,\n        concatSeries: concatSeries$1,\n        constant,\n        detect: detect$1,\n        detectLimit: detectLimit$1,\n        detectSeries: detectSeries$1,\n        dir,\n        doUntil,\n        doWhilst: doWhilst$1,\n        each,\n        eachLimit: eachLimit$2,\n        eachOf: eachOf$1,\n        eachOfLimit: eachOfLimit$2,\n        eachOfSeries: eachOfSeries$1,\n        eachSeries: eachSeries$1,\n        ensureAsync,\n        every: every$1,\n        everyLimit: everyLimit$1,\n        everySeries: everySeries$1,\n        filter: filter$1,\n        filterLimit: filterLimit$1,\n        filterSeries: filterSeries$1,\n        forever: forever$1,\n        groupBy,\n        groupByLimit: groupByLimit$1,\n        groupBySeries,\n        log,\n        map: map$1,\n        mapLimit: mapLimit$1,\n        mapSeries: mapSeries$1,\n        mapValues,\n        mapValuesLimit: mapValuesLimit$1,\n        mapValuesSeries,\n        memoize,\n        nextTick,\n        parallel: parallel$1,\n        parallelLimit,\n        priorityQueue,\n        queue: queue$1,\n        race: race$1,\n        reduce: reduce$1,\n        reduceRight,\n        reflect,\n        reflectAll,\n        reject: reject$2,\n        rejectLimit: rejectLimit$1,\n        rejectSeries: rejectSeries$1,\n        retry,\n        retryable,\n        seq,\n        series,\n        setImmediate: setImmediate$1,\n        some: some$1,\n        someLimit: someLimit$1,\n        someSeries: someSeries$1,\n        sortBy: sortBy$1,\n        timeout,\n        times,\n        timesLimit,\n        timesSeries,\n        transform,\n        tryEach: tryEach$1,\n        unmemoize,\n        until,\n        waterfall: waterfall$1,\n        whilst: whilst$1,\n\n        // aliases\n        all: every$1,\n        allLimit: everyLimit$1,\n        allSeries: everySeries$1,\n        any: some$1,\n        anyLimit: someLimit$1,\n        anySeries: someSeries$1,\n        find: detect$1,\n        findLimit: detectLimit$1,\n        findSeries: detectSeries$1,\n        flatMap: concat$1,\n        flatMapLimit: concatLimit$1,\n        flatMapSeries: concatSeries$1,\n        forEach: each,\n        forEachSeries: eachSeries$1,\n        forEachLimit: eachLimit$2,\n        forEachOf: eachOf$1,\n        forEachOfSeries: eachOfSeries$1,\n        forEachOfLimit: eachOfLimit$2,\n        inject: reduce$1,\n        foldl: reduce$1,\n        foldr: reduceRight,\n        select: filter$1,\n        selectLimit: filterLimit$1,\n        selectSeries: filterSeries$1,\n        wrapSync: asyncify,\n        during: whilst$1,\n        doDuring: doWhilst$1\n    };\n\n    exports.default = index;\n    exports.apply = apply;\n    exports.applyEach = applyEach$1;\n    exports.applyEachSeries = applyEachSeries;\n    exports.asyncify = asyncify;\n    exports.auto = auto;\n    exports.autoInject = autoInject;\n    exports.cargo = cargo;\n    exports.cargoQueue = cargo$1;\n    exports.compose = compose;\n    exports.concat = concat$1;\n    exports.concatLimit = concatLimit$1;\n    exports.concatSeries = concatSeries$1;\n    exports.constant = constant;\n    exports.detect = detect$1;\n    exports.detectLimit = detectLimit$1;\n    exports.detectSeries = detectSeries$1;\n    exports.dir = dir;\n    exports.doUntil = doUntil;\n    exports.doWhilst = doWhilst$1;\n    exports.each = each;\n    exports.eachLimit = eachLimit$2;\n    exports.eachOf = eachOf$1;\n    exports.eachOfLimit = eachOfLimit$2;\n    exports.eachOfSeries = eachOfSeries$1;\n    exports.eachSeries = eachSeries$1;\n    exports.ensureAsync = ensureAsync;\n    exports.every = every$1;\n    exports.everyLimit = everyLimit$1;\n    exports.everySeries = everySeries$1;\n    exports.filter = filter$1;\n    exports.filterLimit = filterLimit$1;\n    exports.filterSeries = filterSeries$1;\n    exports.forever = forever$1;\n    exports.groupBy = groupBy;\n    exports.groupByLimit = groupByLimit$1;\n    exports.groupBySeries = groupBySeries;\n    exports.log = log;\n    exports.map = map$1;\n    exports.mapLimit = mapLimit$1;\n    exports.mapSeries = mapSeries$1;\n    exports.mapValues = mapValues;\n    exports.mapValuesLimit = mapValuesLimit$1;\n    exports.mapValuesSeries = mapValuesSeries;\n    exports.memoize = memoize;\n    exports.nextTick = nextTick;\n    exports.parallel = parallel$1;\n    exports.parallelLimit = parallelLimit;\n    exports.priorityQueue = priorityQueue;\n    exports.queue = queue$1;\n    exports.race = race$1;\n    exports.reduce = reduce$1;\n    exports.reduceRight = reduceRight;\n    exports.reflect = reflect;\n    exports.reflectAll = reflectAll;\n    exports.reject = reject$2;\n    exports.rejectLimit = rejectLimit$1;\n    exports.rejectSeries = rejectSeries$1;\n    exports.retry = retry;\n    exports.retryable = retryable;\n    exports.seq = seq;\n    exports.series = series;\n    exports.setImmediate = setImmediate$1;\n    exports.some = some$1;\n    exports.someLimit = someLimit$1;\n    exports.someSeries = someSeries$1;\n    exports.sortBy = sortBy$1;\n    exports.timeout = timeout;\n    exports.times = times;\n    exports.timesLimit = timesLimit;\n    exports.timesSeries = timesSeries;\n    exports.transform = transform;\n    exports.tryEach = tryEach$1;\n    exports.unmemoize = unmemoize;\n    exports.until = until;\n    exports.waterfall = waterfall$1;\n    exports.whilst = whilst$1;\n    exports.all = every$1;\n    exports.allLimit = everyLimit$1;\n    exports.allSeries = everySeries$1;\n    exports.any = some$1;\n    exports.anyLimit = someLimit$1;\n    exports.anySeries = someSeries$1;\n    exports.find = detect$1;\n    exports.findLimit = detectLimit$1;\n    exports.findSeries = detectSeries$1;\n    exports.flatMap = concat$1;\n    exports.flatMapLimit = concatLimit$1;\n    exports.flatMapSeries = concatSeries$1;\n    exports.forEach = each;\n    exports.forEachSeries = eachSeries$1;\n    exports.forEachLimit = eachLimit$2;\n    exports.forEachOf = eachOf$1;\n    exports.forEachOfSeries = eachOfSeries$1;\n    exports.forEachOfLimit = eachOfLimit$2;\n    exports.inject = reduce$1;\n    exports.foldl = reduce$1;\n    exports.foldr = reduceRight;\n    exports.select = filter$1;\n    exports.selectLimit = filterLimit$1;\n    exports.selectSeries = filterSeries$1;\n    exports.wrapSync = asyncify;\n    exports.during = whilst$1;\n    exports.doDuring = doWhilst$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"],"mappings":"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AG,EAAEF,KAAK,EAAE;MAClC,IAAIE,GAAG,KAAK,KAAK,EAAE;QACf+D,QAAQ,GAAG,IAAI;MACnB;MACA,IAAIA,QAAQ,KAAK,IAAI,EAAE;MACvB,IAAI/D,GAAG,EAAE;QACL1B,QAAQ,CAAC0B,GAAG,CAAC;MACjB,CAAC,MAAM,IAAK,EAAEgF,SAAS,KAAKlE,MAAM,IAAKhB,KAAK,KAAKwC,SAAS,EAAE;QACxDhE,QAAQ,CAAC,IAAI,CAAC;MAClB;IACJ;IAEA,OAAO6D,KAAK,GAAGrB,MAAM,EAAEqB,KAAK,EAAE,EAAE;MAC5BN,QAAQ,CAACgB,IAAI,CAACV,KAAK,CAAC,EAAEA,KAAK,EAAEwB,QAAQ,CAACsB,gBAAgB,CAAC,CAAC;IAC5D;EACJ;;EAEA;EACA,SAASC,aAAaA,CAAErC,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,EAAE;IAC9C,OAAOwG,aAAa,CAACjC,IAAI,EAAEsC,QAAQ,EAAEtD,QAAQ,EAAEvD,QAAQ,CAAC;EAC5D;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAAS8G,MAAMA,CAACvC,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,EAAE;IACtC,IAAI+G,oBAAoB,GAAGhD,WAAW,CAACQ,IAAI,CAAC,GAAGkC,eAAe,GAAGG,aAAa;IAC9E,OAAOG,oBAAoB,CAACxC,IAAI,EAAEnC,SAAS,CAACmB,QAAQ,CAAC,EAAEvD,QAAQ,CAAC;EACpE;EAEA,IAAIgH,QAAQ,GAAG1E,QAAQ,CAACwE,MAAM,EAAE,CAAC,CAAC;;EAElC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASG,GAAGA,CAAE1C,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,EAAE;IACpC,OAAOqD,SAAS,CAAC2D,QAAQ,EAAEzC,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,CAAC;EACxD;EACA,IAAIkH,KAAK,GAAG5E,QAAQ,CAAC2E,GAAG,EAAE,CAAC,CAAC;;EAE5B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIE,WAAW,GAAGrE,SAAS,CAACoE,KAAK,CAAC;;EAElC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASE,YAAYA,CAAC7C,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,EAAE;IAC5C,OAAOwG,aAAa,CAACjC,IAAI,EAAE,CAAC,EAAEhB,QAAQ,EAAEvD,QAAQ,CAAC;EACrD;EACA,IAAIqH,cAAc,GAAG/E,QAAQ,CAAC8E,YAAY,EAAE,CAAC,CAAC;;EAE9C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASE,SAASA,CAAE/C,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,EAAE;IAC1C,OAAOqD,SAAS,CAACgE,cAAc,EAAE9C,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,CAAC;EAC9D;EACA,IAAIuH,WAAW,GAAGjF,QAAQ,CAACgF,SAAS,EAAE,CAAC,CAAC;;EAExC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIE,eAAe,GAAG1E,SAAS,CAACyE,WAAW,CAAC;EAE5C,MAAME,cAAc,GAAG3F,MAAM,CAAC,iBAAiB,CAAC;EAEhD,SAAS4F,eAAeA,CAAA,EAAI;IACxB,IAAI/E,OAAO,EAAEC,MAAM;IACnB,SAAS5C,QAAQA,CAAE0B,GAAG,EAAE,GAAG7B,IAAI,EAAE;MAC7B,IAAI6B,GAAG,EAAE,OAAOkB,MAAM,CAAClB,GAAG,CAAC;MAC3BiB,OAAO,CAAC9C,IAAI,CAAC2C,MAAM,GAAG,CAAC,GAAG3C,IAAI,GAAGA,IAAI,CAAC,CAAC,CAAC,CAAC;IAC7C;IAEAG,QAAQ,CAACyH,cAAc,CAAC,GAAG,IAAI/E,OAAO,CAAC,CAACiF,GAAG,EAAEC,GAAG,KAAK;MACjDjF,OAAO,GAAGgF,GAAG,EACb/E,MAAM,GAAGgF,GAAG;IAChB,CAAC,CAAC;IAEF,OAAO5H,QAAQ;EACnB;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAAS6H,IAAIA,CAACC,KAAK,EAAEC,WAAW,EAAE/H,QAAQ,EAAE;IACxC,IAAI,OAAO+H,WAAW,KAAK,QAAQ,EAAE;MACjC;MACA/H,QAAQ,GAAG+H,WAAW;MACtBA,WAAW,GAAG,IAAI;IACtB;IACA/H,QAAQ,GAAGiE,IAAI,CAACjE,QAAQ,IAAI0H,eAAe,CAAC,CAAC,CAAC;IAC9C,IAAIM,QAAQ,GAAG5D,MAAM,CAACe,IAAI,CAAC2C,KAAK,CAAC,CAACtF,MAAM;IACxC,IAAI,CAACwF,QAAQ,EAAE;MACX,OAAOhI,QAAQ,CAAC,IAAI,CAAC;IACzB;IACA,IAAI,CAAC+H,WAAW,EAAE;MACdA,WAAW,GAAGC,QAAQ;IAC1B;IAEA,IAAIxE,OAAO,GAAG,CAAC,CAAC;IAChB,IAAIyE,YAAY,GAAG,CAAC;IACpB,IAAIxC,QAAQ,GAAG,KAA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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAAS4C,OAAOA,CAAC7C,MAAM,EAAEpF,WAAW,EAAEqF,OAAO,EAAE;IAC3C,OAAOF,KAAK,CAACC,MAAM,EAAEpF,WAAW,EAAEqF,OAAO,CAAC;EAC9C;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAAS6C,MAAMA,CAAC1L,IAAI,EAAE2L,IAAI,EAAE3M,QAAQ,EAAEvD,QAAQ,EAAE;IAC5CA,QAAQ,GAAGiE,IAAI,CAACjE,QAAQ,CAAC;IACzB,IAAI0D,SAAS,GAAGtB,SAAS,CAACmB,QAAQ,CAAC;IACnC,OAAO8D,cAAc,CAAC9C,IAAI,EAAE,CAAC4L,CAAC,EAAEzL,CAAC,EAAEd,MAAM,KAAK;MAC1CF,SAAS,CAACwM,IAAI,EAAEC,CAAC,EAAE,CAACzO,GAAG,EAAEoC,CAAC,KAAK;QAC3BoM,IAAI,GAAGpM,CAAC;QACRF,MAAM,CAAClC,GAAG,CAAC;MACf,CAAC,CAAC;IACN,CAAC,EAAEA,GAAG,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C;MACJ;MAEA,OAAO1E,QAAQ,CAAC0B,GAAG,EAAEL,MAAM,CAAC;IAChC,CAAC,CAAC;EACN;EACA,IAAI4P,aAAa,GAAG3O,QAAQ,CAACwO,WAAW,EAAE,CAAC,CAAC;;EAE5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAAS1N,MAAMA,CAACmB,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,EAAE;IACtC,OAAOiR,aAAa,CAAC1M,IAAI,EAAEsC,QAAQ,EAAEtD,QAAQ,EAAEvD,QAAQ,CAAC;EAC5D;EACA,IAAIkR,QAAQ,GAAG5O,QAAQ,CAACc,MAAM,EAAE,CAAC,CAAC;;EAElC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAAS+N,YAAYA,CAAC5M,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,EAAE;IAC5C,OAAOiR,aAAa,CAAC1M,IAAI,EAAE,CAAC,EAAEhB,QAAQ,EAAEvD,QAAQ,CAAC;EACrD;EACA,IAAIoR,cAAc,GAAG9O,QAAQ,CAAC6O,YAAY,EAAE,CAAC,CAAC;;EAE9C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASE,WAAWA,CAACzT,EAAE,EAAE;IACrB,IAAIsB,OAAO,CAACtB,EAAE,CAAC,EAAE,OAAOA,EAAE;IAC1B,OAAO,UAAU,GAAGC,IAAI,iBAAgB;MACpC,IAAIG,QAAQ,GAAGH,IAAI,CAACI,GAAG,CAAC,CAAC;MACzB,IAAIqT,IAAI,GAAG,IAAI;MACfzT,IAAI,CAACgJ,IAAI,CAAC,CAAC,GAAG0K,SAAS,KAAK;QACxB,IAAID,IAAI,EAAE;UACNvS,cAAc,CAAC,MAAMf,QAAQ,CAAC,GAAGuT,SAAS,CAAC,CAAC;QAChD,CAAC,MAAM;UACHvT,QAAQ,CAAC,GAAGuT,SAAS,CAAC;QAC1B;MACJ,CAAC,CAAC;MACF3T,EAAE,CAACD,KAAK,CAAC,IAAI,EAAEE,IAAI,CAAC;MACpByT,IAAI,GAAG,KAAK;IAChB,CAAC;EACL;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASE,KAAKA,CAACjP,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,EAAE;IACrC,OAAOuR,aAAa,CAACM,IAAI,IAAI,CAACA,IAAI,EAAElK,GAAG,IAAI,CAACA,GAAG,CAAC,CAACX,QAAQ,EAAEzC,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,CAAC;EACxF;EACA,IAAIyT,OAAO,GAAGnR,QAAQ,CAACkR,KAAK,EAAE,CAAC,CAAC;;EAEhC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASE,UAAUA,CAACnP,IAAI,EAAEiB,KAAK,EAAEjC,QAAQ,EAAEvD,QAAQ,EAAE;IACjD,OAAOuR,aAAa,CAACM,IAAI,IAAI,CAACA,IAAI,EAAElK,GAAG,IAAI,CAACA,GAAG,CAAC,CAACzB,WAAW,CAACV,KAAK,CAAC,EAAEjB,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,CAAC;EAClG;EACA,IAAI2T,YAAY,GAAGrR,QAAQ,CAACoR,UAAU,EAAE,CAAC,CAAC;;EAE1C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASE,WAAWA,CAACrP,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,EAAE;IAC3C,OAAOuR,aAAa,CAACM,IAAI,IAAI,CAACA,IAAI,EAAElK,GAAG,IAAI,CAACA,GAAG,CAAC,CAACN,cAAc,EAAE9C,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,CAAC;EAC9F;EACA,IAAI6T,aAAa,GAAGvR,QAAQ,CAACsR,WAAW,EAAE,CAAC,CAAC;EAE5C,SAASE,WAAWA,CAAC/Q,MAAM,EAAEO,GAAG,EAAEC,QAAQ,EAAEvD,QAAQ,EAAE;IAClD,IAAI+T,WAAW,GAAG,IAAIrL,KAAK,CAACpF,GAAG,CAACd,MAAM,CAAC;IACvCO,MAAM,CAACO,GAAG,EAAE,CAAC6M,CAAC,EAAEtM,KAAK,EAAED,MAAM,KAAK;MAC9BL,QAAQ,CAAC4M,CAAC,EAAE,CAACzO,GAAG,EAAEoC,CAAC,KAAK;QACpBiQ,WAAW,CAAClQ,KAAK,CAAC,GAAG,CAAC,CAACC,CAAC;QACxBF,MAAM,CAAClC,GAAG,CAAC;MACf,CAAC,CAAC;IACN,CAAC,EAAEA,GAAG,IAAI;MACN,IAAIA,GAAG,EAAE,OAAO1B,QAAQ,CAAC0B,GAAG,CAAC;MAC7B,IAAI8B,OAAO,GAAG,EAAE;MAChB,KAAK,IAAIkB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpB,GAAG,CAACd,MAAM,EAAEkC,CAAC,EAAE,EAAE;QACjC,IAAIqP,WAAW,CAACrP,CAAC,CAAC,EAAElB,OAAO,CAACqF,IAAI,CAACvF,GAAG,CAACoB,CAAC,CAAC,CAAC;MAC5C;MACA1E,QAAQ,CAAC,IAAI,EAAEwD,OAAO,CAAC;IAC3B,CAAC,CAAC;EACN;EAEA,SAASwQ,aAAaA,CAACjR,MAAM,EAAEwB,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,EAAE;IACrD,IAAIwD,OAAO,GAAG,EAAE;IAChBT,MAAM,CAACwB,IAAI,EAAE,CAAC4L,CAAC,EAAEtM,KAAK,EAAED,MAAM,KAAK;MAC/BL,QAAQ,CAAC4M,CAAC,EAAE,CAACzO,GAAG,EAAEoC,CAAC,KAAK;QACpB,IAAIpC,GAAG,EAAE,OAAOkC,MAAM,CAAClC,GAAG,CAAC;QAC3B,IAAIoC,CAAC,EAAE;UACHN,OAAO,CAACqF,IAAI,CAAC;YAAChF,KAAK;YAAErC,KAAK,EAAE2O;UAAC,CAAC,CAAC;QACnC;QACAvM,MAAM,CAAClC,GAAG,CAAC;MACf,CAAC,CAAC;IACN,CAAC,EAAEA,GAAG,IAAI;MACN,IAAIA,GAAG,EAAE,OAAO1B,QAAQ,CAAC0B,GAAG,CAAC;MAC7B1B,QAAQ,CAAC,IAAI,EAAEwD,OAAO,CACjByQ,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACrQ,KAAK,GAAGsQ,CAAC,CAACtQ,KAAK,CAAC,CACjCoD,GAAG,CAACnD,CAAC,IAAIA,CAAC,CAACtC,KAAK,CAAC,CAAC;IAC3B,CAAC,CAAC;EACN;EAEA,SAAS4S,OAAOA,CAACrR,MAAM,EAAEwB,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,EAAE;IAC/C,IAAIkO,MAAM,GAAGnK,WAAW,CAACQ,IAAI,CAAC,GAAGuP,WAAW,GAAGE,aAAa;IAC5D,OAAO9F,MAAM,CAACnL,MAAM,EAAEwB,IAAI,EAAEnC,SAAS,CAACmB,QAAQ,CAAC,EAAEvD,QAAQ,CAAC;EAC9D;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASkO,MAAMA,CAAE3J,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,EAAE;IACvC,OAAOoU,OAAO,CAACpN,QAAQ,EAAEzC,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,CAAC;EACtD;EACA,IAAIqU,QAAQ,GAAG/R,QAAQ,CAAC4L,MAAM,EAAE,CAAC,CAAC;;EAElC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASoG,WAAWA,CAAE/P,IAAI,EAAEiB,KAAK,EAAEjC,QAAQ,EAAEvD,QAAQ,EAAE;IACnD,OAAOoU,OAAO,CAAClO,WAAW,CAACV,KAAK,CAAC,EAAEjB,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,CAAC;EAChE;EACA,IAAIuU,aAAa,GAAGjS,QAAQ,CAACgS,WAAW,EAAE,CAAC,CAAC;;EAE5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASE,YAAYA,CAAEjQ,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,EAAE;IAC7C,OAAOoU,OAAO,CAAC/M,cAAc,EAAE9C,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,CAAC;EAC5D;EACA,IAAIyU,cAAc,GAAGnS,QAAQ,CAACkS,YAAY,EAAE,CAAC,CAAC;;EAE9C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEI,SAASE,OAAOA,CAAC9U,EAAE,EAAE+U,OAAO,EAAE;IAC1B,IAAI3P,IAAI,GAAGK,QAAQ,CAACsP,OAAO,CAAC;IAC5B,IAAIlM,IAAI,GAAGrG,SAAS,CAACiR,WAAW,CAACzT,EAAE,CAAC,CAAC;IAErC,SAASgF,IAAIA,CAAClD,GAAG,EAAE;MACf,IAAIA,GAAG,EAAE,OAAOsD,IAAI,CAACtD,GAAG,CAAC;MACzB,IAAIA,GAAG,KAAK,KAAK,EAAE;MACnB+G,IAAI,CAAC7D,IAAI,CAAC;IACd;IACA,OAAOA,IAAI,CAAC,CAAC;EACjB;EACA,IAAIgQ,SAAS,GAAGtS,QAAQ,CAACoS,OAAO,EAAE,CAAC,CAAC;;EAEpC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASG,YAAYA,CAACtQ,IAAI,EAAEiB,KAAK,EAAEjC,QAAQ,EAAEvD,QAAQ,EAAE;IACnD,IAAI0D,SAAS,GAAGtB,SAAS,CAACmB,QAAQ,CAAC;IACnC,OAAOsN,UAAU,CAACtM,IAAI,EAAEiB,KAAK,EAAE,CAACuL,GAAG,EAAEnN,MAAM,KAAK;MAC5CF,SAAS,CAACqN,GAAG,EAAE,CAACrP,GAAG,EAAEmD,GAAG,KAAK;QACzB,IAAInD,GAAG,EAAE,OAAOkC,MAAM,CAAClC,GAAG,CAAC;QAC3B,OAAOkC,MAAM,CAAClC,GAAG,EAAE;UAACmD,GAAG;UAAEkM;QAAG,CAAC,CAAC;MAClC,CAAC,CAAC;IACN,CAAC,EAAE,CAACrP,GAAG,EAAEsP,UAAU,KAAK;MACpB,IAAI3P,MAAM,GAAG,CAAC,CAAC;MACf;MACA,IAAI;QAACyT;MAAc,CAAC,GAAG1Q,MAAM,CAAC2Q,SAAS;MAEvC,KAAK,IAAIrQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsM,UAAU,CAACxO,MAAM,EAAEkC,CAAC,EAAE,EAAE;QACxC,IAAIsM,UAAU,CAACtM,CAAC,CAAC,EAAE;UACf,IAAI;YAACG;UAAG,CAAC,GAAGmM,UAAU,CAACtM,CAAC,CAAC;UACzB,IAAI;YAACqM;UAAG,CAAC,GAAGC,UAAU,CAACtM,CAAC,CAAC;UAEzB,IAAIoQ,cAAc,CAAC5U,IAAI,CAACmB,MAAM,EAAEwD,GAAG,CAAC,EAAE;YAClCxD,MAAM,CAACwD,GAAG,CAAC,CAACgE,IAAI,CAACkI,GAAG,CAAC;UACzB,CAAC,MAAM;YACH1P,MAAM,CAACwD,GAAG,CAAC,GAAG,CAACkM,GAAG,CAAC;UACvB;QACJ;MACJ;MAEA,OAAO/Q,QAAQ,CAAC0B,GAAG,EAAEL,MAAM,CAAC;IAChC,CAAC,CAAC;EACN;EAEA,IAAI2T,cAAc,GAAG1S,QAAQ,CAACuS,YAAY,EAAE,CAAC,CAAC;;EAE9C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASI,OAAOA,CAAE1Q,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,EAAE;IACxC,OAAOgV,cAAc,CAACzQ,IAAI,EAAEsC,QAAQ,EAAEtD,QAAQ,EAAEvD,QAAQ,CAAC;EAC7D;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASkV,aAAaA,CAAE3Q,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,EAAE;IAC9C,OAAOgV,cAAc,CAACzQ,IAAI,EAAE,CAAC,EAAEhB,QAAQ,EAAEvD,QAAQ,CAAC;EACtD;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAImV,GAAG,GAAGhD,WAAW,CAAC,KAAK,CAAC;;EAE5B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASiD,cAAcA,CAAClT,GAAG,EAAEsD,KAAK,EAAEjC,QAAQ,EAAEvD,QAAQ,EAAE;IACpDA,QAAQ,GAAGiE,IAAI,CAACjE,QAAQ,CAAC;IACzB,IAAIqV,MAAM,GAAG,CAAC,CAAC;IACf,IAAI3R,SAAS,GAAGtB,SAAS,CAACmB,QAAQ,CAAC;IACnC,OAAO2C,WAAW,CAACV,KAAK,CAAC,CAACtD,GAAG,EAAE,CAAC6O,GAAG,EAAElM,GAAG,EAAED,IAAI,KAAK;MAC/ClB,SAAS,CAACqN,GAAG,EAAElM,GAAG,EAAE,CAACnD,GAAG,EAAEL,MAAM,KAAK;QACjC,IAAIK,GAAG,EAAE,OAAOkD,IAAI,CAAClD,GAAG,CAAC;QACzB2T,MAAM,CAACxQ,GAAG,CAAC,GAAGxD,MAAM;QACpBuD,IAAI,CAAClD,GAAG,CAAC;MACb,CAAC,CAAC;IACN,CAAC,EAAEA,GAAG,IAAI1B,QAAQ,CAAC0B,GAAG,EAAE2T,MAAM,CAAC,CAAC;EACpC;EAEA,IAAIC,gBAAgB,GAAGhT,QAAQ,CAAC8S,cAAc,EAAE,CAAC,CAAC;;EAElrT,GAAG,EAAEqB,QAAQ,EAAEvD,QAAQ,EAAE;IACxC,OAAOsV,gBAAgB,CAACpT,GAAG,EAAE2E,QAAQ,EAAEtD,QAAQ,EAAEvD,QAAQ,CAAC;EAC9D;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASwV,eAAeA,CAACtT,GAAG,EAAEqB,QAAQ,EAAEvD,QAAQ,EAAE;IAC9C,OAAOsV,gBAAgB,CAACpT,GAAG,EAAE,CAAC,EAAEqB,QAAQ,EAAEvD,QAAQ,CAAC;EACvD;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASyV,OAAOA,CAAC7V,EAAE,EAAE8V,MAAM,GAAG5R,CAAC,IAAIA,CAAC,EAAE;IAClC,IAAIoM,IAAI,GAAG9L,MAAM,CAACgE,MAAM,CAAC,IAAI,CAAC;IAC9B,IAAIuN,MAAM,GAAGvR,MAAM,CAACgE,MAAM,CAAC,IAAI,CAAC;IAChC,IAAIqK,GAAG,GAAGrQ,SAAS,CAACxC,EAAE,CAAC;IACvB,IAAIgW,QAAQ,GAAG7V,aAAa,CAAC,CAACF,IAAI,EAAEG,QAAQ,KAAK;MAC7C,IAAI6E,GAAG,GAAG6Q,MAAM,CAAC,GAAG7V,IAAI,CAAC;MACzB,IAAIgF,GAAG,IAAIqL,IAAI,EAAE;QACbnP,cAAc,CAAC,MAAMf,QAAQ,CAAC,IAAI,EAAE,GAAGkQ,IAAI,CAACrL,GAAG,CAAC,CAAC,CAAC;MACtD,CAAC,MAAM,IAAIA,GAAG,IAAI8Q,MAAM,EAAE;QACtBA,MAAM,CAAC9Q,GAAG,CAAC,CAACgE,IAAI,CAAC7I,QAAQ,CAAC;MAC9B,CAAC,MAAM;QACH2V,MAAM,CAAC9Q,GAAG,CAAC,GAAG,CAAC7E,QAAQ,CAAC;QACxByS,GAAG,CAAC,GAAG5S,IAAI,EAAE,CAAC6B,GAAG,EAAE,GAAG0Q,UAAU,KAAK;UACjC;UACA,IAAI,CAAC1Q,GAAG,EAAE;YACNwO,IAAI,CAACrL,GAAG,CAAC,GAAGuN,UAAU;UAC1B;UACA,IAAI5D,CAAC,GAAGmH,MAAM,CAAC9Q,GAAG,CAAC;UACnB,OAAO8Q,MAAM,CAAC9Q,GAAG,CAAC;UAClB,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEmK,CAAC,GAAGL,CAAC,CAAChM,MAAM,EAAEkC,CAAC,GAAGmK,CAAC,EAAEnK,CAAC,EAAE,EAAE;YACtC8J,CAAC,CAAC9J,CAAC,CAAC,CAAChD,GAAG,EAAE,GAAG0Q,UAAU,CAAC;UAC5B;QACJ,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;IACFwD,QAAQ,CAAC1F,IAAI,GAAGA,IAAI;IACpB0F,QAAQ,CAACC,UAAU,GAAGjW,EAAE;IACxB,OAAOgW,QAAQ;EACnB;;EAEA;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIE,QAAQ;EAEZ,IAAIvV,WAAW,EAAE;IACbuV,QAAQ,GAAGtV,OAAO,CAACC,QAAQ;EAC/B,CAAC,MAAM,IAAIJ,eAAe,EAAE;IACxByV,QAAQ,GAAGxV,YAAY;EAC3B,CAAC,MAAM;IACHwV,QAAQ,GAAGpV,QAAQ;EACvB;EAEA,IAAID,QAAQ,GAAGG,IAAI,CAACkV,QAAQ,CAAC;EAE7B,IAAIC,QAAQ,GAAGzT,QAAQ,CAAC,CAACS,MAAM,EAAE+E,KAAK,EAAE9H,QAAQ,KAAK;IACjD,IAAIwD,OAAO,GAAGO,WAAW,CAAC+D,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAE1C/E,MAAM,CAAC+E,KAAK,EAAE,CAACW,IAAI,EAAE5D,GAAG,EAAE8G,MAAM,KAAK;MACjCvJ,SAAS,CAACqG,IAAI,CAAC,CAAC,CAAC/G,GAAG,EAAE,GAAGL,MAAM,KAAK;QAChC,IAAIA,MAAM,CAACmB,MAAM,GAAG,CAAC,EAAE;UACnB,CAACnB,MAAM,CAAC,GAAGA,MAAM;QACrB;QACAmC,OAAO,CAACqB,GAAG,CAAC,GAAGxD,MAAM;QACrBsK,MAAM,CAACjK,GAAG,CAAC;MACf,CAAC,CAAC;IACN,CAAC,EAAEA,GAAG,IAAI1B,QAAQ,CAAC0B,GAAG,EAAE8B,OAAO,CAAC,CAAC;EACrC,CAAC,EAAE,CAAC,CAAC;;EAEL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASwS,UAAUA,CAAClO,KAAK,EAAE9H,QAAQ,EAAE;IACjC,OAAO+V,QAAQ,CAAC/O,QAAQ,EAAEc,KAAK,EAAE9H,QAAQ,CAAC;EAC9C;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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CAACsD,WAAW,CAACV,KAAK,CAAC,EAAEjB,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,CAAC;EAC/D;EACA,IAAIoY,aAAa,GAAG9V,QAAQ,CAAC6V,WAAW,EAAE,CAAC,CAAC;;EAE5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASE,YAAYA,CAAE9T,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,EAAE;IAC7C,OAAO4C,MAAM,CAACyE,cAAc,EAAE9C,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,CAAC;EAC3D;EACA,IAAIsY,cAAc,GAAGhW,QAAQ,CAAC+V,YAAY,EAAE,CAAC,CAAC;EAE9C,SAASE,UAAUA,CAAC/W,KAAK,EAAE;IACvB,OAAO,YAAY;MACf,OAAOA,KAAK;IAChB,CAAC;EACL;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMgX,aAAa,GAAG,CAAC;EACvB,MAAMC,gBAAgB,GAAG,CAAC;EAE1B,SAASC,KAAKA,CAACC,IAAI,EAAElQ,IAAI,EAAEzI,QAAQ,EAAE;IACjC,IAAI4Y,OAAO,GAAG;MACVC,KAAK,EAAEL,aAAa;MACpBM,YAAY,EAAEP,UAAU,CAACE,gBAAgB;IAC7C,CAAC;IAED,IAAIM,SAAS,CAACvW,MAAM,GAAG,CAAC,IAAI,OAAOmW,IAAI,KAAK,UAAU,EAAE;M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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAAS+R,MAAMA,CAAC1R,KAAK,EAAE9H,QAAQ,EAAE;IAC7B,OAAO+V,QAAQ,CAAC1O,cAAc,EAAES,KAAK,EAAE9H,QAAQ,CAAC;EACpD;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASyZ,IAAIA,CAAClV,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,EAAE;IACpC,OAAOuR,aAAa,CAACmI,OAAO,EAAE/R,GAAG,IAAIA,GAAG,CAAC,CAACX,QAAQ,EAAEzC,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,CAAC;EACjF;EACA,IAAI2Z,MAAM,GAAGrX,QAAQ,CAACmX,IAAI,EAAE,CAAC,CAAC;;EAE9B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASG,SAASA,CAACrV,IAAI,EAAEiB,KAAK,EAAEjC,QAAQ,EAAEvD,QAAQ,EAAE;IAChD,OAAOuR,aAAa,CAACmI,OAAO,EAAE/R,GAAG,IAAIA,GAAG,CAAC,CAACzB,WAAW,CAACV,KAAK,CAAC,EAAEjB,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,CAAC;EAC3F;EACA,IAAI6Z,WAAW,GAAGvX,QAAQ,CAACsX,SAAS,EAAE,CAAC,CAAC;;EAExC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASE,UAAUA,CAACvV,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,EAAE;IAC1C,OAAOuR,aAAa,CAACmI,OAAO,EAAE/R,GAAG,IAAIA,GAAG,CAAC,CAACN,cAAc,EAAE9C,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,CAAC;EACvF;EACA,IAAI+Z,YAAY,GAAGzX,QAAQ,CAACwX,UAAU,EAAE,CAAC,CAAC;;EAE1C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASE,MAAMA,CAAEzV,IAAI,EAAEhB,QAAQ,EAAEvD,QAAQ,EAAE;IACvC,IAAI0D,SAAS,GAAGtB,SAAS,CAACmB,QAAQ,CAAC;IACnC,OAAO2D,KAAK,CAAC3C,IAAI,EAAE,CAAC4L,CAAC,EAAEvM,MAAM,KAAK;MAC9BF,SAAS,CAACyM,CAAC,EAAE,CAACzO,GAAG,EAAEuY,QAAQ,KAAK;QAC5B,IAAIvY,GAAG,EAAE,OAAOkC,MAAM,CAAClC,GAAG,CAAC;QAC3BkC,MAAM,CAAClC,GAAG,EAAE;UAACF,KAAK,EAAE2O,CAAC;UAAE8J;QAAQ,CAAC,CAAC;MACrC,CAAC,CAAC;IACN,CAAC,EAAE,CAACvY,GAAG,EAAE8B,OAAO,KAAK;MACjB,IAAI9B,GAAG,EAAE,OAAO1B,QAAQ,CAAC0B,GAAG,CAAC;MAC7B1B,QAAQ,CAAC,IAAI,EAAEwD,OAAO,CAACyQ,IAAI,CAACiG,UAAU,CAAC,CAACjT,GAAG,CAACnD,CAAC,IAAIA,CAAC,CAACtC,KAAK,CAAC,CAAC;IAC9D,CAAC,CAAC;IAEF,SAAS0Y,UAAU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"}},"mtime":1674865257031},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\nconf@0.12.0\\\\node_modules\\\\nconf\\\\lib\\\\nconf\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\nconf@0.12.0\\\\node_modules\\\\nconf\\\\lib\\\\nconf\\\\formats.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.22.6:development":{"value":{"code":"\"use strict\";\n\n/*\n * formats.js: Default formats supported by nconf\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar ini = require('ini');\nvar formats = exports;\n\n//\n// ### @json\n// Standard JSON format which pretty prints `.stringify()`.\n//\nformats.json = {\n  stringify: function (obj, replacer, spacing) {\n    return JSON.stringify(obj, replacer || null, spacing || 2);\n  },\n  parse: JSON.parse\n};\n\n//\n// ### @ini\n// Standard INI format supplied from the `ini` module\n// http://en.wikipedia.org/wiki/INI_file\n//\nformats.ini = ini;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbmkiLCJyZXF1aXJlIiwiZm9ybWF0cyIsImV4cG9ydHMiLCJqc29uIiwic3RyaW5naWZ5Iiwib2JqIiwicmVwbGFjZXIiLCJzcGFjaW5nIiwiSlNPTiIsInBhcnNlIl0sInNvdXJjZVJvb3QiOiJDOlxcY29kZVxcRmx1aWRGcmFtZXdvcms1XFxub2RlX21vZHVsZXNcXC5wbnBtXFxuY29uZkAwLjEyLjBcXG5vZGVfbW9kdWxlc1xcbmNvbmZcXGxpYlxcbmNvbmZcXCIsInNvdXJjZXMiOlsiZm9ybWF0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogZm9ybWF0cy5qczogRGVmYXVsdCBmb3JtYXRzIHN1cHBvcnRlZCBieSBuY29uZlxuICpcbiAqIChDKSAyMDExLCBDaGFybGllIFJvYmJpbnMgYW5kIHRoZSBDb250cmlidXRvcnMuXG4gKlxuICovXG5cbnZhciBpbmkgPSByZXF1aXJlKCdpbmknKTtcblxudmFyIGZvcm1hdHMgPSBleHBvcnRzO1xuXG4vL1xuLy8gIyMjIEBqc29uXG4vLyBTdGFuZGFyZCBKU09OIGZvcm1hdCB3aGljaCBwcmV0dHkgcHJpbnRzIGAuc3RyaW5naWZ5KClgLlxuLy9cbmZvcm1hdHMuanNvbiA9IHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiAob2JqLCByZXBsYWNlciwgc3BhY2luZykge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmosIHJlcGxhY2VyIHx8IG51bGwsIHNwYWNpbmcgfHwgMilcbiAgfSxcbiAgcGFyc2U6IEpTT04ucGFyc2Vcbn07XG5cbi8vXG4vLyAjIyMgQGluaVxuLy8gU3RhbmRhcmQgSU5JIGZvcm1hdCBzdXBwbGllZCBmcm9tIHRoZSBgaW5pYCBtb2R1bGVcbi8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSU5JX2ZpbGVcbi8vXG5mb3JtYXRzLmluaSA9IGluaTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSUEsR0FBRyxHQUFHQyxPQUFPLENBQUMsS0FBSyxDQUFDO0FBRXhCLElBQUlDLE9BQU8sR0FBR0MsT0FBTzs7QUFFckI7QUFDQTtBQUNBO0FBQ0E7QUFDQUQsT0FBTyxDQUFDRSxJQUFJLEdBQUc7RUFDYkMsU0FBUyxFQUFFLFNBQUFBLENBQVVDLEdBQUcsRUFBRUMsUUFBUSxFQUFFQyxPQUFPLEVBQUU7SUFDM0MsT0FBT0MsSUFBSSxDQUFDSixTQUFTLENBQUNDLEdBQUcsRUFBRUMsUUFBUSxJQUFJLElBQUksRUFBRUMsT0FBTyxJQUFJLENBQUMsQ0FBQztFQUM1RCxDQUFDO0VBQ0RFLEtBQUssRUFBRUQsSUFBSSxDQUFDQztBQUNkLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBUixPQUFPLENBQUNGLEdBQUcsR0FBR0EsR0FBRyJ9","map":{"version":3,"names":["ini","require","formats","exports","json","stringify","obj","replacer","spacing","JSON","parse"],"sourceRoot":"C:\\code\\FluidFramework5\\node_modules\\.pnpm\\nconf@0.12.0\\node_modules\\nconf\\lib\\nconf\\","sources":["formats.js"],"sourcesContent":["/*\n * formats.js: Default formats supported by nconf\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar ini = require('ini');\n\nvar formats = exports;\n\n//\n// ### @json\n// Standard JSON format which pretty prints `.stringify()`.\n//\nformats.json = {\n  stringify: function (obj, replacer, spacing) {\n    return JSON.stringify(obj, replacer || null, spacing || 2)\n  },\n  parse: JSON.parse\n};\n\n//\n// ### @ini\n// Standard INI format supplied from the `ini` module\n// http://en.wikipedia.org/wiki/INI_file\n//\nformats.ini = ini;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAK,CAAC;AAExB,IAAIC,OAAO,GAAGC,OAAO;;AAErB;AACA;AACA;AACA;AACAD,OAAO,CAACE,IAAI,GAAG;EACbC,SAAS,EAAE,SAAAA,CAAUC,GAAG,EAAEC,QAAQ,EAAEC,OAAO,EAAE;IAC3C,OAAOC,IAAI,CAACJ,SAAS,CAACC,GAAG,EAAEC,QAAQ,IAAI,IAAI,EAAEC,OAAO,IAAI,CAAC,CAAC;EAC5D,CAAC;EACDE,KAAK,EAAED,IAAI,CAACC;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAR,OAAO,CAACF,GAAG,GAAGA,GAAG"}},"mtime":1674865250519},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\ini@2.0.0\\\\node_modules\\\\ini\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\ini@2.0.0\\\\node_modules\\\\ini\\\\ini.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.22.6:development":{"value":{"code":"\"use strict\";\n\nconst {\n  hasOwnProperty\n} = Object.prototype;\nconst eol = typeof process !== 'undefined' && process.platform === 'win32' ? '\\r\\n' : '\\n';\nconst encode = (obj, opt) => {\n  const children = [];\n  let out = '';\n  if (typeof opt === 'string') {\n    opt = {\n      section: opt,\n      whitespace: false\n    };\n  } else {\n    opt = opt || Object.create(null);\n    opt.whitespace = opt.whitespace === true;\n  }\n  const separator = opt.whitespace ? ' = ' : '=';\n  for (const k of Object.keys(obj)) {\n    const val = obj[k];\n    if (val && Array.isArray(val)) {\n      for (const item of val) out += safe(k + '[]') + separator + safe(item) + '\\n';\n    } else if (val && typeof val === 'object') children.push(k);else out += safe(k) + separator + safe(val) + eol;\n  }\n  if (opt.section && out.length) out = '[' + safe(opt.section) + ']' + eol + out;\n  for (const k of children) {\n    const nk = dotSplit(k).join('\\\\.');\n    const section = (opt.section ? opt.section + '.' : '') + nk;\n    const {\n      whitespace\n    } = opt;\n    const child = encode(obj[k], {\n      section,\n      whitespace\n    });\n    if (out.length && child.length) out += eol;\n    out += child;\n  }\n  return out;\n};\nconst dotSplit = str => str.replace(/\\1/g, '\\u0002LITERAL\\\\1LITERAL\\u0002').replace(/\\\\\\./g, '\\u0001').split(/\\./).map(part => part.replace(/\\1/g, '\\\\.').replace(/\\2LITERAL\\\\1LITERAL\\2/g, '\\u0001'));\nconst decode = str => {\n  const out = Object.create(null);\n  let p = out;\n  let section = null;\n  //          section     |key      = value\n  const re = /^\\[([^\\]]*)\\]$|^([^=]+)(=(.*))?$/i;\n  const lines = str.split(/[\\r\\n]+/g);\n  for (const line of lines) {\n    if (!line || line.match(/^\\s*[;#]/)) continue;\n    const match = line.match(re);\n    if (!match) continue;\n    if (match[1] !== undefined) {\n      section = unsafe(match[1]);\n      if (section === '__proto__') {\n        // not allowed\n        // keep parsing the section, but don't attach it.\n        p = Object.create(null);\n        continue;\n      }\n      p = out[section] = out[section] || Object.create(null);\n      continue;\n    }\n    const keyRaw = unsafe(match[2]);\n    const isArray = keyRaw.length > 2 && keyRaw.slice(-2) === '[]';\n    const key = isArray ? keyRaw.slice(0, -2) : keyRaw;\n    if (key === '__proto__') continue;\n    const valueRaw = match[3] ? unsafe(match[4]) : true;\n    const value = valueRaw === 'true' || valueRaw === 'false' || valueRaw === 'null' ? JSON.parse(valueRaw) : valueRaw;\n\n    // Convert keys with '[]' suffix to an array\n    if (isArray) {\n      if (!hasOwnProperty.call(p, key)) p[key] = [];else if (!Array.isArray(p[key])) p[key] = [p[key]];\n    }\n\n    // safeguard against resetting a previously defined\n    // array by accidentally forgetting the brackets\n    if (Array.isArray(p[key])) p[key].push(value);else p[key] = value;\n  }\n\n  // {a:{y:1},\"a.b\":{x:2}} --> {a:{y:1,b:{x:2}}}\n  // use a filter to return the keys that have to be deleted.\n  const remove = [];\n  for (const k of Object.keys(out)) {\n    if (!hasOwnProperty.call(out, k) || typeof out[k] !== 'object' || Array.isArray(out[k])) continue;\n\n    // see if the parent section is also an object.\n    // if so, add it to that, and mark this one for deletion\n    const parts = dotSplit(k);\n    let p = out;\n    const l = parts.pop();\n    const nl = l.replace(/\\\\\\./g, '.');\n    for (const part of parts) {\n      if (part === '__proto__') continue;\n      if (!hasOwnProperty.call(p, part) || typeof p[part] !== 'object') p[part] = Object.create(null);\n      p = p[part];\n    }\n    if (p === out && nl === l) continue;\n    p[nl] = out[k];\n    remove.push(k);\n  }\n  for (const del of remove) delete out[del];\n  return out;\n};\nconst isQuoted = val => val.charAt(0) === '\"' && val.slice(-1) === '\"' || val.charAt(0) === \"'\" && val.slice(-1) === \"'\";\nconst safe = val => typeof val !== 'string' || val.match(/[=\\r\\n]/) || val.match(/^\\[/) || val.length > 1 && isQuoted(val) || val !== val.trim() ? JSON.stringify(val) : val.replace(/;/g, '\\\\;').replace(/#/g, '\\\\#');\nconst unsafe = (val, doUnesc) => {\n  val = (val || '').trim();\n  if (isQuoted(val)) {\n    // remove the single quotes before calling JSON.parse\n    if (val.charAt(0) === \"'\") val = val.substr(1, val.length - 2);\n    try {\n      val = JSON.parse(val);\n    } catch (_) {}\n  } else {\n    // walk the val to find the first not-escaped ; character\n    let esc = false;\n    let unesc = '';\n    for (let i = 0, l = val.length; i < l; i++) {\n      const c = val.charAt(i);\n      if (esc) {\n        if ('\\\\;#'.indexOf(c) !== -1) unesc += c;else unesc += '\\\\' + c;\n        esc = false;\n      } else if (';#'.indexOf(c) !== -1) break;else if (c === '\\\\') esc = true;else unesc += c;\n    }\n    if (esc) unesc += '\\\\';\n    return unesc.trim();\n  }\n  return val;\n};\nmodule.exports = {\n  parse: decode,\n  decode,\n  stringify: encode,\n  encode,\n  safe,\n  unsafe\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["hasOwnProperty","Object","prototype","eol","process","platform","encode","obj","opt","children","out","section","whitespace","create","separator","k","keys","val","Array","isArray","item","safe","push","length","nk","dotSplit","join","child","str","replace","split","map","part","decode","p","re","lines","line","match","undefined","unsafe","keyRaw","slice","key","valueRaw","value","JSON","parse","call","remove","parts","l","pop","nl","del","isQuoted","charAt","trim","stringify","doUnesc","substr","_","esc","unesc","i","c","indexOf","module","exports"],"sourceRoot":"C:\\code\\FluidFramework5\\node_modules\\.pnpm\\ini@2.0.0\\node_modules\\ini\\","sources":["ini.js"],"sourcesContent":["const { hasOwnProperty } = Object.prototype\n\nconst eol = typeof process !== 'undefined' &&\n  process.platform === 'win32' ? '\\r\\n' : '\\n'\n\nconst encode = (obj, opt) => {\n  const children = []\n  let out = ''\n\n  if (typeof opt === 'string') {\n    opt = {\n      section: opt,\n      whitespace: false,\n    }\n  } else {\n    opt = opt || Object.create(null)\n    opt.whitespace = opt.whitespace === true\n  }\n\n  const separator = opt.whitespace ? ' = ' : '='\n\n  for (const k of Object.keys(obj)) {\n    const val = obj[k]\n    if (val && Array.isArray(val)) {\n      for (const item of val)\n        out += safe(k + '[]') + separator + safe(item) + '\\n'\n    } else if (val && typeof val === 'object')\n      children.push(k)\n    else\n      out += safe(k) + separator + safe(val) + eol\n  }\n\n  if (opt.section && out.length)\n    out = '[' + safe(opt.section) + ']' + eol + out\n\n  for (const k of children) {\n    const nk = dotSplit(k).join('\\\\.')\n    const section = (opt.section ? opt.section + '.' : '') + nk\n    const { whitespace } = opt\n    const child = encode(obj[k], {\n      section,\n      whitespace,\n    })\n    if (out.length && child.length)\n      out += eol\n\n    out += child\n  }\n\n  return out\n}\n\nconst dotSplit = str =>\n  str.replace(/\\1/g, '\\u0002LITERAL\\\\1LITERAL\\u0002')\n    .replace(/\\\\\\./g, '\\u0001')\n    .split(/\\./)\n    .map(part =>\n      part.replace(/\\1/g, '\\\\.')\n        .replace(/\\2LITERAL\\\\1LITERAL\\2/g, '\\u0001'))\n\nconst decode = str => {\n  const out = Object.create(null)\n  let p = out\n  let section = null\n  //          section     |key      = value\n  const re = /^\\[([^\\]]*)\\]$|^([^=]+)(=(.*))?$/i\n  const lines = str.split(/[\\r\\n]+/g)\n\n  for (const line of lines) {\n    if (!line || line.match(/^\\s*[;#]/))\n      continue\n    const match = line.match(re)\n    if (!match)\n      continue\n    if (match[1] !== undefined) {\n      section = unsafe(match[1])\n      if (section === '__proto__') {\n        // not allowed\n        // keep parsing the section, but don't attach it.\n        p = Object.create(null)\n        continue\n      }\n      p = out[section] = out[section] || Object.create(null)\n      continue\n    }\n    const keyRaw = unsafe(match[2])\n    const isArray = keyRaw.length > 2 && keyRaw.slice(-2) === '[]'\n    const key = isArray ? keyRaw.slice(0, -2) : keyRaw\n    if (key === '__proto__')\n      continue\n    const valueRaw = match[3] ? unsafe(match[4]) : true\n    const value = valueRaw === 'true' ||\n      valueRaw === 'false' ||\n      valueRaw === 'null' ? JSON.parse(valueRaw)\n      : valueRaw\n\n    // Convert keys with '[]' suffix to an array\n    if (isArray) {\n      if (!hasOwnProperty.call(p, key))\n        p[key] = []\n      else if (!Array.isArray(p[key]))\n        p[key] = [p[key]]\n    }\n\n    // safeguard against resetting a previously defined\n    // array by accidentally forgetting the brackets\n    if (Array.isArray(p[key]))\n      p[key].push(value)\n    else\n      p[key] = value\n  }\n\n  // {a:{y:1},\"a.b\":{x:2}} --> {a:{y:1,b:{x:2}}}\n  // use a filter to return the keys that have to be deleted.\n  const remove = []\n  for (const k of Object.keys(out)) {\n    if (!hasOwnProperty.call(out, k) ||\n        typeof out[k] !== 'object' ||\n        Array.isArray(out[k]))\n      continue\n\n    // see if the parent section is also an object.\n    // if so, add it to that, and mark this one for deletion\n    const parts = dotSplit(k)\n    let p = out\n    const l = parts.pop()\n    const nl = l.replace(/\\\\\\./g, '.')\n    for (const part of parts) {\n      if (part === '__proto__')\n        continue\n      if (!hasOwnProperty.call(p, part) || typeof p[part] !== 'object')\n        p[part] = Object.create(null)\n      p = p[part]\n    }\n    if (p === out && nl === l)\n      continue\n\n    p[nl] = out[k]\n    remove.push(k)\n  }\n  for (const del of remove)\n    delete out[del]\n\n  return out\n}\n\nconst isQuoted = val =>\n  (val.charAt(0) === '\"' && val.slice(-1) === '\"') ||\n    (val.charAt(0) === \"'\" && val.slice(-1) === \"'\")\n\nconst safe = val =>\n  (typeof val !== 'string' ||\n    val.match(/[=\\r\\n]/) ||\n    val.match(/^\\[/) ||\n    (val.length > 1 &&\n     isQuoted(val)) ||\n    val !== val.trim())\n    ? JSON.stringify(val)\n    : val.replace(/;/g, '\\\\;').replace(/#/g, '\\\\#')\n\nconst unsafe = (val, doUnesc) => {\n  val = (val || '').trim()\n  if (isQuoted(val)) {\n    // remove the single quotes before calling JSON.parse\n    if (val.charAt(0) === \"'\")\n      val = val.substr(1, val.length - 2)\n\n    try {\n      val = JSON.parse(val)\n    } catch (_) {}\n  } else {\n    // walk the val to find the first not-escaped ; character\n    let esc = false\n    let unesc = ''\n    for (let i = 0, l = val.length; i < l; i++) {\n      const c = val.charAt(i)\n      if (esc) {\n        if ('\\\\;#'.indexOf(c) !== -1)\n          unesc += c\n        else\n          unesc += '\\\\' + c\n\n        esc = false\n      } else if (';#'.indexOf(c) !== -1)\n        break\n      else if (c === '\\\\')\n        esc = true\n      else\n        unesc += c\n    }\n    if (esc)\n      unesc += '\\\\'\n\n    return unesc.trim()\n  }\n  return val\n}\n\nmodule.exports = {\n  parse: decode,\n  decode,\n  stringify: encode,\n  encode,\n  safe,\n  unsafe,\n}\n"],"mappings":";;AAAA,MAAM;EAAEA;AAAe,CAAC,GAAGC,MAAM,CAACC,SAAS;AAE3C,MAAMC,GAAG,GAAG,OAAOC,OAAO,KAAK,WAAW,IACxCA,OAAO,CAACC,QAAQ,KAAK,OAAO,GAAG,MAAM,GAAG,IAAI;AAE9C,MAAMC,MAAM,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;EAC3B,MAAMC,QAAQ,GAAG,EAAE;EACnB,IAAIC,GAAG,GAAG,EAAE;EAEZ,IAAI,OAAOF,GAAG,KAAK,QAAQ,EAAE;IAC3BA,GAAG,GAAG;MACJG,OAAO,EAAEH,GAAG;MACZI,UAAU,EAAE;IACd,CAAC;EACH,CAAC,MAAM;IACLJ,GAAG,GAAGA,GAAG,IAAIP,MAAM,CAACY,MAAM,CAAC,IAAI,CAAC;IAChCL,GAAG,CAACI,UAAU,GAAGJ,GAAG,CAACI,UAAU,KAAK,IAAI;EAC1C;EAEA,MAAME,SAAS,GAAGN,GAAG,CAACI,UAAU,GAAG,KAAK,GAAG,GAAG;EAE9C,KAAK,MAAMG,CAAC,IAAId,MAAM,CAACe,IAAI,CAACT,GAAG,CAAC,EAAE;IAChC,MAAMU,GAAG,GAAGV,GAAG,CAACQ,CAAC,CAAC;IAClB,IAAIE,GAAG,IAAIC,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,EAAE;MAC7B,KAAK,MAAMG,IAAI,IAAIH,GAAG,EACpBP,GAAG,IAAIW,IAAI,CAACN,CAAC,GAAG,IAAI,CAAC,GAAGD,SAAS,GAAGO,IAAI,CAACD,IAAI,CAAC,GAAG,IAAI;IACzD,CAAC,MAAM,IAAIH,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,EACvCR,QAAQ,CAACa,IAAI,CAACP,CAAC,CAAC,MAEhBL,GAAG,IAAIW,IAAI,CAACN,CAAC,CAAC,GAAGD,SAAS,GAAGO,IAAI,CAACJ,GAAG,CAAC,GAAGd,GAAG;EAChD;EAEA,IAAIK,GAAG,CAACG,OAAO,IAAID,GAAG,CAACa,MAAM,EAC3Bb,GAAG,GAAG,GAAG,GAAGW,IAAI,CAACb,GAAG,CAACG,OAAO,CAAC,GAAG,GAAG,GAAGR,GAAG,GAAGO,GAAG;EAEjD,KAAK,MAAMK,CAAC,IAAIN,QAAQ,EAAE;IACxB,MAAMe,EAAE,GAAGC,QAAQ,CAACV,CAAC,CAAC,CAACW,IAAI,CAAC,KAAK,CAAC;IAClC,MAAMf,OAAO,GAAG,CAACH,GAAG,CAACG,OAAO,GAAGH,GAAG,CAACG,OAAO,GAAG,GAAG,GAAG,EAAE,IAAIa,EAAE;IAC3D,MAAM;MAAEZ;IAAW,CAAC,GAAGJ,GAAG;IAC1B,MAAMmB,KAAK,GAAGrB,MAAM,CAACC,GAAG,CAACQ,CAAC,CAAC,EAAE;MAC3BJ,OAAO;MACPC;IACF,CAAC,CAAC;IACF,IAAIF,GAAG,CAACa,MAAM,IAAII,KAAK,CAACJ,MAAM,EAC5Bb,GAAG,IAAIP,GAAG;IAEZO,GAAG,IAAIiB,KAAK;EACd;EAEA,OAAOjB,GAAG;AACZ,CAAC;AAED,MAAMe,QAAQ,GAAGG,GAAG,IAClBA,GAAG,CAACC,OAAO,CAAC,KAAK,EAAE,+BAA+B,CAAC,CAChDA,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,CAC1BC,KAAK,CAAC,IAAI,CAAC,CACXC,GAAG,CAACC,IAAI,IACPA,IAAI,CAACH,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CACvBA,OAAO,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;AAErD,MAAMI,MAAM,GAAGL,GAAG,IAAI;EACpB,MAAMlB,GAAG,GAAGT,MAAM,CAACY,MAAM,CAAC,IAAI,CAAC;EAC/B,IAAIqB,CAAC,GAAGxB,GAAG;EACX,IAAIC,OAAO,GAAG,IAAI;EAClB;EACA,MAAMwB,EAAE,GAAG,mCAAmC;EAC9C,MAAMC,KAAK,GAAGR,GAAG,CAACE,KAAK,CAAC,UAAU,CAAC;EAEnC,KAAK,MAAMO,IAAI,IAAID,KAAK,EAAE;IACxB,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,KAAK,CAAC,UAAU,CAAC,EACjC;IACF,MAAMA,KAAK,GAAGD,IAAI,CAACC,KAAK,CAACH,EAAE,CAAC;IAC5B,IAAI,CAACG,KAAK,EACR;IACF,IAAIA,KAAK,CAAC,CAAC,CAAC,KAAKC,SAAS,EAAE;MAC1B5B,OAAO,GAAG6B,MAAM,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;MAC1B,IAAI3B,OAAO,KAAK,WAAW,EAAE;QAC3B;QACA;QACAuB,CAAC,GAAGjC,MAAM,CAACY,MAAM,CAAC,IAAI,CAAC;QACvB;MACF;MACAqB,CAAC,GAAGxB,GAAG,CAACC,OAAO,CAAC,GAAGD,GAAG,CAACC,OAAO,CAAC,IAAIV,MAAM,CAACY,MAAM,CAAC,IAAI,CAAC;MACtD;IACF;IACA,MAAM4B,MAAM,GAAGD,MAAM,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;IAC/B,MAAMnB,OAAO,GAAGsB,MAAM,CAAClB,MAAM,GAAG,CAAC,IAAIkB,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI;IAC9D,MAAMC,GAAG,GAAGxB,OAAO,GAAGsB,MAAM,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAGD,MAAM;IAClD,IAAIE,GAAG,KAAK,WAAW,EACrB;IACF,MAAMC,QAAQ,GAAGN,KAAK,CAAC,CAAC,CAAC,GAAGE,MAAM,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;IACnD,MAAMO,KAAK,GAAGD,QAAQ,KAAK,MAAM,IAC/BA,QAAQ,KAAK,OAAO,IACpBA,QAAQ,KAAK,MAAM,GAAGE,IAAI,CAACC,KAAK,CAACH,QAAQ,CAAC,GACxCA,QAAQ;;IAEZ;IACA,IAAIzB,OAAO,EAAE;MACX,IAAI,CAACnB,cAAc,CAACgD,IAAI,CAACd,CAAC,EAAES,GAAG,CAAC,EAC9BT,CAAC,CAACS,GAAG,CAAC,GAAG,EAAE,MACR,IAAI,CAACzB,KAAK,CAACC,OAAO,CAACe,CAAC,CAACS,GAAG,CAAC,CAAC,EAC7BT,CAAC,CAACS,GAAG,CAAC,GAAG,CAACT,CAAC,CAACS,GAAG,CAAC,CAAC;IACrB;;IAEA;IACA;IACA,IAAIzB,KAAK,CAACC,OAAO,CAACe,CAAC,CAACS,GAAG,CAAC,CAAC,EACvBT,CAAC,CAACS,GAAG,CAAC,CAACrB,IAAI,CAACuB,KAAK,CAAC,MAElBX,CAAC,CAACS,GAAG,CAAC,GAAGE,KAAK;EAClB;;EAEA;EACA;EACA,MAAMI,MAAM,GAAG,EAAE;EACjB,KAAK,MAAMlC,CAAC,IAAId,MAAM,CAACe,IAAI,CAACN,GAAG,CAAC,EAAE;IAChC,IAAI,CAACV,cAAc,CAACgD,IAAI,CAACtC,GAAG,EAAEK,CAAC,CAAC,IAC5B,OAAOL,GAAG,CAACK,CAAC,CAAC,KAAK,QAAQ,IAC1BG,KAAK,CAACC,OAAO,CAACT,GAAG,CAACK,CAAC,CAAC,CAAC,EACvB;;IAEF;IACA;IACA,MAAMmC,KAAK,GAAGzB,QAAQ,CAACV,CAAC,CAAC;IACzB,IAAImB,CAAC,GAAGxB,GAAG;IACX,MAAMyC,CAAC,GAAGD,KAAK,CAACE,GAAG,CAAC,CAAC;IACrB,MAAMC,EAAE,GAAGF,CAAC,CAACtB,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC;IAClC,KAAK,MAAMG,IAAI,IAAIkB,KAAK,EAAE;MACxB,IAAIlB,IAAI,KAAK,WAAW,EACtB;MACF,IAAI,CAAChC,cAAc,CAACgD,IAAI,CAACd,CAAC,EAAEF,IAAI,CAAC,IAAI,OAAOE,CAAC,CAACF,IAAI,CAAC,KAAK,QAAQ,EAC9DE,CAAC,CAACF,IAAI,CAAC,GAAG/B,MAAM,CAACY,MAAM,CAAC,IAAI,CAAC;MAC/BqB,CAAC,GAAGA,CAAC,CAACF,IAAI,CAAC;IACb;IACA,IAAIE,CAAC,KAAKxB,GAAG,IAAI2C,EAAE,KAAKF,CAAC,EACvB;IAEFjB,CAAC,CAACmB,EAAE,CAAC,GAAG3C,GAAG,CAACK,CAAC,CAAC;IACdkC,MAAM,CAAC3B,IAAI,CAACP,CAAC,CAAC;EAChB;EACA,KAAK,MAAMuC,GAAG,IAAIL,MAAM,EACtB,OAAOvC,GAAG,CAAC4C,GAAG,CAAC;EAEjB,OAAO5C,GAAG;AACZ,CAAC;AAED,MAAM6C,QAAQ,GAAGtC,GAAG,IACjBA,GAAG,CAACuC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIvC,GAAG,CAACyB,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IAC5CzB,GAAG,CAACuC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIvC,GAAG,CAACyB,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAI;AAEpD,MAAMrB,IAAI,GAAGJ,GAAG,IACb,OAAOA,GAAG,KAAK,QAAQ,IACtBA,GAAG,CAACqB,KAAK,CAAC,SAAS,CAAC,IACpBrB,GAAG,CAACqB,KAAK,CAAC,KAAK,CAAC,IACfrB,GAAG,CAACM,MAAM,GAAG,CAAC,IACdgC,QAAQ,CAACtC,GAAG,CAAE,IACfA,GAAG,KAAKA,GAAG,CAACwC,IAAI,CAAC,CAAC,GAChBX,IAAI,CAACY,SAAS,CAACzC,GAAG,CAAC,GACnBA,GAAG,CAACY,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC;AAEnD,MAAMW,MAAM,GAAGA,CAACvB,GAAG,EAAE0C,OAAO,KAAK;EAC/B1C,GAAG,GAAG,CAACA,GAAG,IAAI,EAAE,EAAEwC,IAAI,CAAC,CAAC;EACxB,IAAIF,QAAQ,CAACtC,GAAG,CAAC,EAAE;IACjB;IACA,IAAIA,GAAG,CAACuC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EACvBvC,GAAG,GAAGA,GAAG,CAAC2C,MAAM,CAAC,CAAC,EAAE3C,GAAG,CAACM,MAAM,GAAG,CAAC,CAAC;IAErC,IAAI;MACFN,GAAG,GAAG6B,IAAI,CAACC,KAAK,CAAC9B,GAAG,CAAC;IACvB,CAAC,CAAC,OAAO4C,CAAC,EAAE,CAAC;EACf,CAAC,MAAM;IACL;IACA,IAAIC,GAAG,GAAG,KAAK;IACf,IAAIC,KAAK,GAAG,EAAE;IACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEb,CAAC,GAAGlC,GAAG,CAACM,MAAM,EAAEyC,CAAC,GAAGb,CAAC,EAAEa,CAAC,EAAE,EAAE;MAC1C,MAAMC,CAAC,GAAGhD,GAAG,CAACuC,MAAM,CAACQ,CAAC,CAAC;MACvB,IAAIF,GAAG,EAAE;QACP,IAAI,MAAM,CAACI,OAAO,CAACD,CAAC,CAAC,KAAK,CAAC,CAAC,EAC1BF,KAAK,IAAIE,CAAC,MAEVF,KAAK,IAAI,IAAI,GAAGE,CAAC;QAEnBH,GAAG,GAAG,KAAK;MACb,CAAC,MAAM,IAAI,IAAI,CAACI,OAAO,CAACD,CAAC,CAAC,KAAK,CAAC,CAAC,EAC/B,MAAK,KACF,IAAIA,CAAC,KAAK,IAAI,EACjBH,GAAG,GAAG,IAAI,MAEVC,KAAK,IAAIE,CAAC;IACd;IACA,IAAIH,GAAG,EACLC,KAAK,IAAI,IAAI;IAEf,OAAOA,KAAK,CAACN,IAAI,CAAC,CAAC;EACrB;EACA,OAAOxC,GAAG;AACZ,CAAC;AAEDkD,MAAM,CAACC,OAAO,GAAG;EACfrB,KAAK,EAAEd,MAAM;EACbA,MAAM;EACNyB,SAAS,EAAEpD,MAAM;EACjBA,MAAM;EACNe,IAAI;EACJmB;AACF,CAAC"}},"mtime":1674865304234},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\nconf@0.12.0\\\\node_modules\\\\nconf\\\\lib\\\\nconf\\\\stores\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\nconf@0.12.0\\\\node_modules\\\\nconf\\\\lib\\\\nconf\\\\stores\\\\memory.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.22.6:development":{"value":{"code":"\"use strict\";\n\n/*\n * memory.js: Simple memory storage engine for nconf configuration(s)\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar common = require('../common');\n\n//\n// ### function Memory (options)\n// #### @options {Object} Options for this instance\n// Constructor function for the Memory nconf store which maintains\n// a nested json structure based on key delimiters `:`.\n//\n// e.g. `my:nested:key` ==> `{ my: { nested: { key: } } }`\n//\nvar Memory = exports.Memory = function (options) {\n  options = options || {};\n  this.type = 'memory';\n  this.store = {};\n  this.mtimes = {};\n  this.readOnly = false;\n  this.loadFrom = options.loadFrom || null;\n  this.logicalSeparator = options.logicalSeparator || ':';\n  this.parseValues = options.parseValues || false;\n  if (this.loadFrom) {\n    this.store = common.loadFilesSync(this.loadFrom);\n  }\n};\n\n//\n// ### function get (key)\n// #### @key {string} Key to retrieve for this instance.\n// Retrieves the value for the specified key (if any).\n//\nMemory.prototype.get = function (key) {\n  var target = this.store,\n    path = common.path(key, this.logicalSeparator);\n\n  //\n  // Scope into the object to get the appropriate nested context\n  //\n  while (path.length > 0) {\n    key = path.shift();\n    if (target && typeof target !== 'string' && Object.hasOwnProperty.call(target, key)) {\n      target = target[key];\n      continue;\n    }\n    return undefined;\n  }\n  return target;\n};\n\n//\n// ### function set (key, value)\n// #### @key {string} Key to set in this instance\n// #### @value {literal|Object} Value for the specified key\n// Sets the `value` for the specified `key` in this instance.\n//\nMemory.prototype.set = function (key, value) {\n  if (this.readOnly) {\n    return false;\n  }\n  var target = this.store,\n    path = common.path(key, this.logicalSeparator);\n  if (path.length === 0) {\n    //\n    // Root must be an object\n    //\n    if (!value || typeof value !== 'object') {\n      return false;\n    } else {\n      this.reset();\n      this.store = value;\n      return true;\n    }\n  }\n\n  //\n  // Update the `mtime` (modified time) of the key\n  //\n  this.mtimes[key] = Date.now();\n\n  //\n  // Scope into the object to get the appropriate nested context\n  //\n  while (path.length > 1) {\n    key = path.shift();\n    if (!target[key] || typeof target[key] !== 'object' || !Object.hasOwnProperty.call(target, key)) {\n      target[key] = {};\n    }\n    target = target[key];\n  }\n\n  // Set the specified value in the nested JSON structure\n  key = path.shift();\n  if (this.parseValues) {\n    value = common.parseValues.call(common, value);\n  }\n  target[key] = value;\n  return true;\n};\n\n//\n// ### function clear (key)\n// #### @key {string} Key to remove from this instance\n// Removes the value for the specified `key` from this instance.\n//\nMemory.prototype.clear = function (key) {\n  if (this.readOnly) {\n    return false;\n  }\n  var target = this.store,\n    value = target,\n    path = common.path(key, this.logicalSeparator);\n\n  //\n  // Remove the key from the set of `mtimes` (modified times)\n  //\n  delete this.mtimes[key];\n\n  //\n  // Scope into the object to get the appropriate nested context\n  //\n  for (var i = 0; i < path.length - 1; i++) {\n    key = path[i];\n    value = target[key];\n    if (typeof value !== 'function' && typeof value !== 'object') {\n      return false;\n    }\n    target = value;\n  }\n\n  // Delete the key from the nested JSON structure\n  key = path[i];\n  delete target[key];\n  return true;\n};\n\n//\n// ### function merge (key, value)\n// #### @key {string} Key to merge the value into\n// #### @value {literal|Object} Value to merge into the key\n// Merges the properties in `value` into the existing object value\n// at `key`. If the existing value `key` is not an Object, it will be\n// completely overwritten.\n//\nMemory.prototype.merge = function (key, value) {\n  if (this.readOnly) {\n    return false;\n  }\n\n  //\n  // If the key is not an `Object` or is an `Array`,\n  // then simply set it. Merging is for Objects.\n  //\n  if (typeof value !== 'object' || Array.isArray(value) || value === null) {\n    return this.set(key, value);\n  }\n  var self = this,\n    target = this.store,\n    path = common.path(key, this.logicalSeparator),\n    fullKey = key;\n\n  //\n  // Update the `mtime` (modified time) of the key\n  //\n  this.mtimes[key] = Date.now();\n\n  //\n  // Scope into the object to get the appropriate nested context\n  //\n  while (path.length > 1) {\n    key = path.shift();\n    if (!target[key]) {\n      target[key] = {};\n    }\n    target = target[key];\n  }\n\n  // Set the specified value in the nested JSON structure\n  key = path.shift();\n\n  //\n  // If the current value at the key target is not an `Object`,\n  // or is an `Array` then simply override it because the new value\n  // is an Object.\n  //\n  if (typeof target[key] !== 'object' || Array.isArray(target[key])) {\n    target[key] = value;\n    return true;\n  }\n  return Object.keys(value).every(function (nested) {\n    return self.merge(common.keyed(self.logicalSeparator, fullKey, nested), value[nested]);\n  });\n};\n\n//\n// ### function reset (callback)\n// Clears all keys associated with this instance.\n//\nMemory.prototype.reset = function () {\n  if (this.readOnly) {\n    return false;\n  }\n  this.mtimes = {};\n  this.store = {};\n  return true;\n};\n\n//\n// ### function loadSync\n// Returns the store managed by this instance\n//\nMemory.prototype.loadSync = function () {\n  return this.store || {};\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["common","require","Memory","exports","options","type","store","mtimes","readOnly","loadFrom","logicalSeparator","parseValues","loadFilesSync","prototype","get","key","target","path","length","shift","Object","hasOwnProperty","call","undefined","set","value","reset","Date","now","clear","i","merge","Array","isArray","self","fullKey","keys","every","nested","keyed","loadSync"],"sourceRoot":"C:\\code\\FluidFramework5\\node_modules\\.pnpm\\nconf@0.12.0\\node_modules\\nconf\\lib\\nconf\\stores\\","sources":["memory.js"],"sourcesContent":["/*\n * memory.js: Simple memory storage engine for nconf configuration(s)\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar common = require('../common');\n\n//\n// ### function Memory (options)\n// #### @options {Object} Options for this instance\n// Constructor function for the Memory nconf store which maintains\n// a nested json structure based on key delimiters `:`.\n//\n// e.g. `my:nested:key` ==> `{ my: { nested: { key: } } }`\n//\nvar Memory = exports.Memory = function (options) {\n  options       = options || {};\n  this.type     = 'memory';\n  this.store    = {};\n  this.mtimes   = {};\n  this.readOnly = false;\n  this.loadFrom = options.loadFrom || null;\n  this.logicalSeparator = options.logicalSeparator || ':';\n  this.parseValues = options.parseValues || false;\n\n  if (this.loadFrom) {\n    this.store = common.loadFilesSync(this.loadFrom);\n  }\n};\n\n//\n// ### function get (key)\n// #### @key {string} Key to retrieve for this instance.\n// Retrieves the value for the specified key (if any).\n//\nMemory.prototype.get = function (key) {\n  var target = this.store,\n      path   = common.path(key, this.logicalSeparator);\n\n  //\n  // Scope into the object to get the appropriate nested context\n  //\n  while (path.length > 0) {\n    key = path.shift();\n    if (target && typeof target !== 'string' && Object.hasOwnProperty.call(target, key)) {\n      target = target[key];\n      continue;\n    }\n    return undefined;\n  }\n\n  return target;\n};\n\n//\n// ### function set (key, value)\n// #### @key {string} Key to set in this instance\n// #### @value {literal|Object} Value for the specified key\n// Sets the `value` for the specified `key` in this instance.\n//\nMemory.prototype.set = function (key, value) {\n  if (this.readOnly) {\n    return false;\n  }\n\n  var target = this.store,\n      path   = common.path(key, this.logicalSeparator);\n\n  if (path.length === 0) {\n    //\n    // Root must be an object\n    //\n    if (!value || typeof value !== 'object') {\n      return false;\n    }\n    else {\n      this.reset();\n      this.store = value;\n      return true;\n    }\n  }\n\n  //\n  // Update the `mtime` (modified time) of the key\n  //\n  this.mtimes[key] = Date.now();\n\n  //\n  // Scope into the object to get the appropriate nested context\n  //\n  while (path.length > 1) {\n    key = path.shift();\n    if (!target[key] || typeof target[key] !== 'object' || !Object.hasOwnProperty.call(target, key)) {\n      target[key] = {};\n    }\n\n    target = target[key];\n  }\n\n  // Set the specified value in the nested JSON structure\n  key = path.shift();\n  if (this.parseValues) {\n    value = common.parseValues.call(common, value);\n  }\n  target[key] = value;\n  return true;\n};\n\n//\n// ### function clear (key)\n// #### @key {string} Key to remove from this instance\n// Removes the value for the specified `key` from this instance.\n//\nMemory.prototype.clear = function (key) {\n  if (this.readOnly) {\n    return false;\n  }\n\n  var target = this.store,\n      value  = target,\n      path   = common.path(key, this.logicalSeparator);\n\n  //\n  // Remove the key from the set of `mtimes` (modified times)\n  //\n  delete this.mtimes[key];\n\n  //\n  // Scope into the object to get the appropriate nested context\n  //\n  for (var i = 0; i < path.length - 1; i++) {\n    key = path[i];\n    value = target[key];\n    if (typeof value !== 'function' && typeof value !== 'object') {\n      return false;\n    }\n    target = value;\n  }\n\n  // Delete the key from the nested JSON structure\n  key = path[i];\n  delete target[key];\n  return true;\n};\n\n//\n// ### function merge (key, value)\n// #### @key {string} Key to merge the value into\n// #### @value {literal|Object} Value to merge into the key\n// Merges the properties in `value` into the existing object value\n// at `key`. If the existing value `key` is not an Object, it will be\n// completely overwritten.\n//\nMemory.prototype.merge = function (key, value) {\n  if (this.readOnly) {\n    return false;\n  }\n\n  //\n  // If the key is not an `Object` or is an `Array`,\n  // then simply set it. Merging is for Objects.\n  //\n  if (typeof value !== 'object' || Array.isArray(value) || value === null) {\n    return this.set(key, value);\n  }\n\n  var self    = this,\n      target  = this.store,\n      path    = common.path(key, this.logicalSeparator),\n      fullKey = key;\n\n  //\n  // Update the `mtime` (modified time) of the key\n  //\n  this.mtimes[key] = Date.now();\n\n  //\n  // Scope into the object to get the appropriate nested context\n  //\n  while (path.length > 1) {\n    key = path.shift();\n    if (!target[key]) {\n      target[key] = {};\n    }\n\n    target = target[key];\n  }\n\n  // Set the specified value in the nested JSON structure\n  key = path.shift();\n\n  //\n  // If the current value at the key target is not an `Object`,\n  // or is an `Array` then simply override it because the new value\n  // is an Object.\n  //\n  if (typeof target[key] !== 'object' || Array.isArray(target[key])) {\n    target[key] = value;\n    return true;\n  }\n\n  return Object.keys(value).every(function (nested) {\n    return self.merge(common.keyed(self.logicalSeparator, fullKey, nested), value[nested]);\n  });\n};\n\n//\n// ### function reset (callback)\n// Clears all keys associated with this instance.\n//\nMemory.prototype.reset = function () {\n  if (this.readOnly) {\n    return false;\n  }\n\n  this.mtimes = {};\n  this.store  = {};\n  return true;\n};\n\n//\n// ### function loadSync\n// Returns the store managed by this instance\n//\nMemory.prototype.loadSync = function () {\n  return this.store || {};\n};\n"],"mappings":"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"}},"mtime":1674865250537},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\nconf@0.12.0\\\\node_modules\\\\nconf\\\\lib\\\\nconf\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\nconf@0.12.0\\\\node_modules\\\\nconf\\\\lib\\\\nconf\\\\provider.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.22.6:development":{"value":{"code":"\"use strict\";\n\n/*\n * provider.js: Abstraction providing an interface into pluggable configuration storage.\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar async = require('async'),\n  common = require('./common');\n\n//\n// ### function Provider (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Provider object responsible\n// for exposing the pluggable storage features of `nconf`.\n//\nvar Provider = exports.Provider = function (options) {\n  //\n  // Setup default options for working with `stores`,\n  // `overrides`, `process.env` and `process.argv`.\n  //\n  options = options || {};\n  this.stores = {};\n  this.sources = [];\n  this.init(options);\n};\n\n//\n// Define wrapper functions for using basic stores\n// in this instance\n//\n\n['argv', 'env'].forEach(function (type) {\n  Provider.prototype[type] = function () {\n    var args = [type].concat(Array.prototype.slice.call(arguments));\n    return this.add.apply(this, args);\n  };\n});\n\n//\n// ### function file (key, options)\n// #### @key {string|Object} Fully qualified options, name of file store, or path.\n// #### @path {string|Object} **Optional** Full qualified options, or path.\n// Adds a new `File` store to this instance. Accepts the following options\n//\n//    nconf.file({ file: '.jitsuconf', dir: process.env.HOME, search: true });\n//    nconf.file('path/to/config/file');\n//    nconf.file('userconfig', 'path/to/config/file');\n//    nconf.file('userconfig', { file: '.jitsuconf', search: true });\n//\nProvider.prototype.file = function (key, options) {\n  if (arguments.length == 1) {\n    options = typeof key === 'string' ? {\n      file: key\n    } : key;\n    key = 'file';\n  } else {\n    options = typeof options === 'string' ? {\n      file: options\n    } : options;\n  }\n  options.type = 'file';\n  return this.add(key, options);\n};\n\n//\n// Define wrapper functions for using\n// overrides and defaults\n//\n['defaults', 'overrides'].forEach(function (type) {\n  Provider.prototype[type] = function (options) {\n    options = options || {};\n    if (!options.type) {\n      options.type = 'literal';\n    }\n    return this.add(type, options);\n  };\n});\n\n//\n// ### function use (name, options)\n// #### @type {string} Type of the nconf store to use.\n// #### @options {Object} Options for the store instance.\n// Adds (or replaces) a new store with the specified `name`\n// and `options`. If `options.type` is not set, then `name`\n// will be used instead:\n//\n//    provider.use('file');\n//    provider.use('file', { type: 'file', filename: '/path/to/userconf' })\n//\nProvider.prototype.use = function (name, options) {\n  options = options || {};\n  function sameOptions(store) {\n    return Object.keys(options).every(function (key) {\n      return options[key] === store[key];\n    });\n  }\n  var store = this.stores[name],\n    update = store && !sameOptions(store);\n  if (!store || update) {\n    if (update) {\n      this.remove(name);\n    }\n    this.add(name, options);\n  }\n  return this;\n};\n\n//\n// ### function add (name, options)\n// #### @name {string} Name of the store to add to this instance\n// #### @options {Object} Options for the store to create\n// Adds a new store with the specified `name` and `options`. If `options.type`\n// is not set, then `name` will be used instead:\n//\n//    provider.add('memory');\n//    provider.add('userconf', { type: 'file', filename: '/path/to/userconf' })\n//\nProvider.prototype.add = function (name, options, usage) {\n  options = options || {};\n  var type = options.type || name;\n  if (!require('../nconf')[common.capitalize(type)]) {\n    throw new Error('Cannot add store with unknown type: ' + type);\n  }\n  this.stores[name] = this.create(type, options, usage);\n  if (this.stores[name].loadSync) {\n    this.stores[name].loadSync();\n  }\n  return this;\n};\n\n//\n// ### function remove (name)\n// #### @name {string} Name of the store to remove from this instance\n// Removes a store with the specified `name` from this instance. Users\n// are allowed to pass in a type argument (e.g. `memory`) as name if\n// this was used in the call to `.add()`.\n//\nProvider.prototype.remove = function (name) {\n  delete this.stores[name];\n  return this;\n};\n\n//\n// ### function create (type, options)\n// #### @type {string} Type of the nconf store to use.\n// #### @options {Object} Options for the store instance.\n// Creates a store of the specified `type` using the\n// specified `options`.\n//\nProvider.prototype.create = function (type, options, usage) {\n  return new (require('../nconf')[common.capitalize(type.toLowerCase())])(options, usage);\n};\n\n//\n// ### function init (options)\n// #### @options {Object} Options to initialize this instance with.\n// Initializes this instance with additional `stores` or `sources` in the\n// `options` supplied.\n//\nProvider.prototype.init = function (options) {\n  var self = this;\n\n  //\n  // Add any stores passed in through the options\n  // to this instance.\n  //\n  if (options.type) {\n    this.add(options.type, options);\n  } else if (options.store) {\n    this.add(options.store.name || options.store.type, options.store);\n  } else if (options.stores) {\n    Object.keys(options.stores).forEach(function (name) {\n      var store = options.stores[name];\n      self.add(store.name || name || store.type, store);\n    });\n  }\n\n  //\n  // Add any read-only sources to this instance\n  //\n  if (options.source) {\n    this.sources.push(this.create(options.source.type || options.source.name, options.source));\n  } else if (options.sources) {\n    Object.keys(options.sources).forEach(function (name) {\n      var source = options.sources[name];\n      self.sources.push(self.create(source.type || source.name || name, source));\n    });\n  }\n};\n\n//\n// ### function get (key, callback)\n// #### @key {string} Key to retrieve for this instance.\n// #### @callback {function} **Optional** Continuation to respond to when complete.\n// Retrieves the value for the specified key (if any).\n//\nProvider.prototype.get = function (key, callback) {\n  if (typeof key === 'function') {\n    // Allow a * key call to be made\n    callback = key;\n    key = null;\n  }\n\n  //\n  // If there is no callback we can short-circuit into the default\n  // logic for traversing stores.\n  //\n  if (!callback) {\n    return this._execute('get', 1, key, callback);\n  }\n\n  //\n  // Otherwise the asynchronous, hierarchical `get` is\n  // slightly more complicated because we do not need to traverse\n  // the entire set of stores, but up until there is a defined value.\n  //\n  var current = 0,\n    names = Object.keys(this.stores),\n    self = this,\n    response,\n    mergeObjs = [];\n  async.whilst(function (cb) {\n    cb(null, typeof response === 'undefined' && current < names.length);\n  }, function (next) {\n    var store = self.stores[names[current]];\n    current++;\n    if (store.get.length >= 2) {\n      return store.get(key, function (err, value) {\n        if (err) {\n          return next(err);\n        }\n        response = value;\n\n        // Merge objects if necessary\n        if (response && typeof response === 'object' && !Array.isArray(response)) {\n          mergeObjs.push(response);\n          response = undefined;\n        }\n        next();\n      });\n    }\n    response = store.get(key);\n\n    // Merge objects if necessary\n    if (response && typeof response === 'object' && !Array.isArray(response)) {\n      mergeObjs.push(response);\n      response = undefined;\n    }\n    next();\n  }, function (err) {\n    if (!err && mergeObjs.length) {\n      response = common.merge(mergeObjs.reverse());\n    }\n    return err ? callback(err) : callback(null, response);\n  });\n};\n\n//\n// ### function any (keys, callback)\n// #### @keys {array|string...} Array of keys to query, or a variable list of strings\n// #### @callback {function} **Optional** Continuation to respond to when complete.\n// Retrieves the first truthy value (if any) for the specified list of keys.\n//\nProvider.prototype.any = function (keys, callback) {\n  if (!Array.isArray(keys)) {\n    keys = Array.prototype.slice.call(arguments);\n    if (keys.length > 0 && typeof keys[keys.length - 1] === 'function') {\n      callback = keys.pop();\n    } else {\n      callback = null;\n    }\n  }\n\n  //\n  // If there is no callback, use the short-circuited \"get\"\n  // on each key in turn.\n  //\n  if (!callback) {\n    var val;\n    for (var i = 0; i < keys.length; ++i) {\n      val = this._execute('get', 1, keys[i], callback);\n      if (val) {\n        return val;\n      }\n    }\n    return null;\n  }\n  var keyIndex = 0,\n    result,\n    self = this;\n  async.whilst(function (cb) {\n    cb(null, !result && keyIndex < keys.length);\n  }, function (next) {\n    var key = keys[keyIndex];\n    keyIndex++;\n    self.get(key, function (err, v) {\n      if (err) {\n        next(err);\n      } else {\n        result = v;\n        next();\n      }\n    });\n  }, function (err) {\n    return err ? callback(err) : callback(null, result);\n  });\n};\n\n//\n// ### function set (key, value, callback)\n// #### @key {string} Key to set in this instance\n// #### @value {literal|Object} Value for the specified key\n// #### @callback {function} **Optional** Continuation to respond to when complete.\n// Sets the `value` for the specified `key` in this instance.\n//\nProvider.prototype.set = function (key, value, callback) {\n  return this._execute('set', 2, key, value, callback);\n};\n\n//\n// ### function required (keys)\n// #### @keys {array} List of keys\n// Throws an error if any of `keys` has no value, otherwise returns `true`\nProvider.prototype.required = function (keys) {\n  if (!Array.isArray(keys)) {\n    throw new Error('Incorrect parameter, array expected');\n  }\n  var missing = [];\n  keys.forEach(function (key) {\n    if (typeof this.get(key) === 'undefined') {\n      missing.push(key);\n    }\n  }, this);\n  if (missing.length) {\n    throw new Error('Missing required keys: ' + missing.join(', '));\n  } else {\n    return true;\n  }\n};\n\n//\n// ### function reset (callback)\n// #### @callback {function} **Optional** Continuation to respond to when complete.\n// Clears all keys associated with this instance.\n//\nProvider.prototype.reset = function (callback) {\n  return this._execute('reset', 0, callback);\n};\n\n//\n// ### function clear (key, callback)\n// #### @key {string} Key to remove from this instance\n// #### @callback {function} **Optional** Continuation to respond to when complete.\n// Removes the value for the specified `key` from this instance.\n//\nProvider.prototype.clear = function (key, callback) {\n  return this._execute('clear', 1, key, callback);\n};\n\n//\n// ### function merge ([key,] value [, callback])\n// #### @key {string} Key to merge the value into\n// #### @value {literal|Object} Value to merge into the key\n// #### @callback {function} **Optional** Continuation to respond to when complete.\n// Merges the properties in `value` into the existing object value at `key`.\n//\n// 1. If the existing value `key` is not an Object, it will be completely overwritten.\n// 2. If `key` is not supplied, then the `value` will be merged into the root.\n//\nProvider.prototype.merge = function () {\n  var self = this,\n    args = Array.prototype.slice.call(arguments),\n    callback = typeof args[args.length - 1] === 'function' && args.pop(),\n    value = args.pop(),\n    key = args.pop();\n  function mergeProperty(prop, next) {\n    return self._execute('merge', 2, prop, value[prop], next);\n  }\n  if (!key) {\n    if (Array.isArray(value) || typeof value !== 'object') {\n      return onError(new Error('Cannot merge non-Object into top-level.'), callback);\n    }\n    return async.forEach(Object.keys(value), mergeProperty, callback || function () {});\n  }\n  return this._execute('merge', 2, key, value, callback);\n};\n\n//\n// ### function load (callback)\n// #### @callback {function} Continuation to respond to when complete.\n// Responds with an Object representing all keys associated in this instance.\n//\nProvider.prototype.load = function (callback) {\n  var self = this;\n  function getStores() {\n    var stores = Object.keys(self.stores);\n    stores.reverse();\n    return stores.map(function (name) {\n      return self.stores[name];\n    });\n  }\n  function loadStoreSync(store) {\n    if (!store.loadSync) {\n      throw new Error('nconf store ' + store.type + ' has no loadSync() method');\n    }\n    return store.loadSync();\n  }\n  function loadStore(store, next) {\n    if (!store.load && !store.loadSync) {\n      return next(new Error('nconf store ' + store.type + ' has no load() method'));\n    }\n    return store.loadSync ? next(null, store.loadSync()) : store.load(next);\n  }\n  function loadBatch(targets, done) {\n    if (!done) {\n      return common.merge(targets.map(loadStoreSync));\n    }\n    async.map(targets, loadStore, function (err, objs) {\n      return err ? done(err) : done(null, common.merge(objs));\n    });\n  }\n  function mergeSources(data) {\n    //\n    // If `data` was returned then merge it into\n    // the system store.\n    //\n    if (data && typeof data === 'object') {\n      self.use('sources', {\n        type: 'literal',\n        store: data\n      });\n    }\n  }\n  function loadSources() {\n    var sourceHierarchy = self.sources.splice(0);\n    sourceHierarchy.reverse();\n\n    //\n    // If we don't have a callback and the current\n    // store is capable of loading synchronously\n    // then do so.\n    //\n    if (!callback) {\n      mergeSources(loadBatch(sourceHierarchy));\n      return loadBatch(getStores());\n    }\n    loadBatch(sourceHierarchy, function (err, data) {\n      if (err) {\n        return callback(err);\n      }\n      mergeSources(data);\n      return loadBatch(getStores(), callback);\n    });\n  }\n  return self.sources.length ? loadSources() : loadBatch(getStores(), callback);\n};\n\n//\n// ### function save (callback)\n// #### @callback {function} **optional**  Continuation to respond to when\n// complete.\n// Instructs each provider to save.  If a callback is provided, we will attempt\n// asynchronous saves on the providers, falling back to synchronous saves if\n// this isn't possible.  If a provider does not know how to save, it will be\n// ignored.  Returns an object consisting of all of the data which was\n// actually saved.\n//\nProvider.prototype.save = function (value, callback) {\n  if (!callback && typeof value === 'function') {\n    callback = value;\n    value = null;\n  }\n  var self = this,\n    names = Object.keys(this.stores);\n  function saveStoreSync(memo, name) {\n    var store = self.stores[name];\n\n    //\n    // If the `store` doesn't have a `saveSync` method,\n    // just ignore it and continue.\n    //\n    if (store.saveSync) {\n      var ret = store.saveSync();\n      if (typeof ret == 'object' && ret !== null) {\n        memo.push(ret);\n      }\n    }\n    return memo;\n  }\n  function saveStore(memo, name, next) {\n    var store = self.stores[name];\n\n    //\n    // If the `store` doesn't have a `save` or saveSync`\n    // method(s), just ignore it and continue.\n    //\n\n    if (store.save) {\n      return store.save(value, function (err, data) {\n        if (err) {\n          return next(err);\n        }\n        if (typeof data == 'object' && data !== null) {\n          memo.push(data);\n        }\n        next(null, memo);\n      });\n    } else if (store.saveSync) {\n      memo.push(store.saveSync());\n    }\n    next(null, memo);\n  }\n\n  //\n  // If we don't have a callback and the current\n  // store is capable of saving synchronously\n  // then do so.\n  //\n  if (!callback) {\n    return common.merge(names.reduce(saveStoreSync, []));\n  }\n  async.reduce(names, [], saveStore, function (err, objs) {\n    return err ? callback(err) : callback(null, common.merge(objs));\n  });\n};\n\n//\n// ### @private function _execute (action, syncLength, [arguments])\n// #### @action {string} Action to execute on `this.store`.\n// #### @syncLength {number} Function length of the sync version.\n// #### @arguments {Array} Arguments array to apply to the action\n// Executes the specified `action` on all stores for this instance, ensuring a callback supplied\n// to a synchronous store function is still invoked.\n//\nProvider.prototype._execute = function (action, syncLength /* [arguments] */) {\n  var args = Array.prototype.slice.call(arguments, 2),\n    callback = typeof args[args.length - 1] === 'function' && args.pop(),\n    destructive = ['set', 'clear', 'merge', 'reset'].indexOf(action) !== -1,\n    self = this,\n    response,\n    mergeObjs = [],\n    keys = Object.keys(this.stores);\n  function runAction(name, next) {\n    var store = self.stores[name];\n    if (destructive && store.readOnly) {\n      return next();\n    }\n    return store[action].length > syncLength ? store[action].apply(store, args.concat(next)) : next(null, store[action].apply(store, args));\n  }\n  if (callback) {\n    return async.forEach(keys, runAction, function (err) {\n      return err ? callback(err) : callback();\n    });\n  }\n  keys.forEach(function (name) {\n    if (typeof response === 'undefined') {\n      var store = self.stores[name];\n      if (destructive && store.readOnly) {\n        return;\n      }\n      response = store[action].apply(store, args);\n\n      // Merge objects if necessary\n      if (response && action === 'get' && typeof response === 'object' && !Array.isArray(response)) {\n        mergeObjs.push(response);\n        response = undefined;\n      }\n    }\n  });\n  if (mergeObjs.length) {\n    response = common.merge(mergeObjs.reverse());\n  }\n  return response;\n};\n\n//\n// Throw the `err` if a callback is not supplied\n//\nfunction onError(err, callback) {\n  if (callback) {\n    return callback(err);\n  }\n  throw err;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["async","require","common","Provider","exports","options","stores","sources","init","forEach","type","prototype","args","concat","Array","slice","call","arguments","add","apply","file","key","length","use","name","sameOptions","store","Object","keys","every","update","remove","usage","capitalize","Error","create","loadSync","toLowerCase","self","source","push","get","callback","_execute","current","names","response","mergeObjs","whilst","cb","next","err","value","isArray","undefined","merge","reverse","any","pop","val","i","keyIndex","result","v","set","required","missing","join","reset","clear","mergeProperty","prop","onError","load","getStores","map","loadStoreSync","loadStore","loadBatch","targets","done","objs","mergeSources","data","loadSources","sourceHierarchy","splice","save","saveStoreSync","memo","saveSync","ret","saveStore","reduce","action","syncLength","destructive","indexOf","runAction","readOnly"],"sourceRoot":"C:\\code\\FluidFramework5\\node_modules\\.pnpm\\nconf@0.12.0\\node_modules\\nconf\\lib\\nconf\\","sources":["provider.js"],"sourcesContent":["/*\n * provider.js: Abstraction providing an interface into pluggable configuration storage.\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar async = require('async'),\n    common = require('./common');\n\n//\n// ### function Provider (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Provider object responsible\n// for exposing the pluggable storage features of `nconf`.\n//\nvar Provider = exports.Provider = function (options) {\n  //\n  // Setup default options for working with `stores`,\n  // `overrides`, `process.env` and `process.argv`.\n  //\n  options       = options || {};\n  this.stores  = {};\n  this.sources = [];\n  this.init(options);\n};\n\n//\n// Define wrapper functions for using basic stores\n// in this instance\n//\n\n['argv', 'env'].forEach(function (type) {\n  Provider.prototype[type] = function () {\n    var args = [type].concat(Array.prototype.slice.call(arguments));\n    return this.add.apply(this, args);\n  };\n});\n\n//\n// ### function file (key, options)\n// #### @key {string|Object} Fully qualified options, name of file store, or path.\n// #### @path {string|Object} **Optional** Full qualified options, or path.\n// Adds a new `File` store to this instance. Accepts the following options\n//\n//    nconf.file({ file: '.jitsuconf', dir: process.env.HOME, search: true });\n//    nconf.file('path/to/config/file');\n//    nconf.file('userconfig', 'path/to/config/file');\n//    nconf.file('userconfig', { file: '.jitsuconf', search: true });\n//\nProvider.prototype.file = function (key, options) {\n  if (arguments.length == 1) {\n    options = typeof key === 'string' ? { file: key } : key;\n    key = 'file';\n  }\n  else {\n    options = typeof options === 'string'\n      ? { file: options }\n      : options;\n  }\n\n  options.type = 'file';\n  return this.add(key, options);\n};\n\n//\n// Define wrapper functions for using\n// overrides and defaults\n//\n['defaults', 'overrides'].forEach(function (type) {\n  Provider.prototype[type] = function (options) {\n    options = options || {};\n    if (!options.type) {\n      options.type = 'literal';\n    }\n\n    return this.add(type, options);\n  };\n});\n\n//\n// ### function use (name, options)\n// #### @type {string} Type of the nconf store to use.\n// #### @options {Object} Options for the store instance.\n// Adds (or replaces) a new store with the specified `name`\n// and `options`. If `options.type` is not set, then `name`\n// will be used instead:\n//\n//    provider.use('file');\n//    provider.use('file', { type: 'file', filename: '/path/to/userconf' })\n//\nProvider.prototype.use = function (name, options) {\n  options  = options      || {};\n\n  function sameOptions (store) {\n    return Object.keys(options).every(function (key) {\n      return options[key] === store[key];\n    });\n  }\n\n  var store = this.stores[name],\n      update = store && !sameOptions(store);\n\n  if (!store || update) {\n    if (update) {\n      this.remove(name);\n    }\n\n    this.add(name, options);\n  }\n\n  return this;\n};\n\n//\n// ### function add (name, options)\n// #### @name {string} Name of the store to add to this instance\n// #### @options {Object} Options for the store to create\n// Adds a new store with the specified `name` and `options`. If `options.type`\n// is not set, then `name` will be used instead:\n//\n//    provider.add('memory');\n//    provider.add('userconf', { type: 'file', filename: '/path/to/userconf' })\n//\nProvider.prototype.add = function (name, options, usage) {\n  options  = options      || {};\n  var type = options.type || name;\n\n  if (!require('../nconf')[common.capitalize(type)]) {\n    throw new Error('Cannot add store with unknown type: ' + type);\n  }\n\n  this.stores[name] = this.create(type, options, usage);\n\n  if (this.stores[name].loadSync) {\n    this.stores[name].loadSync();\n  }\n\n  return this;\n};\n\n//\n// ### function remove (name)\n// #### @name {string} Name of the store to remove from this instance\n// Removes a store with the specified `name` from this instance. Users\n// are allowed to pass in a type argument (e.g. `memory`) as name if\n// this was used in the call to `.add()`.\n//\nProvider.prototype.remove = function (name) {\n  delete this.stores[name];\n  return this;\n};\n\n//\n// ### function create (type, options)\n// #### @type {string} Type of the nconf store to use.\n// #### @options {Object} Options for the store instance.\n// Creates a store of the specified `type` using the\n// specified `options`.\n//\nProvider.prototype.create = function (type, options, usage) {\n  return new (require('../nconf')[common.capitalize(type.toLowerCase())])(options, usage);\n};\n\n//\n// ### function init (options)\n// #### @options {Object} Options to initialize this instance with.\n// Initializes this instance with additional `stores` or `sources` in the\n// `options` supplied.\n//\nProvider.prototype.init = function (options) {\n  var self = this;\n\n  //\n  // Add any stores passed in through the options\n  // to this instance.\n  //\n  if (options.type) {\n    this.add(options.type, options);\n  }\n  else if (options.store) {\n    this.add(options.store.name || options.store.type, options.store);\n  }\n  else if (options.stores) {\n    Object.keys(options.stores).forEach(function (name) {\n      var store = options.stores[name];\n      self.add(store.name || name || store.type, store);\n    });\n  }\n\n  //\n  // Add any read-only sources to this instance\n  //\n  if (options.source) {\n    this.sources.push(this.create(options.source.type || options.source.name, options.source));\n  }\n  else if (options.sources) {\n    Object.keys(options.sources).forEach(function (name) {\n      var source = options.sources[name];\n      self.sources.push(self.create(source.type || source.name || name, source));\n    });\n  }\n};\n\n//\n// ### function get (key, callback)\n// #### @key {string} Key to retrieve for this instance.\n// #### @callback {function} **Optional** Continuation to respond to when complete.\n// Retrieves the value for the specified key (if any).\n//\nProvider.prototype.get = function (key, callback) {\n  if (typeof key === 'function') {\n    // Allow a * key call to be made\n    callback = key;\n    key = null;\n  }\n\n  //\n  // If there is no callback we can short-circuit into the default\n  // logic for traversing stores.\n  //\n  if (!callback) {\n    return this._execute('get', 1, key, callback);\n  }\n\n  //\n  // Otherwise the asynchronous, hierarchical `get` is\n  // slightly more complicated because we do not need to traverse\n  // the entire set of stores, but up until there is a defined value.\n  //\n  var current = 0,\n      names = Object.keys(this.stores),\n      self = this,\n      response,\n      mergeObjs = [];\n\n  async.whilst(function (cb) {\n    cb(null, typeof response === 'undefined' && current < names.length);\n  }, function (next) {\n    var store = self.stores[names[current]];\n    current++;\n\n    if (store.get.length >= 2) {\n      return store.get(key, function (err, value) {\n        if (err) {\n          return next(err);\n        }\n\n        response = value;\n\n        // Merge objects if necessary\n        if (response && typeof response === 'object' && !Array.isArray(response)) {\n          mergeObjs.push(response);\n          response = undefined;\n        }\n\n        next();\n      });\n    }\n\n    response = store.get(key);\n\n    // Merge objects if necessary\n    if (response && typeof response === 'object' && !Array.isArray(response)) {\n      mergeObjs.push(response);\n      response = undefined;\n    }\n\n    next();\n  }, function (err) {\n    if (!err && mergeObjs.length) {\n      response = common.merge(mergeObjs.reverse());\n    }\n    return err ? callback(err) : callback(null, response);\n  });\n};\n\n\n//\n// ### function any (keys, callback)\n// #### @keys {array|string...} Array of keys to query, or a variable list of strings\n// #### @callback {function} **Optional** Continuation to respond to when complete.\n// Retrieves the first truthy value (if any) for the specified list of keys.\n//\nProvider.prototype.any = function (keys, callback) {\n\n  if (!Array.isArray(keys)) {\n    keys = Array.prototype.slice.call(arguments);\n    if (keys.length > 0 && typeof keys[keys.length - 1] === 'function') {\n      callback = keys.pop();\n    } else {\n      callback = null;\n    }\n  }\n\n  //\n  // If there is no callback, use the short-circuited \"get\"\n  // on each key in turn.\n  //\n  if (!callback) {\n    var val;\n    for (var i = 0; i < keys.length; ++i) {\n      val = this._execute('get', 1, keys[i], callback);\n      if (val) {\n        return val;\n      }\n    }\n    return null;\n  }\n\n  var keyIndex = 0,\n      result,\n      self = this;\n  \n  async.whilst(function(cb) {\n    cb(null, !result && keyIndex < keys.length);\n  }, function(next) {\n    var key = keys[keyIndex];\n    keyIndex++;\n\n    self.get(key, function(err, v) {\n      if (err) {\n        next(err);\n      } else {\n        result = v;\n        next();\n      }\n    });\n  }, function(err) {\n    return err ? callback(err) : callback(null, result);\n  });\n};\n\n\n//\n// ### function set (key, value, callback)\n// #### @key {string} Key to set in this instance\n// #### @value {literal|Object} Value for the specified key\n// #### @callback {function} **Optional** Continuation to respond to when complete.\n// Sets the `value` for the specified `key` in this instance.\n//\nProvider.prototype.set = function (key, value, callback) {\n  return this._execute('set', 2, key, value, callback);\n};\n\n\n//\n// ### function required (keys)\n// #### @keys {array} List of keys\n// Throws an error if any of `keys` has no value, otherwise returns `true`\nProvider.prototype.required = function (keys) {\n  if (!Array.isArray(keys)) {\n    throw new Error('Incorrect parameter, array expected');\n  }\n\n  var missing = [];\n  keys.forEach(function(key) {\n    if (typeof this.get(key) === 'undefined') {\n      missing.push(key);\n    }\n  }, this);\n\n  if (missing.length) {\n    throw new Error('Missing required keys: ' + missing.join(', '));\n  } else {\n    return true;\n  }\n\n};\n\n//\n// ### function reset (callback)\n// #### @callback {function} **Optional** Continuation to respond to when complete.\n// Clears all keys associated with this instance.\n//\nProvider.prototype.reset = function (callback) {\n  return this._execute('reset', 0, callback);\n};\n\n//\n// ### function clear (key, callback)\n// #### @key {string} Key to remove from this instance\n// #### @callback {function} **Optional** Continuation to respond to when complete.\n// Removes the value for the specified `key` from this instance.\n//\nProvider.prototype.clear = function (key, callback) {\n  return this._execute('clear', 1, key, callback);\n};\n\n//\n// ### function merge ([key,] value [, callback])\n// #### @key {string} Key to merge the value into\n// #### @value {literal|Object} Value to merge into the key\n// #### @callback {function} **Optional** Continuation to respond to when complete.\n// Merges the properties in `value` into the existing object value at `key`.\n//\n// 1. If the existing value `key` is not an Object, it will be completely overwritten.\n// 2. If `key` is not supplied, then the `value` will be merged into the root.\n//\nProvider.prototype.merge = function () {\n  var self = this,\n      args = Array.prototype.slice.call(arguments),\n      callback = typeof args[args.length - 1] === 'function' && args.pop(),\n      value = args.pop(),\n      key = args.pop();\n\n  function mergeProperty (prop, next) {\n    return self._execute('merge', 2, prop, value[prop], next);\n  }\n\n  if (!key) {\n    if (Array.isArray(value) || typeof value !== 'object') {\n      return onError(new Error('Cannot merge non-Object into top-level.'), callback);\n    }\n\n    return async.forEach(Object.keys(value), mergeProperty, callback || function () { })\n  }\n\n  return this._execute('merge', 2, key, value, callback);\n};\n\n//\n// ### function load (callback)\n// #### @callback {function} Continuation to respond to when complete.\n// Responds with an Object representing all keys associated in this instance.\n//\nProvider.prototype.load = function (callback) {\n  var self = this;\n\n  function getStores () {\n    var stores = Object.keys(self.stores);\n    stores.reverse();\n    return stores.map(function (name) {\n      return self.stores[name];\n    });\n  }\n\n  function loadStoreSync(store) {\n    if (!store.loadSync) {\n      throw new Error('nconf store ' + store.type + ' has no loadSync() method');\n    }\n\n    return store.loadSync();\n  }\n\n  function loadStore(store, next) {\n    if (!store.load && !store.loadSync) {\n      return next(new Error('nconf store ' + store.type + ' has no load() method'));\n    }\n\n    return store.loadSync\n      ? next(null, store.loadSync())\n      : store.load(next);\n  }\n\n  function loadBatch (targets, done) {\n    if (!done) {\n      return common.merge(targets.map(loadStoreSync));\n    }\n\n    async.map(targets, loadStore, function (err, objs) {\n      return err ? done(err) : done(null, common.merge(objs));\n    });\n  }\n\n  function mergeSources (data) {\n    //\n    // If `data` was returned then merge it into\n    // the system store.\n    //\n    if (data && typeof data === 'object') {\n      self.use('sources', {\n        type: 'literal',\n        store: data\n      });\n    }\n  }\n\n  function loadSources () {\n    var sourceHierarchy = self.sources.splice(0);\n    sourceHierarchy.reverse();\n\n    //\n    // If we don't have a callback and the current\n    // store is capable of loading synchronously\n    // then do so.\n    //\n    if (!callback) {\n      mergeSources(loadBatch(sourceHierarchy));\n      return loadBatch(getStores());\n    }\n\n    loadBatch(sourceHierarchy, function (err, data) {\n      if (err) {\n        return callback(err);\n      }\n\n      mergeSources(data);\n      return loadBatch(getStores(), callback);\n    });\n  }\n\n  return self.sources.length\n    ? loadSources()\n    : loadBatch(getStores(), callback);\n};\n\n//\n// ### function save (callback)\n// #### @callback {function} **optional**  Continuation to respond to when\n// complete.\n// Instructs each provider to save.  If a callback is provided, we will attempt\n// asynchronous saves on the providers, falling back to synchronous saves if\n// this isn't possible.  If a provider does not know how to save, it will be\n// ignored.  Returns an object consisting of all of the data which was\n// actually saved.\n//\nProvider.prototype.save = function (value, callback) {\n  if (!callback && typeof value === 'function') {\n    callback = value;\n    value = null;\n  }\n\n  var self = this,\n      names = Object.keys(this.stores);\n\n  function saveStoreSync(memo, name) {\n    var store = self.stores[name];\n\n    //\n    // If the `store` doesn't have a `saveSync` method,\n    // just ignore it and continue.\n    //\n    if (store.saveSync) {\n      var ret = store.saveSync();\n      if (typeof ret == 'object' && ret !== null) {\n        memo.push(ret);\n      }\n    }\n    return memo;\n  }\n\n  function saveStore(memo, name, next) {\n    var store = self.stores[name];\n\n    //\n    // If the `store` doesn't have a `save` or saveSync`\n    // method(s), just ignore it and continue.\n    //\n\n    if (store.save) {\n      return store.save(value, function (err, data) {\n        if (err) {\n          return next(err);\n        }\n\n        if (typeof data == 'object' && data !== null) {\n          memo.push(data);\n        }\n\n        next(null, memo);\n      });\n    }\n    else if (store.saveSync) {\n      memo.push(store.saveSync());\n    }\n\n    next(null, memo);\n  }\n\n  //\n  // If we don't have a callback and the current\n  // store is capable of saving synchronously\n  // then do so.\n  //\n  if (!callback) {\n    return common.merge(names.reduce(saveStoreSync, []));\n  }\n\n  async.reduce(names, [], saveStore, function (err, objs) {\n    return err ? callback(err) : callback(null, common.merge(objs));\n  });\n};\n\n//\n// ### @private function _execute (action, syncLength, [arguments])\n// #### @action {string} Action to execute on `this.store`.\n// #### @syncLength {number} Function length of the sync version.\n// #### @arguments {Array} Arguments array to apply to the action\n// Executes the specified `action` on all stores for this instance, ensuring a callback supplied\n// to a synchronous store function is still invoked.\n//\nProvider.prototype._execute = function (action, syncLength /* [arguments] */) {\n  var args = Array.prototype.slice.call(arguments, 2),\n      callback = typeof args[args.length - 1] === 'function' && args.pop(),\n      destructive = ['set', 'clear', 'merge', 'reset'].indexOf(action) !== -1,\n      self = this,\n      response,\n      mergeObjs = [],\n      keys = Object.keys(this.stores);\n\n\n  function runAction (name, next) {\n    var store = self.stores[name];\n\n    if (destructive && store.readOnly) {\n      return next();\n    }\n\n    return store[action].length > syncLength\n      ? store[action].apply(store, args.concat(next))\n      : next(null, store[action].apply(store, args));\n  }\n\n  if (callback) {\n    return async.forEach(keys, runAction, function (err) {\n      return err ? callback(err) : callback();\n    });\n  }\n\n  keys.forEach(function (name) {\n    if (typeof response === 'undefined') {\n      var store = self.stores[name];\n\n      if (destructive && store.readOnly) {\n        return;\n      }\n\n      response = store[action].apply(store, args);\n\n      // Merge objects if necessary\n      if (response && action === 'get' && typeof response === 'object' && !Array.isArray(response)) {\n        mergeObjs.push(response);\n        response = undefined;\n      }\n    }\n  });\n\n  if (mergeObjs.length) {\n    response = common.merge(mergeObjs.reverse());\n  }\n\n  return response;\n}\n\n//\n// Throw the `err` if a callback is not supplied\n//\nfunction onError(err, callback) {\n  if (callback) {\n    return callback(err);\n  }\n\n  throw err;\n}\n"],"mappings":"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"}},"mtime":1674865250653},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\nconf@0.12.0\\\\node_modules\\\\nconf\\\\lib\\\\nconf\\\\stores\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\nconf@0.12.0\\\\node_modules\\\\nconf\\\\lib\\\\nconf\\\\stores\\\\argv.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.22.6:development":{"value":{"code":"\"use strict\";\n\n/*\n * argv.js: Simple memory-based store for command-line arguments.\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar util = require('util'),\n  common = require('../common'),\n  Memory = require('./memory').Memory;\n\n//\n// ### function Argv (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Argv nconf store, a simple abstraction\n// around the Memory store that can read command-line arguments.\n//\nvar Argv = exports.Argv = function (options, usage) {\n  Memory.call(this, options);\n  options = options || {};\n  this.type = 'argv';\n  this.readOnly = true;\n  this.options = options;\n  this.usage = usage;\n  if (typeof options.parseValues === 'boolean') {\n    this.parseValues = options.parseValues;\n    delete options.parseValues;\n  } else {\n    this.parseValues = false;\n  }\n  if (typeof options.transform === 'function') {\n    this.transform = options.transform;\n    delete options.transform;\n  } else {\n    this.transform = false;\n  }\n  if (typeof options.separator === 'string' || options.separator instanceof RegExp) {\n    this.separator = options.separator;\n    delete options.separator;\n  } else {\n    this.separator = '';\n  }\n};\n\n// Inherit from the Memory store\nutil.inherits(Argv, Memory);\n\n//\n// ### function loadSync ()\n// Loads the data passed in from `process.argv` into this instance.\n//\nArgv.prototype.loadSync = function () {\n  this.loadArgv();\n  return this.store;\n};\n\n//\n// ### function loadArgv ()\n// Loads the data passed in from the command-line arguments\n// into this instance.\n//\nArgv.prototype.loadArgv = function () {\n  var self = this,\n    yargs,\n    argv;\n  yargs = isYargs(this.options) ? this.options : typeof this.options === 'object' ? require('yargs')(process.argv.slice(2)).options(this.options) : require('yargs')(process.argv.slice(2));\n  if (typeof this.usage === 'string') {\n    yargs.usage(this.usage);\n  }\n  argv = yargs.argv;\n  if (!argv) {\n    return;\n  }\n  if (this.transform) {\n    argv = common.transform(argv, this.transform);\n  }\n  this.readOnly = false;\n  Object.keys(argv).forEach(function (key) {\n    var val = argv[key];\n    if (typeof val !== 'undefined') {\n      if (self.parseValues) {\n        val = common.parseValues(val);\n      }\n      if (self.separator) {\n        self.set(common.key.apply(common, key.split(self.separator)), val);\n      } else {\n        self.set(key, val);\n      }\n    }\n  });\n  this.showHelp = yargs.showHelp;\n  this.help = yargs.help;\n  this.readOnly = true;\n  return this.store;\n};\nfunction isYargs(obj) {\n  return (typeof obj === 'function' || typeof obj === 'object') && 'argv' in obj;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["util","require","common","Memory","Argv","exports","options","usage","call","type","readOnly","parseValues","transform","separator","RegExp","inherits","prototype","loadSync","loadArgv","store","self","yargs","argv","isYargs","process","slice","Object","keys","forEach","key","val","set","apply","split","showHelp","help","obj"],"sourceRoot":"C:\\code\\FluidFramework5\\node_modules\\.pnpm\\nconf@0.12.0\\node_modules\\nconf\\lib\\nconf\\stores\\","sources":["argv.js"],"sourcesContent":["/*\n * argv.js: Simple memory-based store for command-line arguments.\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar util = require('util'),\n    common = require('../common'),\n    Memory = require('./memory').Memory;\n\n//\n// ### function Argv (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Argv nconf store, a simple abstraction\n// around the Memory store that can read command-line arguments.\n//\nvar Argv = exports.Argv = function (options, usage) {\n  Memory.call(this, options);\n\n  options        = options || {};\n  this.type     = 'argv';\n  this.readOnly = true;\n  this.options  = options;\n  this.usage    = usage;\n  if(typeof options.parseValues === 'boolean') {\n      this.parseValues = options.parseValues;\n      delete options.parseValues;\n  } else {\n      this.parseValues = false;\n  }\n  if (typeof options.transform === 'function') {\n      this.transform = options.transform;\n      delete options.transform;\n  } else {\n      this.transform = false;\n  }\n  if (typeof options.separator === 'string' || options.separator instanceof RegExp) {\n    this.separator = options.separator;\n    delete options.separator;\n  } else {\n    this.separator = '';\n  }\n};\n\n// Inherit from the Memory store\nutil.inherits(Argv, Memory);\n\n//\n// ### function loadSync ()\n// Loads the data passed in from `process.argv` into this instance.\n//\nArgv.prototype.loadSync = function () {\n  this.loadArgv();\n  return this.store;\n};\n\n//\n// ### function loadArgv ()\n// Loads the data passed in from the command-line arguments\n// into this instance.\n//\nArgv.prototype.loadArgv = function () {\n  var self = this,\n      yargs, argv;\n\n  yargs = isYargs(this.options) ?\n    this.options :\n    typeof this.options === 'object' ?\n      require('yargs')(process.argv.slice(2)).options(this.options) :\n      require('yargs')(process.argv.slice(2));\n\n  if (typeof this.usage === 'string') { yargs.usage(this.usage) }\n\n  argv = yargs.argv\n\n  if (!argv) {\n    return;\n  }\n\n  if (this.transform) {\n    argv = common.transform(argv, this.transform);\n  }\n\n  this.readOnly = false;\n  Object.keys(argv).forEach(function (key) {\n    var val = argv[key];\n\n    if (typeof val !== 'undefined') {\n      if (self.parseValues) {\n        val = common.parseValues(val);\n      }\n\n      if (self.separator) {\n        self.set(common.key.apply(common, key.split(self.separator)), val);\n      }\n      else {\n        self.set(key, val);\n      }\n    }\n  });\n\n  this.showHelp = yargs.showHelp\n  this.help     = yargs.help\n\n  this.readOnly = true;\n  return this.store;\n};\n\nfunction isYargs(obj) {\n  return (typeof obj === 'function' || typeof obj === 'object') && ('argv' in obj);\n}\n"],"mappings":"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"}},"mtime":1674865250449},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\yargs@16.2.0\\\\node_modules\\\\yargs\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\yargs@16.2.0\\\\node_modules\\\\yargs\\\\index.cjs\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.22.6:development":{"value":{"code":"'use strict';\n\n// classic singleton yargs API, to use yargs\n// without running as a singleton do:\n// require('yargs/yargs')(process.argv.slice(2))\nconst {\n  Yargs,\n  processArgv\n} = require('./build/index.cjs');\nArgv(processArgv.hideBin(process.argv));\nmodule.exports = Argv;\nfunction Argv(processArgs, cwd) {\n  const argv = Yargs(processArgs, cwd, require);\n  singletonify(argv);\n  return argv;\n}\n\n/*  Hack an instance of Argv with process.argv into Argv\n    so people can do\n    require('yargs')(['--beeble=1','-z','zizzle']).argv\n    to parse a list of args and\n    require('yargs').argv\n    to get a parsed version of process.argv.\n*/\nfunction singletonify(inst) {\n  Object.keys(inst).forEach(key => {\n    if (key === 'argv') {\n      Argv.__defineGetter__(key, inst.__lookupGetter__(key));\n    } else if (typeof inst[key] === 'function') {\n      Argv[key] = inst[key].bind(inst);\n    } else {\n      Argv.__defineGetter__('$0', () => {\n        return inst.$0;\n      });\n      Argv.__defineGetter__('parsed', () => {\n        return inst.parsed;\n      });\n    }\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJZYXJncyIsInByb2Nlc3NBcmd2IiwicmVxdWlyZSIsIkFyZ3YiLCJoaWRlQmluIiwicHJvY2VzcyIsImFyZ3YiLCJtb2R1bGUiLCJleHBvcnRzIiwicHJvY2Vzc0FyZ3MiLCJjd2QiLCJzaW5nbGV0b25pZnkiLCJpbnN0IiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJfX2RlZmluZUdldHRlcl9fIiwiX19sb29rdXBHZXR0ZXJfXyIsImJpbmQiLCIkMCIsInBhcnNlZCJdLCJzb3VyY2VSb290IjoiQzpcXGNvZGVcXEZsdWlkRnJhbWV3b3JrNVxcbm9kZV9tb2R1bGVzXFwucG5wbVxceWFyZ3NAMTYuMi4wXFxub2RlX21vZHVsZXNcXHlhcmdzXFwiLCJzb3VyY2VzIjpbImluZGV4LmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vLyBjbGFzc2ljIHNpbmdsZXRvbiB5YXJncyBBUEksIHRvIHVzZSB5YXJnc1xuLy8gd2l0aG91dCBydW5uaW5nIGFzIGEgc2luZ2xldG9uIGRvOlxuLy8gcmVxdWlyZSgneWFyZ3MveWFyZ3MnKShwcm9jZXNzLmFyZ3Yuc2xpY2UoMikpXG5jb25zdCB7WWFyZ3MsIHByb2Nlc3NBcmd2fSA9IHJlcXVpcmUoJy4vYnVpbGQvaW5kZXguY2pzJyk7XG5cbkFyZ3YocHJvY2Vzc0FyZ3YuaGlkZUJpbihwcm9jZXNzLmFyZ3YpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcmd2O1xuXG5mdW5jdGlvbiBBcmd2KHByb2Nlc3NBcmdzLCBjd2QpIHtcbiAgY29uc3QgYXJndiA9IFlhcmdzKHByb2Nlc3NBcmdzLCBjd2QsIHJlcXVpcmUpO1xuICBzaW5nbGV0b25pZnkoYXJndik7XG4gIHJldHVybiBhcmd2O1xufVxuXG4vKiAgSGFjayBhbiBpbnN0YW5jZSBvZiBBcmd2IHdpdGggcHJvY2Vzcy5hcmd2IGludG8gQXJndlxuICAgIHNvIHBlb3BsZSBjYW4gZG9cbiAgICByZXF1aXJlKCd5YXJncycpKFsnLS1iZWVibGU9MScsJy16Jywneml6emxlJ10pLmFyZ3ZcbiAgICB0byBwYXJzZSBhIGxpc3Qgb2YgYXJncyBhbmRcbiAgICByZXF1aXJlKCd5YXJncycpLmFyZ3ZcbiAgICB0byBnZXQgYSBwYXJzZWQgdmVyc2lvbiBvZiBwcm9jZXNzLmFyZ3YuXG4qL1xuZnVuY3Rpb24gc2luZ2xldG9uaWZ5KGluc3QpIHtcbiAgT2JqZWN0LmtleXMoaW5zdCkuZm9yRWFjaChrZXkgPT4ge1xuICAgIGlmIChrZXkgPT09ICdhcmd2Jykge1xuICAgICAgQXJndi5fX2RlZmluZUdldHRlcl9fKGtleSwgaW5zdC5fX2xvb2t1cEdldHRlcl9fKGtleSkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGluc3Rba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgQXJndltrZXldID0gaW5zdFtrZXldLmJpbmQoaW5zdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIEFyZ3YuX19kZWZpbmVHZXR0ZXJfXygnJDAnLCAoKSA9PiB7XG4gICAgICAgIHJldHVybiBpbnN0LiQwO1xuICAgICAgfSk7XG4gICAgICBBcmd2Ll9fZGVmaW5lR2V0dGVyX18oJ3BhcnNlZCcsICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGluc3QucGFyc2VkO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0VBQUNBLEtBQUs7RUFBRUM7QUFBVyxDQUFDLEdBQUdDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQztBQUV6REMsSUFBSSxDQUFDRixXQUFXLENBQUNHLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMsQ0FBQztBQUV2Q0MsTUFBTSxDQUFDQyxPQUFPLEdBQUdMLElBQUk7QUFFckIsU0FBU0EsSUFBSUEsQ0FBQ00sV0FBVyxFQUFFQyxHQUFHLEVBQUU7RUFDOUIsTUFBTUosSUFBSSxHQUFHTixLQUFLLENBQUNTLFdBQVcsRUFBRUMsR0FBRyxFQUFFUixPQUFPLENBQUM7RUFDN0NTLFlBQVksQ0FBQ0wsSUFBSSxDQUFDO0VBQ2xCLE9BQU9BLElBQUk7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNLLFlBQVlBLENBQUNDLElBQUksRUFBRTtFQUMxQkMsTUFBTSxDQUFDQyxJQUFJLENBQUNGLElBQUksQ0FBQyxDQUFDRyxPQUFPLENBQUNDLEdBQUcsSUFBSTtJQUMvQixJQUFJQSxHQUFHLEtBQUssTUFBTSxFQUFFO01BQ2xCYixJQUFJLENBQUNjLGdCQUFnQixDQUFDRCxHQUFHLEVBQUVKLElBQUksQ0FBQ00sZ0JBQWdCLENBQUNGLEdBQUcsQ0FBQyxDQUFDO0lBQ3hELENBQUMsTUFBTSxJQUFJLE9BQU9KLElBQUksQ0FBQ0ksR0FBRyxDQUFDLEtBQUssVUFBVSxFQUFFO01BQzFDYixJQUFJLENBQUNhLEdBQUcsQ0FBQyxHQUFHSixJQUFJLENBQUNJLEdBQUcsQ0FBQyxDQUFDRyxJQUFJLENBQUNQLElBQUksQ0FBQztJQUNsQyxDQUFDLE1BQU07TUFDTFQsSUFBSSxDQUFDYyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsTUFBTTtRQUNoQyxPQUFPTCxJQUFJLENBQUNRLEVBQUU7TUFDaEIsQ0FBQyxDQUFDO01BQ0ZqQixJQUFJLENBQUNjLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxNQUFNO1FBQ3BDLE9BQU9MLElBQUksQ0FBQ1MsTUFBTTtNQUNwQixDQUFDLENBQUM7SUFDSjtFQUNGLENBQUMsQ0FBQztBQUNKIn0=","map":{"version":3,"names":["Yargs","processArgv","require","Argv","hideBin","process","argv","module","exports","processArgs","cwd","singletonify","inst","Object","keys","forEach","key","__defineGetter__","__lookupGetter__","bind","$0","parsed"],"sourceRoot":"C:\\code\\FluidFramework5\\node_modules\\.pnpm\\yargs@16.2.0\\node_modules\\yargs\\","sources":["index.cjs"],"sourcesContent":["'use strict';\n// classic singleton yargs API, to use yargs\n// without running as a singleton do:\n// require('yargs/yargs')(process.argv.slice(2))\nconst {Yargs, processArgv} = require('./build/index.cjs');\n\nArgv(processArgv.hideBin(process.argv));\n\nmodule.exports = Argv;\n\nfunction Argv(processArgs, cwd) {\n  const argv = Yargs(processArgs, cwd, require);\n  singletonify(argv);\n  return argv;\n}\n\n/*  Hack an instance of Argv with process.argv into Argv\n    so people can do\n    require('yargs')(['--beeble=1','-z','zizzle']).argv\n    to parse a list of args and\n    require('yargs').argv\n    to get a parsed version of process.argv.\n*/\nfunction singletonify(inst) {\n  Object.keys(inst).forEach(key => {\n    if (key === 'argv') {\n      Argv.__defineGetter__(key, inst.__lookupGetter__(key));\n    } else if (typeof inst[key] === 'function') {\n      Argv[key] = inst[key].bind(inst);\n    } else {\n      Argv.__defineGetter__('$0', () => {\n        return inst.$0;\n      });\n      Argv.__defineGetter__('parsed', () => {\n        return inst.parsed;\n      });\n    }\n  });\n}\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA,MAAM;EAACA,KAAK;EAAEC;AAAW,CAAC,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAEzDC,IAAI,CAACF,WAAW,CAACG,OAAO,CAACC,OAAO,CAACC,IAAI,CAAC,CAAC;AAEvCC,MAAM,CAACC,OAAO,GAAGL,IAAI;AAErB,SAASA,IAAIA,CAACM,WAAW,EAAEC,GAAG,EAAE;EAC9B,MAAMJ,IAAI,GAAGN,KAAK,CAACS,WAAW,EAAEC,GAAG,EAAER,OAAO,CAAC;EAC7CS,YAAY,CAACL,IAAI,CAAC;EAClB,OAAOA,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,YAAYA,CAACC,IAAI,EAAE;EAC1BC,MAAM,CAACC,IAAI,CAACF,IAAI,CAAC,CAACG,OAAO,CAACC,GAAG,IAAI;IAC/B,IAAIA,GAAG,KAAK,MAAM,EAAE;MAClBb,IAAI,CAACc,gBAAgB,CAACD,GAAG,EAAEJ,IAAI,CAACM,gBAAgB,CAACF,GAAG,CAAC,CAAC;IACxD,CAAC,MAAM,IAAI,OAAOJ,IAAI,CAACI,GAAG,CAAC,KAAK,UAAU,EAAE;MAC1Cb,IAAI,CAACa,GAAG,CAAC,GAAGJ,IAAI,CAACI,GAAG,CAAC,CAACG,IAAI,CAACP,IAAI,CAAC;IAClC,CAAC,MAAM;MACLT,IAAI,CAACc,gBAAgB,CAAC,IAAI,EAAE,MAAM;QAChC,OAAOL,IAAI,CAACQ,EAAE;MAChB,CAAC,CAAC;MACFjB,IAAI,CAACc,gBAAgB,CAAC,QAAQ,EAAE,MAAM;QACpC,OAAOL,IAAI,CAACS,MAAM;MACpB,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;AACJ"}},"mtime":1674865296659},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\yargs@16.2.0\\\\node_modules\\\\yargs\\\\build\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\yargs@16.2.0\\\\node_modules\\\\yargs\\\\build\\\\index.cjs\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.22.6:development":{"value":{"code":"'use strict';\n\nvar assert = require('assert');\nclass YError extends Error {\n  constructor(msg) {\n    super(msg || 'yargs error');\n    this.name = 'YError';\n    Error.captureStackTrace(this, YError);\n  }\n}\nlet previouslyVisitedConfigs = [];\nlet shim;\nfunction applyExtends(config, cwd, mergeExtends, _shim) {\n  shim = _shim;\n  let defaultConfig = {};\n  if (Object.prototype.hasOwnProperty.call(config, 'extends')) {\n    if (typeof config.extends !== 'string') return defaultConfig;\n    const isPath = /\\.json|\\..*rc$/.test(config.extends);\n    let pathToDefault = null;\n    if (!isPath) {\n      try {\n        pathToDefault = require.resolve(config.extends);\n      } catch (_err) {\n        return config;\n      }\n    } else {\n      pathToDefault = getPathToDefaultConfig(cwd, config.extends);\n    }\n    checkForCircularExtends(pathToDefault);\n    previouslyVisitedConfigs.push(pathToDefault);\n    defaultConfig = isPath ? JSON.parse(shim.readFileSync(pathToDefault, 'utf8')) : require(config.extends);\n    delete config.extends;\n    defaultConfig = applyExtends(defaultConfig, shim.path.dirname(pathToDefault), mergeExtends, shim);\n  }\n  previouslyVisitedConfigs = [];\n  return mergeExtends ? mergeDeep(defaultConfig, config) : Object.assign({}, defaultConfig, config);\n}\nfunction checkForCircularExtends(cfgPath) {\n  if (previouslyVisitedConfigs.indexOf(cfgPath) > -1) {\n    throw new YError(`Circular extended configurations: '${cfgPath}'.`);\n  }\n}\nfunction getPathToDefaultConfig(cwd, pathToExtend) {\n  return shim.path.resolve(cwd, pathToExtend);\n}\nfunction mergeDeep(config1, config2) {\n  const target = {};\n  function isObject(obj) {\n    return obj && typeof obj === 'object' && !Array.isArray(obj);\n  }\n  Object.assign(target, config1);\n  for (const key of Object.keys(config2)) {\n    if (isObject(config2[key]) && isObject(target[key])) {\n      target[key] = mergeDeep(config1[key], config2[key]);\n    } else {\n      target[key] = config2[key];\n    }\n  }\n  return target;\n}\nfunction parseCommand(cmd) {\n  const extraSpacesStrippedCommand = cmd.replace(/\\s{2,}/g, ' ');\n  const splitCommand = extraSpacesStrippedCommand.split(/\\s+(?![^[]*]|[^<]*>)/);\n  const bregex = /\\.*[\\][<>]/g;\n  const firstCommand = splitCommand.shift();\n  if (!firstCommand) throw new Error(`No command found in: ${cmd}`);\n  const parsedCommand = {\n    cmd: firstCommand.replace(bregex, ''),\n    demanded: [],\n    optional: []\n  };\n  splitCommand.forEach((cmd, i) => {\n    let variadic = false;\n    cmd = cmd.replace(/\\s/g, '');\n    if (/\\.+[\\]>]/.test(cmd) && i === splitCommand.length - 1) variadic = true;\n    if (/^\\[/.test(cmd)) {\n      parsedCommand.optional.push({\n        cmd: cmd.replace(bregex, '').split('|'),\n        variadic\n      });\n    } else {\n      parsedCommand.demanded.push({\n        cmd: cmd.replace(bregex, '').split('|'),\n        variadic\n      });\n    }\n  });\n  return parsedCommand;\n}\nconst positionName = ['first', 'second', 'third', 'fourth', 'fifth', 'sixth'];\nfunction argsert(arg1, arg2, arg3) {\n  function parseArgs() {\n    return typeof arg1 === 'object' ? [{\n      demanded: [],\n      optional: []\n    }, arg1, arg2] : [parseCommand(`cmd ${arg1}`), arg2, arg3];\n  }\n  try {\n    let position = 0;\n    const [parsed, callerArguments, _length] = parseArgs();\n    const args = [].slice.call(callerArguments);\n    while (args.length && args[args.length - 1] === undefined) args.pop();\n    const length = _length || args.length;\n    if (length < parsed.demanded.length) {\n      throw new YError(`Not enough arguments provided. Expected ${parsed.demanded.length} but received ${args.length}.`);\n    }\n    const totalCommands = parsed.demanded.length + parsed.optional.length;\n    if (length > totalCommands) {\n      throw new YError(`Too many arguments provided. Expected max ${totalCommands} but received ${length}.`);\n    }\n    parsed.demanded.forEach(demanded => {\n      const arg = args.shift();\n      const observedType = guessType(arg);\n      const matchingTypes = demanded.cmd.filter(type => type === observedType || type === '*');\n      if (matchingTypes.length === 0) argumentTypeError(observedType, demanded.cmd, position);\n      position += 1;\n    });\n    parsed.optional.forEach(optional => {\n      if (args.length === 0) return;\n      const arg = args.shift();\n      const observedType = guessType(arg);\n      const matchingTypes = optional.cmd.filter(type => type === observedType || type === '*');\n      if (matchingTypes.length === 0) argumentTypeError(observedType, optional.cmd, position);\n      position += 1;\n    });\n  } catch (err) {\n    console.warn(err.stack);\n  }\n}\nfunction guessType(arg) {\n  if (Array.isArray(arg)) {\n    return 'array';\n  } else if (arg === null) {\n    return 'null';\n  }\n  return typeof arg;\n}\nfunction argumentTypeError(observedType, allowedTypes, position) {\n  throw new YError(`Invalid ${positionName[position] || 'manyith'} argument. Expected ${allowedTypes.join(' or ')} but received ${observedType}.`);\n}\nfunction isPromise(maybePromise) {\n  return !!maybePromise && !!maybePromise.then && typeof maybePromise.then === 'function';\n}\nfunction assertNotStrictEqual(actual, expected, shim, message) {\n  shim.assert.notStrictEqual(actual, expected, message);\n}\nfunction assertSingleKey(actual, shim) {\n  shim.assert.strictEqual(typeof actual, 'string');\n}\nfunction objectKeys(object) {\n  return Object.keys(object);\n}\nfunction objFilter(original = {}, filter = () => true) {\n  const obj = {};\n  objectKeys(original).forEach(key => {\n    if (filter(key, original[key])) {\n      obj[key] = original[key];\n    }\n  });\n  return obj;\n}\nfunction globalMiddlewareFactory(globalMiddleware, context) {\n  return function (callback, applyBeforeValidation = false) {\n    argsert('<array|function> [boolean]', [callback, applyBeforeValidation], arguments.length);\n    if (Array.isArray(callback)) {\n      for (let i = 0; i < callback.length; i++) {\n        if (typeof callback[i] !== 'function') {\n          throw Error('middleware must be a function');\n        }\n        callback[i].applyBeforeValidation = applyBeforeValidation;\n      }\n      Array.prototype.push.apply(globalMiddleware, callback);\n    } else if (typeof callback === 'function') {\n      callback.applyBeforeValidation = applyBeforeValidation;\n      globalMiddleware.push(callback);\n    }\n    return context;\n  };\n}\nfunction commandMiddlewareFactory(commandMiddleware) {\n  if (!commandMiddleware) return [];\n  return commandMiddleware.map(middleware => {\n    middleware.applyBeforeValidation = false;\n    return middleware;\n  });\n}\nfunction applyMiddleware(argv, yargs, middlewares, beforeValidation) {\n  const beforeValidationError = new Error('middleware cannot return a promise when applyBeforeValidation is true');\n  return middlewares.reduce((acc, middleware) => {\n    if (middleware.applyBeforeValidation !== beforeValidation) {\n      return acc;\n    }\n    if (isPromise(acc)) {\n      return acc.then(initialObj => Promise.all([initialObj, middleware(initialObj, yargs)])).then(([initialObj, middlewareObj]) => Object.assign(initialObj, middlewareObj));\n    } else {\n      const result = middleware(acc, yargs);\n      if (beforeValidation && isPromise(result)) throw beforeValidationError;\n      return isPromise(result) ? result.then(middlewareObj => Object.assign(acc, middlewareObj)) : Object.assign(acc, result);\n    }\n  }, argv);\n}\nfunction getProcessArgvBinIndex() {\n  if (isBundledElectronApp()) return 0;\n  return 1;\n}\nfunction isBundledElectronApp() {\n  return isElectronApp() && !process.defaultApp;\n}\nfunction isElectronApp() {\n  return !!process.versions.electron;\n}\nfunction hideBin(argv) {\n  return argv.slice(getProcessArgvBinIndex() + 1);\n}\nfunction getProcessArgvBin() {\n  return process.argv[getProcessArgvBinIndex()];\n}\nvar processArgv = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  hideBin: hideBin,\n  getProcessArgvBin: getProcessArgvBin\n});\nfunction whichModule(exported) {\n  if (typeof require === 'undefined') return null;\n  for (let i = 0, files = Object.keys(require.cache), mod; i < files.length; i++) {\n    mod = require.cache[files[i]];\n    if (mod.exports === exported) return mod;\n  }\n  return null;\n}\nconst DEFAULT_MARKER = /(^\\*)|(^\\$0)/;\nfunction command(yargs, usage, validation, globalMiddleware = [], shim) {\n  const self = {};\n  let handlers = {};\n  let aliasMap = {};\n  let defaultCommand;\n  self.addHandler = function addHandler(cmd, description, builder, handler, commandMiddleware, deprecated) {\n    let aliases = [];\n    const middlewares = commandMiddlewareFactory(commandMiddleware);\n    handler = handler || (() => {});\n    if (Array.isArray(cmd)) {\n      if (isCommandAndAliases(cmd)) {\n        [cmd, ...aliases] = cmd;\n      } else {\n        for (const command of cmd) {\n          self.addHandler(command);\n        }\n      }\n    } else if (isCommandHandlerDefinition(cmd)) {\n      let command = Array.isArray(cmd.command) || typeof cmd.command === 'string' ? cmd.command : moduleName(cmd);\n      if (cmd.aliases) command = [].concat(command).concat(cmd.aliases);\n      self.addHandler(command, extractDesc(cmd), cmd.builder, cmd.handler, cmd.middlewares, cmd.deprecated);\n      return;\n    } else if (isCommandBuilderDefinition(builder)) {\n      self.addHandler([cmd].concat(aliases), description, builder.builder, builder.handler, builder.middlewares, builder.deprecated);\n      return;\n    }\n    if (typeof cmd === 'string') {\n      const parsedCommand = parseCommand(cmd);\n      aliases = aliases.map(alias => parseCommand(alias).cmd);\n      let isDefault = false;\n      const parsedAliases = [parsedCommand.cmd].concat(aliases).filter(c => {\n        if (DEFAULT_MARKER.test(c)) {\n          isDefault = true;\n          return false;\n        }\n        return true;\n      });\n      if (parsedAliases.length === 0 && isDefault) parsedAliases.push('$0');\n      if (isDefault) {\n        parsedCommand.cmd = parsedAliases[0];\n        aliases = parsedAliases.slice(1);\n        cmd = cmd.replace(DEFAULT_MARKER, parsedCommand.cmd);\n      }\n      aliases.forEach(alias => {\n        aliasMap[alias] = parsedCommand.cmd;\n      });\n      if (description !== false) {\n        usage.command(cmd, description, isDefault, aliases, deprecated);\n      }\n      handlers[parsedCommand.cmd] = {\n        original: cmd,\n        description,\n        handler,\n        builder: builder || {},\n        middlewares,\n        deprecated,\n        demanded: parsedCommand.demanded,\n        optional: parsedCommand.optional\n      };\n      if (isDefault) defaultCommand = handlers[parsedCommand.cmd];\n    }\n  };\n  self.addDirectory = function addDirectory(dir, context, req, callerFile, opts) {\n    opts = opts || {};\n    if (typeof opts.recurse !== 'boolean') opts.recurse = false;\n    if (!Array.isArray(opts.extensions)) opts.extensions = ['js'];\n    const parentVisit = typeof opts.visit === 'function' ? opts.visit : o => o;\n    opts.visit = function visit(obj, joined, filename) {\n      const visited = parentVisit(obj, joined, filename);\n      if (visited) {\n        if (~context.files.indexOf(joined)) return visited;\n        context.files.push(joined);\n        self.addHandler(visited);\n      }\n      return visited;\n    };\n    shim.requireDirectory({\n      require: req,\n      filename: callerFile\n    }, dir, opts);\n  };\n  function moduleName(obj) {\n    const mod = whichModule(obj);\n    if (!mod) throw new Error(`No command name given for module: ${shim.inspect(obj)}`);\n    return commandFromFilename(mod.filename);\n  }\n  function commandFromFilename(filename) {\n    return shim.path.basename(filename, shim.path.extname(filename));\n  }\n  function extractDesc({\n    describe,\n    description,\n    desc\n  }) {\n    for (const test of [describe, description, desc]) {\n      if (typeof test === 'string' || test === false) return test;\n      assertNotStrictEqual(test, true, shim);\n    }\n    return false;\n  }\n  self.getCommands = () => Object.keys(handlers).concat(Object.keys(aliasMap));\n  self.getCommandHandlers = () => handlers;\n  self.hasDefaultCommand = () => !!defaultCommand;\n  self.runCommand = function runCommand(command, yargs, parsed, commandIndex) {\n    let aliases = parsed.aliases;\n    const commandHandler = handlers[command] || handlers[aliasMap[command]] || defaultCommand;\n    const currentContext = yargs.getContext();\n    let numFiles = currentContext.files.length;\n    const parentCommands = currentContext.commands.slice();\n    let innerArgv = parsed.argv;\n    let positionalMap = {};\n    if (command) {\n      currentContext.commands.push(command);\n      currentContext.fullCommands.push(commandHandler.original);\n    }\n    const builder = commandHandler.builder;\n    if (isCommandBuilderCallback(builder)) {\n      const builderOutput = builder(yargs.reset(parsed.aliases));\n      const innerYargs = isYargsInstance(builderOutput) ? builderOutput : yargs;\n      if (shouldUpdateUsage(innerYargs)) {\n        innerYargs.getUsageInstance().usage(usageFromParentCommandsCommandHandler(parentCommands, commandHandler), commandHandler.description);\n      }\n      innerArgv = innerYargs._parseArgs(null, null, true, commandIndex);\n      aliases = innerYargs.parsed.aliases;\n    } else if (isCommandBuilderOptionDefinitions(builder)) {\n      const innerYargs = yargs.reset(parsed.aliases);\n      if (shouldUpdateUsage(innerYargs)) {\n        innerYargs.getUsageInstance().usage(usageFromParentCommandsCommandHandler(parentCommands, commandHandler), commandHandler.description);\n      }\n      Object.keys(commandHandler.builder).forEach(key => {\n        innerYargs.option(key, builder[key]);\n      });\n      innerArgv = innerYargs._parseArgs(null, null, true, commandIndex);\n      aliases = innerYargs.parsed.aliases;\n    }\n    if (!yargs._hasOutput()) {\n      positionalMap = populatePositionals(commandHandler, innerArgv, currentContext);\n    }\n    const middlewares = globalMiddleware.slice(0).concat(commandHandler.middlewares);\n    applyMiddleware(innerArgv, yargs, middlewares, true);\n    if (!yargs._hasOutput()) {\n      yargs._runValidation(innerArgv, aliases, positionalMap, yargs.parsed.error, !command);\n    }\n    if (commandHandler.handler && !yargs._hasOutput()) {\n      yargs._setHasOutput();\n      const populateDoubleDash = !!yargs.getOptions().configuration['populate--'];\n      yargs._postProcess(innerArgv, populateDoubleDash);\n      innerArgv = applyMiddleware(innerArgv, yargs, middlewares, false);\n      let handlerResult;\n      if (isPromise(innerArgv)) {\n        handlerResult = innerArgv.then(argv => commandHandler.handler(argv));\n      } else {\n        handlerResult = commandHandler.handler(innerArgv);\n      }\n      const handlerFinishCommand = yargs.getHandlerFinishCommand();\n      if (isPromise(handlerResult)) {\n        yargs.getUsageInstance().cacheHelpMessage();\n        handlerResult.then(value => {\n          if (handlerFinishCommand) {\n            handlerFinishCommand(value);\n          }\n        }).catch(error => {\n          try {\n            yargs.getUsageInstance().fail(null, error);\n          } catch (err) {}\n        }).then(() => {\n          yargs.getUsageInstance().clearCachedHelpMessage();\n        });\n      } else {\n        if (handlerFinishCommand) {\n          handlerFinishCommand(handlerResult);\n        }\n      }\n    }\n    if (command) {\n      currentContext.commands.pop();\n      currentContext.fullCommands.pop();\n    }\n    numFiles = currentContext.files.length - numFiles;\n    if (numFiles > 0) currentContext.files.splice(numFiles * -1, numFiles);\n    return innerArgv;\n  };\n  function shouldUpdateUsage(yargs) {\n    return !yargs.getUsageInstance().getUsageDisabled() && yargs.getUsageInstance().getUsage().length === 0;\n  }\n  function usageFromParentCommandsCommandHandler(parentCommands, commandHandler) {\n    const c = DEFAULT_MARKER.test(commandHandler.original) ? commandHandler.original.replace(DEFAULT_MARKER, '').trim() : commandHandler.original;\n    const pc = parentCommands.filter(c => {\n      return !DEFAULT_MARKER.test(c);\n    });\n    pc.push(c);\n    return `$0 ${pc.join(' ')}`;\n  }\n  self.runDefaultBuilderOn = function (yargs) {\n    assertNotStrictEqual(defaultCommand, undefined, shim);\n    if (shouldUpdateUsage(yargs)) {\n      const commandString = DEFAULT_MARKER.test(defaultCommand.original) ? defaultCommand.original : defaultCommand.original.replace(/^[^[\\]<>]*/, '$0 ');\n      yargs.getUsageInstance().usage(commandString, defaultCommand.description);\n    }\n    const builder = defaultCommand.builder;\n    if (isCommandBuilderCallback(builder)) {\n      builder(yargs);\n    } else if (!isCommandBuilderDefinition(builder)) {\n      Object.keys(builder).forEach(key => {\n        yargs.option(key, builder[key]);\n      });\n    }\n  };\n  function populatePositionals(commandHandler, argv, context) {\n    argv._ = argv._.slice(context.commands.length);\n    const demanded = commandHandler.demanded.slice(0);\n    const optional = commandHandler.optional.slice(0);\n    const positionalMap = {};\n    validation.positionalCount(demanded.length, argv._.length);\n    while (demanded.length) {\n      const demand = demanded.shift();\n      populatePositional(demand, argv, positionalMap);\n    }\n    while (optional.length) {\n      const maybe = optional.shift();\n      populatePositional(maybe, argv, positionalMap);\n    }\n    argv._ = context.commands.concat(argv._.map(a => '' + a));\n    postProcessPositionals(argv, positionalMap, self.cmdToParseOptions(commandHandler.original));\n    return positionalMap;\n  }\n  function populatePositional(positional, argv, positionalMap) {\n    const cmd = positional.cmd[0];\n    if (positional.variadic) {\n      positionalMap[cmd] = argv._.splice(0).map(String);\n    } else {\n      if (argv._.length) positionalMap[cmd] = [String(argv._.shift())];\n    }\n  }\n  function postProcessPositionals(argv, positionalMap, parseOptions) {\n    const options = Object.assign({}, yargs.getOptions());\n    options.default = Object.assign(parseOptions.default, options.default);\n    for (const key of Object.keys(parseOptions.alias)) {\n      options.alias[key] = (options.alias[key] || []).concat(parseOptions.alias[key]);\n    }\n    options.array = options.array.concat(parseOptions.array);\n    options.config = {};\n    const unparsed = [];\n    Object.keys(positionalMap).forEach(key => {\n      positionalMap[key].map(value => {\n        if (options.configuration['unknown-options-as-args']) options.key[key] = true;\n        unparsed.push(`--${key}`);\n        unparsed.push(value);\n      });\n    });\n    if (!unparsed.length) return;\n    const config = Object.assign({}, options.configuration, {\n      'populate--': true\n    });\n    const parsed = shim.Parser.detailed(unparsed, Object.assign({}, options, {\n      configuration: config\n    }));\n    if (parsed.error) {\n      yargs.getUsageInstance().fail(parsed.error.message, parsed.error);\n    } else {\n      const positionalKeys = Object.keys(positionalMap);\n      Object.keys(positionalMap).forEach(key => {\n        positionalKeys.push(...parsed.aliases[key]);\n      });\n      Object.keys(parsed.argv).forEach(key => {\n        if (positionalKeys.indexOf(key) !== -1) {\n          if (!positionalMap[key]) positionalMap[key] = parsed.argv[key];\n          argv[key] = parsed.argv[key];\n        }\n      });\n    }\n  }\n  self.cmdToParseOptions = function (cmdString) {\n    const parseOptions = {\n      array: [],\n      default: {},\n      alias: {},\n      demand: {}\n    };\n    const parsed = parseCommand(cmdString);\n    parsed.demanded.forEach(d => {\n      const [cmd, ...aliases] = d.cmd;\n      if (d.variadic) {\n        parseOptions.array.push(cmd);\n        parseOptions.default[cmd] = [];\n      }\n      parseOptions.alias[cmd] = aliases;\n      parseOptions.demand[cmd] = true;\n    });\n    parsed.optional.forEach(o => {\n      const [cmd, ...aliases] = o.cmd;\n      if (o.variadic) {\n        parseOptions.array.push(cmd);\n        parseOptions.default[cmd] = [];\n      }\n      parseOptions.alias[cmd] = aliases;\n    });\n    return parseOptions;\n  };\n  self.reset = () => {\n    handlers = {};\n    aliasMap = {};\n    defaultCommand = undefined;\n    return self;\n  };\n  const frozens = [];\n  self.freeze = () => {\n    frozens.push({\n      handlers,\n      aliasMap,\n      defaultCommand\n    });\n  };\n  self.unfreeze = () => {\n    const frozen = frozens.pop();\n    assertNotStrictEqual(frozen, undefined, shim);\n    ({\n      handlers,\n      aliasMap,\n      defaultCommand\n    } = frozen);\n  };\n  return self;\n}\nfunction isCommandBuilderDefinition(builder) {\n  return typeof builder === 'object' && !!builder.builder && typeof builder.handler === 'function';\n}\nfunction isCommandAndAliases(cmd) {\n  if (cmd.every(c => typeof c === 'string')) {\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction isCommandBuilderCallback(builder) {\n  return typeof builder === 'function';\n}\nfunction isCommandBuilderOptionDefinitions(builder) {\n  return typeof builder === 'object';\n}\nfunction isCommandHandlerDefinition(cmd) {\n  return typeof cmd === 'object' && !Array.isArray(cmd);\n}\nfunction setBlocking(blocking) {\n  if (typeof process === 'undefined') return;\n  [process.stdout, process.stderr].forEach(_stream => {\n    const stream = _stream;\n    if (stream._handle && stream.isTTY && typeof stream._handle.setBlocking === 'function') {\n      stream._handle.setBlocking(blocking);\n    }\n  });\n}\nfunction usage(yargs, y18n, shim) {\n  const __ = y18n.__;\n  const self = {};\n  const fails = [];\n  self.failFn = function failFn(f) {\n    fails.push(f);\n  };\n  let failMessage = null;\n  let showHelpOnFail = true;\n  self.showHelpOnFail = function showHelpOnFailFn(arg1 = true, arg2) {\n    function parseFunctionArgs() {\n      return typeof arg1 === 'string' ? [true, arg1] : [arg1, arg2];\n    }\n    const [enabled, message] = parseFunctionArgs();\n    failMessage = message;\n    showHelpOnFail = enabled;\n    return self;\n  };\n  let failureOutput = false;\n  self.fail = function fail(msg, err) {\n    const logger = yargs._getLoggerInstance();\n    if (fails.length) {\n      for (let i = fails.length - 1; i >= 0; --i) {\n        fails[i](msg, err, self);\n      }\n    } else {\n      if (yargs.getExitProcess()) setBlocking(true);\n      if (!failureOutput) {\n        failureOutput = true;\n        if (showHelpOnFail) {\n          yargs.showHelp('error');\n          logger.error();\n        }\n        if (msg || err) logger.error(msg || err);\n        if (failMessage) {\n          if (msg || err) logger.error('');\n          logger.error(failMessage);\n        }\n      }\n      err = err || new YError(msg);\n      if (yargs.getExitProcess()) {\n        return yargs.exit(1);\n      } else if (yargs._hasParseCallback()) {\n        return yargs.exit(1, err);\n      } else {\n        throw err;\n      }\n    }\n  };\n  let usages = [];\n  let usageDisabled = false;\n  self.usage = (msg, description) => {\n    if (msg === null) {\n      usageDisabled = true;\n      usages = [];\n      return self;\n    }\n    usageDisabled = false;\n    usages.push([msg, description || '']);\n    return self;\n  };\n  self.getUsage = () => {\n    return usages;\n  };\n  self.getUsageDisabled = () => {\n    return usageDisabled;\n  };\n  self.getPositionalGroupName = () => {\n    return __('Positionals:');\n  };\n  let examples = [];\n  self.example = (cmd, description) => {\n    examples.push([cmd, description || '']);\n  };\n  let commands = [];\n  self.command = function command(cmd, description, isDefault, aliases, deprecated = false) {\n    if (isDefault) {\n      commands = commands.map(cmdArray => {\n        cmdArray[2] = false;\n        return cmdArray;\n      });\n    }\n    commands.push([cmd, description || '', isDefault, aliases, deprecated]);\n  };\n  self.getCommands = () => commands;\n  let descriptions = {};\n  self.describe = function describe(keyOrKeys, desc) {\n    if (Array.isArray(keyOrKeys)) {\n      keyOrKeys.forEach(k => {\n        self.describe(k, desc);\n      });\n    } else if (typeof keyOrKeys === 'object') {\n      Object.keys(keyOrKeys).forEach(k => {\n        self.describe(k, keyOrKeys[k]);\n      });\n    } else {\n      descriptions[keyOrKeys] = desc;\n    }\n  };\n  self.getDescriptions = () => descriptions;\n  let epilogs = [];\n  self.epilog = msg => {\n    epilogs.push(msg);\n  };\n  let wrapSet = false;\n  let wrap;\n  self.wrap = cols => {\n    wrapSet = true;\n    wrap = cols;\n  };\n  function getWrap() {\n    if (!wrapSet) {\n      wrap = windowWidth();\n      wrapSet = true;\n    }\n    return wrap;\n  }\n  const deferY18nLookupPrefix = '__yargsString__:';\n  self.deferY18nLookup = str => deferY18nLookupPrefix + str;\n  self.help = function help() {\n    if (cachedHelpMessage) return cachedHelpMessage;\n    normalizeAliases();\n    const base$0 = yargs.customScriptName ? yargs.$0 : shim.path.basename(yargs.$0);\n    const demandedOptions = yargs.getDemandedOptions();\n    const demandedCommands = yargs.getDemandedCommands();\n    const deprecatedOptions = yargs.getDeprecatedOptions();\n    const groups = yargs.getGroups();\n    const options = yargs.getOptions();\n    let keys = [];\n    keys = keys.concat(Object.keys(descriptions));\n    keys = keys.concat(Object.keys(demandedOptions));\n    keys = keys.concat(Object.keys(demandedCommands));\n    keys = keys.concat(Object.keys(options.default));\n    keys = keys.filter(filterHiddenOptions);\n    keys = Object.keys(keys.reduce((acc, key) => {\n      if (key !== '_') acc[key] = true;\n      return acc;\n    }, {}));\n    const theWrap = getWrap();\n    const ui = shim.cliui({\n      width: theWrap,\n      wrap: !!theWrap\n    });\n    if (!usageDisabled) {\n      if (usages.length) {\n        usages.forEach(usage => {\n          ui.div(`${usage[0].replace(/\\$0/g, base$0)}`);\n          if (usage[1]) {\n            ui.div({\n              text: `${usage[1]}`,\n              padding: [1, 0, 0, 0]\n            });\n          }\n        });\n        ui.div();\n      } else if (commands.length) {\n        let u = null;\n        if (demandedCommands._) {\n          u = `${base$0} <${__('command')}>\\n`;\n        } else {\n          u = `${base$0} [${__('command')}]\\n`;\n        }\n        ui.div(`${u}`);\n      }\n    }\n    if (commands.length) {\n      ui.div(__('Commands:'));\n      const context = yargs.getContext();\n      const parentCommands = context.commands.length ? `${context.commands.join(' ')} ` : '';\n      if (yargs.getParserConfiguration()['sort-commands'] === true) {\n        commands = commands.sort((a, b) => a[0].localeCompare(b[0]));\n      }\n      commands.forEach(command => {\n        const commandString = `${base$0} ${parentCommands}${command[0].replace(/^\\$0 ?/, '')}`;\n        ui.span({\n          text: commandString,\n          padding: [0, 2, 0, 2],\n          width: maxWidth(commands, theWrap, `${base$0}${parentCommands}`) + 4\n        }, {\n          text: command[1]\n        });\n        const hints = [];\n        if (command[2]) hints.push(`[${__('default')}]`);\n        if (command[3] && command[3].length) {\n          hints.push(`[${__('aliases:')} ${command[3].join(', ')}]`);\n        }\n        if (command[4]) {\n          if (typeof command[4] === 'string') {\n            hints.push(`[${__('deprecated: %s', command[4])}]`);\n          } else {\n            hints.push(`[${__('deprecated')}]`);\n          }\n        }\n        if (hints.length) {\n          ui.div({\n            text: hints.join(' '),\n            padding: [0, 0, 0, 2],\n            align: 'right'\n          });\n        } else {\n          ui.div();\n        }\n      });\n      ui.div();\n    }\n    const aliasKeys = (Object.keys(options.alias) || []).concat(Object.keys(yargs.parsed.newAliases) || []);\n    keys = keys.filter(key => !yargs.parsed.newAliases[key] && aliasKeys.every(alias => (options.alias[alias] || []).indexOf(key) === -1));\n    const defaultGroup = __('Options:');\n    if (!groups[defaultGroup]) groups[defaultGroup] = [];\n    addUngroupedKeys(keys, options.alias, groups, defaultGroup);\n    const isLongSwitch = sw => /^--/.test(getText(sw));\n    const displayedGroups = Object.keys(groups).filter(groupName => groups[groupName].length > 0).map(groupName => {\n      const normalizedKeys = groups[groupName].filter(filterHiddenOptions).map(key => {\n        if (~aliasKeys.indexOf(key)) return key;\n        for (let i = 0, aliasKey; (aliasKey = aliasKeys[i]) !== undefined; i++) {\n          if (~(options.alias[aliasKey] || []).indexOf(key)) return aliasKey;\n        }\n        return key;\n      });\n      return {\n        groupName,\n        normalizedKeys\n      };\n    }).filter(({\n      normalizedKeys\n    }) => normalizedKeys.length > 0).map(({\n      groupName,\n      normalizedKeys\n    }) => {\n      const switches = normalizedKeys.reduce((acc, key) => {\n        acc[key] = [key].concat(options.alias[key] || []).map(sw => {\n          if (groupName === self.getPositionalGroupName()) return sw;else {\n            return (/^[0-9]$/.test(sw) ? ~options.boolean.indexOf(key) ? '-' : '--' : sw.length > 1 ? '--' : '-') + sw;\n          }\n        }).sort((sw1, sw2) => isLongSwitch(sw1) === isLongSwitch(sw2) ? 0 : isLongSwitch(sw1) ? 1 : -1).join(', ');\n        return acc;\n      }, {});\n      return {\n        groupName,\n        normalizedKeys,\n        switches\n      };\n    });\n    const shortSwitchesUsed = displayedGroups.filter(({\n      groupName\n    }) => groupName !== self.getPositionalGroupName()).some(({\n      normalizedKeys,\n      switches\n    }) => !normalizedKeys.every(key => isLongSwitch(switches[key])));\n    if (shortSwitchesUsed) {\n      displayedGroups.filter(({\n        groupName\n      }) => groupName !== self.getPositionalGroupName()).forEach(({\n        normalizedKeys,\n        switches\n      }) => {\n        normalizedKeys.forEach(key => {\n          if (isLongSwitch(switches[key])) {\n            switches[key] = addIndentation(switches[key], '-x, '.length);\n          }\n        });\n      });\n    }\n    displayedGroups.forEach(({\n      groupName,\n      normalizedKeys,\n      switches\n    }) => {\n      ui.div(groupName);\n      normalizedKeys.forEach(key => {\n        const kswitch = switches[key];\n        let desc = descriptions[key] || '';\n        let type = null;\n        if (~desc.lastIndexOf(deferY18nLookupPrefix)) desc = __(desc.substring(deferY18nLookupPrefix.length));\n        if (~options.boolean.indexOf(key)) type = `[${__('boolean')}]`;\n        if (~options.count.indexOf(key)) type = `[${__('count')}]`;\n        if (~options.string.indexOf(key)) type = `[${__('string')}]`;\n        if (~options.normalize.indexOf(key)) type = `[${__('string')}]`;\n        if (~options.array.indexOf(key)) type = `[${__('array')}]`;\n        if (~options.number.indexOf(key)) type = `[${__('number')}]`;\n        const deprecatedExtra = deprecated => typeof deprecated === 'string' ? `[${__('deprecated: %s', deprecated)}]` : `[${__('deprecated')}]`;\n        const extra = [key in deprecatedOptions ? deprecatedExtra(deprecatedOptions[key]) : null, type, key in demandedOptions ? `[${__('required')}]` : null, options.choices && options.choices[key] ? `[${__('choices:')} ${self.stringifiedValues(options.choices[key])}]` : null, defaultString(options.default[key], options.defaultDescription[key])].filter(Boolean).join(' ');\n        ui.span({\n          text: getText(kswitch),\n          padding: [0, 2, 0, 2 + getIndentation(kswitch)],\n          width: maxWidth(switches, theWrap) + 4\n        }, desc);\n        if (extra) ui.div({\n          text: extra,\n          padding: [0, 0, 0, 2],\n          align: 'right'\n        });else ui.div();\n      });\n      ui.div();\n    });\n    if (examples.length) {\n      ui.div(__('Examples:'));\n      examples.forEach(example => {\n        example[0] = example[0].replace(/\\$0/g, base$0);\n      });\n      examples.forEach(example => {\n        if (example[1] === '') {\n          ui.div({\n            text: example[0],\n            padding: [0, 2, 0, 2]\n          });\n        } else {\n          ui.div({\n            text: example[0],\n            padding: [0, 2, 0, 2],\n            width: maxWidth(examples, theWrap) + 4\n          }, {\n            text: example[1]\n          });\n        }\n      });\n      ui.div();\n    }\n    if (epilogs.length > 0) {\n      const e = epilogs.map(epilog => epilog.replace(/\\$0/g, base$0)).join('\\n');\n      ui.div(`${e}\\n`);\n    }\n    return ui.toString().replace(/\\s*$/, '');\n  };\n  function maxWidth(table, theWrap, modifier) {\n    let width = 0;\n    if (!Array.isArray(table)) {\n      table = Object.values(table).map(v => [v]);\n    }\n    table.forEach(v => {\n      width = Math.max(shim.stringWidth(modifier ? `${modifier} ${getText(v[0])}` : getText(v[0])) + getIndentation(v[0]), width);\n    });\n    if (theWrap) width = Math.min(width, parseInt((theWrap * 0.5).toString(), 10));\n    return width;\n  }\n  function normalizeAliases() {\n    const demandedOptions = yargs.getDemandedOptions();\n    const options = yargs.getOptions();\n    (Object.keys(options.alias) || []).forEach(key => {\n      options.alias[key].forEach(alias => {\n        if (descriptions[alias]) self.describe(key, descriptions[alias]);\n        if (alias in demandedOptions) yargs.demandOption(key, demandedOptions[alias]);\n        if (~options.boolean.indexOf(alias)) yargs.boolean(key);\n        if (~options.count.indexOf(alias)) yargs.count(key);\n        if (~options.string.indexOf(alias)) yargs.string(key);\n        if (~options.normalize.indexOf(alias)) yargs.normalize(key);\n        if (~options.array.indexOf(alias)) yargs.array(key);\n        if (~options.number.indexOf(alias)) yargs.number(key);\n      });\n    });\n  }\n  let cachedHelpMessage;\n  self.cacheHelpMessage = function () {\n    cachedHelpMessage = this.help();\n  };\n  self.clearCachedHelpMessage = function () {\n    cachedHelpMessage = undefined;\n  };\n  function addUngroupedKeys(keys, aliases, groups, defaultGroup) {\n    let groupedKeys = [];\n    let toCheck = null;\n    Object.keys(groups).forEach(group => {\n      groupedKeys = groupedKeys.concat(groups[group]);\n    });\n    keys.forEach(key => {\n      toCheck = [key].concat(aliases[key]);\n      if (!toCheck.some(k => groupedKeys.indexOf(k) !== -1)) {\n        groups[defaultGroup].push(key);\n      }\n    });\n    return groupedKeys;\n  }\n  function filterHiddenOptions(key) {\n    return yargs.getOptions().hiddenOptions.indexOf(key) < 0 || yargs.parsed.argv[yargs.getOptions().showHiddenOpt];\n  }\n  self.showHelp = level => {\n    const logger = yargs._getLoggerInstance();\n    if (!level) level = 'error';\n    const emit = typeof level === 'function' ? level : logger[level];\n    emit(self.help());\n  };\n  self.functionDescription = fn => {\n    const description = fn.name ? shim.Parser.decamelize(fn.name, '-') : __('generated-value');\n    return ['(', description, ')'].join('');\n  };\n  self.stringifiedValues = function stringifiedValues(values, separator) {\n    let string = '';\n    const sep = separator || ', ';\n    const array = [].concat(values);\n    if (!values || !array.length) return string;\n    array.forEach(value => {\n      if (string.length) string += sep;\n      string += JSON.stringify(value);\n    });\n    return string;\n  };\n  function defaultString(value, defaultDescription) {\n    let string = `[${__('default:')} `;\n    if (value === undefined && !defaultDescription) return null;\n    if (defaultDescription) {\n      string += defaultDescription;\n    } else {\n      switch (typeof value) {\n        case 'string':\n          string += `\"${value}\"`;\n          break;\n        case 'object':\n          string += JSON.stringify(value);\n          break;\n        default:\n          string += value;\n      }\n    }\n    return `${string}]`;\n  }\n  function windowWidth() {\n    const maxWidth = 80;\n    if (shim.process.stdColumns) {\n      return Math.min(maxWidth, shim.process.stdColumns);\n    } else {\n      return maxWidth;\n    }\n  }\n  let version = null;\n  self.version = ver => {\n    version = ver;\n  };\n  self.showVersion = () => {\n    const logger = yargs._getLoggerInstance();\n    logger.log(version);\n  };\n  self.reset = function reset(localLookup) {\n    failMessage = null;\n    failureOutput = false;\n    usages = [];\n    usageDisabled = false;\n    epilogs = [];\n    examples = [];\n    commands = [];\n    descriptions = objFilter(descriptions, k => !localLookup[k]);\n    return self;\n  };\n  const frozens = [];\n  self.freeze = function freeze() {\n    frozens.push({\n      failMessage,\n      failureOutput,\n      usages,\n      usageDisabled,\n      epilogs,\n      examples,\n      commands,\n      descriptions\n    });\n  };\n  self.unfreeze = function unfreeze() {\n    const frozen = frozens.pop();\n    assertNotStrictEqual(frozen, undefined, shim);\n    ({\n      failMessage,\n      failureOutput,\n      usages,\n      usageDisabled,\n      epilogs,\n      examples,\n      commands,\n      descriptions\n    } = frozen);\n  };\n  return self;\n}\nfunction isIndentedText(text) {\n  return typeof text === 'object';\n}\nfunction addIndentation(text, indent) {\n  return isIndentedText(text) ? {\n    text: text.text,\n    indentation: text.indentation + indent\n  } : {\n    text,\n    indentation: indent\n  };\n}\nfunction getIndentation(text) {\n  return isIndentedText(text) ? text.indentation : 0;\n}\nfunction getText(text) {\n  return isIndentedText(text) ? text.text : text;\n}\nconst completionShTemplate = `###-begin-{{app_name}}-completions-###\n#\n# yargs command completion script\n#\n# Installation: {{app_path}} {{completion_command}} >> ~/.bashrc\n#    or {{app_path}} {{completion_command}} >> ~/.bash_profile on OSX.\n#\n_yargs_completions()\n{\n    local cur_word args type_list\n\n    cur_word=\"\\${COMP_WORDS[COMP_CWORD]}\"\n    args=(\"\\${COMP_WORDS[@]}\")\n\n    # ask yargs to generate completions.\n    type_list=$({{app_path}} --get-yargs-completions \"\\${args[@]}\")\n\n    COMPREPLY=( $(compgen -W \"\\${type_list}\" -- \\${cur_word}) )\n\n    # if no match was found, fall back to filename completion\n    if [ \\${#COMPREPLY[@]} -eq 0 ]; then\n      COMPREPLY=()\n    fi\n\n    return 0\n}\ncomplete -o default -F _yargs_completions {{app_name}}\n###-end-{{app_name}}-completions-###\n`;\nconst completionZshTemplate = `###-begin-{{app_name}}-completions-###\n#\n# yargs command completion script\n#\n# Installation: {{app_path}} {{completion_command}} >> ~/.zshrc\n#    or {{app_path}} {{completion_command}} >> ~/.zsh_profile on OSX.\n#\n_{{app_name}}_yargs_completions()\n{\n  local reply\n  local si=$IFS\n  IFS=$'\\n' reply=($(COMP_CWORD=\"$((CURRENT-1))\" COMP_LINE=\"$BUFFER\" COMP_POINT=\"$CURSOR\" {{app_path}} --get-yargs-completions \"\\${words[@]}\"))\n  IFS=$si\n  _describe 'values' reply\n}\ncompdef _{{app_name}}_yargs_completions {{app_name}}\n###-end-{{app_name}}-completions-###\n`;\nfunction completion(yargs, usage, command, shim) {\n  const self = {\n    completionKey: 'get-yargs-completions'\n  };\n  let aliases;\n  self.setParsed = function setParsed(parsed) {\n    aliases = parsed.aliases;\n  };\n  const zshShell = shim.getEnv('SHELL') && shim.getEnv('SHELL').indexOf('zsh') !== -1 || shim.getEnv('ZSH_NAME') && shim.getEnv('ZSH_NAME').indexOf('zsh') !== -1;\n  self.getCompletion = function getCompletion(args, done) {\n    const completions = [];\n    const current = args.length ? args[args.length - 1] : '';\n    const argv = yargs.parse(args, true);\n    const parentCommands = yargs.getContext().commands;\n    function runCompletionFunction(argv) {\n      assertNotStrictEqual(completionFunction, null, shim);\n      if (isSyncCompletionFunction(completionFunction)) {\n        const result = completionFunction(current, argv);\n        if (isPromise(result)) {\n          return result.then(list => {\n            shim.process.nextTick(() => {\n              done(list);\n            });\n          }).catch(err => {\n            shim.process.nextTick(() => {\n              throw err;\n            });\n          });\n        }\n        return done(result);\n      } else {\n        return completionFunction(current, argv, completions => {\n          done(completions);\n        });\n      }\n    }\n    if (completionFunction) {\n      return isPromise(argv) ? argv.then(runCompletionFunction) : runCompletionFunction(argv);\n    }\n    const handlers = command.getCommandHandlers();\n    for (let i = 0, ii = args.length; i < ii; ++i) {\n      if (handlers[args[i]] && handlers[args[i]].builder) {\n        const builder = handlers[args[i]].builder;\n        if (isCommandBuilderCallback(builder)) {\n          const y = yargs.reset();\n          builder(y);\n          return y.argv;\n        }\n      }\n    }\n    if (!current.match(/^-/) && parentCommands[parentCommands.length - 1] !== current) {\n      usage.getCommands().forEach(usageCommand => {\n        const commandName = parseCommand(usageCommand[0]).cmd;\n        if (args.indexOf(commandName) === -1) {\n          if (!zshShell) {\n            completions.push(commandName);\n          } else {\n            const desc = usageCommand[1] || '';\n            completions.push(commandName.replace(/:/g, '\\\\:') + ':' + desc);\n          }\n        }\n      });\n    }\n    if (current.match(/^-/) || current === '' && completions.length === 0) {\n      const descs = usage.getDescriptions();\n      const options = yargs.getOptions();\n      Object.keys(options.key).forEach(key => {\n        const negable = !!options.configuration['boolean-negation'] && options.boolean.includes(key);\n        let keyAndAliases = [key].concat(aliases[key] || []);\n        if (negable) keyAndAliases = keyAndAliases.concat(keyAndAliases.map(key => `no-${key}`));\n        function completeOptionKey(key) {\n          const notInArgs = keyAndAliases.every(val => args.indexOf(`--${val}`) === -1);\n          if (notInArgs) {\n            const startsByTwoDashes = s => /^--/.test(s);\n            const isShortOption = s => /^[^0-9]$/.test(s);\n            const dashes = !startsByTwoDashes(current) && isShortOption(key) ? '-' : '--';\n            if (!zshShell) {\n              completions.push(dashes + key);\n            } else {\n              const desc = descs[key] || '';\n              completions.push(dashes + `${key.replace(/:/g, '\\\\:')}:${desc.replace('__yargsString__:', '')}`);\n            }\n          }\n        }\n        completeOptionKey(key);\n        if (negable && !!options.default[key]) completeOptionKey(`no-${key}`);\n      });\n    }\n    done(completions);\n  };\n  self.generateCompletionScript = function generateCompletionScript($0, cmd) {\n    let script = zshShell ? completionZshTemplate : completionShTemplate;\n    const name = shim.path.basename($0);\n    if ($0.match(/\\.js$/)) $0 = `./${$0}`;\n    script = script.replace(/{{app_name}}/g, name);\n    script = script.replace(/{{completion_command}}/g, cmd);\n    return script.replace(/{{app_path}}/g, $0);\n  };\n  let completionFunction = null;\n  self.registerFunction = fn => {\n    completionFunction = fn;\n  };\n  return self;\n}\nfunction isSyncCompletionFunction(completionFunction) {\n  return completionFunction.length < 3;\n}\nfunction levenshtein(a, b) {\n  if (a.length === 0) return b.length;\n  if (b.length === 0) return a.length;\n  const matrix = [];\n  let i;\n  for (i = 0; i <= b.length; i++) {\n    matrix[i] = [i];\n  }\n  let j;\n  for (j = 0; j <= a.length; j++) {\n    matrix[0][j] = j;\n  }\n  for (i = 1; i <= b.length; i++) {\n    for (j = 1; j <= a.length; j++) {\n      if (b.charAt(i - 1) === a.charAt(j - 1)) {\n        matrix[i][j] = matrix[i - 1][j - 1];\n      } else {\n        matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, Math.min(matrix[i][j - 1] + 1, matrix[i - 1][j] + 1));\n      }\n    }\n  }\n  return matrix[b.length][a.length];\n}\nconst specialKeys = ['$0', '--', '_'];\nfunction validation(yargs, usage, y18n, shim) {\n  const __ = y18n.__;\n  const __n = y18n.__n;\n  const self = {};\n  self.nonOptionCount = function nonOptionCount(argv) {\n    const demandedCommands = yargs.getDemandedCommands();\n    const positionalCount = argv._.length + (argv['--'] ? argv['--'].length : 0);\n    const _s = positionalCount - yargs.getContext().commands.length;\n    if (demandedCommands._ && (_s < demandedCommands._.min || _s > demandedCommands._.max)) {\n      if (_s < demandedCommands._.min) {\n        if (demandedCommands._.minMsg !== undefined) {\n          usage.fail(demandedCommands._.minMsg ? demandedCommands._.minMsg.replace(/\\$0/g, _s.toString()).replace(/\\$1/, demandedCommands._.min.toString()) : null);\n        } else {\n          usage.fail(__n('Not enough non-option arguments: got %s, need at least %s', 'Not enough non-option arguments: got %s, need at least %s', _s, _s.toString(), demandedCommands._.min.toString()));\n        }\n      } else if (_s > demandedCommands._.max) {\n        if (demandedCommands._.maxMsg !== undefined) {\n          usage.fail(demandedCommands._.maxMsg ? demandedCommands._.maxMsg.replace(/\\$0/g, _s.toString()).replace(/\\$1/, demandedCommands._.max.toString()) : null);\n        } else {\n          usage.fail(__n('Too many non-option arguments: got %s, maximum of %s', 'Too many non-option arguments: got %s, maximum of %s', _s, _s.toString(), demandedCommands._.max.toString()));\n        }\n      }\n    }\n  };\n  self.positionalCount = function positionalCount(required, observed) {\n    if (observed < required) {\n      usage.fail(__n('Not enough non-option arguments: got %s, need at least %s', 'Not enough non-option arguments: got %s, need at least %s', observed, observed + '', required + ''));\n    }\n  };\n  self.requiredArguments = function requiredArguments(argv) {\n    const demandedOptions = yargs.getDemandedOptions();\n    let missing = null;\n    for (const key of Object.keys(demandedOptions)) {\n      if (!Object.prototype.hasOwnProperty.call(argv, key) || typeof argv[key] === 'undefined') {\n        missing = missing || {};\n        missing[key] = demandedOptions[key];\n      }\n    }\n    if (missing) {\n      const customMsgs = [];\n      for (const key of Object.keys(missing)) {\n        const msg = missing[key];\n        if (msg && customMsgs.indexOf(msg) < 0) {\n          customMsgs.push(msg);\n        }\n      }\n      const customMsg = customMsgs.length ? `\\n${customMsgs.join('\\n')}` : '';\n      usage.fail(__n('Missing required argument: %s', 'Missing required arguments: %s', Object.keys(missing).length, Object.keys(missing).join(', ') + customMsg));\n    }\n  };\n  self.unknownArguments = function unknownArguments(argv, aliases, positionalMap, isDefaultCommand, checkPositionals = true) {\n    const commandKeys = yargs.getCommandInstance().getCommands();\n    const unknown = [];\n    const currentContext = yargs.getContext();\n    Object.keys(argv).forEach(key => {\n      if (specialKeys.indexOf(key) === -1 && !Object.prototype.hasOwnProperty.call(positionalMap, key) && !Object.prototype.hasOwnProperty.call(yargs._getParseContext(), key) && !self.isValidAndSomeAliasIsNotNew(key, aliases)) {\n        unknown.push(key);\n      }\n    });\n    if (checkPositionals && (currentContext.commands.length > 0 || commandKeys.length > 0 || isDefaultCommand)) {\n      argv._.slice(currentContext.commands.length).forEach(key => {\n        if (commandKeys.indexOf('' + key) === -1) {\n          unknown.push('' + key);\n        }\n      });\n    }\n    if (unknown.length > 0) {\n      usage.fail(__n('Unknown argument: %s', 'Unknown arguments: %s', unknown.length, unknown.join(', ')));\n    }\n  };\n  self.unknownCommands = function unknownCommands(argv) {\n    const commandKeys = yargs.getCommandInstance().getCommands();\n    const unknown = [];\n    const currentContext = yargs.getContext();\n    if (currentContext.commands.length > 0 || commandKeys.length > 0) {\n      argv._.slice(currentContext.commands.length).forEach(key => {\n        if (commandKeys.indexOf('' + key) === -1) {\n          unknown.push('' + key);\n        }\n      });\n    }\n    if (unknown.length > 0) {\n      usage.fail(__n('Unknown command: %s', 'Unknown commands: %s', unknown.length, unknown.join(', ')));\n      return true;\n    } else {\n      return false;\n    }\n  };\n  self.isValidAndSomeAliasIsNotNew = function isValidAndSomeAliasIsNotNew(key, aliases) {\n    if (!Object.prototype.hasOwnProperty.call(aliases, key)) {\n      return false;\n    }\n    const newAliases = yargs.parsed.newAliases;\n    for (const a of [key, ...aliases[key]]) {\n      if (!Object.prototype.hasOwnProperty.call(newAliases, a) || !newAliases[key]) {\n        return true;\n      }\n    }\n    return false;\n  };\n  self.limitedChoices = function limitedChoices(argv) {\n    const options = yargs.getOptions();\n    const invalid = {};\n    if (!Object.keys(options.choices).length) return;\n    Object.keys(argv).forEach(key => {\n      if (specialKeys.indexOf(key) === -1 && Object.prototype.hasOwnProperty.call(options.choices, key)) {\n        [].concat(argv[key]).forEach(value => {\n          if (options.choices[key].indexOf(value) === -1 && value !== undefined) {\n            invalid[key] = (invalid[key] || []).concat(value);\n          }\n        });\n      }\n    });\n    const invalidKeys = Object.keys(invalid);\n    if (!invalidKeys.length) return;\n    let msg = __('Invalid values:');\n    invalidKeys.forEach(key => {\n      msg += `\\n  ${__('Argument: %s, Given: %s, Choices: %s', key, usage.stringifiedValues(invalid[key]), usage.stringifiedValues(options.choices[key]))}`;\n    });\n    usage.fail(msg);\n  };\n  let checks = [];\n  self.check = function check(f, global) {\n    checks.push({\n      func: f,\n      global\n    });\n  };\n  self.customChecks = function customChecks(argv, aliases) {\n    for (let i = 0, f; (f = checks[i]) !== undefined; i++) {\n      const func = f.func;\n      let result = null;\n      try {\n        result = func(argv, aliases);\n      } catch (err) {\n        usage.fail(err.message ? err.message : err, err);\n        continue;\n      }\n      if (!result) {\n        usage.fail(__('Argument check failed: %s', func.toString()));\n      } else if (typeof result === 'string' || result instanceof Error) {\n        usage.fail(result.toString(), result);\n      }\n    }\n  };\n  let implied = {};\n  self.implies = function implies(key, value) {\n    argsert('<string|object> [array|number|string]', [key, value], arguments.length);\n    if (typeof key === 'object') {\n      Object.keys(key).forEach(k => {\n        self.implies(k, key[k]);\n      });\n    } else {\n      yargs.global(key);\n      if (!implied[key]) {\n        implied[key] = [];\n      }\n      if (Array.isArray(value)) {\n        value.forEach(i => self.implies(key, i));\n      } else {\n        assertNotStrictEqual(value, undefined, shim);\n        implied[key].push(value);\n      }\n    }\n  };\n  self.getImplied = function getImplied() {\n    return implied;\n  };\n  function keyExists(argv, val) {\n    const num = Number(val);\n    val = isNaN(num) ? val : num;\n    if (typeof val === 'number') {\n      val = argv._.length >= val;\n    } else if (val.match(/^--no-.+/)) {\n      val = val.match(/^--no-(.+)/)[1];\n      val = !argv[val];\n    } else {\n      val = argv[val];\n    }\n    return val;\n  }\n  self.implications = function implications(argv) {\n    const implyFail = [];\n    Object.keys(implied).forEach(key => {\n      const origKey = key;\n      (implied[key] || []).forEach(value => {\n        let key = origKey;\n        const origValue = value;\n        key = keyExists(argv, key);\n        value = keyExists(argv, value);\n        if (key && !value) {\n          implyFail.push(` ${origKey} -> ${origValue}`);\n        }\n      });\n    });\n    if (implyFail.length) {\n      let msg = `${__('Implications failed:')}\\n`;\n      implyFail.forEach(value => {\n        msg += value;\n      });\n      usage.fail(msg);\n    }\n  };\n  let conflicting = {};\n  self.conflicts = function conflicts(key, value) {\n    argsert('<string|object> [array|string]', [key, value], arguments.length);\n    if (typeof key === 'object') {\n      Object.keys(key).forEach(k => {\n        self.conflicts(k, key[k]);\n      });\n    } else {\n      yargs.global(key);\n      if (!conflicting[key]) {\n        conflicting[key] = [];\n      }\n      if (Array.isArray(value)) {\n        value.forEach(i => self.conflicts(key, i));\n      } else {\n        conflicting[key].push(value);\n      }\n    }\n  };\n  self.getConflicting = () => conflicting;\n  self.conflicting = function conflictingFn(argv) {\n    Object.keys(argv).forEach(key => {\n      if (conflicting[key]) {\n        conflicting[key].forEach(value => {\n          if (value && argv[key] !== undefined && argv[value] !== undefined) {\n            usage.fail(__('Arguments %s and %s are mutually exclusive', key, value));\n          }\n        });\n      }\n    });\n  };\n  self.recommendCommands = function recommendCommands(cmd, potentialCommands) {\n    const threshold = 3;\n    potentialCommands = potentialCommands.sort((a, b) => b.length - a.length);\n    let recommended = null;\n    let bestDistance = Infinity;\n    for (let i = 0, candidate; (candidate = potentialCommands[i]) !== undefined; i++) {\n      const d = levenshtein(cmd, candidate);\n      if (d <= threshold && d < bestDistance) {\n        bestDistance = d;\n        recommended = candidate;\n      }\n    }\n    if (recommended) usage.fail(__('Did you mean %s?', recommended));\n  };\n  self.reset = function reset(localLookup) {\n    implied = objFilter(implied, k => !localLookup[k]);\n    conflicting = objFilter(conflicting, k => !localLookup[k]);\n    checks = checks.filter(c => c.global);\n    return self;\n  };\n  const frozens = [];\n  self.freeze = function freeze() {\n    frozens.push({\n      implied,\n      checks,\n      conflicting\n    });\n  };\n  self.unfreeze = function unfreeze() {\n    const frozen = frozens.pop();\n    assertNotStrictEqual(frozen, undefined, shim);\n    ({\n      implied,\n      checks,\n      conflicting\n    } = frozen);\n  };\n  return self;\n}\nlet shim$1;\nfunction YargsWithShim(_shim) {\n  shim$1 = _shim;\n  return Yargs;\n}\nfunction Yargs(processArgs = [], cwd = shim$1.process.cwd(), parentRequire) {\n  const self = {};\n  let command$1;\n  let completion$1 = null;\n  let groups = {};\n  const globalMiddleware = [];\n  let output = '';\n  const preservedGroups = {};\n  let usage$1;\n  let validation$1;\n  let handlerFinishCommand = null;\n  const y18n = shim$1.y18n;\n  self.middleware = globalMiddlewareFactory(globalMiddleware, self);\n  self.scriptName = function (scriptName) {\n    self.customScriptName = true;\n    self.$0 = scriptName;\n    return self;\n  };\n  let default$0;\n  if (/\\b(node|iojs|electron)(\\.exe)?$/.test(shim$1.process.argv()[0])) {\n    default$0 = shim$1.process.argv().slice(1, 2);\n  } else {\n    default$0 = shim$1.process.argv().slice(0, 1);\n  }\n  self.$0 = default$0.map(x => {\n    const b = rebase(cwd, x);\n    return x.match(/^(\\/|([a-zA-Z]:)?\\\\)/) && b.length < x.length ? b : x;\n  }).join(' ').trim();\n  if (shim$1.getEnv('_') && shim$1.getProcessArgvBin() === shim$1.getEnv('_')) {\n    self.$0 = shim$1.getEnv('_').replace(`${shim$1.path.dirname(shim$1.process.execPath())}/`, '');\n  }\n  const context = {\n    resets: -1,\n    commands: [],\n    fullCommands: [],\n    files: []\n  };\n  self.getContext = () => context;\n  let hasOutput = false;\n  let exitError = null;\n  self.exit = (code, err) => {\n    hasOutput = true;\n    exitError = err;\n    if (exitProcess) shim$1.process.exit(code);\n  };\n  let completionCommand = null;\n  self.completion = function (cmd, desc, fn) {\n    argsert('[string] [string|boolean|function] [function]', [cmd, desc, fn], arguments.length);\n    if (typeof desc === 'function') {\n      fn = desc;\n      desc = undefined;\n    }\n    completionCommand = cmd || completionCommand || 'completion';\n    if (!desc && desc !== false) {\n      desc = 'generate completion script';\n    }\n    self.command(completionCommand, desc);\n    if (fn) completion$1.registerFunction(fn);\n    return self;\n  };\n  let options;\n  self.resetOptions = self.reset = function resetOptions(aliases = {}) {\n    context.resets++;\n    options = options || {};\n    const tmpOptions = {};\n    tmpOptions.local = options.local ? options.local : [];\n    tmpOptions.configObjects = options.configObjects ? options.configObjects : [];\n    const localLookup = {};\n    tmpOptions.local.forEach(l => {\n      localLookup[l] = true;\n      (aliases[l] || []).forEach(a => {\n        localLookup[a] = true;\n      });\n    });\n    Object.assign(preservedGroups, Object.keys(groups).reduce((acc, groupName) => {\n      const keys = groups[groupName].filter(key => !(key in localLookup));\n      if (keys.length > 0) {\n        acc[groupName] = keys;\n      }\n      return acc;\n    }, {}));\n    groups = {};\n    const arrayOptions = ['array', 'boolean', 'string', 'skipValidation', 'count', 'normalize', 'number', 'hiddenOptions'];\n    const objectOptions = ['narg', 'key', 'alias', 'default', 'defaultDescription', 'config', 'choices', 'demandedOptions', 'demandedCommands', 'coerce', 'deprecatedOptions'];\n    arrayOptions.forEach(k => {\n      tmpOptions[k] = (options[k] || []).filter(k => !localLookup[k]);\n    });\n    objectOptions.forEach(k => {\n      tmpOptions[k] = objFilter(options[k], k => !localLookup[k]);\n    });\n    tmpOptions.envPrefix = options.envPrefix;\n    options = tmpOptions;\n    usage$1 = usage$1 ? usage$1.reset(localLookup) : usage(self, y18n, shim$1);\n    validation$1 = validation$1 ? validation$1.reset(localLookup) : validation(self, usage$1, y18n, shim$1);\n    command$1 = command$1 ? command$1.reset() : command(self, usage$1, validation$1, globalMiddleware, shim$1);\n    if (!completion$1) completion$1 = completion(self, usage$1, command$1, shim$1);\n    completionCommand = null;\n    output = '';\n    exitError = null;\n    hasOutput = false;\n    self.parsed = false;\n    return self;\n  };\n  self.resetOptions();\n  const frozens = [];\n  function freeze() {\n    frozens.push({\n      options,\n      configObjects: options.configObjects.slice(0),\n      exitProcess,\n      groups,\n      strict,\n      strictCommands,\n      strictOptions,\n      completionCommand,\n      output,\n      exitError,\n      hasOutput,\n      parsed: self.parsed,\n      parseFn,\n      parseContext,\n      handlerFinishCommand\n    });\n    usage$1.freeze();\n    validation$1.freeze();\n    command$1.freeze();\n  }\n  function unfreeze() {\n    const frozen = frozens.pop();\n    assertNotStrictEqual(frozen, undefined, shim$1);\n    let configObjects;\n    ({\n      options,\n      configObjects,\n      exitProcess,\n      groups,\n      output,\n      exitError,\n      hasOutput,\n      parsed: self.parsed,\n      strict,\n      strictCommands,\n      strictOptions,\n      completionCommand,\n      parseFn,\n      parseContext,\n      handlerFinishCommand\n    } = frozen);\n    options.configObjects = configObjects;\n    usage$1.unfreeze();\n    validation$1.unfreeze();\n    command$1.unfreeze();\n  }\n  self.boolean = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('boolean', keys);\n    return self;\n  };\n  self.array = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('array', keys);\n    return self;\n  };\n  self.number = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('number', keys);\n    return self;\n  };\n  self.normalize = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('normalize', keys);\n    return self;\n  };\n  self.count = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('count', keys);\n    return self;\n  };\n  self.string = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('string', keys);\n    return self;\n  };\n  self.requiresArg = function (keys) {\n    argsert('<array|string|object> [number]', [keys], arguments.length);\n    if (typeof keys === 'string' && options.narg[keys]) {\n      return self;\n    } else {\n      populateParserHintSingleValueDictionary(self.requiresArg, 'narg', keys, NaN);\n    }\n    return self;\n  };\n  self.skipValidation = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('skipValidation', keys);\n    return self;\n  };\n  function populateParserHintArray(type, keys) {\n    keys = [].concat(keys);\n    keys.forEach(key => {\n      key = sanitizeKey(key);\n      options[type].push(key);\n    });\n  }\n  self.nargs = function (key, value) {\n    argsert('<string|object|array> [number]', [key, value], arguments.length);\n    populateParserHintSingleValueDictionary(self.nargs, 'narg', key, value);\n    return self;\n  };\n  self.choices = function (key, value) {\n    argsert('<object|string|array> [string|array]', [key, value], arguments.length);\n    populateParserHintArrayDictionary(self.choices, 'choices', key, value);\n    return self;\n  };\n  self.alias = function (key, value) {\n    argsert('<object|string|array> [string|array]', [key, value], arguments.length);\n    populateParserHintArrayDictionary(self.alias, 'alias', key, value);\n    return self;\n  };\n  self.default = self.defaults = function (key, value, defaultDescription) {\n    argsert('<object|string|array> [*] [string]', [key, value, defaultDescription], arguments.length);\n    if (defaultDescription) {\n      assertSingleKey(key, shim$1);\n      options.defaultDescription[key] = defaultDescription;\n    }\n    if (typeof value === 'function') {\n      assertSingleKey(key, shim$1);\n      if (!options.defaultDescription[key]) options.defaultDescription[key] = usage$1.functionDescription(value);\n      value = value.call();\n    }\n    populateParserHintSingleValueDictionary(self.default, 'default', key, value);\n    return self;\n  };\n  self.describe = function (key, desc) {\n    argsert('<object|string|array> [string]', [key, desc], arguments.length);\n    setKey(key, true);\n    usage$1.describe(key, desc);\n    return self;\n  };\n  function setKey(key, set) {\n    populateParserHintSingleValueDictionary(setKey, 'key', key, set);\n    return self;\n  }\n  function demandOption(keys, msg) {\n    argsert('<object|string|array> [string]', [keys, msg], arguments.length);\n    populateParserHintSingleValueDictionary(self.demandOption, 'demandedOptions', keys, msg);\n    return self;\n  }\n  self.demandOption = demandOption;\n  self.coerce = function (keys, value) {\n    argsert('<object|string|array> [function]', [keys, value], arguments.length);\n    populateParserHintSingleValueDictionary(self.coerce, 'coerce', keys, value);\n    return self;\n  };\n  function populateParserHintSingleValueDictionary(builder, type, key, value) {\n    populateParserHintDictionary(builder, type, key, value, (type, key, value) => {\n      options[type][key] = value;\n    });\n  }\n  function populateParserHintArrayDictionary(builder, type, key, value) {\n    populateParserHintDictionary(builder, type, key, value, (type, key, value) => {\n      options[type][key] = (options[type][key] || []).concat(value);\n    });\n  }\n  function populateParserHintDictionary(builder, type, key, value, singleKeyHandler) {\n    if (Array.isArray(key)) {\n      key.forEach(k => {\n        builder(k, value);\n      });\n    } else if ((key => typeof key === 'object')(key)) {\n      for (const k of objectKeys(key)) {\n        builder(k, key[k]);\n      }\n    } else {\n      singleKeyHandler(type, sanitizeKey(key), value);\n    }\n  }\n  function sanitizeKey(key) {\n    if (key === '__proto__') return '___proto___';\n    return key;\n  }\n  function deleteFromParserHintObject(optionKey) {\n    objectKeys(options).forEach(hintKey => {\n      if ((key => key === 'configObjects')(hintKey)) return;\n      const hint = options[hintKey];\n      if (Array.isArray(hint)) {\n        if (~hint.indexOf(optionKey)) hint.splice(hint.indexOf(optionKey), 1);\n      } else if (typeof hint === 'object') {\n        delete hint[optionKey];\n      }\n    });\n    delete usage$1.getDescriptions()[optionKey];\n  }\n  self.config = function config(key = 'config', msg, parseFn) {\n    argsert('[object|string] [string|function] [function]', [key, msg, parseFn], arguments.length);\n    if (typeof key === 'object' && !Array.isArray(key)) {\n      key = applyExtends(key, cwd, self.getParserConfiguration()['deep-merge-config'] || false, shim$1);\n      options.configObjects = (options.configObjects || []).concat(key);\n      return self;\n    }\n    if (typeof msg === 'function') {\n      parseFn = msg;\n      msg = undefined;\n    }\n    self.describe(key, msg || usage$1.deferY18nLookup('Path to JSON config file'));\n    (Array.isArray(key) ? key : [key]).forEach(k => {\n      options.config[k] = parseFn || true;\n    });\n    return self;\n  };\n  self.example = function (cmd, description) {\n    argsert('<string|array> [string]', [cmd, description], arguments.length);\n    if (Array.isArray(cmd)) {\n      cmd.forEach(exampleParams => self.example(...exampleParams));\n    } else {\n      usage$1.example(cmd, description);\n    }\n    return self;\n  };\n  self.command = function (cmd, description, builder, handler, middlewares, deprecated) {\n    argsert('<string|array|object> [string|boolean] [function|object] [function] [array] [boolean|string]', [cmd, description, builder, handler, middlewares, deprecated], arguments.length);\n    command$1.addHandler(cmd, description, builder, handler, middlewares, deprecated);\n    return self;\n  };\n  self.commandDir = function (dir, opts) {\n    argsert('<string> [object]', [dir, opts], arguments.length);\n    const req = parentRequire || shim$1.require;\n    command$1.addDirectory(dir, self.getContext(), req, shim$1.getCallerFile(), opts);\n    return self;\n  };\n  self.demand = self.required = self.require = function demand(keys, max, msg) {\n    if (Array.isArray(max)) {\n      max.forEach(key => {\n        assertNotStrictEqual(msg, true, shim$1);\n        demandOption(key, msg);\n      });\n      max = Infinity;\n    } else if (typeof max !== 'number') {\n      msg = max;\n      max = Infinity;\n    }\n    if (typeof keys === 'number') {\n      assertNotStrictEqual(msg, true, shim$1);\n      self.demandCommand(keys, max, msg, msg);\n    } else if (Array.isArray(keys)) {\n      keys.forEach(key => {\n        assertNotStrictEqual(msg, true, shim$1);\n        demandOption(key, msg);\n      });\n    } else {\n      if (typeof msg === 'string') {\n        demandOption(keys, msg);\n      } else if (msg === true || typeof msg === 'undefined') {\n        demandOption(keys);\n      }\n    }\n    return self;\n  };\n  self.demandCommand = function demandCommand(min = 1, max, minMsg, maxMsg) {\n    argsert('[number] [number|string] [string|null|undefined] [string|null|undefined]', [min, max, minMsg, maxMsg], arguments.length);\n    if (typeof max !== 'number') {\n      minMsg = max;\n      max = Infinity;\n    }\n    self.global('_', false);\n    options.demandedCommands._ = {\n      min,\n      max,\n      minMsg,\n      maxMsg\n    };\n    return self;\n  };\n  self.getDemandedOptions = () => {\n    argsert([], 0);\n    return options.demandedOptions;\n  };\n  self.getDemandedCommands = () => {\n    argsert([], 0);\n    return options.demandedCommands;\n  };\n  self.deprecateOption = function deprecateOption(option, message) {\n    argsert('<string> [string|boolean]', [option, message], arguments.length);\n    options.deprecatedOptions[option] = message;\n    return self;\n  };\n  self.getDeprecatedOptions = () => {\n    argsert([], 0);\n    return options.deprecatedOptions;\n  };\n  self.implies = function (key, value) {\n    argsert('<string|object> [number|string|array]', [key, value], arguments.length);\n    validation$1.implies(key, value);\n    return self;\n  };\n  self.conflicts = function (key1, key2) {\n    argsert('<string|object> [string|array]', [key1, key2], arguments.length);\n    validation$1.conflicts(key1, key2);\n    return self;\n  };\n  self.usage = function (msg, description, builder, handler) {\n    argsert('<string|null|undefined> [string|boolean] [function|object] [function]', [msg, description, builder, handler], arguments.length);\n    if (description !== undefined) {\n      assertNotStrictEqual(msg, null, shim$1);\n      if ((msg || '').match(/^\\$0( |$)/)) {\n        return self.command(msg, description, builder, handler);\n      } else {\n        throw new YError('.usage() description must start with $0 if being used as alias for .command()');\n      }\n    } else {\n      usage$1.usage(msg);\n      return self;\n    }\n  };\n  self.epilogue = self.epilog = function (msg) {\n    argsert('<string>', [msg], arguments.length);\n    usage$1.epilog(msg);\n    return self;\n  };\n  self.fail = function (f) {\n    argsert('<function>', [f], arguments.length);\n    usage$1.failFn(f);\n    return self;\n  };\n  self.onFinishCommand = function (f) {\n    argsert('<function>', [f], arguments.length);\n    handlerFinishCommand = f;\n    return self;\n  };\n  self.getHandlerFinishCommand = () => handlerFinishCommand;\n  self.check = function (f, _global) {\n    argsert('<function> [boolean]', [f, _global], arguments.length);\n    validation$1.check(f, _global !== false);\n    return self;\n  };\n  self.global = function global(globals, global) {\n    argsert('<string|array> [boolean]', [globals, global], arguments.length);\n    globals = [].concat(globals);\n    if (global !== false) {\n      options.local = options.local.filter(l => globals.indexOf(l) === -1);\n    } else {\n      globals.forEach(g => {\n        if (options.local.indexOf(g) === -1) options.local.push(g);\n      });\n    }\n    return self;\n  };\n  self.pkgConf = function pkgConf(key, rootPath) {\n    argsert('<string> [string]', [key, rootPath], arguments.length);\n    let conf = null;\n    const obj = pkgUp(rootPath || cwd);\n    if (obj[key] && typeof obj[key] === 'object') {\n      conf = applyExtends(obj[key], rootPath || cwd, self.getParserConfiguration()['deep-merge-config'] || false, shim$1);\n      options.configObjects = (options.configObjects || []).concat(conf);\n    }\n    return self;\n  };\n  const pkgs = {};\n  function pkgUp(rootPath) {\n    const npath = rootPath || '*';\n    if (pkgs[npath]) return pkgs[npath];\n    let obj = {};\n    try {\n      let startDir = rootPath || shim$1.mainFilename;\n      if (!rootPath && shim$1.path.extname(startDir)) {\n        startDir = shim$1.path.dirname(startDir);\n      }\n      const pkgJsonPath = shim$1.findUp(startDir, (dir, names) => {\n        if (names.includes('package.json')) {\n          return 'package.json';\n        } else {\n          return undefined;\n        }\n      });\n      assertNotStrictEqual(pkgJsonPath, undefined, shim$1);\n      obj = JSON.parse(shim$1.readFileSync(pkgJsonPath, 'utf8'));\n    } catch (_noop) {}\n    pkgs[npath] = obj || {};\n    return pkgs[npath];\n  }\n  let parseFn = null;\n  let parseContext = null;\n  self.parse = function parse(args, shortCircuit, _parseFn) {\n    argsert('[string|array] [function|boolean|object] [function]', [args, shortCircuit, _parseFn], arguments.length);\n    freeze();\n    if (typeof args === 'undefined') {\n      const argv = self._parseArgs(processArgs);\n      const tmpParsed = self.parsed;\n      unfreeze();\n      self.parsed = tmpParsed;\n      return argv;\n    }\n    if (typeof shortCircuit === 'object') {\n      parseContext = shortCircuit;\n      shortCircuit = _parseFn;\n    }\n    if (typeof shortCircuit === 'function') {\n      parseFn = shortCircuit;\n      shortCircuit = false;\n    }\n    if (!shortCircuit) processArgs = args;\n    if (parseFn) exitProcess = false;\n    const parsed = self._parseArgs(args, !!shortCircuit);\n    completion$1.setParsed(self.parsed);\n    if (parseFn) parseFn(exitError, parsed, output);\n    unfreeze();\n    return parsed;\n  };\n  self._getParseContext = () => parseContext || {};\n  self._hasParseCallback = () => !!parseFn;\n  self.option = self.options = function option(key, opt) {\n    argsert('<string|object> [object]', [key, opt], arguments.length);\n    if (typeof key === 'object') {\n      Object.keys(key).forEach(k => {\n        self.options(k, key[k]);\n      });\n    } else {\n      if (typeof opt !== 'object') {\n        opt = {};\n      }\n      options.key[key] = true;\n      if (opt.alias) self.alias(key, opt.alias);\n      const deprecate = opt.deprecate || opt.deprecated;\n      if (deprecate) {\n        self.deprecateOption(key, deprecate);\n      }\n      const demand = opt.demand || opt.required || opt.require;\n      if (demand) {\n        self.demand(key, demand);\n      }\n      if (opt.demandOption) {\n        self.demandOption(key, typeof opt.demandOption === 'string' ? opt.demandOption : undefined);\n      }\n      if (opt.conflicts) {\n        self.conflicts(key, opt.conflicts);\n      }\n      if ('default' in opt) {\n        self.default(key, opt.default);\n      }\n      if (opt.implies !== undefined) {\n        self.implies(key, opt.implies);\n      }\n      if (opt.nargs !== undefined) {\n        self.nargs(key, opt.nargs);\n      }\n      if (opt.config) {\n        self.config(key, opt.configParser);\n      }\n      if (opt.normalize) {\n        self.normalize(key);\n      }\n      if (opt.choices) {\n        self.choices(key, opt.choices);\n      }\n      if (opt.coerce) {\n        self.coerce(key, opt.coerce);\n      }\n      if (opt.group) {\n        self.group(key, opt.group);\n      }\n      if (opt.boolean || opt.type === 'boolean') {\n        self.boolean(key);\n        if (opt.alias) self.boolean(opt.alias);\n      }\n      if (opt.array || opt.type === 'array') {\n        self.array(key);\n        if (opt.alias) self.array(opt.alias);\n      }\n      if (opt.number || opt.type === 'number') {\n        self.number(key);\n        if (opt.alias) self.number(opt.alias);\n      }\n      if (opt.string || opt.type === 'string') {\n        self.string(key);\n        if (opt.alias) self.string(opt.alias);\n      }\n      if (opt.count || opt.type === 'count') {\n        self.count(key);\n      }\n      if (typeof opt.global === 'boolean') {\n        self.global(key, opt.global);\n      }\n      if (opt.defaultDescription) {\n        options.defaultDescription[key] = opt.defaultDescription;\n      }\n      if (opt.skipValidation) {\n        self.skipValidation(key);\n      }\n      const desc = opt.describe || opt.description || opt.desc;\n      self.describe(key, desc);\n      if (opt.hidden) {\n        self.hide(key);\n      }\n      if (opt.requiresArg) {\n        self.requiresArg(key);\n      }\n    }\n    return self;\n  };\n  self.getOptions = () => options;\n  self.positional = function (key, opts) {\n    argsert('<string> <object>', [key, opts], arguments.length);\n    if (context.resets === 0) {\n      throw new YError(\".positional() can only be called in a command's builder function\");\n    }\n    const supportedOpts = ['default', 'defaultDescription', 'implies', 'normalize', 'choices', 'conflicts', 'coerce', 'type', 'describe', 'desc', 'description', 'alias'];\n    opts = objFilter(opts, (k, v) => {\n      let accept = supportedOpts.indexOf(k) !== -1;\n      if (k === 'type' && ['string', 'number', 'boolean'].indexOf(v) === -1) accept = false;\n      return accept;\n    });\n    const fullCommand = context.fullCommands[context.fullCommands.length - 1];\n    const parseOptions = fullCommand ? command$1.cmdToParseOptions(fullCommand) : {\n      array: [],\n      alias: {},\n      default: {},\n      demand: {}\n    };\n    objectKeys(parseOptions).forEach(pk => {\n      const parseOption = parseOptions[pk];\n      if (Array.isArray(parseOption)) {\n        if (parseOption.indexOf(key) !== -1) opts[pk] = true;\n      } else {\n        if (parseOption[key] && !(pk in opts)) opts[pk] = parseOption[key];\n      }\n    });\n    self.group(key, usage$1.getPositionalGroupName());\n    return self.option(key, opts);\n  };\n  self.group = function group(opts, groupName) {\n    argsert('<string|array> <string>', [opts, groupName], arguments.length);\n    const existing = preservedGroups[groupName] || groups[groupName];\n    if (preservedGroups[groupName]) {\n      delete preservedGroups[groupName];\n    }\n    const seen = {};\n    groups[groupName] = (existing || []).concat(opts).filter(key => {\n      if (seen[key]) return false;\n      return seen[key] = true;\n    });\n    return self;\n  };\n  self.getGroups = () => Object.assign({}, groups, preservedGroups);\n  self.env = function (prefix) {\n    argsert('[string|boolean]', [prefix], arguments.length);\n    if (prefix === false) delete options.envPrefix;else options.envPrefix = prefix || '';\n    return self;\n  };\n  self.wrap = function (cols) {\n    argsert('<number|null|undefined>', [cols], arguments.length);\n    usage$1.wrap(cols);\n    return self;\n  };\n  let strict = false;\n  self.strict = function (enabled) {\n    argsert('[boolean]', [enabled], arguments.length);\n    strict = enabled !== false;\n    return self;\n  };\n  self.getStrict = () => strict;\n  let strictCommands = false;\n  self.strictCommands = function (enabled) {\n    argsert('[boolean]', [enabled], arguments.length);\n    strictCommands = enabled !== false;\n    return self;\n  };\n  self.getStrictCommands = () => strictCommands;\n  let strictOptions = false;\n  self.strictOptions = function (enabled) {\n    argsert('[boolean]', [enabled], arguments.length);\n    strictOptions = enabled !== false;\n    return self;\n  };\n  self.getStrictOptions = () => strictOptions;\n  let parserConfig = {};\n  self.parserConfiguration = function parserConfiguration(config) {\n    argsert('<object>', [config], arguments.length);\n    parserConfig = config;\n    return self;\n  };\n  self.getParserConfiguration = () => parserConfig;\n  self.showHelp = function (level) {\n    argsert('[string|function]', [level], arguments.length);\n    if (!self.parsed) self._parseArgs(processArgs);\n    if (command$1.hasDefaultCommand()) {\n      context.resets++;\n      command$1.runDefaultBuilderOn(self);\n    }\n    usage$1.showHelp(level);\n    return self;\n  };\n  let versionOpt = null;\n  self.version = function version(opt, msg, ver) {\n    const defaultVersionOpt = 'version';\n    argsert('[boolean|string] [string] [string]', [opt, msg, ver], arguments.length);\n    if (versionOpt) {\n      deleteFromParserHintObject(versionOpt);\n      usage$1.version(undefined);\n      versionOpt = null;\n    }\n    if (arguments.length === 0) {\n      ver = guessVersion();\n      opt = defaultVersionOpt;\n    } else if (arguments.length === 1) {\n      if (opt === false) {\n        return self;\n      }\n      ver = opt;\n      opt = defaultVersionOpt;\n    } else if (arguments.length === 2) {\n      ver = msg;\n      msg = undefined;\n    }\n    versionOpt = typeof opt === 'string' ? opt : defaultVersionOpt;\n    msg = msg || usage$1.deferY18nLookup('Show version number');\n    usage$1.version(ver || undefined);\n    self.boolean(versionOpt);\n    self.describe(versionOpt, msg);\n    return self;\n  };\n  function guessVersion() {\n    const obj = pkgUp();\n    return obj.version || 'unknown';\n  }\n  let helpOpt = null;\n  self.addHelpOpt = self.help = function addHelpOpt(opt, msg) {\n    const defaultHelpOpt = 'help';\n    argsert('[string|boolean] [string]', [opt, msg], arguments.length);\n    if (helpOpt) {\n      deleteFromParserHintObject(helpOpt);\n      helpOpt = null;\n    }\n    if (arguments.length === 1) {\n      if (opt === false) return self;\n    }\n    helpOpt = typeof opt === 'string' ? opt : defaultHelpOpt;\n    self.boolean(helpOpt);\n    self.describe(helpOpt, msg || usage$1.deferY18nLookup('Show help'));\n    return self;\n  };\n  const defaultShowHiddenOpt = 'show-hidden';\n  options.showHiddenOpt = defaultShowHiddenOpt;\n  self.addShowHiddenOpt = self.showHidden = function addShowHiddenOpt(opt, msg) {\n    argsert('[string|boolean] [string]', [opt, msg], arguments.length);\n    if (arguments.length === 1) {\n      if (opt === false) return self;\n    }\n    const showHiddenOpt = typeof opt === 'string' ? opt : defaultShowHiddenOpt;\n    self.boolean(showHiddenOpt);\n    self.describe(showHiddenOpt, msg || usage$1.deferY18nLookup('Show hidden options'));\n    options.showHiddenOpt = showHiddenOpt;\n    return self;\n  };\n  self.hide = function hide(key) {\n    argsert('<string>', [key], arguments.length);\n    options.hiddenOptions.push(key);\n    return self;\n  };\n  self.showHelpOnFail = function showHelpOnFail(enabled, message) {\n    argsert('[boolean|string] [string]', [enabled, message], arguments.length);\n    usage$1.showHelpOnFail(enabled, message);\n    return self;\n  };\n  let exitProcess = true;\n  self.exitProcess = function (enabled = true) {\n    argsert('[boolean]', [enabled], arguments.length);\n    exitProcess = enabled;\n    return self;\n  };\n  self.getExitProcess = () => exitProcess;\n  self.showCompletionScript = function ($0, cmd) {\n    argsert('[string] [string]', [$0, cmd], arguments.length);\n    $0 = $0 || self.$0;\n    _logger.log(completion$1.generateCompletionScript($0, cmd || completionCommand || 'completion'));\n    return self;\n  };\n  self.getCompletion = function (args, done) {\n    argsert('<array> <function>', [args, done], arguments.length);\n    completion$1.getCompletion(args, done);\n  };\n  self.locale = function (locale) {\n    argsert('[string]', [locale], arguments.length);\n    if (!locale) {\n      guessLocale();\n      return y18n.getLocale();\n    }\n    detectLocale = false;\n    y18n.setLocale(locale);\n    return self;\n  };\n  self.updateStrings = self.updateLocale = function (obj) {\n    argsert('<object>', [obj], arguments.length);\n    detectLocale = false;\n    y18n.updateLocale(obj);\n    return self;\n  };\n  let detectLocale = true;\n  self.detectLocale = function (detect) {\n    argsert('<boolean>', [detect], arguments.length);\n    detectLocale = detect;\n    return self;\n  };\n  self.getDetectLocale = () => detectLocale;\n  const _logger = {\n    log(...args) {\n      if (!self._hasParseCallback()) console.log(...args);\n      hasOutput = true;\n      if (output.length) output += '\\n';\n      output += args.join(' ');\n    },\n    error(...args) {\n      if (!self._hasParseCallback()) console.error(...args);\n      hasOutput = true;\n      if (output.length) output += '\\n';\n      output += args.join(' ');\n    }\n  };\n  self._getLoggerInstance = () => _logger;\n  self._hasOutput = () => hasOutput;\n  self._setHasOutput = () => {\n    hasOutput = true;\n  };\n  let recommendCommands;\n  self.recommendCommands = function (recommend = true) {\n    argsert('[boolean]', [recommend], arguments.length);\n    recommendCommands = recommend;\n    return self;\n  };\n  self.getUsageInstance = () => usage$1;\n  self.getValidationInstance = () => validation$1;\n  self.getCommandInstance = () => command$1;\n  self.terminalWidth = () => {\n    argsert([], 0);\n    return shim$1.process.stdColumns;\n  };\n  Object.defineProperty(self, 'argv', {\n    get: () => self._parseArgs(processArgs),\n    enumerable: true\n  });\n  self._parseArgs = function parseArgs(args, shortCircuit, _calledFromCommand, commandIndex) {\n    let skipValidation = !!_calledFromCommand;\n    args = args || processArgs;\n    options.__ = y18n.__;\n    options.configuration = self.getParserConfiguration();\n    const populateDoubleDash = !!options.configuration['populate--'];\n    const config = Object.assign({}, options.configuration, {\n      'populate--': true\n    });\n    const parsed = shim$1.Parser.detailed(args, Object.assign({}, options, {\n      configuration: Object.assign({\n        'parse-positional-numbers': false\n      }, config)\n    }));\n    let argv = parsed.argv;\n    if (parseContext) argv = Object.assign({}, argv, parseContext);\n    const aliases = parsed.aliases;\n    argv.$0 = self.$0;\n    self.parsed = parsed;\n    try {\n      guessLocale();\n      if (shortCircuit) {\n        return self._postProcess(argv, populateDoubleDash, _calledFromCommand);\n      }\n      if (helpOpt) {\n        const helpCmds = [helpOpt].concat(aliases[helpOpt] || []).filter(k => k.length > 1);\n        if (~helpCmds.indexOf('' + argv._[argv._.length - 1])) {\n          argv._.pop();\n          argv[helpOpt] = true;\n        }\n      }\n      const handlerKeys = command$1.getCommands();\n      const requestCompletions = (completion$1.completionKey in argv);\n      const skipRecommendation = argv[helpOpt] || requestCompletions;\n      const skipDefaultCommand = skipRecommendation && (handlerKeys.length > 1 || handlerKeys[0] !== '$0');\n      if (argv._.length) {\n        if (handlerKeys.length) {\n          let firstUnknownCommand;\n          for (let i = commandIndex || 0, cmd; argv._[i] !== undefined; i++) {\n            cmd = String(argv._[i]);\n            if (~handlerKeys.indexOf(cmd) && cmd !== completionCommand) {\n              const innerArgv = command$1.runCommand(cmd, self, parsed, i + 1);\n              return self._postProcess(innerArgv, populateDoubleDash);\n            } else if (!firstUnknownCommand && cmd !== completionCommand) {\n              firstUnknownCommand = cmd;\n              break;\n            }\n          }\n          if (command$1.hasDefaultCommand() && !skipDefaultCommand) {\n            const innerArgv = command$1.runCommand(null, self, parsed);\n            return self._postProcess(innerArgv, populateDoubleDash);\n          }\n          if (recommendCommands && firstUnknownCommand && !skipRecommendation) {\n            validation$1.recommendCommands(firstUnknownCommand, handlerKeys);\n          }\n        }\n        if (completionCommand && ~argv._.indexOf(completionCommand) && !requestCompletions) {\n          if (exitProcess) setBlocking(true);\n          self.showCompletionScript();\n          self.exit(0);\n        }\n      } else if (command$1.hasDefaultCommand() && !skipDefaultCommand) {\n        const innerArgv = command$1.runCommand(null, self, parsed);\n        return self._postProcess(innerArgv, populateDoubleDash);\n      }\n      if (requestCompletions) {\n        if (exitProcess) setBlocking(true);\n        args = [].concat(args);\n        const completionArgs = args.slice(args.indexOf(`--${completion$1.completionKey}`) + 1);\n        completion$1.getCompletion(completionArgs, completions => {\n          (completions || []).forEach(completion => {\n            _logger.log(completion);\n          });\n          self.exit(0);\n        });\n        return self._postProcess(argv, !populateDoubleDash, _calledFromCommand);\n      }\n      if (!hasOutput) {\n        Object.keys(argv).forEach(key => {\n          if (key === helpOpt && argv[key]) {\n            if (exitProcess) setBlocking(true);\n            skipValidation = true;\n            self.showHelp('log');\n            self.exit(0);\n          } else if (key === versionOpt && argv[key]) {\n            if (exitProcess) setBlocking(true);\n            skipValidation = true;\n            usage$1.showVersion();\n            self.exit(0);\n          }\n        });\n      }\n      if (!skipValidation && options.skipValidation.length > 0) {\n        skipValidation = Object.keys(argv).some(key => options.skipValidation.indexOf(key) >= 0 && argv[key] === true);\n      }\n      if (!skipValidation) {\n        if (parsed.error) throw new YError(parsed.error.message);\n        if (!requestCompletions) {\n          self._runValidation(argv, aliases, {}, parsed.error);\n        }\n      }\n    } catch (err) {\n      if (err instanceof YError) usage$1.fail(err.message, err);else throw err;\n    }\n    return self._postProcess(argv, populateDoubleDash, _calledFromCommand);\n  };\n  self._postProcess = function (argv, populateDoubleDash, calledFromCommand = false) {\n    if (isPromise(argv)) return argv;\n    if (calledFromCommand) return argv;\n    if (!populateDoubleDash) {\n      argv = self._copyDoubleDash(argv);\n    }\n    const parsePositionalNumbers = self.getParserConfiguration()['parse-positional-numbers'] || self.getParserConfiguration()['parse-positional-numbers'] === undefined;\n    if (parsePositionalNumbers) {\n      argv = self._parsePositionalNumbers(argv);\n    }\n    return argv;\n  };\n  self._copyDoubleDash = function (argv) {\n    if (!argv._ || !argv['--']) return argv;\n    argv._.push.apply(argv._, argv['--']);\n    try {\n      delete argv['--'];\n    } catch (_err) {}\n    return argv;\n  };\n  self._parsePositionalNumbers = function (argv) {\n    const args = argv['--'] ? argv['--'] : argv._;\n    for (let i = 0, arg; (arg = args[i]) !== undefined; i++) {\n      if (shim$1.Parser.looksLikeNumber(arg) && Number.isSafeInteger(Math.floor(parseFloat(`${arg}`)))) {\n        args[i] = Number(arg);\n      }\n    }\n    return argv;\n  };\n  self._runValidation = function runValidation(argv, aliases, positionalMap, parseErrors, isDefaultCommand = false) {\n    if (parseErrors) throw new YError(parseErrors.message);\n    validation$1.nonOptionCount(argv);\n    validation$1.requiredArguments(argv);\n    let failedStrictCommands = false;\n    if (strictCommands) {\n      failedStrictCommands = validation$1.unknownCommands(argv);\n    }\n    if (strict && !failedStrictCommands) {\n      validation$1.unknownArguments(argv, aliases, positionalMap, isDefaultCommand);\n    } else if (strictOptions) {\n      validation$1.unknownArguments(argv, aliases, {}, false, false);\n    }\n    validation$1.customChecks(argv, aliases);\n    validation$1.limitedChoices(argv);\n    validation$1.implications(argv);\n    validation$1.conflicting(argv);\n  };\n  function guessLocale() {\n    if (!detectLocale) return;\n    const locale = shim$1.getEnv('LC_ALL') || shim$1.getEnv('LC_MESSAGES') || shim$1.getEnv('LANG') || shim$1.getEnv('LANGUAGE') || 'en_US';\n    self.locale(locale.replace(/[.:].*/, ''));\n  }\n  self.help();\n  self.version();\n  return self;\n}\nconst rebase = (base, dir) => shim$1.path.relative(base, dir);\nfunction isYargsInstance(y) {\n  return !!y && typeof y._parseArgs === 'function';\n}\nvar _a, _b;\nconst {\n  readFileSync\n} = require('fs');\nconst {\n  inspect\n} = require('util');\nconst {\n  resolve\n} = require('path');\nconst y18n = require('y18n');\nconst Parser = require('yargs-parser');\nvar cjsPlatformShim = {\n  assert: {\n    notStrictEqual: assert.notStrictEqual,\n    strictEqual: assert.strictEqual\n  },\n  cliui: require('cliui'),\n  findUp: require('escalade/sync'),\n  getEnv: key => {\n    return process.env[key];\n  },\n  getCallerFile: require('get-caller-file'),\n  getProcessArgvBin: getProcessArgvBin,\n  inspect,\n  mainFilename: (_b = (_a = require === null || require === void 0 ? void 0 : require.main) === null || _a === void 0 ? void 0 : _a.filename) !== null && _b !== void 0 ? _b : process.cwd(),\n  Parser,\n  path: require('path'),\n  process: {\n    argv: () => process.argv,\n    cwd: process.cwd,\n    execPath: () => process.execPath,\n    exit: code => {\n      process.exit(code);\n    },\n    nextTick: process.nextTick,\n    stdColumns: typeof process.stdout.columns !== 'undefined' ? process.stdout.columns : null\n  },\n  readFileSync,\n  require: require,\n  requireDirectory: require('require-directory'),\n  stringWidth: require('string-width'),\n  y18n: y18n({\n    directory: resolve(__dirname, '../locales'),\n    updateFiles: false\n  })\n};\nconst minNodeVersion = process && process.env && process.env.YARGS_MIN_NODE_VERSION ? Number(process.env.YARGS_MIN_NODE_VERSION) : 10;\nif (process && process.version) {\n  const major = Number(process.version.match(/v([^.]+)/)[1]);\n  if (major < minNodeVersion) {\n    throw Error(`yargs supports a minimum Node.js version of ${minNodeVersion}. Read our version support policy: https://github.com/yargs/yargs#supported-nodejs-versions`);\n  }\n}\nconst Parser$1 = require('yargs-parser');\nconst Yargs$1 = YargsWithShim(cjsPlatformShim);\nvar cjs = {\n  applyExtends,\n  cjsPlatformShim,\n  Yargs: Yargs$1,\n  argsert,\n  globalMiddlewareFactory,\n  isPromise,\n  objFilter,\n  parseCommand,\n  Parser: Parser$1,\n  processArgv,\n  rebase,\n  YError\n};\nmodule.exports = cjs;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["assert","require","YError","Error","constructor","msg","name","captureStackTrace","previouslyVisitedConfigs","shim","applyExtends","config","cwd","mergeExtends","_shim","defaultConfig","Object","prototype","hasOwnProperty","call","extends","isPath","test","pathToDefault","resolve","_err","getPathToDefaultConfig","checkForCircularExtends","push","JSON","parse","readFileSync","path","dirname","mergeDeep","assign","cfgPath","indexOf","pathToExtend","config1","config2","target","isObject","obj","Array","isArray","key","keys","parseCommand","cmd","extraSpacesStrippedCommand","replace","splitCommand","split","bregex","firstCommand","shift","parsedCommand","demanded","optional","forEach","i","variadic","length","positionName","argsert","arg1","arg2","arg3","parseArgs","position","parsed","callerArguments","_length","args","slice","undefined","pop","totalCommands","arg","observedType","guessType","matchingTypes","filter","type","argumentTypeError","err","console","warn","stack","allowedTypes","join","isPromise","maybePromise","then","assertNotStrictEqual","actual","expected","message","notStrictEqual","assertSingleKey","strictEqual","objectKeys","object","objFilter","original","globalMiddlewareFactory","globalMiddleware","context","callback","applyBeforeValidation","arguments","apply","commandMiddlewareFactory","commandMiddleware","map","middleware","applyMiddleware","argv","yargs","middlewares","beforeValidation","beforeValidationError","reduce","acc","initialObj","Promise","all","middlewareObj","result","getProcessArgvBinIndex","isBundledElectronApp","isElectronApp","process","defaultApp","versions","electron","hideBin","getProcessArgvBin","processArgv","freeze","__proto__","whichModule","exported","files","cache","mod","exports","DEFAULT_MARKER","command","usage","validation","self","handlers","aliasMap","defaultCommand","addHandler","description","builder","handler","deprecated","aliases","isCommandAndAliases","isCommandHandlerDefinition","moduleName","concat","extractDesc","isCommandBuilderDefinition","alias","isDefault","parsedAliases","c","addDirectory","dir","req","callerFile","opts","recurse","extensions","parentVisit","visit","o","joined","filename","visited","requireDirectory","inspect","commandFromFilename","basename","extname","describe","desc","getCommands","getCommandHandlers","hasDefaultCommand","runCommand","commandIndex","commandHandler","currentContext","getContext","numFiles","parentCommands","commands","innerArgv","positionalMap","fullCommands","isCommandBuilderCallback","builderOutput","reset","innerYargs","isYargsInstance","shouldUpdateUsage","getUsageInstance","usageFromParentCommandsCommandHandler","_parseArgs","isCommandBuilderOptionDefinitions","option","_hasOutput","populatePositionals","_runValidation","error","_setHasOutput","populateDoubleDash","getOptions","configuration","_postProcess","handlerResult","handlerFinishCommand","getHandlerFinishCommand","cacheHelpMessage","value","catch","fail","clearCachedHelpMessage","splice","getUsageDisabled","getUsage","trim","pc","runDefaultBuilderOn","commandString","_","positionalCount","demand","populatePositional","maybe","a","postProcessPositionals","cmdToParseOptions","positional","String","parseOptions","options","default","array","unparsed","Parser","detailed","positionalKeys","cmdString","d","frozens","unfreeze","frozen","every","setBlocking","blocking","stdout","stderr","_stream","stream","_handle","isTTY","y18n","__","fails","failFn","f","failMessage","showHelpOnFail","showHelpOnFailFn","parseFunctionArgs","enabled","failureOutput","logger","_getLoggerInstance","getExitProcess","showHelp","exit","_hasParseCallback","usages","usageDisabled","getPositionalGroupName","examples","example","cmdArray","descriptions","keyOrKeys","k","getDescriptions","epilogs","epilog","wrapSet","wrap","cols","getWrap","windowWidth","deferY18nLookupPrefix","deferY18nLookup","str","help","cachedHelpMessage","normalizeAliases","base$0","customScriptName","$0","demandedOptions","getDemandedOptions","demandedCommands","getDemandedCommands","deprecatedOptions","getDeprecatedOptions","groups","getGroups","filterHiddenOptions","theWrap","ui","cliui","width","div","text","padding","u","getParserConfiguration","sort","b","localeCompare","span","maxWidth","hints","align","aliasKeys","newAliases","defaultGroup","addUngroupedKeys","isLongSwitch","sw","getText","displayedGroups","groupName","normalizedKeys","aliasKey","switches","boolean","sw1","sw2","shortSwitchesUsed","some","addIndentation","kswitch","lastIndexOf","substring","count","string","normalize","number","deprecatedExtra","extra","choices","stringifiedValues","defaultString","defaultDescription","Boolean","getIndentation","e","toString","table","modifier","values","v","Math","max","stringWidth","min","parseInt","demandOption","groupedKeys","toCheck","group","hiddenOptions","showHiddenOpt","level","emit","functionDescription","fn","decamelize","separator","sep","stringify","stdColumns","version","ver","showVersion","log","localLookup","isIndentedText","indent","indentation","completionShTemplate","completionZshTemplate","completion","completionKey","setParsed","zshShell","getEnv","getCompletion","done","completions","current","runCompletionFunction","completionFunction","isSyncCompletionFunction","list","nextTick","ii","y","match","usageCommand","commandName","descs","negable","includes","keyAndAliases","completeOptionKey","notInArgs","val","startsByTwoDashes","s","isShortOption","dashes","generateCompletionScript","script","registerFunction","levenshtein","matrix","j","charAt","specialKeys","__n","nonOptionCount","_s","minMsg","maxMsg","required","observed","requiredArguments","missing","customMsgs","customMsg","unknownArguments","isDefaultCommand","checkPositionals","commandKeys","getCommandInstance","unknown","_getParseContext","isValidAndSomeAliasIsNotNew","unknownCommands","limitedChoices","invalid","invalidKeys","checks","check","global","func","customChecks","implied","implies","getImplied","keyExists","num","Number","isNaN","implications","implyFail","origKey","origValue","conflicting","conflicts","getConflicting","conflictingFn","recommendCommands","potentialCommands","threshold","recommended","bestDistance","Infinity","candidate","shim$1","YargsWithShim","Yargs","processArgs","parentRequire","command$1","completion$1","output","preservedGroups","usage$1","validation$1","scriptName","default$0","x","rebase","execPath","resets","hasOutput","exitError","code","exitProcess","completionCommand","resetOptions","tmpOptions","local","configObjects","l","arrayOptions","objectOptions","envPrefix","strict","strictCommands","strictOptions","parseFn","parseContext","populateParserHintArray","requiresArg","narg","populateParserHintSingleValueDictionary","NaN","skipValidation","sanitizeKey","nargs","populateParserHintArrayDictionary","defaults","setKey","set","coerce","populateParserHintDictionary","singleKeyHandler","deleteFromParserHintObject","optionKey","hintKey","hint","exampleParams","commandDir","getCallerFile","demandCommand","deprecateOption","key1","key2","epilogue","onFinishCommand","_global","globals","g","pkgConf","rootPath","conf","pkgUp","pkgs","npath","startDir","mainFilename","pkgJsonPath","findUp","names","_noop","shortCircuit","_parseFn","tmpParsed","opt","deprecate","configParser","hidden","hide","supportedOpts","accept","fullCommand","pk","parseOption","existing","seen","env","prefix","getStrict","getStrictCommands","getStrictOptions","parserConfig","parserConfiguration","versionOpt","defaultVersionOpt","guessVersion","helpOpt","addHelpOpt","defaultHelpOpt","defaultShowHiddenOpt","addShowHiddenOpt","showHidden","showCompletionScript","_logger","locale","guessLocale","getLocale","detectLocale","setLocale","updateStrings","updateLocale","detect","getDetectLocale","recommend","getValidationInstance","terminalWidth","defineProperty","get","enumerable","_calledFromCommand","helpCmds","handlerKeys","requestCompletions","skipRecommendation","skipDefaultCommand","firstUnknownCommand","completionArgs","calledFromCommand","_copyDoubleDash","parsePositionalNumbers","_parsePositionalNumbers","looksLikeNumber","isSafeInteger","floor","parseFloat","runValidation","parseErrors","failedStrictCommands","base","relative","_a","_b","cjsPlatformShim","main","columns","directory","__dirname","updateFiles","minNodeVersion","YARGS_MIN_NODE_VERSION","major","Parser$1","Yargs$1","cjs","module"],"sourceRoot":"C:\\code\\FluidFramework5\\node_modules\\.pnpm\\yargs@16.2.0\\node_modules\\yargs\\build\\","sources":["index.cjs"],"sourcesContent":["'use strict';\n\nvar assert = require('assert');\n\nclass YError extends Error {\n    constructor(msg) {\n        super(msg || 'yargs error');\n        this.name = 'YError';\n        Error.captureStackTrace(this, YError);\n    }\n}\n\nlet previouslyVisitedConfigs = [];\nlet shim;\nfunction applyExtends(config, cwd, mergeExtends, _shim) {\n    shim = _shim;\n    let defaultConfig = {};\n    if (Object.prototype.hasOwnProperty.call(config, 'extends')) {\n        if (typeof config.extends !== 'string')\n            return defaultConfig;\n        const isPath = /\\.json|\\..*rc$/.test(config.extends);\n        let pathToDefault = null;\n        if (!isPath) {\n            try {\n                pathToDefault = require.resolve(config.extends);\n            }\n            catch (_err) {\n                return config;\n            }\n        }\n        else {\n            pathToDefault = getPathToDefaultConfig(cwd, config.extends);\n        }\n        checkForCircularExtends(pathToDefault);\n        previouslyVisitedConfigs.push(pathToDefault);\n        defaultConfig = isPath\n            ? JSON.parse(shim.readFileSync(pathToDefault, 'utf8'))\n            : require(config.extends);\n        delete config.extends;\n        defaultConfig = applyExtends(defaultConfig, shim.path.dirname(pathToDefault), mergeExtends, shim);\n    }\n    previouslyVisitedConfigs = [];\n    return mergeExtends\n        ? mergeDeep(defaultConfig, config)\n        : Object.assign({}, defaultConfig, config);\n}\nfunction checkForCircularExtends(cfgPath) {\n    if (previouslyVisitedConfigs.indexOf(cfgPath) > -1) {\n        throw new YError(`Circular extended configurations: '${cfgPath}'.`);\n    }\n}\nfunction getPathToDefaultConfig(cwd, pathToExtend) {\n    return shim.path.resolve(cwd, pathToExtend);\n}\nfunction mergeDeep(config1, config2) {\n    const target = {};\n    function isObject(obj) {\n        return obj && typeof obj === 'object' && !Array.isArray(obj);\n    }\n    Object.assign(target, config1);\n    for (const key of Object.keys(config2)) {\n        if (isObject(config2[key]) && isObject(target[key])) {\n            target[key] = mergeDeep(config1[key], config2[key]);\n        }\n        else {\n            target[key] = config2[key];\n        }\n    }\n    return target;\n}\n\nfunction parseCommand(cmd) {\n    const extraSpacesStrippedCommand = cmd.replace(/\\s{2,}/g, ' ');\n    const splitCommand = extraSpacesStrippedCommand.split(/\\s+(?![^[]*]|[^<]*>)/);\n    const bregex = /\\.*[\\][<>]/g;\n    const firstCommand = splitCommand.shift();\n    if (!firstCommand)\n        throw new Error(`No command found in: ${cmd}`);\n    const parsedCommand = {\n        cmd: firstCommand.replace(bregex, ''),\n        demanded: [],\n        optional: [],\n    };\n    splitCommand.forEach((cmd, i) => {\n        let variadic = false;\n        cmd = cmd.replace(/\\s/g, '');\n        if (/\\.+[\\]>]/.test(cmd) && i === splitCommand.length - 1)\n            variadic = true;\n        if (/^\\[/.test(cmd)) {\n            parsedCommand.optional.push({\n                cmd: cmd.replace(bregex, '').split('|'),\n                variadic,\n            });\n        }\n        else {\n            parsedCommand.demanded.push({\n                cmd: cmd.replace(bregex, '').split('|'),\n                variadic,\n            });\n        }\n    });\n    return parsedCommand;\n}\n\nconst positionName = ['first', 'second', 'third', 'fourth', 'fifth', 'sixth'];\nfunction argsert(arg1, arg2, arg3) {\n    function parseArgs() {\n        return typeof arg1 === 'object'\n            ? [{ demanded: [], optional: [] }, arg1, arg2]\n            : [\n                parseCommand(`cmd ${arg1}`),\n                arg2,\n                arg3,\n            ];\n    }\n    try {\n        let position = 0;\n        const [parsed, callerArguments, _length] = parseArgs();\n        const args = [].slice.call(callerArguments);\n        while (args.length && args[args.length - 1] === undefined)\n            args.pop();\n        const length = _length || args.length;\n        if (length < parsed.demanded.length) {\n            throw new YError(`Not enough arguments provided. Expected ${parsed.demanded.length} but received ${args.length}.`);\n        }\n        const totalCommands = parsed.demanded.length + parsed.optional.length;\n        if (length > totalCommands) {\n            throw new YError(`Too many arguments provided. Expected max ${totalCommands} but received ${length}.`);\n        }\n        parsed.demanded.forEach(demanded => {\n            const arg = args.shift();\n            const observedType = guessType(arg);\n            const matchingTypes = demanded.cmd.filter(type => type === observedType || type === '*');\n            if (matchingTypes.length === 0)\n                argumentTypeError(observedType, demanded.cmd, position);\n            position += 1;\n        });\n        parsed.optional.forEach(optional => {\n            if (args.length === 0)\n                return;\n            const arg = args.shift();\n            const observedType = guessType(arg);\n            const matchingTypes = optional.cmd.filter(type => type === observedType || type === '*');\n            if (matchingTypes.length === 0)\n                argumentTypeError(observedType, optional.cmd, position);\n            position += 1;\n        });\n    }\n    catch (err) {\n        console.warn(err.stack);\n    }\n}\nfunction guessType(arg) {\n    if (Array.isArray(arg)) {\n        return 'array';\n    }\n    else if (arg === null) {\n        return 'null';\n    }\n    return typeof arg;\n}\nfunction argumentTypeError(observedType, allowedTypes, position) {\n    throw new YError(`Invalid ${positionName[position] || 'manyith'} argument. Expected ${allowedTypes.join(' or ')} but received ${observedType}.`);\n}\n\nfunction isPromise(maybePromise) {\n    return (!!maybePromise &&\n        !!maybePromise.then &&\n        typeof maybePromise.then === 'function');\n}\n\nfunction assertNotStrictEqual(actual, expected, shim, message) {\n    shim.assert.notStrictEqual(actual, expected, message);\n}\nfunction assertSingleKey(actual, shim) {\n    shim.assert.strictEqual(typeof actual, 'string');\n}\nfunction objectKeys(object) {\n    return Object.keys(object);\n}\n\nfunction objFilter(original = {}, filter = () => true) {\n    const obj = {};\n    objectKeys(original).forEach(key => {\n        if (filter(key, original[key])) {\n            obj[key] = original[key];\n        }\n    });\n    return obj;\n}\n\nfunction globalMiddlewareFactory(globalMiddleware, context) {\n    return function (callback, applyBeforeValidation = false) {\n        argsert('<array|function> [boolean]', [callback, applyBeforeValidation], arguments.length);\n        if (Array.isArray(callback)) {\n            for (let i = 0; i < callback.length; i++) {\n                if (typeof callback[i] !== 'function') {\n                    throw Error('middleware must be a function');\n                }\n                callback[i].applyBeforeValidation = applyBeforeValidation;\n            }\n            Array.prototype.push.apply(globalMiddleware, callback);\n        }\n        else if (typeof callback === 'function') {\n            callback.applyBeforeValidation = applyBeforeValidation;\n            globalMiddleware.push(callback);\n        }\n        return context;\n    };\n}\nfunction commandMiddlewareFactory(commandMiddleware) {\n    if (!commandMiddleware)\n        return [];\n    return commandMiddleware.map(middleware => {\n        middleware.applyBeforeValidation = false;\n        return middleware;\n    });\n}\nfunction applyMiddleware(argv, yargs, middlewares, beforeValidation) {\n    const beforeValidationError = new Error('middleware cannot return a promise when applyBeforeValidation is true');\n    return middlewares.reduce((acc, middleware) => {\n        if (middleware.applyBeforeValidation !== beforeValidation) {\n            return acc;\n        }\n        if (isPromise(acc)) {\n            return acc\n                .then(initialObj => Promise.all([\n                initialObj,\n                middleware(initialObj, yargs),\n            ]))\n                .then(([initialObj, middlewareObj]) => Object.assign(initialObj, middlewareObj));\n        }\n        else {\n            const result = middleware(acc, yargs);\n            if (beforeValidation && isPromise(result))\n                throw beforeValidationError;\n            return isPromise(result)\n                ? result.then(middlewareObj => Object.assign(acc, middlewareObj))\n                : Object.assign(acc, result);\n        }\n    }, argv);\n}\n\nfunction getProcessArgvBinIndex() {\n    if (isBundledElectronApp())\n        return 0;\n    return 1;\n}\nfunction isBundledElectronApp() {\n    return isElectronApp() && !process.defaultApp;\n}\nfunction isElectronApp() {\n    return !!process.versions.electron;\n}\nfunction hideBin(argv) {\n    return argv.slice(getProcessArgvBinIndex() + 1);\n}\nfunction getProcessArgvBin() {\n    return process.argv[getProcessArgvBinIndex()];\n}\n\nvar processArgv = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  hideBin: hideBin,\n  getProcessArgvBin: getProcessArgvBin\n});\n\nfunction whichModule(exported) {\n    if (typeof require === 'undefined')\n        return null;\n    for (let i = 0, files = Object.keys(require.cache), mod; i < files.length; i++) {\n        mod = require.cache[files[i]];\n        if (mod.exports === exported)\n            return mod;\n    }\n    return null;\n}\n\nconst DEFAULT_MARKER = /(^\\*)|(^\\$0)/;\nfunction command(yargs, usage, validation, globalMiddleware = [], shim) {\n    const self = {};\n    let handlers = {};\n    let aliasMap = {};\n    let defaultCommand;\n    self.addHandler = function addHandler(cmd, description, builder, handler, commandMiddleware, deprecated) {\n        let aliases = [];\n        const middlewares = commandMiddlewareFactory(commandMiddleware);\n        handler = handler || (() => { });\n        if (Array.isArray(cmd)) {\n            if (isCommandAndAliases(cmd)) {\n                [cmd, ...aliases] = cmd;\n            }\n            else {\n                for (const command of cmd) {\n                    self.addHandler(command);\n                }\n            }\n        }\n        else if (isCommandHandlerDefinition(cmd)) {\n            let command = Array.isArray(cmd.command) || typeof cmd.command === 'string'\n                ? cmd.command\n                : moduleName(cmd);\n            if (cmd.aliases)\n                command = [].concat(command).concat(cmd.aliases);\n            self.addHandler(command, extractDesc(cmd), cmd.builder, cmd.handler, cmd.middlewares, cmd.deprecated);\n            return;\n        }\n        else if (isCommandBuilderDefinition(builder)) {\n            self.addHandler([cmd].concat(aliases), description, builder.builder, builder.handler, builder.middlewares, builder.deprecated);\n            return;\n        }\n        if (typeof cmd === 'string') {\n            const parsedCommand = parseCommand(cmd);\n            aliases = aliases.map(alias => parseCommand(alias).cmd);\n            let isDefault = false;\n            const parsedAliases = [parsedCommand.cmd].concat(aliases).filter(c => {\n                if (DEFAULT_MARKER.test(c)) {\n                    isDefault = true;\n                    return false;\n                }\n                return true;\n            });\n            if (parsedAliases.length === 0 && isDefault)\n                parsedAliases.push('$0');\n            if (isDefault) {\n                parsedCommand.cmd = parsedAliases[0];\n                aliases = parsedAliases.slice(1);\n                cmd = cmd.replace(DEFAULT_MARKER, parsedCommand.cmd);\n            }\n            aliases.forEach(alias => {\n                aliasMap[alias] = parsedCommand.cmd;\n            });\n            if (description !== false) {\n                usage.command(cmd, description, isDefault, aliases, deprecated);\n            }\n            handlers[parsedCommand.cmd] = {\n                original: cmd,\n                description,\n                handler,\n                builder: builder || {},\n                middlewares,\n                deprecated,\n                demanded: parsedCommand.demanded,\n                optional: parsedCommand.optional,\n            };\n            if (isDefault)\n                defaultCommand = handlers[parsedCommand.cmd];\n        }\n    };\n    self.addDirectory = function addDirectory(dir, context, req, callerFile, opts) {\n        opts = opts || {};\n        if (typeof opts.recurse !== 'boolean')\n            opts.recurse = false;\n        if (!Array.isArray(opts.extensions))\n            opts.extensions = ['js'];\n        const parentVisit = typeof opts.visit === 'function' ? opts.visit : (o) => o;\n        opts.visit = function visit(obj, joined, filename) {\n            const visited = parentVisit(obj, joined, filename);\n            if (visited) {\n                if (~context.files.indexOf(joined))\n                    return visited;\n                context.files.push(joined);\n                self.addHandler(visited);\n            }\n            return visited;\n        };\n        shim.requireDirectory({ require: req, filename: callerFile }, dir, opts);\n    };\n    function moduleName(obj) {\n        const mod = whichModule(obj);\n        if (!mod)\n            throw new Error(`No command name given for module: ${shim.inspect(obj)}`);\n        return commandFromFilename(mod.filename);\n    }\n    function commandFromFilename(filename) {\n        return shim.path.basename(filename, shim.path.extname(filename));\n    }\n    function extractDesc({ describe, description, desc, }) {\n        for (const test of [describe, description, desc]) {\n            if (typeof test === 'string' || test === false)\n                return test;\n            assertNotStrictEqual(test, true, shim);\n        }\n        return false;\n    }\n    self.getCommands = () => Object.keys(handlers).concat(Object.keys(aliasMap));\n    self.getCommandHandlers = () => handlers;\n    self.hasDefaultCommand = () => !!defaultCommand;\n    self.runCommand = function runCommand(command, yargs, parsed, commandIndex) {\n        let aliases = parsed.aliases;\n        const commandHandler = handlers[command] || handlers[aliasMap[command]] || defaultCommand;\n        const currentContext = yargs.getContext();\n        let numFiles = currentContext.files.length;\n        const parentCommands = currentContext.commands.slice();\n        let innerArgv = parsed.argv;\n        let positionalMap = {};\n        if (command) {\n            currentContext.commands.push(command);\n            currentContext.fullCommands.push(commandHandler.original);\n        }\n        const builder = commandHandler.builder;\n        if (isCommandBuilderCallback(builder)) {\n            const builderOutput = builder(yargs.reset(parsed.aliases));\n            const innerYargs = isYargsInstance(builderOutput) ? builderOutput : yargs;\n            if (shouldUpdateUsage(innerYargs)) {\n                innerYargs\n                    .getUsageInstance()\n                    .usage(usageFromParentCommandsCommandHandler(parentCommands, commandHandler), commandHandler.description);\n            }\n            innerArgv = innerYargs._parseArgs(null, null, true, commandIndex);\n            aliases = innerYargs.parsed.aliases;\n        }\n        else if (isCommandBuilderOptionDefinitions(builder)) {\n            const innerYargs = yargs.reset(parsed.aliases);\n            if (shouldUpdateUsage(innerYargs)) {\n                innerYargs\n                    .getUsageInstance()\n                    .usage(usageFromParentCommandsCommandHandler(parentCommands, commandHandler), commandHandler.description);\n            }\n            Object.keys(commandHandler.builder).forEach(key => {\n                innerYargs.option(key, builder[key]);\n            });\n            innerArgv = innerYargs._parseArgs(null, null, true, commandIndex);\n            aliases = innerYargs.parsed.aliases;\n        }\n        if (!yargs._hasOutput()) {\n            positionalMap = populatePositionals(commandHandler, innerArgv, currentContext);\n        }\n        const middlewares = globalMiddleware\n            .slice(0)\n            .concat(commandHandler.middlewares);\n        applyMiddleware(innerArgv, yargs, middlewares, true);\n        if (!yargs._hasOutput()) {\n            yargs._runValidation(innerArgv, aliases, positionalMap, yargs.parsed.error, !command);\n        }\n        if (commandHandler.handler && !yargs._hasOutput()) {\n            yargs._setHasOutput();\n            const populateDoubleDash = !!yargs.getOptions().configuration['populate--'];\n            yargs._postProcess(innerArgv, populateDoubleDash);\n            innerArgv = applyMiddleware(innerArgv, yargs, middlewares, false);\n            let handlerResult;\n            if (isPromise(innerArgv)) {\n                handlerResult = innerArgv.then(argv => commandHandler.handler(argv));\n            }\n            else {\n                handlerResult = commandHandler.handler(innerArgv);\n            }\n            const handlerFinishCommand = yargs.getHandlerFinishCommand();\n            if (isPromise(handlerResult)) {\n                yargs.getUsageInstance().cacheHelpMessage();\n                handlerResult\n                    .then(value => {\n                    if (handlerFinishCommand) {\n                        handlerFinishCommand(value);\n                    }\n                })\n                    .catch(error => {\n                    try {\n                        yargs.getUsageInstance().fail(null, error);\n                    }\n                    catch (err) {\n                    }\n                })\n                    .then(() => {\n                    yargs.getUsageInstance().clearCachedHelpMessage();\n                });\n            }\n            else {\n                if (handlerFinishCommand) {\n                    handlerFinishCommand(handlerResult);\n                }\n            }\n        }\n        if (command) {\n            currentContext.commands.pop();\n            currentContext.fullCommands.pop();\n        }\n        numFiles = currentContext.files.length - numFiles;\n        if (numFiles > 0)\n            currentContext.files.splice(numFiles * -1, numFiles);\n        return innerArgv;\n    };\n    function shouldUpdateUsage(yargs) {\n        return (!yargs.getUsageInstance().getUsageDisabled() &&\n            yargs.getUsageInstance().getUsage().length === 0);\n    }\n    function usageFromParentCommandsCommandHandler(parentCommands, commandHandler) {\n        const c = DEFAULT_MARKER.test(commandHandler.original)\n            ? commandHandler.original.replace(DEFAULT_MARKER, '').trim()\n            : commandHandler.original;\n        const pc = parentCommands.filter(c => {\n            return !DEFAULT_MARKER.test(c);\n        });\n        pc.push(c);\n        return `$0 ${pc.join(' ')}`;\n    }\n    self.runDefaultBuilderOn = function (yargs) {\n        assertNotStrictEqual(defaultCommand, undefined, shim);\n        if (shouldUpdateUsage(yargs)) {\n            const commandString = DEFAULT_MARKER.test(defaultCommand.original)\n                ? defaultCommand.original\n                : defaultCommand.original.replace(/^[^[\\]<>]*/, '$0 ');\n            yargs.getUsageInstance().usage(commandString, defaultCommand.description);\n        }\n        const builder = defaultCommand.builder;\n        if (isCommandBuilderCallback(builder)) {\n            builder(yargs);\n        }\n        else if (!isCommandBuilderDefinition(builder)) {\n            Object.keys(builder).forEach(key => {\n                yargs.option(key, builder[key]);\n            });\n        }\n    };\n    function populatePositionals(commandHandler, argv, context) {\n        argv._ = argv._.slice(context.commands.length);\n        const demanded = commandHandler.demanded.slice(0);\n        const optional = commandHandler.optional.slice(0);\n        const positionalMap = {};\n        validation.positionalCount(demanded.length, argv._.length);\n        while (demanded.length) {\n            const demand = demanded.shift();\n            populatePositional(demand, argv, positionalMap);\n        }\n        while (optional.length) {\n            const maybe = optional.shift();\n            populatePositional(maybe, argv, positionalMap);\n        }\n        argv._ = context.commands.concat(argv._.map(a => '' + a));\n        postProcessPositionals(argv, positionalMap, self.cmdToParseOptions(commandHandler.original));\n        return positionalMap;\n    }\n    function populatePositional(positional, argv, positionalMap) {\n        const cmd = positional.cmd[0];\n        if (positional.variadic) {\n            positionalMap[cmd] = argv._.splice(0).map(String);\n        }\n        else {\n            if (argv._.length)\n                positionalMap[cmd] = [String(argv._.shift())];\n        }\n    }\n    function postProcessPositionals(argv, positionalMap, parseOptions) {\n        const options = Object.assign({}, yargs.getOptions());\n        options.default = Object.assign(parseOptions.default, options.default);\n        for (const key of Object.keys(parseOptions.alias)) {\n            options.alias[key] = (options.alias[key] || []).concat(parseOptions.alias[key]);\n        }\n        options.array = options.array.concat(parseOptions.array);\n        options.config = {};\n        const unparsed = [];\n        Object.keys(positionalMap).forEach(key => {\n            positionalMap[key].map(value => {\n                if (options.configuration['unknown-options-as-args'])\n                    options.key[key] = true;\n                unparsed.push(`--${key}`);\n                unparsed.push(value);\n            });\n        });\n        if (!unparsed.length)\n            return;\n        const config = Object.assign({}, options.configuration, {\n            'populate--': true,\n        });\n        const parsed = shim.Parser.detailed(unparsed, Object.assign({}, options, {\n            configuration: config,\n        }));\n        if (parsed.error) {\n            yargs.getUsageInstance().fail(parsed.error.message, parsed.error);\n        }\n        else {\n            const positionalKeys = Object.keys(positionalMap);\n            Object.keys(positionalMap).forEach(key => {\n                positionalKeys.push(...parsed.aliases[key]);\n            });\n            Object.keys(parsed.argv).forEach(key => {\n                if (positionalKeys.indexOf(key) !== -1) {\n                    if (!positionalMap[key])\n                        positionalMap[key] = parsed.argv[key];\n                    argv[key] = parsed.argv[key];\n                }\n            });\n        }\n    }\n    self.cmdToParseOptions = function (cmdString) {\n        const parseOptions = {\n            array: [],\n            default: {},\n            alias: {},\n            demand: {},\n        };\n        const parsed = parseCommand(cmdString);\n        parsed.demanded.forEach(d => {\n            const [cmd, ...aliases] = d.cmd;\n            if (d.variadic) {\n                parseOptions.array.push(cmd);\n                parseOptions.default[cmd] = [];\n            }\n            parseOptions.alias[cmd] = aliases;\n            parseOptions.demand[cmd] = true;\n        });\n        parsed.optional.forEach(o => {\n            const [cmd, ...aliases] = o.cmd;\n            if (o.variadic) {\n                parseOptions.array.push(cmd);\n                parseOptions.default[cmd] = [];\n            }\n            parseOptions.alias[cmd] = aliases;\n        });\n        return parseOptions;\n    };\n    self.reset = () => {\n        handlers = {};\n        aliasMap = {};\n        defaultCommand = undefined;\n        return self;\n    };\n    const frozens = [];\n    self.freeze = () => {\n        frozens.push({\n            handlers,\n            aliasMap,\n            defaultCommand,\n        });\n    };\n    self.unfreeze = () => {\n        const frozen = frozens.pop();\n        assertNotStrictEqual(frozen, undefined, shim);\n        ({ handlers, aliasMap, defaultCommand } = frozen);\n    };\n    return self;\n}\nfunction isCommandBuilderDefinition(builder) {\n    return (typeof builder === 'object' &&\n        !!builder.builder &&\n        typeof builder.handler === 'function');\n}\nfunction isCommandAndAliases(cmd) {\n    if (cmd.every(c => typeof c === 'string')) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nfunction isCommandBuilderCallback(builder) {\n    return typeof builder === 'function';\n}\nfunction isCommandBuilderOptionDefinitions(builder) {\n    return typeof builder === 'object';\n}\nfunction isCommandHandlerDefinition(cmd) {\n    return typeof cmd === 'object' && !Array.isArray(cmd);\n}\n\nfunction setBlocking(blocking) {\n    if (typeof process === 'undefined')\n        return;\n    [process.stdout, process.stderr].forEach(_stream => {\n        const stream = _stream;\n        if (stream._handle &&\n            stream.isTTY &&\n            typeof stream._handle.setBlocking === 'function') {\n            stream._handle.setBlocking(blocking);\n        }\n    });\n}\n\nfunction usage(yargs, y18n, shim) {\n    const __ = y18n.__;\n    const self = {};\n    const fails = [];\n    self.failFn = function failFn(f) {\n        fails.push(f);\n    };\n    let failMessage = null;\n    let showHelpOnFail = true;\n    self.showHelpOnFail = function showHelpOnFailFn(arg1 = true, arg2) {\n        function parseFunctionArgs() {\n            return typeof arg1 === 'string' ? [true, arg1] : [arg1, arg2];\n        }\n        const [enabled, message] = parseFunctionArgs();\n        failMessage = message;\n        showHelpOnFail = enabled;\n        return self;\n    };\n    let failureOutput = false;\n    self.fail = function fail(msg, err) {\n        const logger = yargs._getLoggerInstance();\n        if (fails.length) {\n            for (let i = fails.length - 1; i >= 0; --i) {\n                fails[i](msg, err, self);\n            }\n        }\n        else {\n            if (yargs.getExitProcess())\n                setBlocking(true);\n            if (!failureOutput) {\n                failureOutput = true;\n                if (showHelpOnFail) {\n                    yargs.showHelp('error');\n                    logger.error();\n                }\n                if (msg || err)\n                    logger.error(msg || err);\n                if (failMessage) {\n                    if (msg || err)\n                        logger.error('');\n                    logger.error(failMessage);\n                }\n            }\n            err = err || new YError(msg);\n            if (yargs.getExitProcess()) {\n                return yargs.exit(1);\n            }\n            else if (yargs._hasParseCallback()) {\n                return yargs.exit(1, err);\n            }\n            else {\n                throw err;\n            }\n        }\n    };\n    let usages = [];\n    let usageDisabled = false;\n    self.usage = (msg, description) => {\n        if (msg === null) {\n            usageDisabled = true;\n            usages = [];\n            return self;\n        }\n        usageDisabled = false;\n        usages.push([msg, description || '']);\n        return self;\n    };\n    self.getUsage = () => {\n        return usages;\n    };\n    self.getUsageDisabled = () => {\n        return usageDisabled;\n    };\n    self.getPositionalGroupName = () => {\n        return __('Positionals:');\n    };\n    let examples = [];\n    self.example = (cmd, description) => {\n        examples.push([cmd, description || '']);\n    };\n    let commands = [];\n    self.command = function command(cmd, description, isDefault, aliases, deprecated = false) {\n        if (isDefault) {\n            commands = commands.map(cmdArray => {\n                cmdArray[2] = false;\n                return cmdArray;\n            });\n        }\n        commands.push([cmd, description || '', isDefault, aliases, deprecated]);\n    };\n    self.getCommands = () => commands;\n    let descriptions = {};\n    self.describe = function describe(keyOrKeys, desc) {\n        if (Array.isArray(keyOrKeys)) {\n            keyOrKeys.forEach(k => {\n                self.describe(k, desc);\n            });\n        }\n        else if (typeof keyOrKeys === 'object') {\n            Object.keys(keyOrKeys).forEach(k => {\n                self.describe(k, keyOrKeys[k]);\n            });\n        }\n        else {\n            descriptions[keyOrKeys] = desc;\n        }\n    };\n    self.getDescriptions = () => descriptions;\n    let epilogs = [];\n    self.epilog = msg => {\n        epilogs.push(msg);\n    };\n    let wrapSet = false;\n    let wrap;\n    self.wrap = cols => {\n        wrapSet = true;\n        wrap = cols;\n    };\n    function getWrap() {\n        if (!wrapSet) {\n            wrap = windowWidth();\n            wrapSet = true;\n        }\n        return wrap;\n    }\n    const deferY18nLookupPrefix = '__yargsString__:';\n    self.deferY18nLookup = str => deferY18nLookupPrefix + str;\n    self.help = function help() {\n        if (cachedHelpMessage)\n            return cachedHelpMessage;\n        normalizeAliases();\n        const base$0 = yargs.customScriptName\n            ? yargs.$0\n            : shim.path.basename(yargs.$0);\n        const demandedOptions = yargs.getDemandedOptions();\n        const demandedCommands = yargs.getDemandedCommands();\n        const deprecatedOptions = yargs.getDeprecatedOptions();\n        const groups = yargs.getGroups();\n        const options = yargs.getOptions();\n        let keys = [];\n        keys = keys.concat(Object.keys(descriptions));\n        keys = keys.concat(Object.keys(demandedOptions));\n        keys = keys.concat(Object.keys(demandedCommands));\n        keys = keys.concat(Object.keys(options.default));\n        keys = keys.filter(filterHiddenOptions);\n        keys = Object.keys(keys.reduce((acc, key) => {\n            if (key !== '_')\n                acc[key] = true;\n            return acc;\n        }, {}));\n        const theWrap = getWrap();\n        const ui = shim.cliui({\n            width: theWrap,\n            wrap: !!theWrap,\n        });\n        if (!usageDisabled) {\n            if (usages.length) {\n                usages.forEach(usage => {\n                    ui.div(`${usage[0].replace(/\\$0/g, base$0)}`);\n                    if (usage[1]) {\n                        ui.div({ text: `${usage[1]}`, padding: [1, 0, 0, 0] });\n                    }\n                });\n                ui.div();\n            }\n            else if (commands.length) {\n                let u = null;\n                if (demandedCommands._) {\n                    u = `${base$0} <${__('command')}>\\n`;\n                }\n                else {\n                    u = `${base$0} [${__('command')}]\\n`;\n                }\n                ui.div(`${u}`);\n            }\n        }\n        if (commands.length) {\n            ui.div(__('Commands:'));\n            const context = yargs.getContext();\n            const parentCommands = context.commands.length\n                ? `${context.commands.join(' ')} `\n                : '';\n            if (yargs.getParserConfiguration()['sort-commands'] === true) {\n                commands = commands.sort((a, b) => a[0].localeCompare(b[0]));\n            }\n            commands.forEach(command => {\n                const commandString = `${base$0} ${parentCommands}${command[0].replace(/^\\$0 ?/, '')}`;\n                ui.span({\n                    text: commandString,\n                    padding: [0, 2, 0, 2],\n                    width: maxWidth(commands, theWrap, `${base$0}${parentCommands}`) + 4,\n                }, { text: command[1] });\n                const hints = [];\n                if (command[2])\n                    hints.push(`[${__('default')}]`);\n                if (command[3] && command[3].length) {\n                    hints.push(`[${__('aliases:')} ${command[3].join(', ')}]`);\n                }\n                if (command[4]) {\n                    if (typeof command[4] === 'string') {\n                        hints.push(`[${__('deprecated: %s', command[4])}]`);\n                    }\n                    else {\n                        hints.push(`[${__('deprecated')}]`);\n                    }\n                }\n                if (hints.length) {\n                    ui.div({\n                        text: hints.join(' '),\n                        padding: [0, 0, 0, 2],\n                        align: 'right',\n                    });\n                }\n                else {\n                    ui.div();\n                }\n            });\n            ui.div();\n        }\n        const aliasKeys = (Object.keys(options.alias) || []).concat(Object.keys(yargs.parsed.newAliases) || []);\n        keys = keys.filter(key => !yargs.parsed.newAliases[key] &&\n            aliasKeys.every(alias => (options.alias[alias] || []).indexOf(key) === -1));\n        const defaultGroup = __('Options:');\n        if (!groups[defaultGroup])\n            groups[defaultGroup] = [];\n        addUngroupedKeys(keys, options.alias, groups, defaultGroup);\n        const isLongSwitch = (sw) => /^--/.test(getText(sw));\n        const displayedGroups = Object.keys(groups)\n            .filter(groupName => groups[groupName].length > 0)\n            .map(groupName => {\n            const normalizedKeys = groups[groupName]\n                .filter(filterHiddenOptions)\n                .map(key => {\n                if (~aliasKeys.indexOf(key))\n                    return key;\n                for (let i = 0, aliasKey; (aliasKey = aliasKeys[i]) !== undefined; i++) {\n                    if (~(options.alias[aliasKey] || []).indexOf(key))\n                        return aliasKey;\n                }\n                return key;\n            });\n            return { groupName, normalizedKeys };\n        })\n            .filter(({ normalizedKeys }) => normalizedKeys.length > 0)\n            .map(({ groupName, normalizedKeys }) => {\n            const switches = normalizedKeys.reduce((acc, key) => {\n                acc[key] = [key]\n                    .concat(options.alias[key] || [])\n                    .map(sw => {\n                    if (groupName === self.getPositionalGroupName())\n                        return sw;\n                    else {\n                        return ((/^[0-9]$/.test(sw)\n                            ? ~options.boolean.indexOf(key)\n                                ? '-'\n                                : '--'\n                            : sw.length > 1\n                                ? '--'\n                                : '-') + sw);\n                    }\n                })\n                    .sort((sw1, sw2) => isLongSwitch(sw1) === isLongSwitch(sw2)\n                    ? 0\n                    : isLongSwitch(sw1)\n                        ? 1\n                        : -1)\n                    .join(', ');\n                return acc;\n            }, {});\n            return { groupName, normalizedKeys, switches };\n        });\n        const shortSwitchesUsed = displayedGroups\n            .filter(({ groupName }) => groupName !== self.getPositionalGroupName())\n            .some(({ normalizedKeys, switches }) => !normalizedKeys.every(key => isLongSwitch(switches[key])));\n        if (shortSwitchesUsed) {\n            displayedGroups\n                .filter(({ groupName }) => groupName !== self.getPositionalGroupName())\n                .forEach(({ normalizedKeys, switches }) => {\n                normalizedKeys.forEach(key => {\n                    if (isLongSwitch(switches[key])) {\n                        switches[key] = addIndentation(switches[key], '-x, '.length);\n                    }\n                });\n            });\n        }\n        displayedGroups.forEach(({ groupName, normalizedKeys, switches }) => {\n            ui.div(groupName);\n            normalizedKeys.forEach(key => {\n                const kswitch = switches[key];\n                let desc = descriptions[key] || '';\n                let type = null;\n                if (~desc.lastIndexOf(deferY18nLookupPrefix))\n                    desc = __(desc.substring(deferY18nLookupPrefix.length));\n                if (~options.boolean.indexOf(key))\n                    type = `[${__('boolean')}]`;\n                if (~options.count.indexOf(key))\n                    type = `[${__('count')}]`;\n                if (~options.string.indexOf(key))\n                    type = `[${__('string')}]`;\n                if (~options.normalize.indexOf(key))\n                    type = `[${__('string')}]`;\n                if (~options.array.indexOf(key))\n                    type = `[${__('array')}]`;\n                if (~options.number.indexOf(key))\n                    type = `[${__('number')}]`;\n                const deprecatedExtra = (deprecated) => typeof deprecated === 'string'\n                    ? `[${__('deprecated: %s', deprecated)}]`\n                    : `[${__('deprecated')}]`;\n                const extra = [\n                    key in deprecatedOptions\n                        ? deprecatedExtra(deprecatedOptions[key])\n                        : null,\n                    type,\n                    key in demandedOptions ? `[${__('required')}]` : null,\n                    options.choices && options.choices[key]\n                        ? `[${__('choices:')} ${self.stringifiedValues(options.choices[key])}]`\n                        : null,\n                    defaultString(options.default[key], options.defaultDescription[key]),\n                ]\n                    .filter(Boolean)\n                    .join(' ');\n                ui.span({\n                    text: getText(kswitch),\n                    padding: [0, 2, 0, 2 + getIndentation(kswitch)],\n                    width: maxWidth(switches, theWrap) + 4,\n                }, desc);\n                if (extra)\n                    ui.div({ text: extra, padding: [0, 0, 0, 2], align: 'right' });\n                else\n                    ui.div();\n            });\n            ui.div();\n        });\n        if (examples.length) {\n            ui.div(__('Examples:'));\n            examples.forEach(example => {\n                example[0] = example[0].replace(/\\$0/g, base$0);\n            });\n            examples.forEach(example => {\n                if (example[1] === '') {\n                    ui.div({\n                        text: example[0],\n                        padding: [0, 2, 0, 2],\n                    });\n                }\n                else {\n                    ui.div({\n                        text: example[0],\n                        padding: [0, 2, 0, 2],\n                        width: maxWidth(examples, theWrap) + 4,\n                    }, {\n                        text: example[1],\n                    });\n                }\n            });\n            ui.div();\n        }\n        if (epilogs.length > 0) {\n            const e = epilogs\n                .map(epilog => epilog.replace(/\\$0/g, base$0))\n                .join('\\n');\n            ui.div(`${e}\\n`);\n        }\n        return ui.toString().replace(/\\s*$/, '');\n    };\n    function maxWidth(table, theWrap, modifier) {\n        let width = 0;\n        if (!Array.isArray(table)) {\n            table = Object.values(table).map(v => [v]);\n        }\n        table.forEach(v => {\n            width = Math.max(shim.stringWidth(modifier ? `${modifier} ${getText(v[0])}` : getText(v[0])) + getIndentation(v[0]), width);\n        });\n        if (theWrap)\n            width = Math.min(width, parseInt((theWrap * 0.5).toString(), 10));\n        return width;\n    }\n    function normalizeAliases() {\n        const demandedOptions = yargs.getDemandedOptions();\n        const options = yargs.getOptions();\n        (Object.keys(options.alias) || []).forEach(key => {\n            options.alias[key].forEach(alias => {\n                if (descriptions[alias])\n                    self.describe(key, descriptions[alias]);\n                if (alias in demandedOptions)\n                    yargs.demandOption(key, demandedOptions[alias]);\n                if (~options.boolean.indexOf(alias))\n                    yargs.boolean(key);\n                if (~options.count.indexOf(alias))\n                    yargs.count(key);\n                if (~options.string.indexOf(alias))\n                    yargs.string(key);\n                if (~options.normalize.indexOf(alias))\n                    yargs.normalize(key);\n                if (~options.array.indexOf(alias))\n                    yargs.array(key);\n                if (~options.number.indexOf(alias))\n                    yargs.number(key);\n            });\n        });\n    }\n    let cachedHelpMessage;\n    self.cacheHelpMessage = function () {\n        cachedHelpMessage = this.help();\n    };\n    self.clearCachedHelpMessage = function () {\n        cachedHelpMessage = undefined;\n    };\n    function addUngroupedKeys(keys, aliases, groups, defaultGroup) {\n        let groupedKeys = [];\n        let toCheck = null;\n        Object.keys(groups).forEach(group => {\n            groupedKeys = groupedKeys.concat(groups[group]);\n        });\n        keys.forEach(key => {\n            toCheck = [key].concat(aliases[key]);\n            if (!toCheck.some(k => groupedKeys.indexOf(k) !== -1)) {\n                groups[defaultGroup].push(key);\n            }\n        });\n        return groupedKeys;\n    }\n    function filterHiddenOptions(key) {\n        return (yargs.getOptions().hiddenOptions.indexOf(key) < 0 ||\n            yargs.parsed.argv[yargs.getOptions().showHiddenOpt]);\n    }\n    self.showHelp = (level) => {\n        const logger = yargs._getLoggerInstance();\n        if (!level)\n            level = 'error';\n        const emit = typeof level === 'function' ? level : logger[level];\n        emit(self.help());\n    };\n    self.functionDescription = fn => {\n        const description = fn.name\n            ? shim.Parser.decamelize(fn.name, '-')\n            : __('generated-value');\n        return ['(', description, ')'].join('');\n    };\n    self.stringifiedValues = function stringifiedValues(values, separator) {\n        let string = '';\n        const sep = separator || ', ';\n        const array = [].concat(values);\n        if (!values || !array.length)\n            return string;\n        array.forEach(value => {\n            if (string.length)\n                string += sep;\n            string += JSON.stringify(value);\n        });\n        return string;\n    };\n    function defaultString(value, defaultDescription) {\n        let string = `[${__('default:')} `;\n        if (value === undefined && !defaultDescription)\n            return null;\n        if (defaultDescription) {\n            string += defaultDescription;\n        }\n        else {\n            switch (typeof value) {\n                case 'string':\n                    string += `\"${value}\"`;\n                    break;\n                case 'object':\n                    string += JSON.stringify(value);\n                    break;\n                default:\n                    string += value;\n            }\n        }\n        return `${string}]`;\n    }\n    function windowWidth() {\n        const maxWidth = 80;\n        if (shim.process.stdColumns) {\n            return Math.min(maxWidth, shim.process.stdColumns);\n        }\n        else {\n            return maxWidth;\n        }\n    }\n    let version = null;\n    self.version = ver => {\n        version = ver;\n    };\n    self.showVersion = () => {\n        const logger = yargs._getLoggerInstance();\n        logger.log(version);\n    };\n    self.reset = function reset(localLookup) {\n        failMessage = null;\n        failureOutput = false;\n        usages = [];\n        usageDisabled = false;\n        epilogs = [];\n        examples = [];\n        commands = [];\n        descriptions = objFilter(descriptions, k => !localLookup[k]);\n        return self;\n    };\n    const frozens = [];\n    self.freeze = function freeze() {\n        frozens.push({\n            failMessage,\n            failureOutput,\n            usages,\n            usageDisabled,\n            epilogs,\n            examples,\n            commands,\n            descriptions,\n        });\n    };\n    self.unfreeze = function unfreeze() {\n        const frozen = frozens.pop();\n        assertNotStrictEqual(frozen, undefined, shim);\n        ({\n            failMessage,\n            failureOutput,\n            usages,\n            usageDisabled,\n            epilogs,\n            examples,\n            commands,\n            descriptions,\n        } = frozen);\n    };\n    return self;\n}\nfunction isIndentedText(text) {\n    return typeof text === 'object';\n}\nfunction addIndentation(text, indent) {\n    return isIndentedText(text)\n        ? { text: text.text, indentation: text.indentation + indent }\n        : { text, indentation: indent };\n}\nfunction getIndentation(text) {\n    return isIndentedText(text) ? text.indentation : 0;\n}\nfunction getText(text) {\n    return isIndentedText(text) ? text.text : text;\n}\n\nconst completionShTemplate = `###-begin-{{app_name}}-completions-###\n#\n# yargs command completion script\n#\n# Installation: {{app_path}} {{completion_command}} >> ~/.bashrc\n#    or {{app_path}} {{completion_command}} >> ~/.bash_profile on OSX.\n#\n_yargs_completions()\n{\n    local cur_word args type_list\n\n    cur_word=\"\\${COMP_WORDS[COMP_CWORD]}\"\n    args=(\"\\${COMP_WORDS[@]}\")\n\n    # ask yargs to generate completions.\n    type_list=$({{app_path}} --get-yargs-completions \"\\${args[@]}\")\n\n    COMPREPLY=( $(compgen -W \"\\${type_list}\" -- \\${cur_word}) )\n\n    # if no match was found, fall back to filename completion\n    if [ \\${#COMPREPLY[@]} -eq 0 ]; then\n      COMPREPLY=()\n    fi\n\n    return 0\n}\ncomplete -o default -F _yargs_completions {{app_name}}\n###-end-{{app_name}}-completions-###\n`;\nconst completionZshTemplate = `###-begin-{{app_name}}-completions-###\n#\n# yargs command completion script\n#\n# Installation: {{app_path}} {{completion_command}} >> ~/.zshrc\n#    or {{app_path}} {{completion_command}} >> ~/.zsh_profile on OSX.\n#\n_{{app_name}}_yargs_completions()\n{\n  local reply\n  local si=$IFS\n  IFS=$'\\n' reply=($(COMP_CWORD=\"$((CURRENT-1))\" COMP_LINE=\"$BUFFER\" COMP_POINT=\"$CURSOR\" {{app_path}} --get-yargs-completions \"\\${words[@]}\"))\n  IFS=$si\n  _describe 'values' reply\n}\ncompdef _{{app_name}}_yargs_completions {{app_name}}\n###-end-{{app_name}}-completions-###\n`;\n\nfunction completion(yargs, usage, command, shim) {\n    const self = {\n        completionKey: 'get-yargs-completions',\n    };\n    let aliases;\n    self.setParsed = function setParsed(parsed) {\n        aliases = parsed.aliases;\n    };\n    const zshShell = (shim.getEnv('SHELL') && shim.getEnv('SHELL').indexOf('zsh') !== -1) ||\n        (shim.getEnv('ZSH_NAME') && shim.getEnv('ZSH_NAME').indexOf('zsh') !== -1);\n    self.getCompletion = function getCompletion(args, done) {\n        const completions = [];\n        const current = args.length ? args[args.length - 1] : '';\n        const argv = yargs.parse(args, true);\n        const parentCommands = yargs.getContext().commands;\n        function runCompletionFunction(argv) {\n            assertNotStrictEqual(completionFunction, null, shim);\n            if (isSyncCompletionFunction(completionFunction)) {\n                const result = completionFunction(current, argv);\n                if (isPromise(result)) {\n                    return result\n                        .then(list => {\n                        shim.process.nextTick(() => {\n                            done(list);\n                        });\n                    })\n                        .catch(err => {\n                        shim.process.nextTick(() => {\n                            throw err;\n                        });\n                    });\n                }\n                return done(result);\n            }\n            else {\n                return completionFunction(current, argv, completions => {\n                    done(completions);\n                });\n            }\n        }\n        if (completionFunction) {\n            return isPromise(argv)\n                ? argv.then(runCompletionFunction)\n                : runCompletionFunction(argv);\n        }\n        const handlers = command.getCommandHandlers();\n        for (let i = 0, ii = args.length; i < ii; ++i) {\n            if (handlers[args[i]] && handlers[args[i]].builder) {\n                const builder = handlers[args[i]].builder;\n                if (isCommandBuilderCallback(builder)) {\n                    const y = yargs.reset();\n                    builder(y);\n                    return y.argv;\n                }\n            }\n        }\n        if (!current.match(/^-/) &&\n            parentCommands[parentCommands.length - 1] !== current) {\n            usage.getCommands().forEach(usageCommand => {\n                const commandName = parseCommand(usageCommand[0]).cmd;\n                if (args.indexOf(commandName) === -1) {\n                    if (!zshShell) {\n                        completions.push(commandName);\n                    }\n                    else {\n                        const desc = usageCommand[1] || '';\n                        completions.push(commandName.replace(/:/g, '\\\\:') + ':' + desc);\n                    }\n                }\n            });\n        }\n        if (current.match(/^-/) || (current === '' && completions.length === 0)) {\n            const descs = usage.getDescriptions();\n            const options = yargs.getOptions();\n            Object.keys(options.key).forEach(key => {\n                const negable = !!options.configuration['boolean-negation'] &&\n                    options.boolean.includes(key);\n                let keyAndAliases = [key].concat(aliases[key] || []);\n                if (negable)\n                    keyAndAliases = keyAndAliases.concat(keyAndAliases.map(key => `no-${key}`));\n                function completeOptionKey(key) {\n                    const notInArgs = keyAndAliases.every(val => args.indexOf(`--${val}`) === -1);\n                    if (notInArgs) {\n                        const startsByTwoDashes = (s) => /^--/.test(s);\n                        const isShortOption = (s) => /^[^0-9]$/.test(s);\n                        const dashes = !startsByTwoDashes(current) && isShortOption(key) ? '-' : '--';\n                        if (!zshShell) {\n                            completions.push(dashes + key);\n                        }\n                        else {\n                            const desc = descs[key] || '';\n                            completions.push(dashes +\n                                `${key.replace(/:/g, '\\\\:')}:${desc.replace('__yargsString__:', '')}`);\n                        }\n                    }\n                }\n                completeOptionKey(key);\n                if (negable && !!options.default[key])\n                    completeOptionKey(`no-${key}`);\n            });\n        }\n        done(completions);\n    };\n    self.generateCompletionScript = function generateCompletionScript($0, cmd) {\n        let script = zshShell\n            ? completionZshTemplate\n            : completionShTemplate;\n        const name = shim.path.basename($0);\n        if ($0.match(/\\.js$/))\n            $0 = `./${$0}`;\n        script = script.replace(/{{app_name}}/g, name);\n        script = script.replace(/{{completion_command}}/g, cmd);\n        return script.replace(/{{app_path}}/g, $0);\n    };\n    let completionFunction = null;\n    self.registerFunction = fn => {\n        completionFunction = fn;\n    };\n    return self;\n}\nfunction isSyncCompletionFunction(completionFunction) {\n    return completionFunction.length < 3;\n}\n\nfunction levenshtein(a, b) {\n    if (a.length === 0)\n        return b.length;\n    if (b.length === 0)\n        return a.length;\n    const matrix = [];\n    let i;\n    for (i = 0; i <= b.length; i++) {\n        matrix[i] = [i];\n    }\n    let j;\n    for (j = 0; j <= a.length; j++) {\n        matrix[0][j] = j;\n    }\n    for (i = 1; i <= b.length; i++) {\n        for (j = 1; j <= a.length; j++) {\n            if (b.charAt(i - 1) === a.charAt(j - 1)) {\n                matrix[i][j] = matrix[i - 1][j - 1];\n            }\n            else {\n                matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, Math.min(matrix[i][j - 1] + 1, matrix[i - 1][j] + 1));\n            }\n        }\n    }\n    return matrix[b.length][a.length];\n}\n\nconst specialKeys = ['$0', '--', '_'];\nfunction validation(yargs, usage, y18n, shim) {\n    const __ = y18n.__;\n    const __n = y18n.__n;\n    const self = {};\n    self.nonOptionCount = function nonOptionCount(argv) {\n        const demandedCommands = yargs.getDemandedCommands();\n        const positionalCount = argv._.length + (argv['--'] ? argv['--'].length : 0);\n        const _s = positionalCount - yargs.getContext().commands.length;\n        if (demandedCommands._ &&\n            (_s < demandedCommands._.min || _s > demandedCommands._.max)) {\n            if (_s < demandedCommands._.min) {\n                if (demandedCommands._.minMsg !== undefined) {\n                    usage.fail(demandedCommands._.minMsg\n                        ? demandedCommands._.minMsg\n                            .replace(/\\$0/g, _s.toString())\n                            .replace(/\\$1/, demandedCommands._.min.toString())\n                        : null);\n                }\n                else {\n                    usage.fail(__n('Not enough non-option arguments: got %s, need at least %s', 'Not enough non-option arguments: got %s, need at least %s', _s, _s.toString(), demandedCommands._.min.toString()));\n                }\n            }\n            else if (_s > demandedCommands._.max) {\n                if (demandedCommands._.maxMsg !== undefined) {\n                    usage.fail(demandedCommands._.maxMsg\n                        ? demandedCommands._.maxMsg\n                            .replace(/\\$0/g, _s.toString())\n                            .replace(/\\$1/, demandedCommands._.max.toString())\n                        : null);\n                }\n                else {\n                    usage.fail(__n('Too many non-option arguments: got %s, maximum of %s', 'Too many non-option arguments: got %s, maximum of %s', _s, _s.toString(), demandedCommands._.max.toString()));\n                }\n            }\n        }\n    };\n    self.positionalCount = function positionalCount(required, observed) {\n        if (observed < required) {\n            usage.fail(__n('Not enough non-option arguments: got %s, need at least %s', 'Not enough non-option arguments: got %s, need at least %s', observed, observed + '', required + ''));\n        }\n    };\n    self.requiredArguments = function requiredArguments(argv) {\n        const demandedOptions = yargs.getDemandedOptions();\n        let missing = null;\n        for (const key of Object.keys(demandedOptions)) {\n            if (!Object.prototype.hasOwnProperty.call(argv, key) ||\n                typeof argv[key] === 'undefined') {\n                missing = missing || {};\n                missing[key] = demandedOptions[key];\n            }\n        }\n        if (missing) {\n            const customMsgs = [];\n            for (const key of Object.keys(missing)) {\n                const msg = missing[key];\n                if (msg && customMsgs.indexOf(msg) < 0) {\n                    customMsgs.push(msg);\n                }\n            }\n            const customMsg = customMsgs.length ? `\\n${customMsgs.join('\\n')}` : '';\n            usage.fail(__n('Missing required argument: %s', 'Missing required arguments: %s', Object.keys(missing).length, Object.keys(missing).join(', ') + customMsg));\n        }\n    };\n    self.unknownArguments = function unknownArguments(argv, aliases, positionalMap, isDefaultCommand, checkPositionals = true) {\n        const commandKeys = yargs.getCommandInstance().getCommands();\n        const unknown = [];\n        const currentContext = yargs.getContext();\n        Object.keys(argv).forEach(key => {\n            if (specialKeys.indexOf(key) === -1 &&\n                !Object.prototype.hasOwnProperty.call(positionalMap, key) &&\n                !Object.prototype.hasOwnProperty.call(yargs._getParseContext(), key) &&\n                !self.isValidAndSomeAliasIsNotNew(key, aliases)) {\n                unknown.push(key);\n            }\n        });\n        if (checkPositionals &&\n            (currentContext.commands.length > 0 ||\n                commandKeys.length > 0 ||\n                isDefaultCommand)) {\n            argv._.slice(currentContext.commands.length).forEach(key => {\n                if (commandKeys.indexOf('' + key) === -1) {\n                    unknown.push('' + key);\n                }\n            });\n        }\n        if (unknown.length > 0) {\n            usage.fail(__n('Unknown argument: %s', 'Unknown arguments: %s', unknown.length, unknown.join(', ')));\n        }\n    };\n    self.unknownCommands = function unknownCommands(argv) {\n        const commandKeys = yargs.getCommandInstance().getCommands();\n        const unknown = [];\n        const currentContext = yargs.getContext();\n        if (currentContext.commands.length > 0 || commandKeys.length > 0) {\n            argv._.slice(currentContext.commands.length).forEach(key => {\n                if (commandKeys.indexOf('' + key) === -1) {\n                    unknown.push('' + key);\n                }\n            });\n        }\n        if (unknown.length > 0) {\n            usage.fail(__n('Unknown command: %s', 'Unknown commands: %s', unknown.length, unknown.join(', ')));\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    self.isValidAndSomeAliasIsNotNew = function isValidAndSomeAliasIsNotNew(key, aliases) {\n        if (!Object.prototype.hasOwnProperty.call(aliases, key)) {\n            return false;\n        }\n        const newAliases = yargs.parsed.newAliases;\n        for (const a of [key, ...aliases[key]]) {\n            if (!Object.prototype.hasOwnProperty.call(newAliases, a) ||\n                !newAliases[key]) {\n                return true;\n            }\n        }\n        return false;\n    };\n    self.limitedChoices = function limitedChoices(argv) {\n        const options = yargs.getOptions();\n        const invalid = {};\n        if (!Object.keys(options.choices).length)\n            return;\n        Object.keys(argv).forEach(key => {\n            if (specialKeys.indexOf(key) === -1 &&\n                Object.prototype.hasOwnProperty.call(options.choices, key)) {\n                [].concat(argv[key]).forEach(value => {\n                    if (options.choices[key].indexOf(value) === -1 &&\n                        value !== undefined) {\n                        invalid[key] = (invalid[key] || []).concat(value);\n                    }\n                });\n            }\n        });\n        const invalidKeys = Object.keys(invalid);\n        if (!invalidKeys.length)\n            return;\n        let msg = __('Invalid values:');\n        invalidKeys.forEach(key => {\n            msg += `\\n  ${__('Argument: %s, Given: %s, Choices: %s', key, usage.stringifiedValues(invalid[key]), usage.stringifiedValues(options.choices[key]))}`;\n        });\n        usage.fail(msg);\n    };\n    let checks = [];\n    self.check = function check(f, global) {\n        checks.push({\n            func: f,\n            global,\n        });\n    };\n    self.customChecks = function customChecks(argv, aliases) {\n        for (let i = 0, f; (f = checks[i]) !== undefined; i++) {\n            const func = f.func;\n            let result = null;\n            try {\n                result = func(argv, aliases);\n            }\n            catch (err) {\n                usage.fail(err.message ? err.message : err, err);\n                continue;\n            }\n            if (!result) {\n                usage.fail(__('Argument check failed: %s', func.toString()));\n            }\n            else if (typeof result === 'string' || result instanceof Error) {\n                usage.fail(result.toString(), result);\n            }\n        }\n    };\n    let implied = {};\n    self.implies = function implies(key, value) {\n        argsert('<string|object> [array|number|string]', [key, value], arguments.length);\n        if (typeof key === 'object') {\n            Object.keys(key).forEach(k => {\n                self.implies(k, key[k]);\n            });\n        }\n        else {\n            yargs.global(key);\n            if (!implied[key]) {\n                implied[key] = [];\n            }\n            if (Array.isArray(value)) {\n                value.forEach(i => self.implies(key, i));\n            }\n            else {\n                assertNotStrictEqual(value, undefined, shim);\n                implied[key].push(value);\n            }\n        }\n    };\n    self.getImplied = function getImplied() {\n        return implied;\n    };\n    function keyExists(argv, val) {\n        const num = Number(val);\n        val = isNaN(num) ? val : num;\n        if (typeof val === 'number') {\n            val = argv._.length >= val;\n        }\n        else if (val.match(/^--no-.+/)) {\n            val = val.match(/^--no-(.+)/)[1];\n            val = !argv[val];\n        }\n        else {\n            val = argv[val];\n        }\n        return val;\n    }\n    self.implications = function implications(argv) {\n        const implyFail = [];\n        Object.keys(implied).forEach(key => {\n            const origKey = key;\n            (implied[key] || []).forEach(value => {\n                let key = origKey;\n                const origValue = value;\n                key = keyExists(argv, key);\n                value = keyExists(argv, value);\n                if (key && !value) {\n                    implyFail.push(` ${origKey} -> ${origValue}`);\n                }\n            });\n        });\n        if (implyFail.length) {\n            let msg = `${__('Implications failed:')}\\n`;\n            implyFail.forEach(value => {\n                msg += value;\n            });\n            usage.fail(msg);\n        }\n    };\n    let conflicting = {};\n    self.conflicts = function conflicts(key, value) {\n        argsert('<string|object> [array|string]', [key, value], arguments.length);\n        if (typeof key === 'object') {\n            Object.keys(key).forEach(k => {\n                self.conflicts(k, key[k]);\n            });\n        }\n        else {\n            yargs.global(key);\n            if (!conflicting[key]) {\n                conflicting[key] = [];\n            }\n            if (Array.isArray(value)) {\n                value.forEach(i => self.conflicts(key, i));\n            }\n            else {\n                conflicting[key].push(value);\n            }\n        }\n    };\n    self.getConflicting = () => conflicting;\n    self.conflicting = function conflictingFn(argv) {\n        Object.keys(argv).forEach(key => {\n            if (conflicting[key]) {\n                conflicting[key].forEach(value => {\n                    if (value && argv[key] !== undefined && argv[value] !== undefined) {\n                        usage.fail(__('Arguments %s and %s are mutually exclusive', key, value));\n                    }\n                });\n            }\n        });\n    };\n    self.recommendCommands = function recommendCommands(cmd, potentialCommands) {\n        const threshold = 3;\n        potentialCommands = potentialCommands.sort((a, b) => b.length - a.length);\n        let recommended = null;\n        let bestDistance = Infinity;\n        for (let i = 0, candidate; (candidate = potentialCommands[i]) !== undefined; i++) {\n            const d = levenshtein(cmd, candidate);\n            if (d <= threshold && d < bestDistance) {\n                bestDistance = d;\n                recommended = candidate;\n            }\n        }\n        if (recommended)\n            usage.fail(__('Did you mean %s?', recommended));\n    };\n    self.reset = function reset(localLookup) {\n        implied = objFilter(implied, k => !localLookup[k]);\n        conflicting = objFilter(conflicting, k => !localLookup[k]);\n        checks = checks.filter(c => c.global);\n        return self;\n    };\n    const frozens = [];\n    self.freeze = function freeze() {\n        frozens.push({\n            implied,\n            checks,\n            conflicting,\n        });\n    };\n    self.unfreeze = function unfreeze() {\n        const frozen = frozens.pop();\n        assertNotStrictEqual(frozen, undefined, shim);\n        ({ implied, checks, conflicting } = frozen);\n    };\n    return self;\n}\n\nlet shim$1;\nfunction YargsWithShim(_shim) {\n    shim$1 = _shim;\n    return Yargs;\n}\nfunction Yargs(processArgs = [], cwd = shim$1.process.cwd(), parentRequire) {\n    const self = {};\n    let command$1;\n    let completion$1 = null;\n    let groups = {};\n    const globalMiddleware = [];\n    let output = '';\n    const preservedGroups = {};\n    let usage$1;\n    let validation$1;\n    let handlerFinishCommand = null;\n    const y18n = shim$1.y18n;\n    self.middleware = globalMiddlewareFactory(globalMiddleware, self);\n    self.scriptName = function (scriptName) {\n        self.customScriptName = true;\n        self.$0 = scriptName;\n        return self;\n    };\n    let default$0;\n    if (/\\b(node|iojs|electron)(\\.exe)?$/.test(shim$1.process.argv()[0])) {\n        default$0 = shim$1.process.argv().slice(1, 2);\n    }\n    else {\n        default$0 = shim$1.process.argv().slice(0, 1);\n    }\n    self.$0 = default$0\n        .map(x => {\n        const b = rebase(cwd, x);\n        return x.match(/^(\\/|([a-zA-Z]:)?\\\\)/) && b.length < x.length ? b : x;\n    })\n        .join(' ')\n        .trim();\n    if (shim$1.getEnv('_') && shim$1.getProcessArgvBin() === shim$1.getEnv('_')) {\n        self.$0 = shim$1\n            .getEnv('_')\n            .replace(`${shim$1.path.dirname(shim$1.process.execPath())}/`, '');\n    }\n    const context = { resets: -1, commands: [], fullCommands: [], files: [] };\n    self.getContext = () => context;\n    let hasOutput = false;\n    let exitError = null;\n    self.exit = (code, err) => {\n        hasOutput = true;\n        exitError = err;\n        if (exitProcess)\n            shim$1.process.exit(code);\n    };\n    let completionCommand = null;\n    self.completion = function (cmd, desc, fn) {\n        argsert('[string] [string|boolean|function] [function]', [cmd, desc, fn], arguments.length);\n        if (typeof desc === 'function') {\n            fn = desc;\n            desc = undefined;\n        }\n        completionCommand = cmd || completionCommand || 'completion';\n        if (!desc && desc !== false) {\n            desc = 'generate completion script';\n        }\n        self.command(completionCommand, desc);\n        if (fn)\n            completion$1.registerFunction(fn);\n        return self;\n    };\n    let options;\n    self.resetOptions = self.reset = function resetOptions(aliases = {}) {\n        context.resets++;\n        options = options || {};\n        const tmpOptions = {};\n        tmpOptions.local = options.local ? options.local : [];\n        tmpOptions.configObjects = options.configObjects\n            ? options.configObjects\n            : [];\n        const localLookup = {};\n        tmpOptions.local.forEach(l => {\n            localLookup[l] = true;\n            (aliases[l] || []).forEach(a => {\n                localLookup[a] = true;\n            });\n        });\n        Object.assign(preservedGroups, Object.keys(groups).reduce((acc, groupName) => {\n            const keys = groups[groupName].filter(key => !(key in localLookup));\n            if (keys.length > 0) {\n                acc[groupName] = keys;\n            }\n            return acc;\n        }, {}));\n        groups = {};\n        const arrayOptions = [\n            'array',\n            'boolean',\n            'string',\n            'skipValidation',\n            'count',\n            'normalize',\n            'number',\n            'hiddenOptions',\n        ];\n        const objectOptions = [\n            'narg',\n            'key',\n            'alias',\n            'default',\n            'defaultDescription',\n            'config',\n            'choices',\n            'demandedOptions',\n            'demandedCommands',\n            'coerce',\n            'deprecatedOptions',\n        ];\n        arrayOptions.forEach(k => {\n            tmpOptions[k] = (options[k] || []).filter((k) => !localLookup[k]);\n        });\n        objectOptions.forEach((k) => {\n            tmpOptions[k] = objFilter(options[k], k => !localLookup[k]);\n        });\n        tmpOptions.envPrefix = options.envPrefix;\n        options = tmpOptions;\n        usage$1 = usage$1 ? usage$1.reset(localLookup) : usage(self, y18n, shim$1);\n        validation$1 = validation$1\n            ? validation$1.reset(localLookup)\n            : validation(self, usage$1, y18n, shim$1);\n        command$1 = command$1\n            ? command$1.reset()\n            : command(self, usage$1, validation$1, globalMiddleware, shim$1);\n        if (!completion$1)\n            completion$1 = completion(self, usage$1, command$1, shim$1);\n        completionCommand = null;\n        output = '';\n        exitError = null;\n        hasOutput = false;\n        self.parsed = false;\n        return self;\n    };\n    self.resetOptions();\n    const frozens = [];\n    function freeze() {\n        frozens.push({\n            options,\n            configObjects: options.configObjects.slice(0),\n            exitProcess,\n            groups,\n            strict,\n            strictCommands,\n            strictOptions,\n            completionCommand,\n            output,\n            exitError,\n            hasOutput,\n            parsed: self.parsed,\n            parseFn,\n            parseContext,\n            handlerFinishCommand,\n        });\n        usage$1.freeze();\n        validation$1.freeze();\n        command$1.freeze();\n    }\n    function unfreeze() {\n        const frozen = frozens.pop();\n        assertNotStrictEqual(frozen, undefined, shim$1);\n        let configObjects;\n        ({\n            options,\n            configObjects,\n            exitProcess,\n            groups,\n            output,\n            exitError,\n            hasOutput,\n            parsed: self.parsed,\n            strict,\n            strictCommands,\n            strictOptions,\n            completionCommand,\n            parseFn,\n            parseContext,\n            handlerFinishCommand,\n        } = frozen);\n        options.configObjects = configObjects;\n        usage$1.unfreeze();\n        validation$1.unfreeze();\n        command$1.unfreeze();\n    }\n    self.boolean = function (keys) {\n        argsert('<array|string>', [keys], arguments.length);\n        populateParserHintArray('boolean', keys);\n        return self;\n    };\n    self.array = function (keys) {\n        argsert('<array|string>', [keys], arguments.length);\n        populateParserHintArray('array', keys);\n        return self;\n    };\n    self.number = function (keys) {\n        argsert('<array|string>', [keys], arguments.length);\n        populateParserHintArray('number', keys);\n        return self;\n    };\n    self.normalize = function (keys) {\n        argsert('<array|string>', [keys], arguments.length);\n        populateParserHintArray('normalize', keys);\n        return self;\n    };\n    self.count = function (keys) {\n        argsert('<array|string>', [keys], arguments.length);\n        populateParserHintArray('count', keys);\n        return self;\n    };\n    self.string = function (keys) {\n        argsert('<array|string>', [keys], arguments.length);\n        populateParserHintArray('string', keys);\n        return self;\n    };\n    self.requiresArg = function (keys) {\n        argsert('<array|string|object> [number]', [keys], arguments.length);\n        if (typeof keys === 'string' && options.narg[keys]) {\n            return self;\n        }\n        else {\n            populateParserHintSingleValueDictionary(self.requiresArg, 'narg', keys, NaN);\n        }\n        return self;\n    };\n    self.skipValidation = function (keys) {\n        argsert('<array|string>', [keys], arguments.length);\n        populateParserHintArray('skipValidation', keys);\n        return self;\n    };\n    function populateParserHintArray(type, keys) {\n        keys = [].concat(keys);\n        keys.forEach(key => {\n            key = sanitizeKey(key);\n            options[type].push(key);\n        });\n    }\n    self.nargs = function (key, value) {\n        argsert('<string|object|array> [number]', [key, value], arguments.length);\n        populateParserHintSingleValueDictionary(self.nargs, 'narg', key, value);\n        return self;\n    };\n    self.choices = function (key, value) {\n        argsert('<object|string|array> [string|array]', [key, value], arguments.length);\n        populateParserHintArrayDictionary(self.choices, 'choices', key, value);\n        return self;\n    };\n    self.alias = function (key, value) {\n        argsert('<object|string|array> [string|array]', [key, value], arguments.length);\n        populateParserHintArrayDictionary(self.alias, 'alias', key, value);\n        return self;\n    };\n    self.default = self.defaults = function (key, value, defaultDescription) {\n        argsert('<object|string|array> [*] [string]', [key, value, defaultDescription], arguments.length);\n        if (defaultDescription) {\n            assertSingleKey(key, shim$1);\n            options.defaultDescription[key] = defaultDescription;\n        }\n        if (typeof value === 'function') {\n            assertSingleKey(key, shim$1);\n            if (!options.defaultDescription[key])\n                options.defaultDescription[key] = usage$1.functionDescription(value);\n            value = value.call();\n        }\n        populateParserHintSingleValueDictionary(self.default, 'default', key, value);\n        return self;\n    };\n    self.describe = function (key, desc) {\n        argsert('<object|string|array> [string]', [key, desc], arguments.length);\n        setKey(key, true);\n        usage$1.describe(key, desc);\n        return self;\n    };\n    function setKey(key, set) {\n        populateParserHintSingleValueDictionary(setKey, 'key', key, set);\n        return self;\n    }\n    function demandOption(keys, msg) {\n        argsert('<object|string|array> [string]', [keys, msg], arguments.length);\n        populateParserHintSingleValueDictionary(self.demandOption, 'demandedOptions', keys, msg);\n        return self;\n    }\n    self.demandOption = demandOption;\n    self.coerce = function (keys, value) {\n        argsert('<object|string|array> [function]', [keys, value], arguments.length);\n        populateParserHintSingleValueDictionary(self.coerce, 'coerce', keys, value);\n        return self;\n    };\n    function populateParserHintSingleValueDictionary(builder, type, key, value) {\n        populateParserHintDictionary(builder, type, key, value, (type, key, value) => {\n            options[type][key] = value;\n        });\n    }\n    function populateParserHintArrayDictionary(builder, type, key, value) {\n        populateParserHintDictionary(builder, type, key, value, (type, key, value) => {\n            options[type][key] = (options[type][key] || []).concat(value);\n        });\n    }\n    function populateParserHintDictionary(builder, type, key, value, singleKeyHandler) {\n        if (Array.isArray(key)) {\n            key.forEach(k => {\n                builder(k, value);\n            });\n        }\n        else if (((key) => typeof key === 'object')(key)) {\n            for (const k of objectKeys(key)) {\n                builder(k, key[k]);\n            }\n        }\n        else {\n            singleKeyHandler(type, sanitizeKey(key), value);\n        }\n    }\n    function sanitizeKey(key) {\n        if (key === '__proto__')\n            return '___proto___';\n        return key;\n    }\n    function deleteFromParserHintObject(optionKey) {\n        objectKeys(options).forEach((hintKey) => {\n            if (((key) => key === 'configObjects')(hintKey))\n                return;\n            const hint = options[hintKey];\n            if (Array.isArray(hint)) {\n                if (~hint.indexOf(optionKey))\n                    hint.splice(hint.indexOf(optionKey), 1);\n            }\n            else if (typeof hint === 'object') {\n                delete hint[optionKey];\n            }\n        });\n        delete usage$1.getDescriptions()[optionKey];\n    }\n    self.config = function config(key = 'config', msg, parseFn) {\n        argsert('[object|string] [string|function] [function]', [key, msg, parseFn], arguments.length);\n        if (typeof key === 'object' && !Array.isArray(key)) {\n            key = applyExtends(key, cwd, self.getParserConfiguration()['deep-merge-config'] || false, shim$1);\n            options.configObjects = (options.configObjects || []).concat(key);\n            return self;\n        }\n        if (typeof msg === 'function') {\n            parseFn = msg;\n            msg = undefined;\n        }\n        self.describe(key, msg || usage$1.deferY18nLookup('Path to JSON config file'));\n        (Array.isArray(key) ? key : [key]).forEach(k => {\n            options.config[k] = parseFn || true;\n        });\n        return self;\n    };\n    self.example = function (cmd, description) {\n        argsert('<string|array> [string]', [cmd, description], arguments.length);\n        if (Array.isArray(cmd)) {\n            cmd.forEach(exampleParams => self.example(...exampleParams));\n        }\n        else {\n            usage$1.example(cmd, description);\n        }\n        return self;\n    };\n    self.command = function (cmd, description, builder, handler, middlewares, deprecated) {\n        argsert('<string|array|object> [string|boolean] [function|object] [function] [array] [boolean|string]', [cmd, description, builder, handler, middlewares, deprecated], arguments.length);\n        command$1.addHandler(cmd, description, builder, handler, middlewares, deprecated);\n        return self;\n    };\n    self.commandDir = function (dir, opts) {\n        argsert('<string> [object]', [dir, opts], arguments.length);\n        const req = parentRequire || shim$1.require;\n        command$1.addDirectory(dir, self.getContext(), req, shim$1.getCallerFile(), opts);\n        return self;\n    };\n    self.demand = self.required = self.require = function demand(keys, max, msg) {\n        if (Array.isArray(max)) {\n            max.forEach(key => {\n                assertNotStrictEqual(msg, true, shim$1);\n                demandOption(key, msg);\n            });\n            max = Infinity;\n        }\n        else if (typeof max !== 'number') {\n            msg = max;\n            max = Infinity;\n        }\n        if (typeof keys === 'number') {\n            assertNotStrictEqual(msg, true, shim$1);\n            self.demandCommand(keys, max, msg, msg);\n        }\n        else if (Array.isArray(keys)) {\n            keys.forEach(key => {\n                assertNotStrictEqual(msg, true, shim$1);\n                demandOption(key, msg);\n            });\n        }\n        else {\n            if (typeof msg === 'string') {\n                demandOption(keys, msg);\n            }\n            else if (msg === true || typeof msg === 'undefined') {\n                demandOption(keys);\n            }\n        }\n        return self;\n    };\n    self.demandCommand = function demandCommand(min = 1, max, minMsg, maxMsg) {\n        argsert('[number] [number|string] [string|null|undefined] [string|null|undefined]', [min, max, minMsg, maxMsg], arguments.length);\n        if (typeof max !== 'number') {\n            minMsg = max;\n            max = Infinity;\n        }\n        self.global('_', false);\n        options.demandedCommands._ = {\n            min,\n            max,\n            minMsg,\n            maxMsg,\n        };\n        return self;\n    };\n    self.getDemandedOptions = () => {\n        argsert([], 0);\n        return options.demandedOptions;\n    };\n    self.getDemandedCommands = () => {\n        argsert([], 0);\n        return options.demandedCommands;\n    };\n    self.deprecateOption = function deprecateOption(option, message) {\n        argsert('<string> [string|boolean]', [option, message], arguments.length);\n        options.deprecatedOptions[option] = message;\n        return self;\n    };\n    self.getDeprecatedOptions = () => {\n        argsert([], 0);\n        return options.deprecatedOptions;\n    };\n    self.implies = function (key, value) {\n        argsert('<string|object> [number|string|array]', [key, value], arguments.length);\n        validation$1.implies(key, value);\n        return self;\n    };\n    self.conflicts = function (key1, key2) {\n        argsert('<string|object> [string|array]', [key1, key2], arguments.length);\n        validation$1.conflicts(key1, key2);\n        return self;\n    };\n    self.usage = function (msg, description, builder, handler) {\n        argsert('<string|null|undefined> [string|boolean] [function|object] [function]', [msg, description, builder, handler], arguments.length);\n        if (description !== undefined) {\n            assertNotStrictEqual(msg, null, shim$1);\n            if ((msg || '').match(/^\\$0( |$)/)) {\n                return self.command(msg, description, builder, handler);\n            }\n            else {\n                throw new YError('.usage() description must start with $0 if being used as alias for .command()');\n            }\n        }\n        else {\n            usage$1.usage(msg);\n            return self;\n        }\n    };\n    self.epilogue = self.epilog = function (msg) {\n        argsert('<string>', [msg], arguments.length);\n        usage$1.epilog(msg);\n        return self;\n    };\n    self.fail = function (f) {\n        argsert('<function>', [f], arguments.length);\n        usage$1.failFn(f);\n        return self;\n    };\n    self.onFinishCommand = function (f) {\n        argsert('<function>', [f], arguments.length);\n        handlerFinishCommand = f;\n        return self;\n    };\n    self.getHandlerFinishCommand = () => handlerFinishCommand;\n    self.check = function (f, _global) {\n        argsert('<function> [boolean]', [f, _global], arguments.length);\n        validation$1.check(f, _global !== false);\n        return self;\n    };\n    self.global = function global(globals, global) {\n        argsert('<string|array> [boolean]', [globals, global], arguments.length);\n        globals = [].concat(globals);\n        if (global !== false) {\n            options.local = options.local.filter(l => globals.indexOf(l) === -1);\n        }\n        else {\n            globals.forEach(g => {\n                if (options.local.indexOf(g) === -1)\n                    options.local.push(g);\n            });\n        }\n        return self;\n    };\n    self.pkgConf = function pkgConf(key, rootPath) {\n        argsert('<string> [string]', [key, rootPath], arguments.length);\n        let conf = null;\n        const obj = pkgUp(rootPath || cwd);\n        if (obj[key] && typeof obj[key] === 'object') {\n            conf = applyExtends(obj[key], rootPath || cwd, self.getParserConfiguration()['deep-merge-config'] || false, shim$1);\n            options.configObjects = (options.configObjects || []).concat(conf);\n        }\n        return self;\n    };\n    const pkgs = {};\n    function pkgUp(rootPath) {\n        const npath = rootPath || '*';\n        if (pkgs[npath])\n            return pkgs[npath];\n        let obj = {};\n        try {\n            let startDir = rootPath || shim$1.mainFilename;\n            if (!rootPath && shim$1.path.extname(startDir)) {\n                startDir = shim$1.path.dirname(startDir);\n            }\n            const pkgJsonPath = shim$1.findUp(startDir, (dir, names) => {\n                if (names.includes('package.json')) {\n                    return 'package.json';\n                }\n                else {\n                    return undefined;\n                }\n            });\n            assertNotStrictEqual(pkgJsonPath, undefined, shim$1);\n            obj = JSON.parse(shim$1.readFileSync(pkgJsonPath, 'utf8'));\n        }\n        catch (_noop) { }\n        pkgs[npath] = obj || {};\n        return pkgs[npath];\n    }\n    let parseFn = null;\n    let parseContext = null;\n    self.parse = function parse(args, shortCircuit, _parseFn) {\n        argsert('[string|array] [function|boolean|object] [function]', [args, shortCircuit, _parseFn], arguments.length);\n        freeze();\n        if (typeof args === 'undefined') {\n            const argv = self._parseArgs(processArgs);\n            const tmpParsed = self.parsed;\n            unfreeze();\n            self.parsed = tmpParsed;\n            return argv;\n        }\n        if (typeof shortCircuit === 'object') {\n            parseContext = shortCircuit;\n            shortCircuit = _parseFn;\n        }\n        if (typeof shortCircuit === 'function') {\n            parseFn = shortCircuit;\n            shortCircuit = false;\n        }\n        if (!shortCircuit)\n            processArgs = args;\n        if (parseFn)\n            exitProcess = false;\n        const parsed = self._parseArgs(args, !!shortCircuit);\n        completion$1.setParsed(self.parsed);\n        if (parseFn)\n            parseFn(exitError, parsed, output);\n        unfreeze();\n        return parsed;\n    };\n    self._getParseContext = () => parseContext || {};\n    self._hasParseCallback = () => !!parseFn;\n    self.option = self.options = function option(key, opt) {\n        argsert('<string|object> [object]', [key, opt], arguments.length);\n        if (typeof key === 'object') {\n            Object.keys(key).forEach(k => {\n                self.options(k, key[k]);\n            });\n        }\n        else {\n            if (typeof opt !== 'object') {\n                opt = {};\n            }\n            options.key[key] = true;\n            if (opt.alias)\n                self.alias(key, opt.alias);\n            const deprecate = opt.deprecate || opt.deprecated;\n            if (deprecate) {\n                self.deprecateOption(key, deprecate);\n            }\n            const demand = opt.demand || opt.required || opt.require;\n            if (demand) {\n                self.demand(key, demand);\n            }\n            if (opt.demandOption) {\n                self.demandOption(key, typeof opt.demandOption === 'string' ? opt.demandOption : undefined);\n            }\n            if (opt.conflicts) {\n                self.conflicts(key, opt.conflicts);\n            }\n            if ('default' in opt) {\n                self.default(key, opt.default);\n            }\n            if (opt.implies !== undefined) {\n                self.implies(key, opt.implies);\n            }\n            if (opt.nargs !== undefined) {\n                self.nargs(key, opt.nargs);\n            }\n            if (opt.config) {\n                self.config(key, opt.configParser);\n            }\n            if (opt.normalize) {\n                self.normalize(key);\n            }\n            if (opt.choices) {\n                self.choices(key, opt.choices);\n            }\n            if (opt.coerce) {\n                self.coerce(key, opt.coerce);\n            }\n            if (opt.group) {\n                self.group(key, opt.group);\n            }\n            if (opt.boolean || opt.type === 'boolean') {\n                self.boolean(key);\n                if (opt.alias)\n                    self.boolean(opt.alias);\n            }\n            if (opt.array || opt.type === 'array') {\n                self.array(key);\n                if (opt.alias)\n                    self.array(opt.alias);\n            }\n            if (opt.number || opt.type === 'number') {\n                self.number(key);\n                if (opt.alias)\n                    self.number(opt.alias);\n            }\n            if (opt.string || opt.type === 'string') {\n                self.string(key);\n                if (opt.alias)\n                    self.string(opt.alias);\n            }\n            if (opt.count || opt.type === 'count') {\n                self.count(key);\n            }\n            if (typeof opt.global === 'boolean') {\n                self.global(key, opt.global);\n            }\n            if (opt.defaultDescription) {\n                options.defaultDescription[key] = opt.defaultDescription;\n            }\n            if (opt.skipValidation) {\n                self.skipValidation(key);\n            }\n            const desc = opt.describe || opt.description || opt.desc;\n            self.describe(key, desc);\n            if (opt.hidden) {\n                self.hide(key);\n            }\n            if (opt.requiresArg) {\n                self.requiresArg(key);\n            }\n        }\n        return self;\n    };\n    self.getOptions = () => options;\n    self.positional = function (key, opts) {\n        argsert('<string> <object>', [key, opts], arguments.length);\n        if (context.resets === 0) {\n            throw new YError(\".positional() can only be called in a command's builder function\");\n        }\n        const supportedOpts = [\n            'default',\n            'defaultDescription',\n            'implies',\n            'normalize',\n            'choices',\n            'conflicts',\n            'coerce',\n            'type',\n            'describe',\n            'desc',\n            'description',\n            'alias',\n        ];\n        opts = objFilter(opts, (k, v) => {\n            let accept = supportedOpts.indexOf(k) !== -1;\n            if (k === 'type' && ['string', 'number', 'boolean'].indexOf(v) === -1)\n                accept = false;\n            return accept;\n        });\n        const fullCommand = context.fullCommands[context.fullCommands.length - 1];\n        const parseOptions = fullCommand\n            ? command$1.cmdToParseOptions(fullCommand)\n            : {\n                array: [],\n                alias: {},\n                default: {},\n                demand: {},\n            };\n        objectKeys(parseOptions).forEach(pk => {\n            const parseOption = parseOptions[pk];\n            if (Array.isArray(parseOption)) {\n                if (parseOption.indexOf(key) !== -1)\n                    opts[pk] = true;\n            }\n            else {\n                if (parseOption[key] && !(pk in opts))\n                    opts[pk] = parseOption[key];\n            }\n        });\n        self.group(key, usage$1.getPositionalGroupName());\n        return self.option(key, opts);\n    };\n    self.group = function group(opts, groupName) {\n        argsert('<string|array> <string>', [opts, groupName], arguments.length);\n        const existing = preservedGroups[groupName] || groups[groupName];\n        if (preservedGroups[groupName]) {\n            delete preservedGroups[groupName];\n        }\n        const seen = {};\n        groups[groupName] = (existing || []).concat(opts).filter(key => {\n            if (seen[key])\n                return false;\n            return (seen[key] = true);\n        });\n        return self;\n    };\n    self.getGroups = () => Object.assign({}, groups, preservedGroups);\n    self.env = function (prefix) {\n        argsert('[string|boolean]', [prefix], arguments.length);\n        if (prefix === false)\n            delete options.envPrefix;\n        else\n            options.envPrefix = prefix || '';\n        return self;\n    };\n    self.wrap = function (cols) {\n        argsert('<number|null|undefined>', [cols], arguments.length);\n        usage$1.wrap(cols);\n        return self;\n    };\n    let strict = false;\n    self.strict = function (enabled) {\n        argsert('[boolean]', [enabled], arguments.length);\n        strict = enabled !== false;\n        return self;\n    };\n    self.getStrict = () => strict;\n    let strictCommands = false;\n    self.strictCommands = function (enabled) {\n        argsert('[boolean]', [enabled], arguments.length);\n        strictCommands = enabled !== false;\n        return self;\n    };\n    self.getStrictCommands = () => strictCommands;\n    let strictOptions = false;\n    self.strictOptions = function (enabled) {\n        argsert('[boolean]', [enabled], arguments.length);\n        strictOptions = enabled !== false;\n        return self;\n    };\n    self.getStrictOptions = () => strictOptions;\n    let parserConfig = {};\n    self.parserConfiguration = function parserConfiguration(config) {\n        argsert('<object>', [config], arguments.length);\n        parserConfig = config;\n        return self;\n    };\n    self.getParserConfiguration = () => parserConfig;\n    self.showHelp = function (level) {\n        argsert('[string|function]', [level], arguments.length);\n        if (!self.parsed)\n            self._parseArgs(processArgs);\n        if (command$1.hasDefaultCommand()) {\n            context.resets++;\n            command$1.runDefaultBuilderOn(self);\n        }\n        usage$1.showHelp(level);\n        return self;\n    };\n    let versionOpt = null;\n    self.version = function version(opt, msg, ver) {\n        const defaultVersionOpt = 'version';\n        argsert('[boolean|string] [string] [string]', [opt, msg, ver], arguments.length);\n        if (versionOpt) {\n            deleteFromParserHintObject(versionOpt);\n            usage$1.version(undefined);\n            versionOpt = null;\n        }\n        if (arguments.length === 0) {\n            ver = guessVersion();\n            opt = defaultVersionOpt;\n        }\n        else if (arguments.length === 1) {\n            if (opt === false) {\n                return self;\n            }\n            ver = opt;\n            opt = defaultVersionOpt;\n        }\n        else if (arguments.length === 2) {\n            ver = msg;\n            msg = undefined;\n        }\n        versionOpt = typeof opt === 'string' ? opt : defaultVersionOpt;\n        msg = msg || usage$1.deferY18nLookup('Show version number');\n        usage$1.version(ver || undefined);\n        self.boolean(versionOpt);\n        self.describe(versionOpt, msg);\n        return self;\n    };\n    function guessVersion() {\n        const obj = pkgUp();\n        return obj.version || 'unknown';\n    }\n    let helpOpt = null;\n    self.addHelpOpt = self.help = function addHelpOpt(opt, msg) {\n        const defaultHelpOpt = 'help';\n        argsert('[string|boolean] [string]', [opt, msg], arguments.length);\n        if (helpOpt) {\n            deleteFromParserHintObject(helpOpt);\n            helpOpt = null;\n        }\n        if (arguments.length === 1) {\n            if (opt === false)\n                return self;\n        }\n        helpOpt = typeof opt === 'string' ? opt : defaultHelpOpt;\n        self.boolean(helpOpt);\n        self.describe(helpOpt, msg || usage$1.deferY18nLookup('Show help'));\n        return self;\n    };\n    const defaultShowHiddenOpt = 'show-hidden';\n    options.showHiddenOpt = defaultShowHiddenOpt;\n    self.addShowHiddenOpt = self.showHidden = function addShowHiddenOpt(opt, msg) {\n        argsert('[string|boolean] [string]', [opt, msg], arguments.length);\n        if (arguments.length === 1) {\n            if (opt === false)\n                return self;\n        }\n        const showHiddenOpt = typeof opt === 'string' ? opt : defaultShowHiddenOpt;\n        self.boolean(showHiddenOpt);\n        self.describe(showHiddenOpt, msg || usage$1.deferY18nLookup('Show hidden options'));\n        options.showHiddenOpt = showHiddenOpt;\n        return self;\n    };\n    self.hide = function hide(key) {\n        argsert('<string>', [key], arguments.length);\n        options.hiddenOptions.push(key);\n        return self;\n    };\n    self.showHelpOnFail = function showHelpOnFail(enabled, message) {\n        argsert('[boolean|string] [string]', [enabled, message], arguments.length);\n        usage$1.showHelpOnFail(enabled, message);\n        return self;\n    };\n    let exitProcess = true;\n    self.exitProcess = function (enabled = true) {\n        argsert('[boolean]', [enabled], arguments.length);\n        exitProcess = enabled;\n        return self;\n    };\n    self.getExitProcess = () => exitProcess;\n    self.showCompletionScript = function ($0, cmd) {\n        argsert('[string] [string]', [$0, cmd], arguments.length);\n        $0 = $0 || self.$0;\n        _logger.log(completion$1.generateCompletionScript($0, cmd || completionCommand || 'completion'));\n        return self;\n    };\n    self.getCompletion = function (args, done) {\n        argsert('<array> <function>', [args, done], arguments.length);\n        completion$1.getCompletion(args, done);\n    };\n    self.locale = function (locale) {\n        argsert('[string]', [locale], arguments.length);\n        if (!locale) {\n            guessLocale();\n            return y18n.getLocale();\n        }\n        detectLocale = false;\n        y18n.setLocale(locale);\n        return self;\n    };\n    self.updateStrings = self.updateLocale = function (obj) {\n        argsert('<object>', [obj], arguments.length);\n        detectLocale = false;\n        y18n.updateLocale(obj);\n        return self;\n    };\n    let detectLocale = true;\n    self.detectLocale = function (detect) {\n        argsert('<boolean>', [detect], arguments.length);\n        detectLocale = detect;\n        return self;\n    };\n    self.getDetectLocale = () => detectLocale;\n    const _logger = {\n        log(...args) {\n            if (!self._hasParseCallback())\n                console.log(...args);\n            hasOutput = true;\n            if (output.length)\n                output += '\\n';\n            output += args.join(' ');\n        },\n        error(...args) {\n            if (!self._hasParseCallback())\n                console.error(...args);\n            hasOutput = true;\n            if (output.length)\n                output += '\\n';\n            output += args.join(' ');\n        },\n    };\n    self._getLoggerInstance = () => _logger;\n    self._hasOutput = () => hasOutput;\n    self._setHasOutput = () => {\n        hasOutput = true;\n    };\n    let recommendCommands;\n    self.recommendCommands = function (recommend = true) {\n        argsert('[boolean]', [recommend], arguments.length);\n        recommendCommands = recommend;\n        return self;\n    };\n    self.getUsageInstance = () => usage$1;\n    self.getValidationInstance = () => validation$1;\n    self.getCommandInstance = () => command$1;\n    self.terminalWidth = () => {\n        argsert([], 0);\n        return shim$1.process.stdColumns;\n    };\n    Object.defineProperty(self, 'argv', {\n        get: () => self._parseArgs(processArgs),\n        enumerable: true,\n    });\n    self._parseArgs = function parseArgs(args, shortCircuit, _calledFromCommand, commandIndex) {\n        let skipValidation = !!_calledFromCommand;\n        args = args || processArgs;\n        options.__ = y18n.__;\n        options.configuration = self.getParserConfiguration();\n        const populateDoubleDash = !!options.configuration['populate--'];\n        const config = Object.assign({}, options.configuration, {\n            'populate--': true,\n        });\n        const parsed = shim$1.Parser.detailed(args, Object.assign({}, options, {\n            configuration: Object.assign({ 'parse-positional-numbers': false }, config),\n        }));\n        let argv = parsed.argv;\n        if (parseContext)\n            argv = Object.assign({}, argv, parseContext);\n        const aliases = parsed.aliases;\n        argv.$0 = self.$0;\n        self.parsed = parsed;\n        try {\n            guessLocale();\n            if (shortCircuit) {\n                return self._postProcess(argv, populateDoubleDash, _calledFromCommand);\n            }\n            if (helpOpt) {\n                const helpCmds = [helpOpt]\n                    .concat(aliases[helpOpt] || [])\n                    .filter(k => k.length > 1);\n                if (~helpCmds.indexOf('' + argv._[argv._.length - 1])) {\n                    argv._.pop();\n                    argv[helpOpt] = true;\n                }\n            }\n            const handlerKeys = command$1.getCommands();\n            const requestCompletions = completion$1.completionKey in argv;\n            const skipRecommendation = argv[helpOpt] || requestCompletions;\n            const skipDefaultCommand = skipRecommendation &&\n                (handlerKeys.length > 1 || handlerKeys[0] !== '$0');\n            if (argv._.length) {\n                if (handlerKeys.length) {\n                    let firstUnknownCommand;\n                    for (let i = commandIndex || 0, cmd; argv._[i] !== undefined; i++) {\n                        cmd = String(argv._[i]);\n                        if (~handlerKeys.indexOf(cmd) && cmd !== completionCommand) {\n                            const innerArgv = command$1.runCommand(cmd, self, parsed, i + 1);\n                            return self._postProcess(innerArgv, populateDoubleDash);\n                        }\n                        else if (!firstUnknownCommand && cmd !== completionCommand) {\n                            firstUnknownCommand = cmd;\n                            break;\n                        }\n                    }\n                    if (command$1.hasDefaultCommand() && !skipDefaultCommand) {\n                        const innerArgv = command$1.runCommand(null, self, parsed);\n                        return self._postProcess(innerArgv, populateDoubleDash);\n                    }\n                    if (recommendCommands && firstUnknownCommand && !skipRecommendation) {\n                        validation$1.recommendCommands(firstUnknownCommand, handlerKeys);\n                    }\n                }\n                if (completionCommand &&\n                    ~argv._.indexOf(completionCommand) &&\n                    !requestCompletions) {\n                    if (exitProcess)\n                        setBlocking(true);\n                    self.showCompletionScript();\n                    self.exit(0);\n                }\n            }\n            else if (command$1.hasDefaultCommand() && !skipDefaultCommand) {\n                const innerArgv = command$1.runCommand(null, self, parsed);\n                return self._postProcess(innerArgv, populateDoubleDash);\n            }\n            if (requestCompletions) {\n                if (exitProcess)\n                    setBlocking(true);\n                args = [].concat(args);\n                const completionArgs = args.slice(args.indexOf(`--${completion$1.completionKey}`) + 1);\n                completion$1.getCompletion(completionArgs, completions => {\n                    (completions || []).forEach(completion => {\n                        _logger.log(completion);\n                    });\n                    self.exit(0);\n                });\n                return self._postProcess(argv, !populateDoubleDash, _calledFromCommand);\n            }\n            if (!hasOutput) {\n                Object.keys(argv).forEach(key => {\n                    if (key === helpOpt && argv[key]) {\n                        if (exitProcess)\n                            setBlocking(true);\n                        skipValidation = true;\n                        self.showHelp('log');\n                        self.exit(0);\n                    }\n                    else if (key === versionOpt && argv[key]) {\n                        if (exitProcess)\n                            setBlocking(true);\n                        skipValidation = true;\n                        usage$1.showVersion();\n                        self.exit(0);\n                    }\n                });\n            }\n            if (!skipValidation && options.skipValidation.length > 0) {\n                skipValidation = Object.keys(argv).some(key => options.skipValidation.indexOf(key) >= 0 && argv[key] === true);\n            }\n            if (!skipValidation) {\n                if (parsed.error)\n                    throw new YError(parsed.error.message);\n                if (!requestCompletions) {\n                    self._runValidation(argv, aliases, {}, parsed.error);\n                }\n            }\n        }\n        catch (err) {\n            if (err instanceof YError)\n                usage$1.fail(err.message, err);\n            else\n                throw err;\n        }\n        return self._postProcess(argv, populateDoubleDash, _calledFromCommand);\n    };\n    self._postProcess = function (argv, populateDoubleDash, calledFromCommand = false) {\n        if (isPromise(argv))\n            return argv;\n        if (calledFromCommand)\n            return argv;\n        if (!populateDoubleDash) {\n            argv = self._copyDoubleDash(argv);\n        }\n        const parsePositionalNumbers = self.getParserConfiguration()['parse-positional-numbers'] ||\n            self.getParserConfiguration()['parse-positional-numbers'] === undefined;\n        if (parsePositionalNumbers) {\n            argv = self._parsePositionalNumbers(argv);\n        }\n        return argv;\n    };\n    self._copyDoubleDash = function (argv) {\n        if (!argv._ || !argv['--'])\n            return argv;\n        argv._.push.apply(argv._, argv['--']);\n        try {\n            delete argv['--'];\n        }\n        catch (_err) { }\n        return argv;\n    };\n    self._parsePositionalNumbers = function (argv) {\n        const args = argv['--'] ? argv['--'] : argv._;\n        for (let i = 0, arg; (arg = args[i]) !== undefined; i++) {\n            if (shim$1.Parser.looksLikeNumber(arg) &&\n                Number.isSafeInteger(Math.floor(parseFloat(`${arg}`)))) {\n                args[i] = Number(arg);\n            }\n        }\n        return argv;\n    };\n    self._runValidation = function runValidation(argv, aliases, positionalMap, parseErrors, isDefaultCommand = false) {\n        if (parseErrors)\n            throw new YError(parseErrors.message);\n        validation$1.nonOptionCount(argv);\n        validation$1.requiredArguments(argv);\n        let failedStrictCommands = false;\n        if (strictCommands) {\n            failedStrictCommands = validation$1.unknownCommands(argv);\n        }\n        if (strict && !failedStrictCommands) {\n            validation$1.unknownArguments(argv, aliases, positionalMap, isDefaultCommand);\n        }\n        else if (strictOptions) {\n            validation$1.unknownArguments(argv, aliases, {}, false, false);\n        }\n        validation$1.customChecks(argv, aliases);\n        validation$1.limitedChoices(argv);\n        validation$1.implications(argv);\n        validation$1.conflicting(argv);\n    };\n    function guessLocale() {\n        if (!detectLocale)\n            return;\n        const locale = shim$1.getEnv('LC_ALL') ||\n            shim$1.getEnv('LC_MESSAGES') ||\n            shim$1.getEnv('LANG') ||\n            shim$1.getEnv('LANGUAGE') ||\n            'en_US';\n        self.locale(locale.replace(/[.:].*/, ''));\n    }\n    self.help();\n    self.version();\n    return self;\n}\nconst rebase = (base, dir) => shim$1.path.relative(base, dir);\nfunction isYargsInstance(y) {\n    return !!y && typeof y._parseArgs === 'function';\n}\n\nvar _a, _b;\nconst { readFileSync } = require('fs');\nconst { inspect } = require('util');\nconst { resolve } = require('path');\nconst y18n = require('y18n');\nconst Parser = require('yargs-parser');\nvar cjsPlatformShim = {\n    assert: {\n        notStrictEqual: assert.notStrictEqual,\n        strictEqual: assert.strictEqual,\n    },\n    cliui: require('cliui'),\n    findUp: require('escalade/sync'),\n    getEnv: (key) => {\n        return process.env[key];\n    },\n    getCallerFile: require('get-caller-file'),\n    getProcessArgvBin: getProcessArgvBin,\n    inspect,\n    mainFilename: (_b = (_a = require === null || require === void 0 ? void 0 : require.main) === null || _a === void 0 ? void 0 : _a.filename) !== null && _b !== void 0 ? _b : process.cwd(),\n    Parser,\n    path: require('path'),\n    process: {\n        argv: () => process.argv,\n        cwd: process.cwd,\n        execPath: () => process.execPath,\n        exit: (code) => {\n            process.exit(code);\n        },\n        nextTick: process.nextTick,\n        stdColumns: typeof process.stdout.columns !== 'undefined'\n            ? process.stdout.columns\n            : null,\n    },\n    readFileSync,\n    require: require,\n    requireDirectory: require('require-directory'),\n    stringWidth: require('string-width'),\n    y18n: y18n({\n        directory: resolve(__dirname, '../locales'),\n        updateFiles: false,\n    }),\n};\n\nconst minNodeVersion = process && process.env && process.env.YARGS_MIN_NODE_VERSION\n    ? Number(process.env.YARGS_MIN_NODE_VERSION)\n    : 10;\nif (process && process.version) {\n    const major = Number(process.version.match(/v([^.]+)/)[1]);\n    if (major < minNodeVersion) {\n        throw Error(`yargs supports a minimum Node.js version of ${minNodeVersion}. Read our version support policy: https://github.com/yargs/yargs#supported-nodejs-versions`);\n    }\n}\nconst Parser$1 = require('yargs-parser');\nconst Yargs$1 = YargsWithShim(cjsPlatformShim);\nvar cjs = {\n    applyExtends,\n    cjsPlatformShim,\n    Yargs: Yargs$1,\n    argsert,\n    globalMiddlewareFactory,\n    isPromise,\n    objFilter,\n    parseCommand,\n    Parser: Parser$1,\n    processArgv,\n    rebase,\n    YError,\n};\n\nmodule.exports = cjs;\n"],"mappings":"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"}},"mtime":1674865296659},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\y18n@5.0.8\\\\node_modules\\\\y18n\\\\build\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\y18n@5.0.8\\\\node_modules\\\\y18n\\\\build\\\\index.cjs\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.22.6:development":{"value":{"code":"'use strict';\n\nvar fs = require('fs');\nvar util = require('util');\nvar path = require('path');\nlet shim;\nclass Y18N {\n  constructor(opts) {\n    // configurable options.\n    opts = opts || {};\n    this.directory = opts.directory || './locales';\n    this.updateFiles = typeof opts.updateFiles === 'boolean' ? opts.updateFiles : true;\n    this.locale = opts.locale || 'en';\n    this.fallbackToLanguage = typeof opts.fallbackToLanguage === 'boolean' ? opts.fallbackToLanguage : true;\n    // internal stuff.\n    this.cache = Object.create(null);\n    this.writeQueue = [];\n  }\n  __(...args) {\n    if (typeof arguments[0] !== 'string') {\n      return this._taggedLiteral(arguments[0], ...arguments);\n    }\n    const str = args.shift();\n    let cb = function () {}; // start with noop.\n    if (typeof args[args.length - 1] === 'function') cb = args.pop();\n    cb = cb || function () {}; // noop.\n    if (!this.cache[this.locale]) this._readLocaleFile();\n    // we've observed a new string, update the language file.\n    if (!this.cache[this.locale][str] && this.updateFiles) {\n      this.cache[this.locale][str] = str;\n      // include the current directory and locale,\n      // since these values could change before the\n      // write is performed.\n      this._enqueueWrite({\n        directory: this.directory,\n        locale: this.locale,\n        cb\n      });\n    } else {\n      cb();\n    }\n    return shim.format.apply(shim.format, [this.cache[this.locale][str] || str].concat(args));\n  }\n  __n() {\n    const args = Array.prototype.slice.call(arguments);\n    const singular = args.shift();\n    const plural = args.shift();\n    const quantity = args.shift();\n    let cb = function () {}; // start with noop.\n    if (typeof args[args.length - 1] === 'function') cb = args.pop();\n    if (!this.cache[this.locale]) this._readLocaleFile();\n    let str = quantity === 1 ? singular : plural;\n    if (this.cache[this.locale][singular]) {\n      const entry = this.cache[this.locale][singular];\n      str = entry[quantity === 1 ? 'one' : 'other'];\n    }\n    // we've observed a new string, update the language file.\n    if (!this.cache[this.locale][singular] && this.updateFiles) {\n      this.cache[this.locale][singular] = {\n        one: singular,\n        other: plural\n      };\n      // include the current directory and locale,\n      // since these values could change before the\n      // write is performed.\n      this._enqueueWrite({\n        directory: this.directory,\n        locale: this.locale,\n        cb\n      });\n    } else {\n      cb();\n    }\n    // if a %d placeholder is provided, add quantity\n    // to the arguments expanded by util.format.\n    const values = [str];\n    if (~str.indexOf('%d')) values.push(quantity);\n    return shim.format.apply(shim.format, values.concat(args));\n  }\n  setLocale(locale) {\n    this.locale = locale;\n  }\n  getLocale() {\n    return this.locale;\n  }\n  updateLocale(obj) {\n    if (!this.cache[this.locale]) this._readLocaleFile();\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        this.cache[this.locale][key] = obj[key];\n      }\n    }\n  }\n  _taggedLiteral(parts, ...args) {\n    let str = '';\n    parts.forEach(function (part, i) {\n      const arg = args[i + 1];\n      str += part;\n      if (typeof arg !== 'undefined') {\n        str += '%s';\n      }\n    });\n    return this.__.apply(this, [str].concat([].slice.call(args, 1)));\n  }\n  _enqueueWrite(work) {\n    this.writeQueue.push(work);\n    if (this.writeQueue.length === 1) this._processWriteQueue();\n  }\n  _processWriteQueue() {\n    const _this = this;\n    const work = this.writeQueue[0];\n    // destructure the enqueued work.\n    const directory = work.directory;\n    const locale = work.locale;\n    const cb = work.cb;\n    const languageFile = this._resolveLocaleFile(directory, locale);\n    const serializedLocale = JSON.stringify(this.cache[locale], null, 2);\n    shim.fs.writeFile(languageFile, serializedLocale, 'utf-8', function (err) {\n      _this.writeQueue.shift();\n      if (_this.writeQueue.length > 0) _this._processWriteQueue();\n      cb(err);\n    });\n  }\n  _readLocaleFile() {\n    let localeLookup = {};\n    const languageFile = this._resolveLocaleFile(this.directory, this.locale);\n    try {\n      // When using a bundler such as webpack, readFileSync may not be defined:\n      if (shim.fs.readFileSync) {\n        localeLookup = JSON.parse(shim.fs.readFileSync(languageFile, 'utf-8'));\n      }\n    } catch (err) {\n      if (err instanceof SyntaxError) {\n        err.message = 'syntax error in ' + languageFile;\n      }\n      if (err.code === 'ENOENT') localeLookup = {};else throw err;\n    }\n    this.cache[this.locale] = localeLookup;\n  }\n  _resolveLocaleFile(directory, locale) {\n    let file = shim.resolve(directory, './', locale + '.json');\n    if (this.fallbackToLanguage && !this._fileExistsSync(file) && ~locale.lastIndexOf('_')) {\n      // attempt fallback to language only\n      const languageFile = shim.resolve(directory, './', locale.split('_')[0] + '.json');\n      if (this._fileExistsSync(languageFile)) file = languageFile;\n    }\n    return file;\n  }\n  _fileExistsSync(file) {\n    return shim.exists(file);\n  }\n}\nfunction y18n$1(opts, _shim) {\n  shim = _shim;\n  const y18n = new Y18N(opts);\n  return {\n    __: y18n.__.bind(y18n),\n    __n: y18n.__n.bind(y18n),\n    setLocale: y18n.setLocale.bind(y18n),\n    getLocale: y18n.getLocale.bind(y18n),\n    updateLocale: y18n.updateLocale.bind(y18n),\n    locale: y18n.locale\n  };\n}\nvar nodePlatformShim = {\n  fs: {\n    readFileSync: fs.readFileSync,\n    writeFile: fs.writeFile\n  },\n  format: util.format,\n  resolve: path.resolve,\n  exists: file => {\n    try {\n      return fs.statSync(file).isFile();\n    } catch (err) {\n      return false;\n    }\n  }\n};\nconst y18n = opts => {\n  return y18n$1(opts, nodePlatformShim);\n};\nmodule.exports = y18n;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["fs","require","util","path","shim","Y18N","constructor","opts","directory","updateFiles","locale","fallbackToLanguage","cache","Object","create","writeQueue","__","args","arguments","_taggedLiteral","str","shift","cb","length","pop","_readLocaleFile","_enqueueWrite","format","apply","concat","__n","Array","prototype","slice","call","singular","plural","quantity","entry","one","other","values","indexOf","push","setLocale","getLocale","updateLocale","obj","key","hasOwnProperty","parts","forEach","part","i","arg","work","_processWriteQueue","_this","languageFile","_resolveLocaleFile","serializedLocale","JSON","stringify","writeFile","err","localeLookup","readFileSync","parse","SyntaxError","message","code","file","resolve","_fileExistsSync","lastIndexOf","split","exists","y18n$1","_shim","y18n","bind","nodePlatformShim","statSync","isFile","module","exports"],"sourceRoot":"C:\\code\\FluidFramework5\\node_modules\\.pnpm\\y18n@5.0.8\\node_modules\\y18n\\build\\","sources":["index.cjs"],"sourcesContent":["'use strict';\n\nvar fs = require('fs');\nvar util = require('util');\nvar path = require('path');\n\nlet shim;\nclass Y18N {\n    constructor(opts) {\n        // configurable options.\n        opts = opts || {};\n        this.directory = opts.directory || './locales';\n        this.updateFiles = typeof opts.updateFiles === 'boolean' ? opts.updateFiles : true;\n        this.locale = opts.locale || 'en';\n        this.fallbackToLanguage = typeof opts.fallbackToLanguage === 'boolean' ? opts.fallbackToLanguage : true;\n        // internal stuff.\n        this.cache = Object.create(null);\n        this.writeQueue = [];\n    }\n    __(...args) {\n        if (typeof arguments[0] !== 'string') {\n            return this._taggedLiteral(arguments[0], ...arguments);\n        }\n        const str = args.shift();\n        let cb = function () { }; // start with noop.\n        if (typeof args[args.length - 1] === 'function')\n            cb = args.pop();\n        cb = cb || function () { }; // noop.\n        if (!this.cache[this.locale])\n            this._readLocaleFile();\n        // we've observed a new string, update the language file.\n        if (!this.cache[this.locale][str] && this.updateFiles) {\n            this.cache[this.locale][str] = str;\n            // include the current directory and locale,\n            // since these values could change before the\n            // write is performed.\n            this._enqueueWrite({\n                directory: this.directory,\n                locale: this.locale,\n                cb\n            });\n        }\n        else {\n            cb();\n        }\n        return shim.format.apply(shim.format, [this.cache[this.locale][str] || str].concat(args));\n    }\n    __n() {\n        const args = Array.prototype.slice.call(arguments);\n        const singular = args.shift();\n        const plural = args.shift();\n        const quantity = args.shift();\n        let cb = function () { }; // start with noop.\n        if (typeof args[args.length - 1] === 'function')\n            cb = args.pop();\n        if (!this.cache[this.locale])\n            this._readLocaleFile();\n        let str = quantity === 1 ? singular : plural;\n        if (this.cache[this.locale][singular]) {\n            const entry = this.cache[this.locale][singular];\n            str = entry[quantity === 1 ? 'one' : 'other'];\n        }\n        // we've observed a new string, update the language file.\n        if (!this.cache[this.locale][singular] && this.updateFiles) {\n            this.cache[this.locale][singular] = {\n                one: singular,\n                other: plural\n            };\n            // include the current directory and locale,\n            // since these values could change before the\n            // write is performed.\n            this._enqueueWrite({\n                directory: this.directory,\n                locale: this.locale,\n                cb\n            });\n        }\n        else {\n            cb();\n        }\n        // if a %d placeholder is provided, add quantity\n        // to the arguments expanded by util.format.\n        const values = [str];\n        if (~str.indexOf('%d'))\n            values.push(quantity);\n        return shim.format.apply(shim.format, values.concat(args));\n    }\n    setLocale(locale) {\n        this.locale = locale;\n    }\n    getLocale() {\n        return this.locale;\n    }\n    updateLocale(obj) {\n        if (!this.cache[this.locale])\n            this._readLocaleFile();\n        for (const key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                this.cache[this.locale][key] = obj[key];\n            }\n        }\n    }\n    _taggedLiteral(parts, ...args) {\n        let str = '';\n        parts.forEach(function (part, i) {\n            const arg = args[i + 1];\n            str += part;\n            if (typeof arg !== 'undefined') {\n                str += '%s';\n            }\n        });\n        return this.__.apply(this, [str].concat([].slice.call(args, 1)));\n    }\n    _enqueueWrite(work) {\n        this.writeQueue.push(work);\n        if (this.writeQueue.length === 1)\n            this._processWriteQueue();\n    }\n    _processWriteQueue() {\n        const _this = this;\n        const work = this.writeQueue[0];\n        // destructure the enqueued work.\n        const directory = work.directory;\n        const locale = work.locale;\n        const cb = work.cb;\n        const languageFile = this._resolveLocaleFile(directory, locale);\n        const serializedLocale = JSON.stringify(this.cache[locale], null, 2);\n        shim.fs.writeFile(languageFile, serializedLocale, 'utf-8', function (err) {\n            _this.writeQueue.shift();\n            if (_this.writeQueue.length > 0)\n                _this._processWriteQueue();\n            cb(err);\n        });\n    }\n    _readLocaleFile() {\n        let localeLookup = {};\n        const languageFile = this._resolveLocaleFile(this.directory, this.locale);\n        try {\n            // When using a bundler such as webpack, readFileSync may not be defined:\n            if (shim.fs.readFileSync) {\n                localeLookup = JSON.parse(shim.fs.readFileSync(languageFile, 'utf-8'));\n            }\n        }\n        catch (err) {\n            if (err instanceof SyntaxError) {\n                err.message = 'syntax error in ' + languageFile;\n            }\n            if (err.code === 'ENOENT')\n                localeLookup = {};\n            else\n                throw err;\n        }\n        this.cache[this.locale] = localeLookup;\n    }\n    _resolveLocaleFile(directory, locale) {\n        let file = shim.resolve(directory, './', locale + '.json');\n        if (this.fallbackToLanguage && !this._fileExistsSync(file) && ~locale.lastIndexOf('_')) {\n            // attempt fallback to language only\n            const languageFile = shim.resolve(directory, './', locale.split('_')[0] + '.json');\n            if (this._fileExistsSync(languageFile))\n                file = languageFile;\n        }\n        return file;\n    }\n    _fileExistsSync(file) {\n        return shim.exists(file);\n    }\n}\nfunction y18n$1(opts, _shim) {\n    shim = _shim;\n    const y18n = new Y18N(opts);\n    return {\n        __: y18n.__.bind(y18n),\n        __n: y18n.__n.bind(y18n),\n        setLocale: y18n.setLocale.bind(y18n),\n        getLocale: y18n.getLocale.bind(y18n),\n        updateLocale: y18n.updateLocale.bind(y18n),\n        locale: y18n.locale\n    };\n}\n\nvar nodePlatformShim = {\n    fs: {\n        readFileSync: fs.readFileSync,\n        writeFile: fs.writeFile\n    },\n    format: util.format,\n    resolve: path.resolve,\n    exists: (file) => {\n        try {\n            return fs.statSync(file).isFile();\n        }\n        catch (err) {\n            return false;\n        }\n    }\n};\n\nconst y18n = (opts) => {\n    return y18n$1(opts, nodePlatformShim);\n};\n\nmodule.exports = y18n;\n"],"mappings":"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"}},"mtime":1674865335277},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\yargs-parser@20.2.9\\\\node_modules\\\\yargs-parser\\\\build\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\yargs-parser@20.2.9\\\\node_modules\\\\yargs-parser\\\\build\\\\index.cjs\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.22.6:development":{"value":{"code":"'use strict';\n\nvar util = require('util');\nvar fs = require('fs');\nvar path = require('path');\nfunction camelCase(str) {\n  const isCamelCase = str !== str.toLowerCase() && str !== str.toUpperCase();\n  if (!isCamelCase) {\n    str = str.toLowerCase();\n  }\n  if (str.indexOf('-') === -1 && str.indexOf('_') === -1) {\n    return str;\n  } else {\n    let camelcase = '';\n    let nextChrUpper = false;\n    const leadingHyphens = str.match(/^-+/);\n    for (let i = leadingHyphens ? leadingHyphens[0].length : 0; i < str.length; i++) {\n      let chr = str.charAt(i);\n      if (nextChrUpper) {\n        nextChrUpper = false;\n        chr = chr.toUpperCase();\n      }\n      if (i !== 0 && (chr === '-' || chr === '_')) {\n        nextChrUpper = true;\n      } else if (chr !== '-' && chr !== '_') {\n        camelcase += chr;\n      }\n    }\n    return camelcase;\n  }\n}\nfunction decamelize(str, joinString) {\n  const lowercase = str.toLowerCase();\n  joinString = joinString || '-';\n  let notCamelcase = '';\n  for (let i = 0; i < str.length; i++) {\n    const chrLower = lowercase.charAt(i);\n    const chrString = str.charAt(i);\n    if (chrLower !== chrString && i > 0) {\n      notCamelcase += `${joinString}${lowercase.charAt(i)}`;\n    } else {\n      notCamelcase += chrString;\n    }\n  }\n  return notCamelcase;\n}\nfunction looksLikeNumber(x) {\n  if (x === null || x === undefined) return false;\n  if (typeof x === 'number') return true;\n  if (/^0x[0-9a-f]+$/i.test(x)) return true;\n  if (/^0[^.]/.test(x)) return false;\n  return /^[-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(e[-+]?\\d+)?$/.test(x);\n}\nfunction tokenizeArgString(argString) {\n  if (Array.isArray(argString)) {\n    return argString.map(e => typeof e !== 'string' ? e + '' : e);\n  }\n  argString = argString.trim();\n  let i = 0;\n  let prevC = null;\n  let c = null;\n  let opening = null;\n  const args = [];\n  for (let ii = 0; ii < argString.length; ii++) {\n    prevC = c;\n    c = argString.charAt(ii);\n    if (c === ' ' && !opening) {\n      if (!(prevC === ' ')) {\n        i++;\n      }\n      continue;\n    }\n    if (c === opening) {\n      opening = null;\n    } else if ((c === \"'\" || c === '\"') && !opening) {\n      opening = c;\n    }\n    if (!args[i]) args[i] = '';\n    args[i] += c;\n  }\n  return args;\n}\nvar DefaultValuesForTypeKey;\n(function (DefaultValuesForTypeKey) {\n  DefaultValuesForTypeKey[\"BOOLEAN\"] = \"boolean\";\n  DefaultValuesForTypeKey[\"STRING\"] = \"string\";\n  DefaultValuesForTypeKey[\"NUMBER\"] = \"number\";\n  DefaultValuesForTypeKey[\"ARRAY\"] = \"array\";\n})(DefaultValuesForTypeKey || (DefaultValuesForTypeKey = {}));\nlet mixin;\nclass YargsParser {\n  constructor(_mixin) {\n    mixin = _mixin;\n  }\n  parse(argsInput, options) {\n    const opts = Object.assign({\n      alias: undefined,\n      array: undefined,\n      boolean: undefined,\n      config: undefined,\n      configObjects: undefined,\n      configuration: undefined,\n      coerce: undefined,\n      count: undefined,\n      default: undefined,\n      envPrefix: undefined,\n      narg: undefined,\n      normalize: undefined,\n      string: undefined,\n      number: undefined,\n      __: undefined,\n      key: undefined\n    }, options);\n    const args = tokenizeArgString(argsInput);\n    const aliases = combineAliases(Object.assign(Object.create(null), opts.alias));\n    const configuration = Object.assign({\n      'boolean-negation': true,\n      'camel-case-expansion': true,\n      'combine-arrays': false,\n      'dot-notation': true,\n      'duplicate-arguments-array': true,\n      'flatten-duplicate-arrays': true,\n      'greedy-arrays': true,\n      'halt-at-non-option': false,\n      'nargs-eats-options': false,\n      'negation-prefix': 'no-',\n      'parse-numbers': true,\n      'parse-positional-numbers': true,\n      'populate--': false,\n      'set-placeholder-key': false,\n      'short-option-groups': true,\n      'strip-aliased': false,\n      'strip-dashed': false,\n      'unknown-options-as-args': false\n    }, opts.configuration);\n    const defaults = Object.assign(Object.create(null), opts.default);\n    const configObjects = opts.configObjects || [];\n    const envPrefix = opts.envPrefix;\n    const notFlagsOption = configuration['populate--'];\n    const notFlagsArgv = notFlagsOption ? '--' : '_';\n    const newAliases = Object.create(null);\n    const defaulted = Object.create(null);\n    const __ = opts.__ || mixin.format;\n    const flags = {\n      aliases: Object.create(null),\n      arrays: Object.create(null),\n      bools: Object.create(null),\n      strings: Object.create(null),\n      numbers: Object.create(null),\n      counts: Object.create(null),\n      normalize: Object.create(null),\n      configs: Object.create(null),\n      nargs: Object.create(null),\n      coercions: Object.create(null),\n      keys: []\n    };\n    const negative = /^-([0-9]+(\\.[0-9]+)?|\\.[0-9]+)$/;\n    const negatedBoolean = new RegExp('^--' + configuration['negation-prefix'] + '(.+)');\n    [].concat(opts.array || []).filter(Boolean).forEach(function (opt) {\n      const key = typeof opt === 'object' ? opt.key : opt;\n      const assignment = Object.keys(opt).map(function (key) {\n        const arrayFlagKeys = {\n          boolean: 'bools',\n          string: 'strings',\n          number: 'numbers'\n        };\n        return arrayFlagKeys[key];\n      }).filter(Boolean).pop();\n      if (assignment) {\n        flags[assignment][key] = true;\n      }\n      flags.arrays[key] = true;\n      flags.keys.push(key);\n    });\n    [].concat(opts.boolean || []).filter(Boolean).forEach(function (key) {\n      flags.bools[key] = true;\n      flags.keys.push(key);\n    });\n    [].concat(opts.string || []).filter(Boolean).forEach(function (key) {\n      flags.strings[key] = true;\n      flags.keys.push(key);\n    });\n    [].concat(opts.number || []).filter(Boolean).forEach(function (key) {\n      flags.numbers[key] = true;\n      flags.keys.push(key);\n    });\n    [].concat(opts.count || []).filter(Boolean).forEach(function (key) {\n      flags.counts[key] = true;\n      flags.keys.push(key);\n    });\n    [].concat(opts.normalize || []).filter(Boolean).forEach(function (key) {\n      flags.normalize[key] = true;\n      flags.keys.push(key);\n    });\n    if (typeof opts.narg === 'object') {\n      Object.entries(opts.narg).forEach(([key, value]) => {\n        if (typeof value === 'number') {\n          flags.nargs[key] = value;\n          flags.keys.push(key);\n        }\n      });\n    }\n    if (typeof opts.coerce === 'object') {\n      Object.entries(opts.coerce).forEach(([key, value]) => {\n        if (typeof value === 'function') {\n          flags.coercions[key] = value;\n          flags.keys.push(key);\n        }\n      });\n    }\n    if (typeof opts.config !== 'undefined') {\n      if (Array.isArray(opts.config) || typeof opts.config === 'string') {\n        [].concat(opts.config).filter(Boolean).forEach(function (key) {\n          flags.configs[key] = true;\n        });\n      } else if (typeof opts.config === 'object') {\n        Object.entries(opts.config).forEach(([key, value]) => {\n          if (typeof value === 'boolean' || typeof value === 'function') {\n            flags.configs[key] = value;\n          }\n        });\n      }\n    }\n    extendAliases(opts.key, aliases, opts.default, flags.arrays);\n    Object.keys(defaults).forEach(function (key) {\n      (flags.aliases[key] || []).forEach(function (alias) {\n        defaults[alias] = defaults[key];\n      });\n    });\n    let error = null;\n    checkConfiguration();\n    let notFlags = [];\n    const argv = Object.assign(Object.create(null), {\n      _: []\n    });\n    const argvReturn = {};\n    for (let i = 0; i < args.length; i++) {\n      const arg = args[i];\n      const truncatedArg = arg.replace(/^-{3,}/, '---');\n      let broken;\n      let key;\n      let letters;\n      let m;\n      let next;\n      let value;\n      if (arg !== '--' && isUnknownOptionAsArg(arg)) {\n        pushPositional(arg);\n      } else if (truncatedArg.match(/---+(=|$)/)) {\n        pushPositional(arg);\n        continue;\n      } else if (arg.match(/^--.+=/) || !configuration['short-option-groups'] && arg.match(/^-.+=/)) {\n        m = arg.match(/^--?([^=]+)=([\\s\\S]*)$/);\n        if (m !== null && Array.isArray(m) && m.length >= 3) {\n          if (checkAllAliases(m[1], flags.arrays)) {\n            i = eatArray(i, m[1], args, m[2]);\n          } else if (checkAllAliases(m[1], flags.nargs) !== false) {\n            i = eatNargs(i, m[1], args, m[2]);\n          } else {\n            setArg(m[1], m[2]);\n          }\n        }\n      } else if (arg.match(negatedBoolean) && configuration['boolean-negation']) {\n        m = arg.match(negatedBoolean);\n        if (m !== null && Array.isArray(m) && m.length >= 2) {\n          key = m[1];\n          setArg(key, checkAllAliases(key, flags.arrays) ? [false] : false);\n        }\n      } else if (arg.match(/^--.+/) || !configuration['short-option-groups'] && arg.match(/^-[^-]+/)) {\n        m = arg.match(/^--?(.+)/);\n        if (m !== null && Array.isArray(m) && m.length >= 2) {\n          key = m[1];\n          if (checkAllAliases(key, flags.arrays)) {\n            i = eatArray(i, key, args);\n          } else if (checkAllAliases(key, flags.nargs) !== false) {\n            i = eatNargs(i, key, args);\n          } else {\n            next = args[i + 1];\n            if (next !== undefined && (!next.match(/^-/) || next.match(negative)) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {\n              setArg(key, next);\n              i++;\n            } else if (/^(true|false)$/.test(next)) {\n              setArg(key, next);\n              i++;\n            } else {\n              setArg(key, defaultValue(key));\n            }\n          }\n        }\n      } else if (arg.match(/^-.\\..+=/)) {\n        m = arg.match(/^-([^=]+)=([\\s\\S]*)$/);\n        if (m !== null && Array.isArray(m) && m.length >= 3) {\n          setArg(m[1], m[2]);\n        }\n      } else if (arg.match(/^-.\\..+/) && !arg.match(negative)) {\n        next = args[i + 1];\n        m = arg.match(/^-(.\\..+)/);\n        if (m !== null && Array.isArray(m) && m.length >= 2) {\n          key = m[1];\n          if (next !== undefined && !next.match(/^-/) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {\n            setArg(key, next);\n            i++;\n          } else {\n            setArg(key, defaultValue(key));\n          }\n        }\n      } else if (arg.match(/^-[^-]+/) && !arg.match(negative)) {\n        letters = arg.slice(1, -1).split('');\n        broken = false;\n        for (let j = 0; j < letters.length; j++) {\n          next = arg.slice(j + 2);\n          if (letters[j + 1] && letters[j + 1] === '=') {\n            value = arg.slice(j + 3);\n            key = letters[j];\n            if (checkAllAliases(key, flags.arrays)) {\n              i = eatArray(i, key, args, value);\n            } else if (checkAllAliases(key, flags.nargs) !== false) {\n              i = eatNargs(i, key, args, value);\n            } else {\n              setArg(key, value);\n            }\n            broken = true;\n            break;\n          }\n          if (next === '-') {\n            setArg(letters[j], next);\n            continue;\n          }\n          if (/[A-Za-z]/.test(letters[j]) && /^-?\\d+(\\.\\d*)?(e-?\\d+)?$/.test(next) && checkAllAliases(next, flags.bools) === false) {\n            setArg(letters[j], next);\n            broken = true;\n            break;\n          }\n          if (letters[j + 1] && letters[j + 1].match(/\\W/)) {\n            setArg(letters[j], next);\n            broken = true;\n            break;\n          } else {\n            setArg(letters[j], defaultValue(letters[j]));\n          }\n        }\n        key = arg.slice(-1)[0];\n        if (!broken && key !== '-') {\n          if (checkAllAliases(key, flags.arrays)) {\n            i = eatArray(i, key, args);\n          } else if (checkAllAliases(key, flags.nargs) !== false) {\n            i = eatNargs(i, key, args);\n          } else {\n            next = args[i + 1];\n            if (next !== undefined && (!/^(-|--)[^-]/.test(next) || next.match(negative)) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {\n              setArg(key, next);\n              i++;\n            } else if (/^(true|false)$/.test(next)) {\n              setArg(key, next);\n              i++;\n            } else {\n              setArg(key, defaultValue(key));\n            }\n          }\n        }\n      } else if (arg.match(/^-[0-9]$/) && arg.match(negative) && checkAllAliases(arg.slice(1), flags.bools)) {\n        key = arg.slice(1);\n        setArg(key, defaultValue(key));\n      } else if (arg === '--') {\n        notFlags = args.slice(i + 1);\n        break;\n      } else if (configuration['halt-at-non-option']) {\n        notFlags = args.slice(i);\n        break;\n      } else {\n        pushPositional(arg);\n      }\n    }\n    applyEnvVars(argv, true);\n    applyEnvVars(argv, false);\n    setConfig(argv);\n    setConfigObjects();\n    applyDefaultsAndAliases(argv, flags.aliases, defaults, true);\n    applyCoercions(argv);\n    if (configuration['set-placeholder-key']) setPlaceholderKeys(argv);\n    Object.keys(flags.counts).forEach(function (key) {\n      if (!hasKey(argv, key.split('.'))) setArg(key, 0);\n    });\n    if (notFlagsOption && notFlags.length) argv[notFlagsArgv] = [];\n    notFlags.forEach(function (key) {\n      argv[notFlagsArgv].push(key);\n    });\n    if (configuration['camel-case-expansion'] && configuration['strip-dashed']) {\n      Object.keys(argv).filter(key => key !== '--' && key.includes('-')).forEach(key => {\n        delete argv[key];\n      });\n    }\n    if (configuration['strip-aliased']) {\n      [].concat(...Object.keys(aliases).map(k => aliases[k])).forEach(alias => {\n        if (configuration['camel-case-expansion'] && alias.includes('-')) {\n          delete argv[alias.split('.').map(prop => camelCase(prop)).join('.')];\n        }\n        delete argv[alias];\n      });\n    }\n    function pushPositional(arg) {\n      const maybeCoercedNumber = maybeCoerceNumber('_', arg);\n      if (typeof maybeCoercedNumber === 'string' || typeof maybeCoercedNumber === 'number') {\n        argv._.push(maybeCoercedNumber);\n      }\n    }\n    function eatNargs(i, key, args, argAfterEqualSign) {\n      let ii;\n      let toEat = checkAllAliases(key, flags.nargs);\n      toEat = typeof toEat !== 'number' || isNaN(toEat) ? 1 : toEat;\n      if (toEat === 0) {\n        if (!isUndefined(argAfterEqualSign)) {\n          error = Error(__('Argument unexpected for: %s', key));\n        }\n        setArg(key, defaultValue(key));\n        return i;\n      }\n      let available = isUndefined(argAfterEqualSign) ? 0 : 1;\n      if (configuration['nargs-eats-options']) {\n        if (args.length - (i + 1) + available < toEat) {\n          error = Error(__('Not enough arguments following: %s', key));\n        }\n        available = toEat;\n      } else {\n        for (ii = i + 1; ii < args.length; ii++) {\n          if (!args[ii].match(/^-[^0-9]/) || args[ii].match(negative) || isUnknownOptionAsArg(args[ii])) available++;else break;\n        }\n        if (available < toEat) error = Error(__('Not enough arguments following: %s', key));\n      }\n      let consumed = Math.min(available, toEat);\n      if (!isUndefined(argAfterEqualSign) && consumed > 0) {\n        setArg(key, argAfterEqualSign);\n        consumed--;\n      }\n      for (ii = i + 1; ii < consumed + i + 1; ii++) {\n        setArg(key, args[ii]);\n      }\n      return i + consumed;\n    }\n    function eatArray(i, key, args, argAfterEqualSign) {\n      let argsToSet = [];\n      let next = argAfterEqualSign || args[i + 1];\n      const nargsCount = checkAllAliases(key, flags.nargs);\n      if (checkAllAliases(key, flags.bools) && !/^(true|false)$/.test(next)) {\n        argsToSet.push(true);\n      } else if (isUndefined(next) || isUndefined(argAfterEqualSign) && /^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next)) {\n        if (defaults[key] !== undefined) {\n          const defVal = defaults[key];\n          argsToSet = Array.isArray(defVal) ? defVal : [defVal];\n        }\n      } else {\n        if (!isUndefined(argAfterEqualSign)) {\n          argsToSet.push(processValue(key, argAfterEqualSign));\n        }\n        for (let ii = i + 1; ii < args.length; ii++) {\n          if (!configuration['greedy-arrays'] && argsToSet.length > 0 || nargsCount && typeof nargsCount === 'number' && argsToSet.length >= nargsCount) break;\n          next = args[ii];\n          if (/^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next)) break;\n          i = ii;\n          argsToSet.push(processValue(key, next));\n        }\n      }\n      if (typeof nargsCount === 'number' && (nargsCount && argsToSet.length < nargsCount || isNaN(nargsCount) && argsToSet.length === 0)) {\n        error = Error(__('Not enough arguments following: %s', key));\n      }\n      setArg(key, argsToSet);\n      return i;\n    }\n    function setArg(key, val) {\n      if (/-/.test(key) && configuration['camel-case-expansion']) {\n        const alias = key.split('.').map(function (prop) {\n          return camelCase(prop);\n        }).join('.');\n        addNewAlias(key, alias);\n      }\n      const value = processValue(key, val);\n      const splitKey = key.split('.');\n      setKey(argv, splitKey, value);\n      if (flags.aliases[key]) {\n        flags.aliases[key].forEach(function (x) {\n          const keyProperties = x.split('.');\n          setKey(argv, keyProperties, value);\n        });\n      }\n      if (splitKey.length > 1 && configuration['dot-notation']) {\n        (flags.aliases[splitKey[0]] || []).forEach(function (x) {\n          let keyProperties = x.split('.');\n          const a = [].concat(splitKey);\n          a.shift();\n          keyProperties = keyProperties.concat(a);\n          if (!(flags.aliases[key] || []).includes(keyProperties.join('.'))) {\n            setKey(argv, keyProperties, value);\n          }\n        });\n      }\n      if (checkAllAliases(key, flags.normalize) && !checkAllAliases(key, flags.arrays)) {\n        const keys = [key].concat(flags.aliases[key] || []);\n        keys.forEach(function (key) {\n          Object.defineProperty(argvReturn, key, {\n            enumerable: true,\n            get() {\n              return val;\n            },\n            set(value) {\n              val = typeof value === 'string' ? mixin.normalize(value) : value;\n            }\n          });\n        });\n      }\n    }\n    function addNewAlias(key, alias) {\n      if (!(flags.aliases[key] && flags.aliases[key].length)) {\n        flags.aliases[key] = [alias];\n        newAliases[alias] = true;\n      }\n      if (!(flags.aliases[alias] && flags.aliases[alias].length)) {\n        addNewAlias(alias, key);\n      }\n    }\n    function processValue(key, val) {\n      if (typeof val === 'string' && (val[0] === \"'\" || val[0] === '\"') && val[val.length - 1] === val[0]) {\n        val = val.substring(1, val.length - 1);\n      }\n      if (checkAllAliases(key, flags.bools) || checkAllAliases(key, flags.counts)) {\n        if (typeof val === 'string') val = val === 'true';\n      }\n      let value = Array.isArray(val) ? val.map(function (v) {\n        return maybeCoerceNumber(key, v);\n      }) : maybeCoerceNumber(key, val);\n      if (checkAllAliases(key, flags.counts) && (isUndefined(value) || typeof value === 'boolean')) {\n        value = increment();\n      }\n      if (checkAllAliases(key, flags.normalize) && checkAllAliases(key, flags.arrays)) {\n        if (Array.isArray(val)) value = val.map(val => {\n          return mixin.normalize(val);\n        });else value = mixin.normalize(val);\n      }\n      return value;\n    }\n    function maybeCoerceNumber(key, value) {\n      if (!configuration['parse-positional-numbers'] && key === '_') return value;\n      if (!checkAllAliases(key, flags.strings) && !checkAllAliases(key, flags.bools) && !Array.isArray(value)) {\n        const shouldCoerceNumber = looksLikeNumber(value) && configuration['parse-numbers'] && Number.isSafeInteger(Math.floor(parseFloat(`${value}`)));\n        if (shouldCoerceNumber || !isUndefined(value) && checkAllAliases(key, flags.numbers)) {\n          value = Number(value);\n        }\n      }\n      return value;\n    }\n    function setConfig(argv) {\n      const configLookup = Object.create(null);\n      applyDefaultsAndAliases(configLookup, flags.aliases, defaults);\n      Object.keys(flags.configs).forEach(function (configKey) {\n        const configPath = argv[configKey] || configLookup[configKey];\n        if (configPath) {\n          try {\n            let config = null;\n            const resolvedConfigPath = mixin.resolve(mixin.cwd(), configPath);\n            const resolveConfig = flags.configs[configKey];\n            if (typeof resolveConfig === 'function') {\n              try {\n                config = resolveConfig(resolvedConfigPath);\n              } catch (e) {\n                config = e;\n              }\n              if (config instanceof Error) {\n                error = config;\n                return;\n              }\n            } else {\n              config = mixin.require(resolvedConfigPath);\n            }\n            setConfigObject(config);\n          } catch (ex) {\n            if (ex.name === 'PermissionDenied') error = ex;else if (argv[configKey]) error = Error(__('Invalid JSON config file: %s', configPath));\n          }\n        }\n      });\n    }\n    function setConfigObject(config, prev) {\n      Object.keys(config).forEach(function (key) {\n        const value = config[key];\n        const fullKey = prev ? prev + '.' + key : key;\n        if (typeof value === 'object' && value !== null && !Array.isArray(value) && configuration['dot-notation']) {\n          setConfigObject(value, fullKey);\n        } else {\n          if (!hasKey(argv, fullKey.split('.')) || checkAllAliases(fullKey, flags.arrays) && configuration['combine-arrays']) {\n            setArg(fullKey, value);\n          }\n        }\n      });\n    }\n    function setConfigObjects() {\n      if (typeof configObjects !== 'undefined') {\n        configObjects.forEach(function (configObject) {\n          setConfigObject(configObject);\n        });\n      }\n    }\n    function applyEnvVars(argv, configOnly) {\n      if (typeof envPrefix === 'undefined') return;\n      const prefix = typeof envPrefix === 'string' ? envPrefix : '';\n      const env = mixin.env();\n      Object.keys(env).forEach(function (envVar) {\n        if (prefix === '' || envVar.lastIndexOf(prefix, 0) === 0) {\n          const keys = envVar.split('__').map(function (key, i) {\n            if (i === 0) {\n              key = key.substring(prefix.length);\n            }\n            return camelCase(key);\n          });\n          if ((configOnly && flags.configs[keys.join('.')] || !configOnly) && !hasKey(argv, keys)) {\n            setArg(keys.join('.'), env[envVar]);\n          }\n        }\n      });\n    }\n    function applyCoercions(argv) {\n      let coerce;\n      const applied = new Set();\n      Object.keys(argv).forEach(function (key) {\n        if (!applied.has(key)) {\n          coerce = checkAllAliases(key, flags.coercions);\n          if (typeof coerce === 'function') {\n            try {\n              const value = maybeCoerceNumber(key, coerce(argv[key]));\n              [].concat(flags.aliases[key] || [], key).forEach(ali => {\n                applied.add(ali);\n                argv[ali] = value;\n              });\n            } catch (err) {\n              error = err;\n            }\n          }\n        }\n      });\n    }\n    function setPlaceholderKeys(argv) {\n      flags.keys.forEach(key => {\n        if (~key.indexOf('.')) return;\n        if (typeof argv[key] === 'undefined') argv[key] = undefined;\n      });\n      return argv;\n    }\n    function applyDefaultsAndAliases(obj, aliases, defaults, canLog = false) {\n      Object.keys(defaults).forEach(function (key) {\n        if (!hasKey(obj, key.split('.'))) {\n          setKey(obj, key.split('.'), defaults[key]);\n          if (canLog) defaulted[key] = true;\n          (aliases[key] || []).forEach(function (x) {\n            if (hasKey(obj, x.split('.'))) return;\n            setKey(obj, x.split('.'), defaults[key]);\n          });\n        }\n      });\n    }\n    function hasKey(obj, keys) {\n      let o = obj;\n      if (!configuration['dot-notation']) keys = [keys.join('.')];\n      keys.slice(0, -1).forEach(function (key) {\n        o = o[key] || {};\n      });\n      const key = keys[keys.length - 1];\n      if (typeof o !== 'object') return false;else return key in o;\n    }\n    function setKey(obj, keys, value) {\n      let o = obj;\n      if (!configuration['dot-notation']) keys = [keys.join('.')];\n      keys.slice(0, -1).forEach(function (key) {\n        key = sanitizeKey(key);\n        if (typeof o === 'object' && o[key] === undefined) {\n          o[key] = {};\n        }\n        if (typeof o[key] !== 'object' || Array.isArray(o[key])) {\n          if (Array.isArray(o[key])) {\n            o[key].push({});\n          } else {\n            o[key] = [o[key], {}];\n          }\n          o = o[key][o[key].length - 1];\n        } else {\n          o = o[key];\n        }\n      });\n      const key = sanitizeKey(keys[keys.length - 1]);\n      const isTypeArray = checkAllAliases(keys.join('.'), flags.arrays);\n      const isValueArray = Array.isArray(value);\n      let duplicate = configuration['duplicate-arguments-array'];\n      if (!duplicate && checkAllAliases(key, flags.nargs)) {\n        duplicate = true;\n        if (!isUndefined(o[key]) && flags.nargs[key] === 1 || Array.isArray(o[key]) && o[key].length === flags.nargs[key]) {\n          o[key] = undefined;\n        }\n      }\n      if (value === increment()) {\n        o[key] = increment(o[key]);\n      } else if (Array.isArray(o[key])) {\n        if (duplicate && isTypeArray && isValueArray) {\n          o[key] = configuration['flatten-duplicate-arrays'] ? o[key].concat(value) : (Array.isArray(o[key][0]) ? o[key] : [o[key]]).concat([value]);\n        } else if (!duplicate && Boolean(isTypeArray) === Boolean(isValueArray)) {\n          o[key] = value;\n        } else {\n          o[key] = o[key].concat([value]);\n        }\n      } else if (o[key] === undefined && isTypeArray) {\n        o[key] = isValueArray ? value : [value];\n      } else if (duplicate && !(o[key] === undefined || checkAllAliases(key, flags.counts) || checkAllAliases(key, flags.bools))) {\n        o[key] = [o[key], value];\n      } else {\n        o[key] = value;\n      }\n    }\n    function extendAliases(...args) {\n      args.forEach(function (obj) {\n        Object.keys(obj || {}).forEach(function (key) {\n          if (flags.aliases[key]) return;\n          flags.aliases[key] = [].concat(aliases[key] || []);\n          flags.aliases[key].concat(key).forEach(function (x) {\n            if (/-/.test(x) && configuration['camel-case-expansion']) {\n              const c = camelCase(x);\n              if (c !== key && flags.aliases[key].indexOf(c) === -1) {\n                flags.aliases[key].push(c);\n                newAliases[c] = true;\n              }\n            }\n          });\n          flags.aliases[key].concat(key).forEach(function (x) {\n            if (x.length > 1 && /[A-Z]/.test(x) && configuration['camel-case-expansion']) {\n              const c = decamelize(x, '-');\n              if (c !== key && flags.aliases[key].indexOf(c) === -1) {\n                flags.aliases[key].push(c);\n                newAliases[c] = true;\n              }\n            }\n          });\n          flags.aliases[key].forEach(function (x) {\n            flags.aliases[x] = [key].concat(flags.aliases[key].filter(function (y) {\n              return x !== y;\n            }));\n          });\n        });\n      });\n    }\n    function checkAllAliases(key, flag) {\n      const toCheck = [].concat(flags.aliases[key] || [], key);\n      const keys = Object.keys(flag);\n      const setAlias = toCheck.find(key => keys.includes(key));\n      return setAlias ? flag[setAlias] : false;\n    }\n    function hasAnyFlag(key) {\n      const flagsKeys = Object.keys(flags);\n      const toCheck = [].concat(flagsKeys.map(k => flags[k]));\n      return toCheck.some(function (flag) {\n        return Array.isArray(flag) ? flag.includes(key) : flag[key];\n      });\n    }\n    function hasFlagsMatching(arg, ...patterns) {\n      const toCheck = [].concat(...patterns);\n      return toCheck.some(function (pattern) {\n        const match = arg.match(pattern);\n        return match && hasAnyFlag(match[1]);\n      });\n    }\n    function hasAllShortFlags(arg) {\n      if (arg.match(negative) || !arg.match(/^-[^-]+/)) {\n        return false;\n      }\n      let hasAllFlags = true;\n      let next;\n      const letters = arg.slice(1).split('');\n      for (let j = 0; j < letters.length; j++) {\n        next = arg.slice(j + 2);\n        if (!hasAnyFlag(letters[j])) {\n          hasAllFlags = false;\n          break;\n        }\n        if (letters[j + 1] && letters[j + 1] === '=' || next === '-' || /[A-Za-z]/.test(letters[j]) && /^-?\\d+(\\.\\d*)?(e-?\\d+)?$/.test(next) || letters[j + 1] && letters[j + 1].match(/\\W/)) {\n          break;\n        }\n      }\n      return hasAllFlags;\n    }\n    function isUnknownOptionAsArg(arg) {\n      return configuration['unknown-options-as-args'] && isUnknownOption(arg);\n    }\n    function isUnknownOption(arg) {\n      arg = arg.replace(/^-{3,}/, '--');\n      if (arg.match(negative)) {\n        return false;\n      }\n      if (hasAllShortFlags(arg)) {\n        return false;\n      }\n      const flagWithEquals = /^-+([^=]+?)=[\\s\\S]*$/;\n      const normalFlag = /^-+([^=]+?)$/;\n      const flagEndingInHyphen = /^-+([^=]+?)-$/;\n      const flagEndingInDigits = /^-+([^=]+?\\d+)$/;\n      const flagEndingInNonWordCharacters = /^-+([^=]+?)\\W+.*$/;\n      return !hasFlagsMatching(arg, flagWithEquals, negatedBoolean, normalFlag, flagEndingInHyphen, flagEndingInDigits, flagEndingInNonWordCharacters);\n    }\n    function defaultValue(key) {\n      if (!checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts) && `${key}` in defaults) {\n        return defaults[key];\n      } else {\n        return defaultForType(guessType(key));\n      }\n    }\n    function defaultForType(type) {\n      const def = {\n        [DefaultValuesForTypeKey.BOOLEAN]: true,\n        [DefaultValuesForTypeKey.STRING]: '',\n        [DefaultValuesForTypeKey.NUMBER]: undefined,\n        [DefaultValuesForTypeKey.ARRAY]: []\n      };\n      return def[type];\n    }\n    function guessType(key) {\n      let type = DefaultValuesForTypeKey.BOOLEAN;\n      if (checkAllAliases(key, flags.strings)) type = DefaultValuesForTypeKey.STRING;else if (checkAllAliases(key, flags.numbers)) type = DefaultValuesForTypeKey.NUMBER;else if (checkAllAliases(key, flags.bools)) type = DefaultValuesForTypeKey.BOOLEAN;else if (checkAllAliases(key, flags.arrays)) type = DefaultValuesForTypeKey.ARRAY;\n      return type;\n    }\n    function isUndefined(num) {\n      return num === undefined;\n    }\n    function checkConfiguration() {\n      Object.keys(flags.counts).find(key => {\n        if (checkAllAliases(key, flags.arrays)) {\n          error = Error(__('Invalid configuration: %s, opts.count excludes opts.array.', key));\n          return true;\n        } else if (checkAllAliases(key, flags.nargs)) {\n          error = Error(__('Invalid configuration: %s, opts.count excludes opts.narg.', key));\n          return true;\n        }\n        return false;\n      });\n    }\n    return {\n      aliases: Object.assign({}, flags.aliases),\n      argv: Object.assign(argvReturn, argv),\n      configuration: configuration,\n      defaulted: Object.assign({}, defaulted),\n      error: error,\n      newAliases: Object.assign({}, newAliases)\n    };\n  }\n}\nfunction combineAliases(aliases) {\n  const aliasArrays = [];\n  const combined = Object.create(null);\n  let change = true;\n  Object.keys(aliases).forEach(function (key) {\n    aliasArrays.push([].concat(aliases[key], key));\n  });\n  while (change) {\n    change = false;\n    for (let i = 0; i < aliasArrays.length; i++) {\n      for (let ii = i + 1; ii < aliasArrays.length; ii++) {\n        const intersect = aliasArrays[i].filter(function (v) {\n          return aliasArrays[ii].indexOf(v) !== -1;\n        });\n        if (intersect.length) {\n          aliasArrays[i] = aliasArrays[i].concat(aliasArrays[ii]);\n          aliasArrays.splice(ii, 1);\n          change = true;\n          break;\n        }\n      }\n    }\n  }\n  aliasArrays.forEach(function (aliasArray) {\n    aliasArray = aliasArray.filter(function (v, i, self) {\n      return self.indexOf(v) === i;\n    });\n    const lastAlias = aliasArray.pop();\n    if (lastAlias !== undefined && typeof lastAlias === 'string') {\n      combined[lastAlias] = aliasArray;\n    }\n  });\n  return combined;\n}\nfunction increment(orig) {\n  return orig !== undefined ? orig + 1 : 1;\n}\nfunction sanitizeKey(key) {\n  if (key === '__proto__') return '___proto___';\n  return key;\n}\nconst minNodeVersion = process && process.env && process.env.YARGS_MIN_NODE_VERSION ? Number(process.env.YARGS_MIN_NODE_VERSION) : 10;\nif (process && process.version) {\n  const major = Number(process.version.match(/v([^.]+)/)[1]);\n  if (major < minNodeVersion) {\n    throw Error(`yargs parser supports a minimum Node.js version of ${minNodeVersion}. Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions`);\n  }\n}\nconst env = process ? process.env : {};\nconst parser = new YargsParser({\n  cwd: process.cwd,\n  env: () => {\n    return env;\n  },\n  format: util.format,\n  normalize: path.normalize,\n  resolve: path.resolve,\n  require: path => {\n    if (typeof require !== 'undefined') {\n      return require(path);\n    } else if (path.match(/\\.json$/)) {\n      return fs.readFileSync(path, 'utf8');\n    } else {\n      throw Error('only .json config files are supported in ESM');\n    }\n  }\n});\nconst yargsParser = function Parser(args, opts) {\n  const result = parser.parse(args.slice(), opts);\n  return result.argv;\n};\nyargsParser.detailed = function (args, opts) {\n  return parser.parse(args.slice(), opts);\n};\nyargsParser.camelCase = camelCase;\nyargsParser.decamelize = decamelize;\nyargsParser.looksLikeNumber = looksLikeNumber;\nmodule.exports = yargsParser;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["util","require","fs","path","camelCase","str","isCamelCase","toLowerCase","toUpperCase","indexOf","camelcase","nextChrUpper","leadingHyphens","match","i","length","chr","charAt","decamelize","joinString","lowercase","notCamelcase","chrLower","chrString","looksLikeNumber","x","undefined","test","tokenizeArgString","argString","Array","isArray","map","e","trim","prevC","c","opening","args","ii","DefaultValuesForTypeKey","mixin","YargsParser","constructor","_mixin","parse","argsInput","options","opts","Object","assign","alias","array","boolean","config","configObjects","configuration","coerce","count","default","envPrefix","narg","normalize","string","number","__","key","aliases","combineAliases","create","defaults","notFlagsOption","notFlagsArgv","newAliases","defaulted","format","flags","arrays","bools","strings","numbers","counts","configs","nargs","coercions","keys","negative","negatedBoolean","RegExp","concat","filter","Boolean","forEach","opt","assignment","arrayFlagKeys","pop","push","entries","value","extendAliases","error","checkConfiguration","notFlags","argv","_","argvReturn","arg","truncatedArg","replace","broken","letters","m","next","isUnknownOptionAsArg","pushPositional","checkAllAliases","eatArray","eatNargs","setArg","defaultValue","slice","split","j","applyEnvVars","setConfig","setConfigObjects","applyDefaultsAndAliases","applyCoercions","setPlaceholderKeys","hasKey","includes","k","prop","join","maybeCoercedNumber","maybeCoerceNumber","argAfterEqualSign","toEat","isNaN","isUndefined","Error","available","consumed","Math","min","argsToSet","nargsCount","defVal","processValue","val","addNewAlias","splitKey","setKey","keyProperties","a","shift","defineProperty","enumerable","get","set","substring","v","increment","shouldCoerceNumber","Number","isSafeInteger","floor","parseFloat","configLookup","configKey","configPath","resolvedConfigPath","resolve","cwd","resolveConfig","setConfigObject","ex","name","prev","fullKey","configObject","configOnly","prefix","env","envVar","lastIndexOf","applied","Set","has","ali","add","err","obj","canLog","o","sanitizeKey","isTypeArray","isValueArray","duplicate","y","flag","toCheck","setAlias","find","hasAnyFlag","flagsKeys","some","hasFlagsMatching","patterns","pattern","hasAllShortFlags","hasAllFlags","isUnknownOption","flagWithEquals","normalFlag","flagEndingInHyphen","flagEndingInDigits","flagEndingInNonWordCharacters","defaultForType","guessType","type","def","BOOLEAN","STRING","NUMBER","ARRAY","num","aliasArrays","combined","change","intersect","splice","aliasArray","self","lastAlias","orig","minNodeVersion","process","YARGS_MIN_NODE_VERSION","version","major","parser","readFileSync","yargsParser","Parser","result","detailed","module","exports"],"sourceRoot":"C:\\code\\FluidFramework5\\node_modules\\.pnpm\\yargs-parser@20.2.9\\node_modules\\yargs-parser\\build\\","sources":["index.cjs"],"sourcesContent":["'use strict';\n\nvar util = require('util');\nvar fs = require('fs');\nvar path = require('path');\n\nfunction camelCase(str) {\n    const isCamelCase = str !== str.toLowerCase() && str !== str.toUpperCase();\n    if (!isCamelCase) {\n        str = str.toLowerCase();\n    }\n    if (str.indexOf('-') === -1 && str.indexOf('_') === -1) {\n        return str;\n    }\n    else {\n        let camelcase = '';\n        let nextChrUpper = false;\n        const leadingHyphens = str.match(/^-+/);\n        for (let i = leadingHyphens ? leadingHyphens[0].length : 0; i < str.length; i++) {\n            let chr = str.charAt(i);\n            if (nextChrUpper) {\n                nextChrUpper = false;\n                chr = chr.toUpperCase();\n            }\n            if (i !== 0 && (chr === '-' || chr === '_')) {\n                nextChrUpper = true;\n            }\n            else if (chr !== '-' && chr !== '_') {\n                camelcase += chr;\n            }\n        }\n        return camelcase;\n    }\n}\nfunction decamelize(str, joinString) {\n    const lowercase = str.toLowerCase();\n    joinString = joinString || '-';\n    let notCamelcase = '';\n    for (let i = 0; i < str.length; i++) {\n        const chrLower = lowercase.charAt(i);\n        const chrString = str.charAt(i);\n        if (chrLower !== chrString && i > 0) {\n            notCamelcase += `${joinString}${lowercase.charAt(i)}`;\n        }\n        else {\n            notCamelcase += chrString;\n        }\n    }\n    return notCamelcase;\n}\nfunction looksLikeNumber(x) {\n    if (x === null || x === undefined)\n        return false;\n    if (typeof x === 'number')\n        return true;\n    if (/^0x[0-9a-f]+$/i.test(x))\n        return true;\n    if (/^0[^.]/.test(x))\n        return false;\n    return /^[-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(e[-+]?\\d+)?$/.test(x);\n}\n\nfunction tokenizeArgString(argString) {\n    if (Array.isArray(argString)) {\n        return argString.map(e => typeof e !== 'string' ? e + '' : e);\n    }\n    argString = argString.trim();\n    let i = 0;\n    let prevC = null;\n    let c = null;\n    let opening = null;\n    const args = [];\n    for (let ii = 0; ii < argString.length; ii++) {\n        prevC = c;\n        c = argString.charAt(ii);\n        if (c === ' ' && !opening) {\n            if (!(prevC === ' ')) {\n                i++;\n            }\n            continue;\n        }\n        if (c === opening) {\n            opening = null;\n        }\n        else if ((c === \"'\" || c === '\"') && !opening) {\n            opening = c;\n        }\n        if (!args[i])\n            args[i] = '';\n        args[i] += c;\n    }\n    return args;\n}\n\nvar DefaultValuesForTypeKey;\n(function (DefaultValuesForTypeKey) {\n    DefaultValuesForTypeKey[\"BOOLEAN\"] = \"boolean\";\n    DefaultValuesForTypeKey[\"STRING\"] = \"string\";\n    DefaultValuesForTypeKey[\"NUMBER\"] = \"number\";\n    DefaultValuesForTypeKey[\"ARRAY\"] = \"array\";\n})(DefaultValuesForTypeKey || (DefaultValuesForTypeKey = {}));\n\nlet mixin;\nclass YargsParser {\n    constructor(_mixin) {\n        mixin = _mixin;\n    }\n    parse(argsInput, options) {\n        const opts = Object.assign({\n            alias: undefined,\n            array: undefined,\n            boolean: undefined,\n            config: undefined,\n            configObjects: undefined,\n            configuration: undefined,\n            coerce: undefined,\n            count: undefined,\n            default: undefined,\n            envPrefix: undefined,\n            narg: undefined,\n            normalize: undefined,\n            string: undefined,\n            number: undefined,\n            __: undefined,\n            key: undefined\n        }, options);\n        const args = tokenizeArgString(argsInput);\n        const aliases = combineAliases(Object.assign(Object.create(null), opts.alias));\n        const configuration = Object.assign({\n            'boolean-negation': true,\n            'camel-case-expansion': true,\n            'combine-arrays': false,\n            'dot-notation': true,\n            'duplicate-arguments-array': true,\n            'flatten-duplicate-arrays': true,\n            'greedy-arrays': true,\n            'halt-at-non-option': false,\n            'nargs-eats-options': false,\n            'negation-prefix': 'no-',\n            'parse-numbers': true,\n            'parse-positional-numbers': true,\n            'populate--': false,\n            'set-placeholder-key': false,\n            'short-option-groups': true,\n            'strip-aliased': false,\n            'strip-dashed': false,\n            'unknown-options-as-args': false\n        }, opts.configuration);\n        const defaults = Object.assign(Object.create(null), opts.default);\n        const configObjects = opts.configObjects || [];\n        const envPrefix = opts.envPrefix;\n        const notFlagsOption = configuration['populate--'];\n        const notFlagsArgv = notFlagsOption ? '--' : '_';\n        const newAliases = Object.create(null);\n        const defaulted = Object.create(null);\n        const __ = opts.__ || mixin.format;\n        const flags = {\n            aliases: Object.create(null),\n            arrays: Object.create(null),\n            bools: Object.create(null),\n            strings: Object.create(null),\n            numbers: Object.create(null),\n            counts: Object.create(null),\n            normalize: Object.create(null),\n            configs: Object.create(null),\n            nargs: Object.create(null),\n            coercions: Object.create(null),\n            keys: []\n        };\n        const negative = /^-([0-9]+(\\.[0-9]+)?|\\.[0-9]+)$/;\n        const negatedBoolean = new RegExp('^--' + configuration['negation-prefix'] + '(.+)');\n        [].concat(opts.array || []).filter(Boolean).forEach(function (opt) {\n            const key = typeof opt === 'object' ? opt.key : opt;\n            const assignment = Object.keys(opt).map(function (key) {\n                const arrayFlagKeys = {\n                    boolean: 'bools',\n                    string: 'strings',\n                    number: 'numbers'\n                };\n                return arrayFlagKeys[key];\n            }).filter(Boolean).pop();\n            if (assignment) {\n                flags[assignment][key] = true;\n            }\n            flags.arrays[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.boolean || []).filter(Boolean).forEach(function (key) {\n            flags.bools[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.string || []).filter(Boolean).forEach(function (key) {\n            flags.strings[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.number || []).filter(Boolean).forEach(function (key) {\n            flags.numbers[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.count || []).filter(Boolean).forEach(function (key) {\n            flags.counts[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.normalize || []).filter(Boolean).forEach(function (key) {\n            flags.normalize[key] = true;\n            flags.keys.push(key);\n        });\n        if (typeof opts.narg === 'object') {\n            Object.entries(opts.narg).forEach(([key, value]) => {\n                if (typeof value === 'number') {\n                    flags.nargs[key] = value;\n                    flags.keys.push(key);\n                }\n            });\n        }\n        if (typeof opts.coerce === 'object') {\n            Object.entries(opts.coerce).forEach(([key, value]) => {\n                if (typeof value === 'function') {\n                    flags.coercions[key] = value;\n                    flags.keys.push(key);\n                }\n            });\n        }\n        if (typeof opts.config !== 'undefined') {\n            if (Array.isArray(opts.config) || typeof opts.config === 'string') {\n                [].concat(opts.config).filter(Boolean).forEach(function (key) {\n                    flags.configs[key] = true;\n                });\n            }\n            else if (typeof opts.config === 'object') {\n                Object.entries(opts.config).forEach(([key, value]) => {\n                    if (typeof value === 'boolean' || typeof value === 'function') {\n                        flags.configs[key] = value;\n                    }\n                });\n            }\n        }\n        extendAliases(opts.key, aliases, opts.default, flags.arrays);\n        Object.keys(defaults).forEach(function (key) {\n            (flags.aliases[key] || []).forEach(function (alias) {\n                defaults[alias] = defaults[key];\n            });\n        });\n        let error = null;\n        checkConfiguration();\n        let notFlags = [];\n        const argv = Object.assign(Object.create(null), { _: [] });\n        const argvReturn = {};\n        for (let i = 0; i < args.length; i++) {\n            const arg = args[i];\n            const truncatedArg = arg.replace(/^-{3,}/, '---');\n            let broken;\n            let key;\n            let letters;\n            let m;\n            let next;\n            let value;\n            if (arg !== '--' && isUnknownOptionAsArg(arg)) {\n                pushPositional(arg);\n            }\n            else if (truncatedArg.match(/---+(=|$)/)) {\n                pushPositional(arg);\n                continue;\n            }\n            else if (arg.match(/^--.+=/) || (!configuration['short-option-groups'] && arg.match(/^-.+=/))) {\n                m = arg.match(/^--?([^=]+)=([\\s\\S]*)$/);\n                if (m !== null && Array.isArray(m) && m.length >= 3) {\n                    if (checkAllAliases(m[1], flags.arrays)) {\n                        i = eatArray(i, m[1], args, m[2]);\n                    }\n                    else if (checkAllAliases(m[1], flags.nargs) !== false) {\n                        i = eatNargs(i, m[1], args, m[2]);\n                    }\n                    else {\n                        setArg(m[1], m[2]);\n                    }\n                }\n            }\n            else if (arg.match(negatedBoolean) && configuration['boolean-negation']) {\n                m = arg.match(negatedBoolean);\n                if (m !== null && Array.isArray(m) && m.length >= 2) {\n                    key = m[1];\n                    setArg(key, checkAllAliases(key, flags.arrays) ? [false] : false);\n                }\n            }\n            else if (arg.match(/^--.+/) || (!configuration['short-option-groups'] && arg.match(/^-[^-]+/))) {\n                m = arg.match(/^--?(.+)/);\n                if (m !== null && Array.isArray(m) && m.length >= 2) {\n                    key = m[1];\n                    if (checkAllAliases(key, flags.arrays)) {\n                        i = eatArray(i, key, args);\n                    }\n                    else if (checkAllAliases(key, flags.nargs) !== false) {\n                        i = eatNargs(i, key, args);\n                    }\n                    else {\n                        next = args[i + 1];\n                        if (next !== undefined && (!next.match(/^-/) ||\n                            next.match(negative)) &&\n                            !checkAllAliases(key, flags.bools) &&\n                            !checkAllAliases(key, flags.counts)) {\n                            setArg(key, next);\n                            i++;\n                        }\n                        else if (/^(true|false)$/.test(next)) {\n                            setArg(key, next);\n                            i++;\n                        }\n                        else {\n                            setArg(key, defaultValue(key));\n                        }\n                    }\n                }\n            }\n            else if (arg.match(/^-.\\..+=/)) {\n                m = arg.match(/^-([^=]+)=([\\s\\S]*)$/);\n                if (m !== null && Array.isArray(m) && m.length >= 3) {\n                    setArg(m[1], m[2]);\n                }\n            }\n            else if (arg.match(/^-.\\..+/) && !arg.match(negative)) {\n                next = args[i + 1];\n                m = arg.match(/^-(.\\..+)/);\n                if (m !== null && Array.isArray(m) && m.length >= 2) {\n                    key = m[1];\n                    if (next !== undefined && !next.match(/^-/) &&\n                        !checkAllAliases(key, flags.bools) &&\n                        !checkAllAliases(key, flags.counts)) {\n                        setArg(key, next);\n                        i++;\n                    }\n                    else {\n                        setArg(key, defaultValue(key));\n                    }\n                }\n            }\n            else if (arg.match(/^-[^-]+/) && !arg.match(negative)) {\n                letters = arg.slice(1, -1).split('');\n                broken = false;\n                for (let j = 0; j < letters.length; j++) {\n                    next = arg.slice(j + 2);\n                    if (letters[j + 1] && letters[j + 1] === '=') {\n                        value = arg.slice(j + 3);\n                        key = letters[j];\n                        if (checkAllAliases(key, flags.arrays)) {\n                            i = eatArray(i, key, args, value);\n                        }\n                        else if (checkAllAliases(key, flags.nargs) !== false) {\n                            i = eatNargs(i, key, args, value);\n                        }\n                        else {\n                            setArg(key, value);\n                        }\n                        broken = true;\n                        break;\n                    }\n                    if (next === '-') {\n                        setArg(letters[j], next);\n                        continue;\n                    }\n                    if (/[A-Za-z]/.test(letters[j]) &&\n                        /^-?\\d+(\\.\\d*)?(e-?\\d+)?$/.test(next) &&\n                        checkAllAliases(next, flags.bools) === false) {\n                        setArg(letters[j], next);\n                        broken = true;\n                        break;\n                    }\n                    if (letters[j + 1] && letters[j + 1].match(/\\W/)) {\n                        setArg(letters[j], next);\n                        broken = true;\n                        break;\n                    }\n                    else {\n                        setArg(letters[j], defaultValue(letters[j]));\n                    }\n                }\n                key = arg.slice(-1)[0];\n                if (!broken && key !== '-') {\n                    if (checkAllAliases(key, flags.arrays)) {\n                        i = eatArray(i, key, args);\n                    }\n                    else if (checkAllAliases(key, flags.nargs) !== false) {\n                        i = eatNargs(i, key, args);\n                    }\n                    else {\n                        next = args[i + 1];\n                        if (next !== undefined && (!/^(-|--)[^-]/.test(next) ||\n                            next.match(negative)) &&\n                            !checkAllAliases(key, flags.bools) &&\n                            !checkAllAliases(key, flags.counts)) {\n                            setArg(key, next);\n                            i++;\n                        }\n                        else if (/^(true|false)$/.test(next)) {\n                            setArg(key, next);\n                            i++;\n                        }\n                        else {\n                            setArg(key, defaultValue(key));\n                        }\n                    }\n                }\n            }\n            else if (arg.match(/^-[0-9]$/) &&\n                arg.match(negative) &&\n                checkAllAliases(arg.slice(1), flags.bools)) {\n                key = arg.slice(1);\n                setArg(key, defaultValue(key));\n            }\n            else if (arg === '--') {\n                notFlags = args.slice(i + 1);\n                break;\n            }\n            else if (configuration['halt-at-non-option']) {\n                notFlags = args.slice(i);\n                break;\n            }\n            else {\n                pushPositional(arg);\n            }\n        }\n        applyEnvVars(argv, true);\n        applyEnvVars(argv, false);\n        setConfig(argv);\n        setConfigObjects();\n        applyDefaultsAndAliases(argv, flags.aliases, defaults, true);\n        applyCoercions(argv);\n        if (configuration['set-placeholder-key'])\n            setPlaceholderKeys(argv);\n        Object.keys(flags.counts).forEach(function (key) {\n            if (!hasKey(argv, key.split('.')))\n                setArg(key, 0);\n        });\n        if (notFlagsOption && notFlags.length)\n            argv[notFlagsArgv] = [];\n        notFlags.forEach(function (key) {\n            argv[notFlagsArgv].push(key);\n        });\n        if (configuration['camel-case-expansion'] && configuration['strip-dashed']) {\n            Object.keys(argv).filter(key => key !== '--' && key.includes('-')).forEach(key => {\n                delete argv[key];\n            });\n        }\n        if (configuration['strip-aliased']) {\n            [].concat(...Object.keys(aliases).map(k => aliases[k])).forEach(alias => {\n                if (configuration['camel-case-expansion'] && alias.includes('-')) {\n                    delete argv[alias.split('.').map(prop => camelCase(prop)).join('.')];\n                }\n                delete argv[alias];\n            });\n        }\n        function pushPositional(arg) {\n            const maybeCoercedNumber = maybeCoerceNumber('_', arg);\n            if (typeof maybeCoercedNumber === 'string' || typeof maybeCoercedNumber === 'number') {\n                argv._.push(maybeCoercedNumber);\n            }\n        }\n        function eatNargs(i, key, args, argAfterEqualSign) {\n            let ii;\n            let toEat = checkAllAliases(key, flags.nargs);\n            toEat = typeof toEat !== 'number' || isNaN(toEat) ? 1 : toEat;\n            if (toEat === 0) {\n                if (!isUndefined(argAfterEqualSign)) {\n                    error = Error(__('Argument unexpected for: %s', key));\n                }\n                setArg(key, defaultValue(key));\n                return i;\n            }\n            let available = isUndefined(argAfterEqualSign) ? 0 : 1;\n            if (configuration['nargs-eats-options']) {\n                if (args.length - (i + 1) + available < toEat) {\n                    error = Error(__('Not enough arguments following: %s', key));\n                }\n                available = toEat;\n            }\n            else {\n                for (ii = i + 1; ii < args.length; ii++) {\n                    if (!args[ii].match(/^-[^0-9]/) || args[ii].match(negative) || isUnknownOptionAsArg(args[ii]))\n                        available++;\n                    else\n                        break;\n                }\n                if (available < toEat)\n                    error = Error(__('Not enough arguments following: %s', key));\n            }\n            let consumed = Math.min(available, toEat);\n            if (!isUndefined(argAfterEqualSign) && consumed > 0) {\n                setArg(key, argAfterEqualSign);\n                consumed--;\n            }\n            for (ii = i + 1; ii < (consumed + i + 1); ii++) {\n                setArg(key, args[ii]);\n            }\n            return (i + consumed);\n        }\n        function eatArray(i, key, args, argAfterEqualSign) {\n            let argsToSet = [];\n            let next = argAfterEqualSign || args[i + 1];\n            const nargsCount = checkAllAliases(key, flags.nargs);\n            if (checkAllAliases(key, flags.bools) && !(/^(true|false)$/.test(next))) {\n                argsToSet.push(true);\n            }\n            else if (isUndefined(next) ||\n                (isUndefined(argAfterEqualSign) && /^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next))) {\n                if (defaults[key] !== undefined) {\n                    const defVal = defaults[key];\n                    argsToSet = Array.isArray(defVal) ? defVal : [defVal];\n                }\n            }\n            else {\n                if (!isUndefined(argAfterEqualSign)) {\n                    argsToSet.push(processValue(key, argAfterEqualSign));\n                }\n                for (let ii = i + 1; ii < args.length; ii++) {\n                    if ((!configuration['greedy-arrays'] && argsToSet.length > 0) ||\n                        (nargsCount && typeof nargsCount === 'number' && argsToSet.length >= nargsCount))\n                        break;\n                    next = args[ii];\n                    if (/^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next))\n                        break;\n                    i = ii;\n                    argsToSet.push(processValue(key, next));\n                }\n            }\n            if (typeof nargsCount === 'number' && ((nargsCount && argsToSet.length < nargsCount) ||\n                (isNaN(nargsCount) && argsToSet.length === 0))) {\n                error = Error(__('Not enough arguments following: %s', key));\n            }\n            setArg(key, argsToSet);\n            return i;\n        }\n        function setArg(key, val) {\n            if (/-/.test(key) && configuration['camel-case-expansion']) {\n                const alias = key.split('.').map(function (prop) {\n                    return camelCase(prop);\n                }).join('.');\n                addNewAlias(key, alias);\n            }\n            const value = processValue(key, val);\n            const splitKey = key.split('.');\n            setKey(argv, splitKey, value);\n            if (flags.aliases[key]) {\n                flags.aliases[key].forEach(function (x) {\n                    const keyProperties = x.split('.');\n                    setKey(argv, keyProperties, value);\n                });\n            }\n            if (splitKey.length > 1 && configuration['dot-notation']) {\n                (flags.aliases[splitKey[0]] || []).forEach(function (x) {\n                    let keyProperties = x.split('.');\n                    const a = [].concat(splitKey);\n                    a.shift();\n                    keyProperties = keyProperties.concat(a);\n                    if (!(flags.aliases[key] || []).includes(keyProperties.join('.'))) {\n                        setKey(argv, keyProperties, value);\n                    }\n                });\n            }\n            if (checkAllAliases(key, flags.normalize) && !checkAllAliases(key, flags.arrays)) {\n                const keys = [key].concat(flags.aliases[key] || []);\n                keys.forEach(function (key) {\n                    Object.defineProperty(argvReturn, key, {\n                        enumerable: true,\n                        get() {\n                            return val;\n                        },\n                        set(value) {\n                            val = typeof value === 'string' ? mixin.normalize(value) : value;\n                        }\n                    });\n                });\n            }\n        }\n        function addNewAlias(key, alias) {\n            if (!(flags.aliases[key] && flags.aliases[key].length)) {\n                flags.aliases[key] = [alias];\n                newAliases[alias] = true;\n            }\n            if (!(flags.aliases[alias] && flags.aliases[alias].length)) {\n                addNewAlias(alias, key);\n            }\n        }\n        function processValue(key, val) {\n            if (typeof val === 'string' &&\n                (val[0] === \"'\" || val[0] === '\"') &&\n                val[val.length - 1] === val[0]) {\n                val = val.substring(1, val.length - 1);\n            }\n            if (checkAllAliases(key, flags.bools) || checkAllAliases(key, flags.counts)) {\n                if (typeof val === 'string')\n                    val = val === 'true';\n            }\n            let value = Array.isArray(val)\n                ? val.map(function (v) { return maybeCoerceNumber(key, v); })\n                : maybeCoerceNumber(key, val);\n            if (checkAllAliases(key, flags.counts) && (isUndefined(value) || typeof value === 'boolean')) {\n                value = increment();\n            }\n            if (checkAllAliases(key, flags.normalize) && checkAllAliases(key, flags.arrays)) {\n                if (Array.isArray(val))\n                    value = val.map((val) => { return mixin.normalize(val); });\n                else\n                    value = mixin.normalize(val);\n            }\n            return value;\n        }\n        function maybeCoerceNumber(key, value) {\n            if (!configuration['parse-positional-numbers'] && key === '_')\n                return value;\n            if (!checkAllAliases(key, flags.strings) && !checkAllAliases(key, flags.bools) && !Array.isArray(value)) {\n                const shouldCoerceNumber = looksLikeNumber(value) && configuration['parse-numbers'] && (Number.isSafeInteger(Math.floor(parseFloat(`${value}`))));\n                if (shouldCoerceNumber || (!isUndefined(value) && checkAllAliases(key, flags.numbers))) {\n                    value = Number(value);\n                }\n            }\n            return value;\n        }\n        function setConfig(argv) {\n            const configLookup = Object.create(null);\n            applyDefaultsAndAliases(configLookup, flags.aliases, defaults);\n            Object.keys(flags.configs).forEach(function (configKey) {\n                const configPath = argv[configKey] || configLookup[configKey];\n                if (configPath) {\n                    try {\n                        let config = null;\n                        const resolvedConfigPath = mixin.resolve(mixin.cwd(), configPath);\n                        const resolveConfig = flags.configs[configKey];\n                        if (typeof resolveConfig === 'function') {\n                            try {\n                                config = resolveConfig(resolvedConfigPath);\n                            }\n                            catch (e) {\n                                config = e;\n                            }\n                            if (config instanceof Error) {\n                                error = config;\n                                return;\n                            }\n                        }\n                        else {\n                            config = mixin.require(resolvedConfigPath);\n                        }\n                        setConfigObject(config);\n                    }\n                    catch (ex) {\n                        if (ex.name === 'PermissionDenied')\n                            error = ex;\n                        else if (argv[configKey])\n                            error = Error(__('Invalid JSON config file: %s', configPath));\n                    }\n                }\n            });\n        }\n        function setConfigObject(config, prev) {\n            Object.keys(config).forEach(function (key) {\n                const value = config[key];\n                const fullKey = prev ? prev + '.' + key : key;\n                if (typeof value === 'object' && value !== null && !Array.isArray(value) && configuration['dot-notation']) {\n                    setConfigObject(value, fullKey);\n                }\n                else {\n                    if (!hasKey(argv, fullKey.split('.')) || (checkAllAliases(fullKey, flags.arrays) && configuration['combine-arrays'])) {\n                        setArg(fullKey, value);\n                    }\n                }\n            });\n        }\n        function setConfigObjects() {\n            if (typeof configObjects !== 'undefined') {\n                configObjects.forEach(function (configObject) {\n                    setConfigObject(configObject);\n                });\n            }\n        }\n        function applyEnvVars(argv, configOnly) {\n            if (typeof envPrefix === 'undefined')\n                return;\n            const prefix = typeof envPrefix === 'string' ? envPrefix : '';\n            const env = mixin.env();\n            Object.keys(env).forEach(function (envVar) {\n                if (prefix === '' || envVar.lastIndexOf(prefix, 0) === 0) {\n                    const keys = envVar.split('__').map(function (key, i) {\n                        if (i === 0) {\n                            key = key.substring(prefix.length);\n                        }\n                        return camelCase(key);\n                    });\n                    if (((configOnly && flags.configs[keys.join('.')]) || !configOnly) && !hasKey(argv, keys)) {\n                        setArg(keys.join('.'), env[envVar]);\n                    }\n                }\n            });\n        }\n        function applyCoercions(argv) {\n            let coerce;\n            const applied = new Set();\n            Object.keys(argv).forEach(function (key) {\n                if (!applied.has(key)) {\n                    coerce = checkAllAliases(key, flags.coercions);\n                    if (typeof coerce === 'function') {\n                        try {\n                            const value = maybeCoerceNumber(key, coerce(argv[key]));\n                            ([].concat(flags.aliases[key] || [], key)).forEach(ali => {\n                                applied.add(ali);\n                                argv[ali] = value;\n                            });\n                        }\n                        catch (err) {\n                            error = err;\n                        }\n                    }\n                }\n            });\n        }\n        function setPlaceholderKeys(argv) {\n            flags.keys.forEach((key) => {\n                if (~key.indexOf('.'))\n                    return;\n                if (typeof argv[key] === 'undefined')\n                    argv[key] = undefined;\n            });\n            return argv;\n        }\n        function applyDefaultsAndAliases(obj, aliases, defaults, canLog = false) {\n            Object.keys(defaults).forEach(function (key) {\n                if (!hasKey(obj, key.split('.'))) {\n                    setKey(obj, key.split('.'), defaults[key]);\n                    if (canLog)\n                        defaulted[key] = true;\n                    (aliases[key] || []).forEach(function (x) {\n                        if (hasKey(obj, x.split('.')))\n                            return;\n                        setKey(obj, x.split('.'), defaults[key]);\n                    });\n                }\n            });\n        }\n        function hasKey(obj, keys) {\n            let o = obj;\n            if (!configuration['dot-notation'])\n                keys = [keys.join('.')];\n            keys.slice(0, -1).forEach(function (key) {\n                o = (o[key] || {});\n            });\n            const key = keys[keys.length - 1];\n            if (typeof o !== 'object')\n                return false;\n            else\n                return key in o;\n        }\n        function setKey(obj, keys, value) {\n            let o = obj;\n            if (!configuration['dot-notation'])\n                keys = [keys.join('.')];\n            keys.slice(0, -1).forEach(function (key) {\n                key = sanitizeKey(key);\n                if (typeof o === 'object' && o[key] === undefined) {\n                    o[key] = {};\n                }\n                if (typeof o[key] !== 'object' || Array.isArray(o[key])) {\n                    if (Array.isArray(o[key])) {\n                        o[key].push({});\n                    }\n                    else {\n                        o[key] = [o[key], {}];\n                    }\n                    o = o[key][o[key].length - 1];\n                }\n                else {\n                    o = o[key];\n                }\n            });\n            const key = sanitizeKey(keys[keys.length - 1]);\n            const isTypeArray = checkAllAliases(keys.join('.'), flags.arrays);\n            const isValueArray = Array.isArray(value);\n            let duplicate = configuration['duplicate-arguments-array'];\n            if (!duplicate && checkAllAliases(key, flags.nargs)) {\n                duplicate = true;\n                if ((!isUndefined(o[key]) && flags.nargs[key] === 1) || (Array.isArray(o[key]) && o[key].length === flags.nargs[key])) {\n                    o[key] = undefined;\n                }\n            }\n            if (value === increment()) {\n                o[key] = increment(o[key]);\n            }\n            else if (Array.isArray(o[key])) {\n                if (duplicate && isTypeArray && isValueArray) {\n                    o[key] = configuration['flatten-duplicate-arrays'] ? o[key].concat(value) : (Array.isArray(o[key][0]) ? o[key] : [o[key]]).concat([value]);\n                }\n                else if (!duplicate && Boolean(isTypeArray) === Boolean(isValueArray)) {\n                    o[key] = value;\n                }\n                else {\n                    o[key] = o[key].concat([value]);\n                }\n            }\n            else if (o[key] === undefined && isTypeArray) {\n                o[key] = isValueArray ? value : [value];\n            }\n            else if (duplicate && !(o[key] === undefined ||\n                checkAllAliases(key, flags.counts) ||\n                checkAllAliases(key, flags.bools))) {\n                o[key] = [o[key], value];\n            }\n            else {\n                o[key] = value;\n            }\n        }\n        function extendAliases(...args) {\n            args.forEach(function (obj) {\n                Object.keys(obj || {}).forEach(function (key) {\n                    if (flags.aliases[key])\n                        return;\n                    flags.aliases[key] = [].concat(aliases[key] || []);\n                    flags.aliases[key].concat(key).forEach(function (x) {\n                        if (/-/.test(x) && configuration['camel-case-expansion']) {\n                            const c = camelCase(x);\n                            if (c !== key && flags.aliases[key].indexOf(c) === -1) {\n                                flags.aliases[key].push(c);\n                                newAliases[c] = true;\n                            }\n                        }\n                    });\n                    flags.aliases[key].concat(key).forEach(function (x) {\n                        if (x.length > 1 && /[A-Z]/.test(x) && configuration['camel-case-expansion']) {\n                            const c = decamelize(x, '-');\n                            if (c !== key && flags.aliases[key].indexOf(c) === -1) {\n                                flags.aliases[key].push(c);\n                                newAliases[c] = true;\n                            }\n                        }\n                    });\n                    flags.aliases[key].forEach(function (x) {\n                        flags.aliases[x] = [key].concat(flags.aliases[key].filter(function (y) {\n                            return x !== y;\n                        }));\n                    });\n                });\n            });\n        }\n        function checkAllAliases(key, flag) {\n            const toCheck = [].concat(flags.aliases[key] || [], key);\n            const keys = Object.keys(flag);\n            const setAlias = toCheck.find(key => keys.includes(key));\n            return setAlias ? flag[setAlias] : false;\n        }\n        function hasAnyFlag(key) {\n            const flagsKeys = Object.keys(flags);\n            const toCheck = [].concat(flagsKeys.map(k => flags[k]));\n            return toCheck.some(function (flag) {\n                return Array.isArray(flag) ? flag.includes(key) : flag[key];\n            });\n        }\n        function hasFlagsMatching(arg, ...patterns) {\n            const toCheck = [].concat(...patterns);\n            return toCheck.some(function (pattern) {\n                const match = arg.match(pattern);\n                return match && hasAnyFlag(match[1]);\n            });\n        }\n        function hasAllShortFlags(arg) {\n            if (arg.match(negative) || !arg.match(/^-[^-]+/)) {\n                return false;\n            }\n            let hasAllFlags = true;\n            let next;\n            const letters = arg.slice(1).split('');\n            for (let j = 0; j < letters.length; j++) {\n                next = arg.slice(j + 2);\n                if (!hasAnyFlag(letters[j])) {\n                    hasAllFlags = false;\n                    break;\n                }\n                if ((letters[j + 1] && letters[j + 1] === '=') ||\n                    next === '-' ||\n                    (/[A-Za-z]/.test(letters[j]) && /^-?\\d+(\\.\\d*)?(e-?\\d+)?$/.test(next)) ||\n                    (letters[j + 1] && letters[j + 1].match(/\\W/))) {\n                    break;\n                }\n            }\n            return hasAllFlags;\n        }\n        function isUnknownOptionAsArg(arg) {\n            return configuration['unknown-options-as-args'] && isUnknownOption(arg);\n        }\n        function isUnknownOption(arg) {\n            arg = arg.replace(/^-{3,}/, '--');\n            if (arg.match(negative)) {\n                return false;\n            }\n            if (hasAllShortFlags(arg)) {\n                return false;\n            }\n            const flagWithEquals = /^-+([^=]+?)=[\\s\\S]*$/;\n            const normalFlag = /^-+([^=]+?)$/;\n            const flagEndingInHyphen = /^-+([^=]+?)-$/;\n            const flagEndingInDigits = /^-+([^=]+?\\d+)$/;\n            const flagEndingInNonWordCharacters = /^-+([^=]+?)\\W+.*$/;\n            return !hasFlagsMatching(arg, flagWithEquals, negatedBoolean, normalFlag, flagEndingInHyphen, flagEndingInDigits, flagEndingInNonWordCharacters);\n        }\n        function defaultValue(key) {\n            if (!checkAllAliases(key, flags.bools) &&\n                !checkAllAliases(key, flags.counts) &&\n                `${key}` in defaults) {\n                return defaults[key];\n            }\n            else {\n                return defaultForType(guessType(key));\n            }\n        }\n        function defaultForType(type) {\n            const def = {\n                [DefaultValuesForTypeKey.BOOLEAN]: true,\n                [DefaultValuesForTypeKey.STRING]: '',\n                [DefaultValuesForTypeKey.NUMBER]: undefined,\n                [DefaultValuesForTypeKey.ARRAY]: []\n            };\n            return def[type];\n        }\n        function guessType(key) {\n            let type = DefaultValuesForTypeKey.BOOLEAN;\n            if (checkAllAliases(key, flags.strings))\n                type = DefaultValuesForTypeKey.STRING;\n            else if (checkAllAliases(key, flags.numbers))\n                type = DefaultValuesForTypeKey.NUMBER;\n            else if (checkAllAliases(key, flags.bools))\n                type = DefaultValuesForTypeKey.BOOLEAN;\n            else if (checkAllAliases(key, flags.arrays))\n                type = DefaultValuesForTypeKey.ARRAY;\n            return type;\n        }\n        function isUndefined(num) {\n            return num === undefined;\n        }\n        function checkConfiguration() {\n            Object.keys(flags.counts).find(key => {\n                if (checkAllAliases(key, flags.arrays)) {\n                    error = Error(__('Invalid configuration: %s, opts.count excludes opts.array.', key));\n                    return true;\n                }\n                else if (checkAllAliases(key, flags.nargs)) {\n                    error = Error(__('Invalid configuration: %s, opts.count excludes opts.narg.', key));\n                    return true;\n                }\n                return false;\n            });\n        }\n        return {\n            aliases: Object.assign({}, flags.aliases),\n            argv: Object.assign(argvReturn, argv),\n            configuration: configuration,\n            defaulted: Object.assign({}, defaulted),\n            error: error,\n            newAliases: Object.assign({}, newAliases)\n        };\n    }\n}\nfunction combineAliases(aliases) {\n    const aliasArrays = [];\n    const combined = Object.create(null);\n    let change = true;\n    Object.keys(aliases).forEach(function (key) {\n        aliasArrays.push([].concat(aliases[key], key));\n    });\n    while (change) {\n        change = false;\n        for (let i = 0; i < aliasArrays.length; i++) {\n            for (let ii = i + 1; ii < aliasArrays.length; ii++) {\n                const intersect = aliasArrays[i].filter(function (v) {\n                    return aliasArrays[ii].indexOf(v) !== -1;\n                });\n                if (intersect.length) {\n                    aliasArrays[i] = aliasArrays[i].concat(aliasArrays[ii]);\n                    aliasArrays.splice(ii, 1);\n                    change = true;\n                    break;\n                }\n            }\n        }\n    }\n    aliasArrays.forEach(function (aliasArray) {\n        aliasArray = aliasArray.filter(function (v, i, self) {\n            return self.indexOf(v) === i;\n        });\n        const lastAlias = aliasArray.pop();\n        if (lastAlias !== undefined && typeof lastAlias === 'string') {\n            combined[lastAlias] = aliasArray;\n        }\n    });\n    return combined;\n}\nfunction increment(orig) {\n    return orig !== undefined ? orig + 1 : 1;\n}\nfunction sanitizeKey(key) {\n    if (key === '__proto__')\n        return '___proto___';\n    return key;\n}\n\nconst minNodeVersion = (process && process.env && process.env.YARGS_MIN_NODE_VERSION)\n    ? Number(process.env.YARGS_MIN_NODE_VERSION)\n    : 10;\nif (process && process.version) {\n    const major = Number(process.version.match(/v([^.]+)/)[1]);\n    if (major < minNodeVersion) {\n        throw Error(`yargs parser supports a minimum Node.js version of ${minNodeVersion}. Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions`);\n    }\n}\nconst env = process ? process.env : {};\nconst parser = new YargsParser({\n    cwd: process.cwd,\n    env: () => {\n        return env;\n    },\n    format: util.format,\n    normalize: path.normalize,\n    resolve: path.resolve,\n    require: (path) => {\n        if (typeof require !== 'undefined') {\n            return require(path);\n        }\n        else if (path.match(/\\.json$/)) {\n            return fs.readFileSync(path, 'utf8');\n        }\n        else {\n            throw Error('only .json config files are supported in ESM');\n        }\n    }\n});\nconst yargsParser = function Parser(args, opts) {\n    const result = parser.parse(args.slice(), opts);\n    return result.argv;\n};\nyargsParser.detailed = function (args, opts) {\n    return parser.parse(args.slice(), opts);\n};\nyargsParser.camelCase = camelCase;\nyargsParser.decamelize = decamelize;\nyargsParser.looksLikeNumber = looksLikeNumber;\n\nmodule.exports = yargsParser;\n"],"mappings":"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"}},"mtime":1674865298662},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\cliui@7.0.4\\\\node_modules\\\\cliui\\\\build\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\cliui@7.0.4\\\\node_modules\\\\cliui\\\\build\\\\index.cjs\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.22.6:development":{"value":{"code":"'use strict';\n\nconst align = {\n  right: alignRight,\n  center: alignCenter\n};\nconst top = 0;\nconst right = 1;\nconst bottom = 2;\nconst left = 3;\nclass UI {\n  constructor(opts) {\n    var _a;\n    this.width = opts.width;\n    this.wrap = (_a = opts.wrap) !== null && _a !== void 0 ? _a : true;\n    this.rows = [];\n  }\n  span(...args) {\n    const cols = this.div(...args);\n    cols.span = true;\n  }\n  resetOutput() {\n    this.rows = [];\n  }\n  div(...args) {\n    if (args.length === 0) {\n      this.div('');\n    }\n    if (this.wrap && this.shouldApplyLayoutDSL(...args) && typeof args[0] === 'string') {\n      return this.applyLayoutDSL(args[0]);\n    }\n    const cols = args.map(arg => {\n      if (typeof arg === 'string') {\n        return this.colFromString(arg);\n      }\n      return arg;\n    });\n    this.rows.push(cols);\n    return cols;\n  }\n  shouldApplyLayoutDSL(...args) {\n    return args.length === 1 && typeof args[0] === 'string' && /[\\t\\n]/.test(args[0]);\n  }\n  applyLayoutDSL(str) {\n    const rows = str.split('\\n').map(row => row.split('\\t'));\n    let leftColumnWidth = 0;\n    // simple heuristic for layout, make sure the\n    // second column lines up along the left-hand.\n    // don't allow the first column to take up more\n    // than 50% of the screen.\n    rows.forEach(columns => {\n      if (columns.length > 1 && mixin.stringWidth(columns[0]) > leftColumnWidth) {\n        leftColumnWidth = Math.min(Math.floor(this.width * 0.5), mixin.stringWidth(columns[0]));\n      }\n    });\n    // generate a table:\n    //  replacing ' ' with padding calculations.\n    //  using the algorithmically generated width.\n    rows.forEach(columns => {\n      this.div(...columns.map((r, i) => {\n        return {\n          text: r.trim(),\n          padding: this.measurePadding(r),\n          width: i === 0 && columns.length > 1 ? leftColumnWidth : undefined\n        };\n      }));\n    });\n    return this.rows[this.rows.length - 1];\n  }\n  colFromString(text) {\n    return {\n      text,\n      padding: this.measurePadding(text)\n    };\n  }\n  measurePadding(str) {\n    // measure padding without ansi escape codes\n    const noAnsi = mixin.stripAnsi(str);\n    return [0, noAnsi.match(/\\s*$/)[0].length, 0, noAnsi.match(/^\\s*/)[0].length];\n  }\n  toString() {\n    const lines = [];\n    this.rows.forEach(row => {\n      this.rowToString(row, lines);\n    });\n    // don't display any lines with the\n    // hidden flag set.\n    return lines.filter(line => !line.hidden).map(line => line.text).join('\\n');\n  }\n  rowToString(row, lines) {\n    this.rasterize(row).forEach((rrow, r) => {\n      let str = '';\n      rrow.forEach((col, c) => {\n        const {\n          width\n        } = row[c]; // the width with padding.\n        const wrapWidth = this.negatePadding(row[c]); // the width without padding.\n        let ts = col; // temporary string used during alignment/padding.\n        if (wrapWidth > mixin.stringWidth(col)) {\n          ts += ' '.repeat(wrapWidth - mixin.stringWidth(col));\n        }\n        // align the string within its column.\n        if (row[c].align && row[c].align !== 'left' && this.wrap) {\n          const fn = align[row[c].align];\n          ts = fn(ts, wrapWidth);\n          if (mixin.stringWidth(ts) < wrapWidth) {\n            ts += ' '.repeat((width || 0) - mixin.stringWidth(ts) - 1);\n          }\n        }\n        // apply border and padding to string.\n        const padding = row[c].padding || [0, 0, 0, 0];\n        if (padding[left]) {\n          str += ' '.repeat(padding[left]);\n        }\n        str += addBorder(row[c], ts, '| ');\n        str += ts;\n        str += addBorder(row[c], ts, ' |');\n        if (padding[right]) {\n          str += ' '.repeat(padding[right]);\n        }\n        // if prior row is span, try to render the\n        // current row on the prior line.\n        if (r === 0 && lines.length > 0) {\n          str = this.renderInline(str, lines[lines.length - 1]);\n        }\n      });\n      // remove trailing whitespace.\n      lines.push({\n        text: str.replace(/ +$/, ''),\n        span: row.span\n      });\n    });\n    return lines;\n  }\n  // if the full 'source' can render in\n  // the target line, do so.\n  renderInline(source, previousLine) {\n    const match = source.match(/^ */);\n    const leadingWhitespace = match ? match[0].length : 0;\n    const target = previousLine.text;\n    const targetTextWidth = mixin.stringWidth(target.trimRight());\n    if (!previousLine.span) {\n      return source;\n    }\n    // if we're not applying wrapping logic,\n    // just always append to the span.\n    if (!this.wrap) {\n      previousLine.hidden = true;\n      return target + source;\n    }\n    if (leadingWhitespace < targetTextWidth) {\n      return source;\n    }\n    previousLine.hidden = true;\n    return target.trimRight() + ' '.repeat(leadingWhitespace - targetTextWidth) + source.trimLeft();\n  }\n  rasterize(row) {\n    const rrows = [];\n    const widths = this.columnWidths(row);\n    let wrapped;\n    // word wrap all columns, and create\n    // a data-structure that is easy to rasterize.\n    row.forEach((col, c) => {\n      // leave room for left and right padding.\n      col.width = widths[c];\n      if (this.wrap) {\n        wrapped = mixin.wrap(col.text, this.negatePadding(col), {\n          hard: true\n        }).split('\\n');\n      } else {\n        wrapped = col.text.split('\\n');\n      }\n      if (col.border) {\n        wrapped.unshift('.' + '-'.repeat(this.negatePadding(col) + 2) + '.');\n        wrapped.push(\"'\" + '-'.repeat(this.negatePadding(col) + 2) + \"'\");\n      }\n      // add top and bottom padding.\n      if (col.padding) {\n        wrapped.unshift(...new Array(col.padding[top] || 0).fill(''));\n        wrapped.push(...new Array(col.padding[bottom] || 0).fill(''));\n      }\n      wrapped.forEach((str, r) => {\n        if (!rrows[r]) {\n          rrows.push([]);\n        }\n        const rrow = rrows[r];\n        for (let i = 0; i < c; i++) {\n          if (rrow[i] === undefined) {\n            rrow.push('');\n          }\n        }\n        rrow.push(str);\n      });\n    });\n    return rrows;\n  }\n  negatePadding(col) {\n    let wrapWidth = col.width || 0;\n    if (col.padding) {\n      wrapWidth -= (col.padding[left] || 0) + (col.padding[right] || 0);\n    }\n    if (col.border) {\n      wrapWidth -= 4;\n    }\n    return wrapWidth;\n  }\n  columnWidths(row) {\n    if (!this.wrap) {\n      return row.map(col => {\n        return col.width || mixin.stringWidth(col.text);\n      });\n    }\n    let unset = row.length;\n    let remainingWidth = this.width;\n    // column widths can be set in config.\n    const widths = row.map(col => {\n      if (col.width) {\n        unset--;\n        remainingWidth -= col.width;\n        return col.width;\n      }\n      return undefined;\n    });\n    // any unset widths should be calculated.\n    const unsetWidth = unset ? Math.floor(remainingWidth / unset) : 0;\n    return widths.map((w, i) => {\n      if (w === undefined) {\n        return Math.max(unsetWidth, _minWidth(row[i]));\n      }\n      return w;\n    });\n  }\n}\nfunction addBorder(col, ts, style) {\n  if (col.border) {\n    if (/[.']-+[.']/.test(ts)) {\n      return '';\n    }\n    if (ts.trim().length !== 0) {\n      return style;\n    }\n    return '  ';\n  }\n  return '';\n}\n// calculates the minimum width of\n// a column, based on padding preferences.\nfunction _minWidth(col) {\n  const padding = col.padding || [];\n  const minWidth = 1 + (padding[left] || 0) + (padding[right] || 0);\n  if (col.border) {\n    return minWidth + 4;\n  }\n  return minWidth;\n}\nfunction getWindowWidth() {\n  /* istanbul ignore next: depends on terminal */\n  if (typeof process === 'object' && process.stdout && process.stdout.columns) {\n    return process.stdout.columns;\n  }\n  return 80;\n}\nfunction alignRight(str, width) {\n  str = str.trim();\n  const strWidth = mixin.stringWidth(str);\n  if (strWidth < width) {\n    return ' '.repeat(width - strWidth) + str;\n  }\n  return str;\n}\nfunction alignCenter(str, width) {\n  str = str.trim();\n  const strWidth = mixin.stringWidth(str);\n  /* istanbul ignore next */\n  if (strWidth >= width) {\n    return str;\n  }\n  return ' '.repeat(width - strWidth >> 1) + str;\n}\nlet mixin;\nfunction cliui(opts, _mixin) {\n  mixin = _mixin;\n  return new UI({\n    width: (opts === null || opts === void 0 ? void 0 : opts.width) || getWindowWidth(),\n    wrap: opts === null || opts === void 0 ? void 0 : opts.wrap\n  });\n}\n\n// Bootstrap cliui with CommonJS dependencies:\nconst stringWidth = require('string-width');\nconst stripAnsi = require('strip-ansi');\nconst wrap = require('wrap-ansi');\nfunction ui(opts) {\n  return cliui(opts, {\n    stringWidth,\n    stripAnsi,\n    wrap\n  });\n}\nmodule.exports = ui;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["align","right","alignRight","center","alignCenter","top","bottom","left","UI","constructor","opts","_a","width","wrap","rows","span","args","cols","div","resetOutput","length","shouldApplyLayoutDSL","applyLayoutDSL","map","arg","colFromString","push","test","str","split","row","leftColumnWidth","forEach","columns","mixin","stringWidth","Math","min","floor","r","i","text","trim","padding","measurePadding","undefined","noAnsi","stripAnsi","match","toString","lines","rowToString","filter","line","hidden","join","rasterize","rrow","col","c","wrapWidth","negatePadding","ts","repeat","fn","addBorder","renderInline","replace","source","previousLine","leadingWhitespace","target","targetTextWidth","trimRight","trimLeft","rrows","widths","columnWidths","wrapped","hard","border","unshift","Array","fill","unset","remainingWidth","unsetWidth","w","max","_minWidth","style","minWidth","getWindowWidth","process","stdout","strWidth","cliui","_mixin","require","ui","module","exports"],"sourceRoot":"C:\\code\\FluidFramework5\\node_modules\\.pnpm\\cliui@7.0.4\\node_modules\\cliui\\build\\","sources":["index.cjs"],"sourcesContent":["'use strict';\n\nconst align = {\n    right: alignRight,\n    center: alignCenter\n};\nconst top = 0;\nconst right = 1;\nconst bottom = 2;\nconst left = 3;\nclass UI {\n    constructor(opts) {\n        var _a;\n        this.width = opts.width;\n        this.wrap = (_a = opts.wrap) !== null && _a !== void 0 ? _a : true;\n        this.rows = [];\n    }\n    span(...args) {\n        const cols = this.div(...args);\n        cols.span = true;\n    }\n    resetOutput() {\n        this.rows = [];\n    }\n    div(...args) {\n        if (args.length === 0) {\n            this.div('');\n        }\n        if (this.wrap && this.shouldApplyLayoutDSL(...args) && typeof args[0] === 'string') {\n            return this.applyLayoutDSL(args[0]);\n        }\n        const cols = args.map(arg => {\n            if (typeof arg === 'string') {\n                return this.colFromString(arg);\n            }\n            return arg;\n        });\n        this.rows.push(cols);\n        return cols;\n    }\n    shouldApplyLayoutDSL(...args) {\n        return args.length === 1 && typeof args[0] === 'string' &&\n            /[\\t\\n]/.test(args[0]);\n    }\n    applyLayoutDSL(str) {\n        const rows = str.split('\\n').map(row => row.split('\\t'));\n        let leftColumnWidth = 0;\n        // simple heuristic for layout, make sure the\n        // second column lines up along the left-hand.\n        // don't allow the first column to take up more\n        // than 50% of the screen.\n        rows.forEach(columns => {\n            if (columns.length > 1 && mixin.stringWidth(columns[0]) > leftColumnWidth) {\n                leftColumnWidth = Math.min(Math.floor(this.width * 0.5), mixin.stringWidth(columns[0]));\n            }\n        });\n        // generate a table:\n        //  replacing ' ' with padding calculations.\n        //  using the algorithmically generated width.\n        rows.forEach(columns => {\n            this.div(...columns.map((r, i) => {\n                return {\n                    text: r.trim(),\n                    padding: this.measurePadding(r),\n                    width: (i === 0 && columns.length > 1) ? leftColumnWidth : undefined\n                };\n            }));\n        });\n        return this.rows[this.rows.length - 1];\n    }\n    colFromString(text) {\n        return {\n            text,\n            padding: this.measurePadding(text)\n        };\n    }\n    measurePadding(str) {\n        // measure padding without ansi escape codes\n        const noAnsi = mixin.stripAnsi(str);\n        return [0, noAnsi.match(/\\s*$/)[0].length, 0, noAnsi.match(/^\\s*/)[0].length];\n    }\n    toString() {\n        const lines = [];\n        this.rows.forEach(row => {\n            this.rowToString(row, lines);\n        });\n        // don't display any lines with the\n        // hidden flag set.\n        return lines\n            .filter(line => !line.hidden)\n            .map(line => line.text)\n            .join('\\n');\n    }\n    rowToString(row, lines) {\n        this.rasterize(row).forEach((rrow, r) => {\n            let str = '';\n            rrow.forEach((col, c) => {\n                const { width } = row[c]; // the width with padding.\n                const wrapWidth = this.negatePadding(row[c]); // the width without padding.\n                let ts = col; // temporary string used during alignment/padding.\n                if (wrapWidth > mixin.stringWidth(col)) {\n                    ts += ' '.repeat(wrapWidth - mixin.stringWidth(col));\n                }\n                // align the string within its column.\n                if (row[c].align && row[c].align !== 'left' && this.wrap) {\n                    const fn = align[row[c].align];\n                    ts = fn(ts, wrapWidth);\n                    if (mixin.stringWidth(ts) < wrapWidth) {\n                        ts += ' '.repeat((width || 0) - mixin.stringWidth(ts) - 1);\n                    }\n                }\n                // apply border and padding to string.\n                const padding = row[c].padding || [0, 0, 0, 0];\n                if (padding[left]) {\n                    str += ' '.repeat(padding[left]);\n                }\n                str += addBorder(row[c], ts, '| ');\n                str += ts;\n                str += addBorder(row[c], ts, ' |');\n                if (padding[right]) {\n                    str += ' '.repeat(padding[right]);\n                }\n                // if prior row is span, try to render the\n                // current row on the prior line.\n                if (r === 0 && lines.length > 0) {\n                    str = this.renderInline(str, lines[lines.length - 1]);\n                }\n            });\n            // remove trailing whitespace.\n            lines.push({\n                text: str.replace(/ +$/, ''),\n                span: row.span\n            });\n        });\n        return lines;\n    }\n    // if the full 'source' can render in\n    // the target line, do so.\n    renderInline(source, previousLine) {\n        const match = source.match(/^ */);\n        const leadingWhitespace = match ? match[0].length : 0;\n        const target = previousLine.text;\n        const targetTextWidth = mixin.stringWidth(target.trimRight());\n        if (!previousLine.span) {\n            return source;\n        }\n        // if we're not applying wrapping logic,\n        // just always append to the span.\n        if (!this.wrap) {\n            previousLine.hidden = true;\n            return target + source;\n        }\n        if (leadingWhitespace < targetTextWidth) {\n            return source;\n        }\n        previousLine.hidden = true;\n        return target.trimRight() + ' '.repeat(leadingWhitespace - targetTextWidth) + source.trimLeft();\n    }\n    rasterize(row) {\n        const rrows = [];\n        const widths = this.columnWidths(row);\n        let wrapped;\n        // word wrap all columns, and create\n        // a data-structure that is easy to rasterize.\n        row.forEach((col, c) => {\n            // leave room for left and right padding.\n            col.width = widths[c];\n            if (this.wrap) {\n                wrapped = mixin.wrap(col.text, this.negatePadding(col), { hard: true }).split('\\n');\n            }\n            else {\n                wrapped = col.text.split('\\n');\n            }\n            if (col.border) {\n                wrapped.unshift('.' + '-'.repeat(this.negatePadding(col) + 2) + '.');\n                wrapped.push(\"'\" + '-'.repeat(this.negatePadding(col) + 2) + \"'\");\n            }\n            // add top and bottom padding.\n            if (col.padding) {\n                wrapped.unshift(...new Array(col.padding[top] || 0).fill(''));\n                wrapped.push(...new Array(col.padding[bottom] || 0).fill(''));\n            }\n            wrapped.forEach((str, r) => {\n                if (!rrows[r]) {\n                    rrows.push([]);\n                }\n                const rrow = rrows[r];\n                for (let i = 0; i < c; i++) {\n                    if (rrow[i] === undefined) {\n                        rrow.push('');\n                    }\n                }\n                rrow.push(str);\n            });\n        });\n        return rrows;\n    }\n    negatePadding(col) {\n        let wrapWidth = col.width || 0;\n        if (col.padding) {\n            wrapWidth -= (col.padding[left] || 0) + (col.padding[right] || 0);\n        }\n        if (col.border) {\n            wrapWidth -= 4;\n        }\n        return wrapWidth;\n    }\n    columnWidths(row) {\n        if (!this.wrap) {\n            return row.map(col => {\n                return col.width || mixin.stringWidth(col.text);\n            });\n        }\n        let unset = row.length;\n        let remainingWidth = this.width;\n        // column widths can be set in config.\n        const widths = row.map(col => {\n            if (col.width) {\n                unset--;\n                remainingWidth -= col.width;\n                return col.width;\n            }\n            return undefined;\n        });\n        // any unset widths should be calculated.\n        const unsetWidth = unset ? Math.floor(remainingWidth / unset) : 0;\n        return widths.map((w, i) => {\n            if (w === undefined) {\n                return Math.max(unsetWidth, _minWidth(row[i]));\n            }\n            return w;\n        });\n    }\n}\nfunction addBorder(col, ts, style) {\n    if (col.border) {\n        if (/[.']-+[.']/.test(ts)) {\n            return '';\n        }\n        if (ts.trim().length !== 0) {\n            return style;\n        }\n        return '  ';\n    }\n    return '';\n}\n// calculates the minimum width of\n// a column, based on padding preferences.\nfunction _minWidth(col) {\n    const padding = col.padding || [];\n    const minWidth = 1 + (padding[left] || 0) + (padding[right] || 0);\n    if (col.border) {\n        return minWidth + 4;\n    }\n    return minWidth;\n}\nfunction getWindowWidth() {\n    /* istanbul ignore next: depends on terminal */\n    if (typeof process === 'object' && process.stdout && process.stdout.columns) {\n        return process.stdout.columns;\n    }\n    return 80;\n}\nfunction alignRight(str, width) {\n    str = str.trim();\n    const strWidth = mixin.stringWidth(str);\n    if (strWidth < width) {\n        return ' '.repeat(width - strWidth) + str;\n    }\n    return str;\n}\nfunction alignCenter(str, width) {\n    str = str.trim();\n    const strWidth = mixin.stringWidth(str);\n    /* istanbul ignore next */\n    if (strWidth >= width) {\n        return str;\n    }\n    return ' '.repeat((width - strWidth) >> 1) + str;\n}\nlet mixin;\nfunction cliui(opts, _mixin) {\n    mixin = _mixin;\n    return new UI({\n        width: (opts === null || opts === void 0 ? void 0 : opts.width) || getWindowWidth(),\n        wrap: opts === null || opts === void 0 ? void 0 : opts.wrap\n    });\n}\n\n// Bootstrap cliui with CommonJS dependencies:\nconst stringWidth = require('string-width');\nconst stripAnsi = require('strip-ansi');\nconst wrap = require('wrap-ansi');\nfunction ui(opts) {\n    return cliui(opts, {\n        stringWidth,\n        stripAnsi,\n        wrap\n    });\n}\n\nmodule.exports = ui;\n"],"mappings":"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"}},"mtime":1674865351343},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\string-width@4.2.3\\\\node_modules\\\\string-width\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\string-width@4.2.3\\\\node_modules\\\\string-width\\\\index.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.22.6:development":{"value":{"code":"'use strict';\n\nconst stripAnsi = require('strip-ansi');\nconst isFullwidthCodePoint = require('is-fullwidth-code-point');\nconst emojiRegex = require('emoji-regex');\nconst stringWidth = string => {\n  if (typeof string !== 'string' || string.length === 0) {\n    return 0;\n  }\n  string = stripAnsi(string);\n  if (string.length === 0) {\n    return 0;\n  }\n  string = string.replace(emojiRegex(), '  ');\n  let width = 0;\n  for (let i = 0; i < string.length; i++) {\n    const code = string.codePointAt(i);\n\n    // Ignore control characters\n    if (code <= 0x1F || code >= 0x7F && code <= 0x9F) {\n      continue;\n    }\n\n    // Ignore combining characters\n    if (code >= 0x300 && code <= 0x36F) {\n      continue;\n    }\n\n    // Surrogates\n    if (code > 0xFFFF) {\n      i++;\n    }\n    width += isFullwidthCodePoint(code) ? 2 : 1;\n  }\n  return width;\n};\nmodule.exports = stringWidth;\n// TODO: remove this in the next major version\nmodule.exports.default = stringWidth;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdHJpcEFuc2kiLCJyZXF1aXJlIiwiaXNGdWxsd2lkdGhDb2RlUG9pbnQiLCJlbW9qaVJlZ2V4Iiwic3RyaW5nV2lkdGgiLCJzdHJpbmciLCJsZW5ndGgiLCJyZXBsYWNlIiwid2lkdGgiLCJpIiwiY29kZSIsImNvZGVQb2ludEF0IiwibW9kdWxlIiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IkM6XFxjb2RlXFxGbHVpZEZyYW1ld29yazVcXG5vZGVfbW9kdWxlc1xcLnBucG1cXHN0cmluZy13aWR0aEA0LjIuM1xcbm9kZV9tb2R1bGVzXFxzdHJpbmctd2lkdGhcXCIsInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3Qgc3RyaXBBbnNpID0gcmVxdWlyZSgnc3RyaXAtYW5zaScpO1xuY29uc3QgaXNGdWxsd2lkdGhDb2RlUG9pbnQgPSByZXF1aXJlKCdpcy1mdWxsd2lkdGgtY29kZS1wb2ludCcpO1xuY29uc3QgZW1vamlSZWdleCA9IHJlcXVpcmUoJ2Vtb2ppLXJlZ2V4Jyk7XG5cbmNvbnN0IHN0cmluZ1dpZHRoID0gc3RyaW5nID0+IHtcblx0aWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnIHx8IHN0cmluZy5sZW5ndGggPT09IDApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdHN0cmluZyA9IHN0cmlwQW5zaShzdHJpbmcpO1xuXG5cdGlmIChzdHJpbmcubGVuZ3RoID09PSAwKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShlbW9qaVJlZ2V4KCksICcgICcpO1xuXG5cdGxldCB3aWR0aCA9IDA7XG5cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyBpKyspIHtcblx0XHRjb25zdCBjb2RlID0gc3RyaW5nLmNvZGVQb2ludEF0KGkpO1xuXG5cdFx0Ly8gSWdub3JlIGNvbnRyb2wgY2hhcmFjdGVyc1xuXHRcdGlmIChjb2RlIDw9IDB4MUYgfHwgKGNvZGUgPj0gMHg3RiAmJiBjb2RlIDw9IDB4OUYpKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHQvLyBJZ25vcmUgY29tYmluaW5nIGNoYXJhY3RlcnNcblx0XHRpZiAoY29kZSA+PSAweDMwMCAmJiBjb2RlIDw9IDB4MzZGKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHQvLyBTdXJyb2dhdGVzXG5cdFx0aWYgKGNvZGUgPiAweEZGRkYpIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHR3aWR0aCArPSBpc0Z1bGx3aWR0aENvZGVQb2ludChjb2RlKSA/IDIgOiAxO1xuXHR9XG5cblx0cmV0dXJuIHdpZHRoO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdHJpbmdXaWR0aDtcbi8vIFRPRE86IHJlbW92ZSB0aGlzIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb25cbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBzdHJpbmdXaWR0aDtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWixNQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFDdkMsTUFBTUMsb0JBQW9CLEdBQUdELE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztBQUMvRCxNQUFNRSxVQUFVLEdBQUdGLE9BQU8sQ0FBQyxhQUFhLENBQUM7QUFFekMsTUFBTUcsV0FBVyxHQUFHQyxNQUFNLElBQUk7RUFDN0IsSUFBSSxPQUFPQSxNQUFNLEtBQUssUUFBUSxJQUFJQSxNQUFNLENBQUNDLE1BQU0sS0FBSyxDQUFDLEVBQUU7SUFDdEQsT0FBTyxDQUFDO0VBQ1Q7RUFFQUQsTUFBTSxHQUFHTCxTQUFTLENBQUNLLE1BQU0sQ0FBQztFQUUxQixJQUFJQSxNQUFNLENBQUNDLE1BQU0sS0FBSyxDQUFDLEVBQUU7SUFDeEIsT0FBTyxDQUFDO0VBQ1Q7RUFFQUQsTUFBTSxHQUFHQSxNQUFNLENBQUNFLE9BQU8sQ0FBQ0osVUFBVSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUM7RUFFM0MsSUFBSUssS0FBSyxHQUFHLENBQUM7RUFFYixLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0osTUFBTSxDQUFDQyxNQUFNLEVBQUVHLENBQUMsRUFBRSxFQUFFO0lBQ3ZDLE1BQU1DLElBQUksR0FBR0wsTUFBTSxDQUFDTSxXQUFXLENBQUNGLENBQUMsQ0FBQzs7SUFFbEM7SUFDQSxJQUFJQyxJQUFJLElBQUksSUFBSSxJQUFLQSxJQUFJLElBQUksSUFBSSxJQUFJQSxJQUFJLElBQUksSUFBSyxFQUFFO01BQ25EO0lBQ0Q7O0lBRUE7SUFDQSxJQUFJQSxJQUFJLElBQUksS0FBSyxJQUFJQSxJQUFJLElBQUksS0FBSyxFQUFFO01BQ25DO0lBQ0Q7O0lBRUE7SUFDQSxJQUFJQSxJQUFJLEdBQUcsTUFBTSxFQUFFO01BQ2xCRCxDQUFDLEVBQUU7SUFDSjtJQUVBRCxLQUFLLElBQUlOLG9CQUFvQixDQUFDUSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztFQUM1QztFQUVBLE9BQU9GLEtBQUs7QUFDYixDQUFDO0FBRURJLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHVCxXQUFXO0FBQzVCO0FBQ0FRLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDQyxPQUFPLEdBQUdWLFdBQVcifQ==","map":{"version":3,"names":["stripAnsi","require","isFullwidthCodePoint","emojiRegex","stringWidth","string","length","replace","width","i","code","codePointAt","module","exports","default"],"sourceRoot":"C:\\code\\FluidFramework5\\node_modules\\.pnpm\\string-width@4.2.3\\node_modules\\string-width\\","sources":["index.js"],"sourcesContent":["'use strict';\nconst stripAnsi = require('strip-ansi');\nconst isFullwidthCodePoint = require('is-fullwidth-code-point');\nconst emojiRegex = require('emoji-regex');\n\nconst stringWidth = string => {\n\tif (typeof string !== 'string' || string.length === 0) {\n\t\treturn 0;\n\t}\n\n\tstring = stripAnsi(string);\n\n\tif (string.length === 0) {\n\t\treturn 0;\n\t}\n\n\tstring = string.replace(emojiRegex(), '  ');\n\n\tlet width = 0;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst code = string.codePointAt(i);\n\n\t\t// Ignore control characters\n\t\tif (code <= 0x1F || (code >= 0x7F && code <= 0x9F)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Ignore combining characters\n\t\tif (code >= 0x300 && code <= 0x36F) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Surrogates\n\t\tif (code > 0xFFFF) {\n\t\t\ti++;\n\t\t}\n\n\t\twidth += isFullwidthCodePoint(code) ? 2 : 1;\n\t}\n\n\treturn width;\n};\n\nmodule.exports = stringWidth;\n// TODO: remove this in the next major version\nmodule.exports.default = stringWidth;\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,YAAY,CAAC;AACvC,MAAMC,oBAAoB,GAAGD,OAAO,CAAC,yBAAyB,CAAC;AAC/D,MAAME,UAAU,GAAGF,OAAO,CAAC,aAAa,CAAC;AAEzC,MAAMG,WAAW,GAAGC,MAAM,IAAI;EAC7B,IAAI,OAAOA,MAAM,KAAK,QAAQ,IAAIA,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE;IACtD,OAAO,CAAC;EACT;EAEAD,MAAM,GAAGL,SAAS,CAACK,MAAM,CAAC;EAE1B,IAAIA,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE;IACxB,OAAO,CAAC;EACT;EAEAD,MAAM,GAAGA,MAAM,CAACE,OAAO,CAACJ,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC;EAE3C,IAAIK,KAAK,GAAG,CAAC;EAEb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,MAAM,CAACC,MAAM,EAAEG,CAAC,EAAE,EAAE;IACvC,MAAMC,IAAI,GAAGL,MAAM,CAACM,WAAW,CAACF,CAAC,CAAC;;IAElC;IACA,IAAIC,IAAI,IAAI,IAAI,IAAKA,IAAI,IAAI,IAAI,IAAIA,IAAI,IAAI,IAAK,EAAE;MACnD;IACD;;IAEA;IACA,IAAIA,IAAI,IAAI,KAAK,IAAIA,IAAI,IAAI,KAAK,EAAE;MACnC;IACD;;IAEA;IACA,IAAIA,IAAI,GAAG,MAAM,EAAE;MAClBD,CAAC,EAAE;IACJ;IAEAD,KAAK,IAAIN,oBAAoB,CAACQ,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;EAC5C;EAEA,OAAOF,KAAK;AACb,CAAC;AAEDI,MAAM,CAACC,OAAO,GAAGT,WAAW;AAC5B;AACAQ,MAAM,CAACC,OAAO,CAACC,OAAO,GAAGV,WAAW"}},"mtime":1674865335182},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\strip-ansi@6.0.1\\\\node_modules\\\\strip-ansi\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\strip-ansi@6.0.1\\\\node_modules\\\\strip-ansi\\\\index.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.22.6:development":{"value":{"code":"'use strict';\n\nconst ansiRegex = require('ansi-regex');\nmodule.exports = string => typeof string === 'string' ? string.replace(ansiRegex(), '') : string;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhbnNpUmVnZXgiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInN0cmluZyIsInJlcGxhY2UiXSwic291cmNlUm9vdCI6IkM6XFxjb2RlXFxGbHVpZEZyYW1ld29yazVcXG5vZGVfbW9kdWxlc1xcLnBucG1cXHN0cmlwLWFuc2lANi4wLjFcXG5vZGVfbW9kdWxlc1xcc3RyaXAtYW5zaVxcIiwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBhbnNpUmVnZXggPSByZXF1aXJlKCdhbnNpLXJlZ2V4Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5nID0+IHR5cGVvZiBzdHJpbmcgPT09ICdzdHJpbmcnID8gc3RyaW5nLnJlcGxhY2UoYW5zaVJlZ2V4KCksICcnKSA6IHN0cmluZztcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWixNQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFFdkNDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxNQUFNLElBQUksT0FBT0EsTUFBTSxLQUFLLFFBQVEsR0FBR0EsTUFBTSxDQUFDQyxPQUFPLENBQUNMLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUdJLE1BQU0ifQ==","map":{"version":3,"names":["ansiRegex","require","module","exports","string","replace"],"sourceRoot":"C:\\code\\FluidFramework5\\node_modules\\.pnpm\\strip-ansi@6.0.1\\node_modules\\strip-ansi\\","sources":["index.js"],"sourcesContent":["'use strict';\nconst ansiRegex = require('ansi-regex');\n\nmodule.exports = string => typeof string === 'string' ? string.replace(ansiRegex(), '') : string;\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,YAAY,CAAC;AAEvCC,MAAM,CAACC,OAAO,GAAGC,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,GAAGA,MAAM,CAACC,OAAO,CAACL,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAGI,MAAM"}},"mtime":1674865295531},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\ansi-regex@5.0.1\\\\node_modules\\\\ansi-regex\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\ansi-regex@5.0.1\\\\node_modules\\\\ansi-regex\\\\index.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.22.6:development":{"value":{"code":"'use strict';\n\nmodule.exports = ({\n  onlyFirst = false\n} = {}) => {\n  const pattern = ['[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)', '(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))'].join('|');\n  return new RegExp(pattern, onlyFirst ? undefined : 'g');\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwib25seUZpcnN0IiwicGF0dGVybiIsImpvaW4iLCJSZWdFeHAiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IkM6XFxjb2RlXFxGbHVpZEZyYW1ld29yazVcXG5vZGVfbW9kdWxlc1xcLnBucG1cXGFuc2ktcmVnZXhANS4wLjFcXG5vZGVfbW9kdWxlc1xcYW5zaS1yZWdleFxcIiwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gKHtvbmx5Rmlyc3QgPSBmYWxzZX0gPSB7fSkgPT4ge1xuXHRjb25zdCBwYXR0ZXJuID0gW1xuXHRcdCdbXFxcXHUwMDFCXFxcXHUwMDlCXVtbXFxcXF0oKSM7P10qKD86KD86KD86KD86O1stYS16QS1aXFxcXGRcXFxcLyMmLjo9PyVAfl9dKykqfFthLXpBLVpcXFxcZF0rKD86O1stYS16QS1aXFxcXGRcXFxcLyMmLjo9PyVAfl9dKikqKT9cXFxcdTAwMDcpJyxcblx0XHQnKD86KD86XFxcXGR7MSw0fSg/OjtcXFxcZHswLDR9KSopP1tcXFxcZEEtUFItVFpjZi1udHFyeT0+PH5dKSknXG5cdF0uam9pbignfCcpO1xuXG5cdHJldHVybiBuZXcgUmVnRXhwKHBhdHRlcm4sIG9ubHlGaXJzdCA/IHVuZGVmaW5lZCA6ICdnJyk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxDQUFDO0VBQUNDLFNBQVMsR0FBRztBQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSztFQUM5QyxNQUFNQyxPQUFPLEdBQUcsQ0FDZiw4SEFBOEgsRUFDOUgsMERBQTBELENBQzFELENBQUNDLElBQUksQ0FBQyxHQUFHLENBQUM7RUFFWCxPQUFPLElBQUlDLE1BQU0sQ0FBQ0YsT0FBTyxFQUFFRCxTQUFTLEdBQUdJLFNBQVMsR0FBRyxHQUFHLENBQUM7QUFDeEQsQ0FBQyJ9","map":{"version":3,"names":["module","exports","onlyFirst","pattern","join","RegExp","undefined"],"sourceRoot":"C:\\code\\FluidFramework5\\node_modules\\.pnpm\\ansi-regex@5.0.1\\node_modules\\ansi-regex\\","sources":["index.js"],"sourcesContent":["'use strict';\n\nmodule.exports = ({onlyFirst = false} = {}) => {\n\tconst pattern = [\n\t\t'[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)',\n\t\t'(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))'\n\t].join('|');\n\n\treturn new RegExp(pattern, onlyFirst ? undefined : 'g');\n};\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAG,CAAC;EAACC,SAAS,GAAG;AAAK,CAAC,GAAG,CAAC,CAAC,KAAK;EAC9C,MAAMC,OAAO,GAAG,CACf,8HAA8H,EAC9H,0DAA0D,CAC1D,CAACC,IAAI,CAAC,GAAG,CAAC;EAEX,OAAO,IAAIC,MAAM,CAACF,OAAO,EAAED,SAAS,GAAGI,SAAS,GAAG,GAAG,CAAC;AACxD,CAAC"}},"mtime":1674865316498},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\is-fullwidth-code-point@3.0.0\\\\node_modules\\\\is-fullwidth-code-point\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\is-fullwidth-code-point@3.0.0\\\\node_modules\\\\is-fullwidth-code-point\\\\index.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.22.6:development":{"value":{"code":"/* eslint-disable yoda */\n'use strict';\n\nconst isFullwidthCodePoint = codePoint => {\n  if (Number.isNaN(codePoint)) {\n    return false;\n  }\n\n  // Code points are derived from:\n  // http://www.unix.org/Public/UNIDATA/EastAsianWidth.txt\n  if (codePoint >= 0x1100 && (codePoint <= 0x115F ||\n  // Hangul Jamo\n  codePoint === 0x2329 ||\n  // LEFT-POINTING ANGLE BRACKET\n  codePoint === 0x232A ||\n  // RIGHT-POINTING ANGLE BRACKET\n  // CJK Radicals Supplement .. Enclosed CJK Letters and Months\n  0x2E80 <= codePoint && codePoint <= 0x3247 && codePoint !== 0x303F ||\n  // Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A\n  0x3250 <= codePoint && codePoint <= 0x4DBF ||\n  // CJK Unified Ideographs .. Yi Radicals\n  0x4E00 <= codePoint && codePoint <= 0xA4C6 ||\n  // Hangul Jamo Extended-A\n  0xA960 <= codePoint && codePoint <= 0xA97C ||\n  // Hangul Syllables\n  0xAC00 <= codePoint && codePoint <= 0xD7A3 ||\n  // CJK Compatibility Ideographs\n  0xF900 <= codePoint && codePoint <= 0xFAFF ||\n  // Vertical Forms\n  0xFE10 <= codePoint && codePoint <= 0xFE19 ||\n  // CJK Compatibility Forms .. Small Form Variants\n  0xFE30 <= codePoint && codePoint <= 0xFE6B ||\n  // Halfwidth and Fullwidth Forms\n  0xFF01 <= codePoint && codePoint <= 0xFF60 || 0xFFE0 <= codePoint && codePoint <= 0xFFE6 ||\n  // Kana Supplement\n  0x1B000 <= codePoint && codePoint <= 0x1B001 ||\n  // Enclosed Ideographic Supplement\n  0x1F200 <= codePoint && codePoint <= 0x1F251 ||\n  // CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane\n  0x20000 <= codePoint && codePoint <= 0x3FFFD)) {\n    return true;\n  }\n  return false;\n};\nmodule.exports = isFullwidthCodePoint;\nmodule.exports.default = isFullwidthCodePoint;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc0Z1bGx3aWR0aENvZGVQb2ludCIsImNvZGVQb2ludCIsIk51bWJlciIsImlzTmFOIiwibW9kdWxlIiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IkM6XFxjb2RlXFxGbHVpZEZyYW1ld29yazVcXG5vZGVfbW9kdWxlc1xcLnBucG1cXGlzLWZ1bGx3aWR0aC1jb2RlLXBvaW50QDMuMC4wXFxub2RlX21vZHVsZXNcXGlzLWZ1bGx3aWR0aC1jb2RlLXBvaW50XFwiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIHlvZGEgKi9cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgaXNGdWxsd2lkdGhDb2RlUG9pbnQgPSBjb2RlUG9pbnQgPT4ge1xuXHRpZiAoTnVtYmVyLmlzTmFOKGNvZGVQb2ludCkpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBDb2RlIHBvaW50cyBhcmUgZGVyaXZlZCBmcm9tOlxuXHQvLyBodHRwOi8vd3d3LnVuaXgub3JnL1B1YmxpYy9VTklEQVRBL0Vhc3RBc2lhbldpZHRoLnR4dFxuXHRpZiAoXG5cdFx0Y29kZVBvaW50ID49IDB4MTEwMCAmJiAoXG5cdFx0XHRjb2RlUG9pbnQgPD0gMHgxMTVGIHx8IC8vIEhhbmd1bCBKYW1vXG5cdFx0XHRjb2RlUG9pbnQgPT09IDB4MjMyOSB8fCAvLyBMRUZULVBPSU5USU5HIEFOR0xFIEJSQUNLRVRcblx0XHRcdGNvZGVQb2ludCA9PT0gMHgyMzJBIHx8IC8vIFJJR0hULVBPSU5USU5HIEFOR0xFIEJSQUNLRVRcblx0XHRcdC8vIENKSyBSYWRpY2FscyBTdXBwbGVtZW50IC4uIEVuY2xvc2VkIENKSyBMZXR0ZXJzIGFuZCBNb250aHNcblx0XHRcdCgweDJFODAgPD0gY29kZVBvaW50ICYmIGNvZGVQb2ludCA8PSAweDMyNDcgJiYgY29kZVBvaW50ICE9PSAweDMwM0YpIHx8XG5cdFx0XHQvLyBFbmNsb3NlZCBDSksgTGV0dGVycyBhbmQgTW9udGhzIC4uIENKSyBVbmlmaWVkIElkZW9ncmFwaHMgRXh0ZW5zaW9uIEFcblx0XHRcdCgweDMyNTAgPD0gY29kZVBvaW50ICYmIGNvZGVQb2ludCA8PSAweDREQkYpIHx8XG5cdFx0XHQvLyBDSksgVW5pZmllZCBJZGVvZ3JhcGhzIC4uIFlpIFJhZGljYWxzXG5cdFx0XHQoMHg0RTAwIDw9IGNvZGVQb2ludCAmJiBjb2RlUG9pbnQgPD0gMHhBNEM2KSB8fFxuXHRcdFx0Ly8gSGFuZ3VsIEphbW8gRXh0ZW5kZWQtQVxuXHRcdFx0KDB4QTk2MCA8PSBjb2RlUG9pbnQgJiYgY29kZVBvaW50IDw9IDB4QTk3QykgfHxcblx0XHRcdC8vIEhhbmd1bCBTeWxsYWJsZXNcblx0XHRcdCgweEFDMDAgPD0gY29kZVBvaW50ICYmIGNvZGVQb2ludCA8PSAweEQ3QTMpIHx8XG5cdFx0XHQvLyBDSksgQ29tcGF0aWJpbGl0eSBJZGVvZ3JhcGhzXG5cdFx0XHQoMHhGOTAwIDw9IGNvZGVQb2ludCAmJiBjb2RlUG9pbnQgPD0gMHhGQUZGKSB8fFxuXHRcdFx0Ly8gVmVydGljYWwgRm9ybXNcblx0XHRcdCgweEZFMTAgPD0gY29kZVBvaW50ICYmIGNvZGVQb2ludCA8PSAweEZFMTkpIHx8XG5cdFx0XHQvLyBDSksgQ29tcGF0aWJpbGl0eSBGb3JtcyAuLiBTbWFsbCBGb3JtIFZhcmlhbnRzXG5cdFx0XHQoMHhGRTMwIDw9IGNvZGVQb2ludCAmJiBjb2RlUG9pbnQgPD0gMHhGRTZCKSB8fFxuXHRcdFx0Ly8gSGFsZndpZHRoIGFuZCBGdWxsd2lkdGggRm9ybXNcblx0XHRcdCgweEZGMDEgPD0gY29kZVBvaW50ICYmIGNvZGVQb2ludCA8PSAweEZGNjApIHx8XG5cdFx0XHQoMHhGRkUwIDw9IGNvZGVQb2ludCAmJiBjb2RlUG9pbnQgPD0gMHhGRkU2KSB8fFxuXHRcdFx0Ly8gS2FuYSBTdXBwbGVtZW50XG5cdFx0XHQoMHgxQjAwMCA8PSBjb2RlUG9pbnQgJiYgY29kZVBvaW50IDw9IDB4MUIwMDEpIHx8XG5cdFx0XHQvLyBFbmNsb3NlZCBJZGVvZ3JhcGhpYyBTdXBwbGVtZW50XG5cdFx0XHQoMHgxRjIwMCA8PSBjb2RlUG9pbnQgJiYgY29kZVBvaW50IDw9IDB4MUYyNTEpIHx8XG5cdFx0XHQvLyBDSksgVW5pZmllZCBJZGVvZ3JhcGhzIEV4dGVuc2lvbiBCIC4uIFRlcnRpYXJ5IElkZW9ncmFwaGljIFBsYW5lXG5cdFx0XHQoMHgyMDAwMCA8PSBjb2RlUG9pbnQgJiYgY29kZVBvaW50IDw9IDB4M0ZGRkQpXG5cdFx0KVxuXHQpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdHJldHVybiBmYWxzZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGdWxsd2lkdGhDb2RlUG9pbnQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gaXNGdWxsd2lkdGhDb2RlUG9pbnQ7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsWUFBWTs7QUFFWixNQUFNQSxvQkFBb0IsR0FBR0MsU0FBUyxJQUFJO0VBQ3pDLElBQUlDLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDRixTQUFTLENBQUMsRUFBRTtJQUM1QixPQUFPLEtBQUs7RUFDYjs7RUFFQTtFQUNBO0VBQ0EsSUFDQ0EsU0FBUyxJQUFJLE1BQU0sS0FDbEJBLFNBQVMsSUFBSSxNQUFNO0VBQUk7RUFDdkJBLFNBQVMsS0FBSyxNQUFNO0VBQUk7RUFDeEJBLFNBQVMsS0FBSyxNQUFNO0VBQUk7RUFDeEI7RUFDQyxNQUFNLElBQUlBLFNBQVMsSUFBSUEsU0FBUyxJQUFJLE1BQU0sSUFBSUEsU0FBUyxLQUFLLE1BQU87RUFDcEU7RUFDQyxNQUFNLElBQUlBLFNBQVMsSUFBSUEsU0FBUyxJQUFJLE1BQU87RUFDNUM7RUFDQyxNQUFNLElBQUlBLFNBQVMsSUFBSUEsU0FBUyxJQUFJLE1BQU87RUFDNUM7RUFDQyxNQUFNLElBQUlBLFNBQVMsSUFBSUEsU0FBUyxJQUFJLE1BQU87RUFDNUM7RUFDQyxNQUFNLElBQUlBLFNBQVMsSUFBSUEsU0FBUyxJQUFJLE1BQU87RUFDNUM7RUFDQyxNQUFNLElBQUlBLFNBQVMsSUFBSUEsU0FBUyxJQUFJLE1BQU87RUFDNUM7RUFDQyxNQUFNLElBQUlBLFNBQVMsSUFBSUEsU0FBUyxJQUFJLE1BQU87RUFDNUM7RUFDQyxNQUFNLElBQUlBLFNBQVMsSUFBSUEsU0FBUyxJQUFJLE1BQU87RUFDNUM7RUFDQyxNQUFNLElBQUlBLFNBQVMsSUFBSUEsU0FBUyxJQUFJLE1BQU8sSUFDM0MsTUFBTSxJQUFJQSxTQUFTLElBQUlBLFNBQVMsSUFBSSxNQUFPO0VBQzVDO0VBQ0MsT0FBTyxJQUFJQSxTQUFTLElBQUlBLFNBQVMsSUFBSSxPQUFRO0VBQzlDO0VBQ0MsT0FBTyxJQUFJQSxTQUFTLElBQUlBLFNBQVMsSUFBSSxPQUFRO0VBQzlDO0VBQ0MsT0FBTyxJQUFJQSxTQUFTLElBQUlBLFNBQVMsSUFBSSxPQUFRLENBQzlDLEVBQ0E7SUFDRCxPQUFPLElBQUk7RUFDWjtFQUVBLE9BQU8sS0FBSztBQUNiLENBQUM7QUFFREcsTUFBTSxDQUFDQyxPQUFPLEdBQUdMLG9CQUFvQjtBQUNyQ0ksTUFBTSxDQUFDQyxPQUFPLENBQUNDLE9BQU8sR0FBR04sb0JBQW9CIn0=","map":{"version":3,"names":["isFullwidthCodePoint","codePoint","Number","isNaN","module","exports","default"],"sourceRoot":"C:\\code\\FluidFramework5\\node_modules\\.pnpm\\is-fullwidth-code-point@3.0.0\\node_modules\\is-fullwidth-code-point\\","sources":["index.js"],"sourcesContent":["/* eslint-disable yoda */\n'use strict';\n\nconst isFullwidthCodePoint = codePoint => {\n\tif (Number.isNaN(codePoint)) {\n\t\treturn false;\n\t}\n\n\t// Code points are derived from:\n\t// http://www.unix.org/Public/UNIDATA/EastAsianWidth.txt\n\tif (\n\t\tcodePoint >= 0x1100 && (\n\t\t\tcodePoint <= 0x115F || // Hangul Jamo\n\t\t\tcodePoint === 0x2329 || // LEFT-POINTING ANGLE BRACKET\n\t\t\tcodePoint === 0x232A || // RIGHT-POINTING ANGLE BRACKET\n\t\t\t// CJK Radicals Supplement .. Enclosed CJK Letters and Months\n\t\t\t(0x2E80 <= codePoint && codePoint <= 0x3247 && codePoint !== 0x303F) ||\n\t\t\t// Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A\n\t\t\t(0x3250 <= codePoint && codePoint <= 0x4DBF) ||\n\t\t\t// CJK Unified Ideographs .. Yi Radicals\n\t\t\t(0x4E00 <= codePoint && codePoint <= 0xA4C6) ||\n\t\t\t// Hangul Jamo Extended-A\n\t\t\t(0xA960 <= codePoint && codePoint <= 0xA97C) ||\n\t\t\t// Hangul Syllables\n\t\t\t(0xAC00 <= codePoint && codePoint <= 0xD7A3) ||\n\t\t\t// CJK Compatibility Ideographs\n\t\t\t(0xF900 <= codePoint && codePoint <= 0xFAFF) ||\n\t\t\t// Vertical Forms\n\t\t\t(0xFE10 <= codePoint && codePoint <= 0xFE19) ||\n\t\t\t// CJK Compatibility Forms .. Small Form Variants\n\t\t\t(0xFE30 <= codePoint && codePoint <= 0xFE6B) ||\n\t\t\t// Halfwidth and Fullwidth Forms\n\t\t\t(0xFF01 <= codePoint && codePoint <= 0xFF60) ||\n\t\t\t(0xFFE0 <= codePoint && codePoint <= 0xFFE6) ||\n\t\t\t// Kana Supplement\n\t\t\t(0x1B000 <= codePoint && codePoint <= 0x1B001) ||\n\t\t\t// Enclosed Ideographic Supplement\n\t\t\t(0x1F200 <= codePoint && codePoint <= 0x1F251) ||\n\t\t\t// CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane\n\t\t\t(0x20000 <= codePoint && codePoint <= 0x3FFFD)\n\t\t)\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\nmodule.exports = isFullwidthCodePoint;\nmodule.exports.default = isFullwidthCodePoint;\n"],"mappings":"AAAA;AACA,YAAY;;AAEZ,MAAMA,oBAAoB,GAAGC,SAAS,IAAI;EACzC,IAAIC,MAAM,CAACC,KAAK,CAACF,SAAS,CAAC,EAAE;IAC5B,OAAO,KAAK;EACb;;EAEA;EACA;EACA,IACCA,SAAS,IAAI,MAAM,KAClBA,SAAS,IAAI,MAAM;EAAI;EACvBA,SAAS,KAAK,MAAM;EAAI;EACxBA,SAAS,KAAK,MAAM;EAAI;EACxB;EACC,MAAM,IAAIA,SAAS,IAAIA,SAAS,IAAI,MAAM,IAAIA,SAAS,KAAK,MAAO;EACpE;EACC,MAAM,IAAIA,SAAS,IAAIA,SAAS,IAAI,MAAO;EAC5C;EACC,MAAM,IAAIA,SAAS,IAAIA,SAAS,IAAI,MAAO;EAC5C;EACC,MAAM,IAAIA,SAAS,IAAIA,SAAS,IAAI,MAAO;EAC5C;EACC,MAAM,IAAIA,SAAS,IAAIA,SAAS,IAAI,MAAO;EAC5C;EACC,MAAM,IAAIA,SAAS,IAAIA,SAAS,IAAI,MAAO;EAC5C;EACC,MAAM,IAAIA,SAAS,IAAIA,SAAS,IAAI,MAAO;EAC5C;EACC,MAAM,IAAIA,SAAS,IAAIA,SAAS,IAAI,MAAO;EAC5C;EACC,MAAM,IAAIA,SAAS,IAAIA,SAAS,IAAI,MAAO,IAC3C,MAAM,IAAIA,SAAS,IAAIA,SAAS,IAAI,MAAO;EAC5C;EACC,OAAO,IAAIA,SAAS,IAAIA,SAAS,IAAI,OAAQ;EAC9C;EACC,OAAO,IAAIA,SAAS,IAAIA,SAAS,IAAI,OAAQ;EAC9C;EACC,OAAO,IAAIA,SAAS,IAAIA,SAAS,IAAI,OAAQ,CAC9C,EACA;IACD,OAAO,IAAI;EACZ;EAEA,OAAO,KAAK;AACb,CAAC;AAEDG,MAAM,CAACC,OAAO,GAAGL,oBAAoB;AACrCI,MAAM,CAACC,OAAO,CAACC,OAAO,GAAGN,oBAAoB"}},"mtime":1674865348272},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\emoji-regex@8.0.0\\\\node_modules\\\\emoji-regex\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\emoji-regex@8.0.0\\\\node_modules\\\\emoji-regex\\\\index.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.22.6:development":{"value":{"code":"\"use strict\";\n\nmodule.exports = function () {\n  // https://mths.be/emoji\n  return /\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62(?:\\uDB40\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67|\\uDB40\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDB40\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73)\\uDB40\\uDC7F|\\uD83D\\uDC68(?:\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C\\uDFFB|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFE])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83D\\uDC68|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D[\\uDC66\\uDC67])|[\\u2695\\u2696\\u2708]\\uFE0F|\\uD83D[\\uDC66\\uDC67]|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|(?:\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708])\\uFE0F|\\uD83C\\uDFFB\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C[\\uDFFB-\\uDFFF])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFB\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)\\uD83C\\uDFFB|\\uD83E\\uDDD1(?:\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1)|(?:\\uD83E\\uDDD1\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D(?:\\uD83D[\\uDC68\\uDC69]))(?:\\uD83C[\\uDFFB-\\uDFFE])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83D\\uDC69(?:\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFB\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFC-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]))|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|(?:\\uD83E\\uDDD1\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D\\uDC41\\uFE0F\\u200D\\uD83D\\uDDE8|\\uD83D\\uDC69(?:\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708])|(?:(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)\\uFE0F|\\uD83D\\uDC6F|\\uD83E[\\uDD3C\\uDDDE\\uDDDF])\\u200D[\\u2640\\u2642]|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|\\u200D[\\u2640\\u2642])|\\uD83C\\uDFF4\\u200D\\u2620)\\uFE0F|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C\\uDFF3\\uFE0F\\u200D\\uD83C\\uDF08|\\uD83D\\uDC15\\u200D\\uD83E\\uDDBA|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67|\\uD83C\\uDDFD\\uD83C\\uDDF0|\\uD83C\\uDDF4\\uD83C\\uDDF2|\\uD83C\\uDDF6\\uD83C\\uDDE6|[#\\*0-9]\\uFE0F\\u20E3|\\uD83C\\uDDE7(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDF9(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF])|\\uD83C\\uDDEA(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA])|\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF7(?:\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC])|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF2(?:\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF])|\\uD83C\\uDDE6(?:\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF])|\\uD83C\\uDDF0(?:\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDED(?:\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA])|\\uD83C\\uDDE9(?:\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF])|\\uD83C\\uDDFE(?:\\uD83C[\\uDDEA\\uDDF9])|\\uD83C\\uDDEC(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE])|\\uD83C\\uDDF8(?:\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF])|\\uD83C\\uDDEB(?:\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7])|\\uD83C\\uDDF5(?:\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE])|\\uD83C\\uDDFB(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA])|\\uD83C\\uDDF3(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF])|\\uD83C\\uDDE8(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF])|\\uD83C\\uDDF1(?:\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE])|\\uD83C\\uDDFF(?:\\uD83C[\\uDDE6\\uDDF2\\uDDFC])|\\uD83C\\uDDFC(?:\\uD83C[\\uDDEB\\uDDF8])|\\uD83C\\uDDFA(?:\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF])|\\uD83C\\uDDEE(?:\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9])|\\uD83C\\uDDEF(?:\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2\\uDFC7]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC6B-\\uDC6D\\uDC70\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDCAA\\uDD74\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD36\\uDDB5\\uDDB6\\uDDBB\\uDDD2-\\uDDD5])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDED5\\uDEEB\\uDEEC\\uDEF4-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])|(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDED5\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])\\uFE0F|(?:[\\u261D\\u26F9\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2-\\uDFC4\\uDFC7\\uDFCA-\\uDFCC]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66-\\uDC78\\uDC7C\\uDC81-\\uDC83\\uDC85-\\uDC87\\uDC8F\\uDC91\\uDCAA\\uDD74\\uDD75\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE45-\\uDE47\\uDE4B-\\uDE4F\\uDEA3\\uDEB4-\\uDEB6\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1F\\uDD26\\uDD30-\\uDD39\\uDD3C-\\uDD3E\\uDDB5\\uDDB6\\uDDB8\\uDDB9\\uDDBB\\uDDCD-\\uDDCF\\uDDD1-\\uDDDD])/g;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["module","exports"],"sourceRoot":"C:\\code\\FluidFramework5\\node_modules\\.pnpm\\emoji-regex@8.0.0\\node_modules\\emoji-regex\\","sources":["index.js"],"sourcesContent":["\"use strict\";\n\nmodule.exports = function () {\n  // https://mths.be/emoji\n  return /\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62(?:\\uDB40\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67|\\uDB40\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDB40\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73)\\uDB40\\uDC7F|\\uD83D\\uDC68(?:\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C\\uDFFB|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFE])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83D\\uDC68|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D[\\uDC66\\uDC67])|[\\u2695\\u2696\\u2708]\\uFE0F|\\uD83D[\\uDC66\\uDC67]|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|(?:\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708])\\uFE0F|\\uD83C\\uDFFB\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C[\\uDFFB-\\uDFFF])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFB\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)\\uD83C\\uDFFB|\\uD83E\\uDDD1(?:\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1)|(?:\\uD83E\\uDDD1\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D(?:\\uD83D[\\uDC68\\uDC69]))(?:\\uD83C[\\uDFFB-\\uDFFE])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83D\\uDC69(?:\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFB\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFC-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]))|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|(?:\\uD83E\\uDDD1\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D\\uDC41\\uFE0F\\u200D\\uD83D\\uDDE8|\\uD83D\\uDC69(?:\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708])|(?:(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)\\uFE0F|\\uD83D\\uDC6F|\\uD83E[\\uDD3C\\uDDDE\\uDDDF])\\u200D[\\u2640\\u2642]|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|\\u200D[\\u2640\\u2642])|\\uD83C\\uDFF4\\u200D\\u2620)\\uFE0F|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C\\uDFF3\\uFE0F\\u200D\\uD83C\\uDF08|\\uD83D\\uDC15\\u200D\\uD83E\\uDDBA|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67|\\uD83C\\uDDFD\\uD83C\\uDDF0|\\uD83C\\uDDF4\\uD83C\\uDDF2|\\uD83C\\uDDF6\\uD83C\\uDDE6|[#\\*0-9]\\uFE0F\\u20E3|\\uD83C\\uDDE7(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDF9(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF])|\\uD83C\\uDDEA(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA])|\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF7(?:\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC])|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF2(?:\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF])|\\uD83C\\uDDE6(?:\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF])|\\uD83C\\uDDF0(?:\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDED(?:\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA])|\\uD83C\\uDDE9(?:\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF])|\\uD83C\\uDDFE(?:\\uD83C[\\uDDEA\\uDDF9])|\\uD83C\\uDDEC(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE])|\\uD83C\\uDDF8(?:\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF])|\\uD83C\\uDDEB(?:\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7])|\\uD83C\\uDDF5(?:\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE])|\\uD83C\\uDDFB(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA])|\\uD83C\\uDDF3(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF])|\\uD83C\\uDDE8(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF])|\\uD83C\\uDDF1(?:\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE])|\\uD83C\\uDDFF(?:\\uD83C[\\uDDE6\\uDDF2\\uDDFC])|\\uD83C\\uDDFC(?:\\uD83C[\\uDDEB\\uDDF8])|\\uD83C\\uDDFA(?:\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF])|\\uD83C\\uDDEE(?:\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9])|\\uD83C\\uDDEF(?:\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2\\uDFC7]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC6B-\\uDC6D\\uDC70\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDCAA\\uDD74\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD36\\uDDB5\\uDDB6\\uDDBB\\uDDD2-\\uDDD5])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDED5\\uDEEB\\uDEEC\\uDEF4-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])|(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDED5\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])\\uFE0F|(?:[\\u261D\\u26F9\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2-\\uDFC4\\uDFC7\\uDFCA-\\uDFCC]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66-\\uDC78\\uDC7C\\uDC81-\\uDC83\\uDC85-\\uDC87\\uDC8F\\uDC91\\uDCAA\\uDD74\\uDD75\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE45-\\uDE47\\uDE4B-\\uDE4F\\uDEA3\\uDEB4-\\uDEB6\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1F\\uDD26\\uDD30-\\uDD39\\uDD3C-\\uDD3E\\uDDB5\\uDDB6\\uDDB8\\uDDB9\\uDDBB\\uDDCD-\\uDDCF\\uDDD1-\\uDDDD])/g;\n};\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAG,YAAY;EAC3B;EACA,OAAO,u9TAAu9T;AACh+T,CAAC"}},"mtime":1674865367901},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\wrap-ansi@7.0.0\\\\node_modules\\\\wrap-ansi\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\wrap-ansi@7.0.0\\\\node_modules\\\\wrap-ansi\\\\index.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.22.6:development":{"value":{"code":"'use strict';\n\nconst stringWidth = require('string-width');\nconst stripAnsi = require('strip-ansi');\nconst ansiStyles = require('ansi-styles');\nconst ESCAPES = new Set(['\\u001B', '\\u009B']);\nconst END_CODE = 39;\nconst ANSI_ESCAPE_BELL = '\\u0007';\nconst ANSI_CSI = '[';\nconst ANSI_OSC = ']';\nconst ANSI_SGR_TERMINATOR = 'm';\nconst ANSI_ESCAPE_LINK = `${ANSI_OSC}8;;`;\nconst wrapAnsi = code => `${ESCAPES.values().next().value}${ANSI_CSI}${code}${ANSI_SGR_TERMINATOR}`;\nconst wrapAnsiHyperlink = uri => `${ESCAPES.values().next().value}${ANSI_ESCAPE_LINK}${uri}${ANSI_ESCAPE_BELL}`;\n\n// Calculate the length of words split on ' ', ignoring\n// the extra characters added by ansi escape codes\nconst wordLengths = string => string.split(' ').map(character => stringWidth(character));\n\n// Wrap a long word across multiple rows\n// Ansi escape codes do not count towards length\nconst wrapWord = (rows, word, columns) => {\n  const characters = [...word];\n  let isInsideEscape = false;\n  let isInsideLinkEscape = false;\n  let visible = stringWidth(stripAnsi(rows[rows.length - 1]));\n  for (const [index, character] of characters.entries()) {\n    const characterLength = stringWidth(character);\n    if (visible + characterLength <= columns) {\n      rows[rows.length - 1] += character;\n    } else {\n      rows.push(character);\n      visible = 0;\n    }\n    if (ESCAPES.has(character)) {\n      isInsideEscape = true;\n      isInsideLinkEscape = characters.slice(index + 1).join('').startsWith(ANSI_ESCAPE_LINK);\n    }\n    if (isInsideEscape) {\n      if (isInsideLinkEscape) {\n        if (character === ANSI_ESCAPE_BELL) {\n          isInsideEscape = false;\n          isInsideLinkEscape = false;\n        }\n      } else if (character === ANSI_SGR_TERMINATOR) {\n        isInsideEscape = false;\n      }\n      continue;\n    }\n    visible += characterLength;\n    if (visible === columns && index < characters.length - 1) {\n      rows.push('');\n      visible = 0;\n    }\n  }\n\n  // It's possible that the last row we copy over is only\n  // ansi escape characters, handle this edge-case\n  if (!visible && rows[rows.length - 1].length > 0 && rows.length > 1) {\n    rows[rows.length - 2] += rows.pop();\n  }\n};\n\n// Trims spaces from a string ignoring invisible sequences\nconst stringVisibleTrimSpacesRight = string => {\n  const words = string.split(' ');\n  let last = words.length;\n  while (last > 0) {\n    if (stringWidth(words[last - 1]) > 0) {\n      break;\n    }\n    last--;\n  }\n  if (last === words.length) {\n    return string;\n  }\n  return words.slice(0, last).join(' ') + words.slice(last).join('');\n};\n\n// The wrap-ansi module can be invoked in either 'hard' or 'soft' wrap mode\n//\n// 'hard' will never allow a string to take up more than columns characters\n//\n// 'soft' allows long words to expand past the column length\nconst exec = (string, columns, options = {}) => {\n  if (options.trim !== false && string.trim() === '') {\n    return '';\n  }\n  let returnValue = '';\n  let escapeCode;\n  let escapeUrl;\n  const lengths = wordLengths(string);\n  let rows = [''];\n  for (const [index, word] of string.split(' ').entries()) {\n    if (options.trim !== false) {\n      rows[rows.length - 1] = rows[rows.length - 1].trimStart();\n    }\n    let rowLength = stringWidth(rows[rows.length - 1]);\n    if (index !== 0) {\n      if (rowLength >= columns && (options.wordWrap === false || options.trim === false)) {\n        // If we start with a new word but the current row length equals the length of the columns, add a new row\n        rows.push('');\n        rowLength = 0;\n      }\n      if (rowLength > 0 || options.trim === false) {\n        rows[rows.length - 1] += ' ';\n        rowLength++;\n      }\n    }\n\n    // In 'hard' wrap mode, the length of a line is never allowed to extend past 'columns'\n    if (options.hard && lengths[index] > columns) {\n      const remainingColumns = columns - rowLength;\n      const breaksStartingThisLine = 1 + Math.floor((lengths[index] - remainingColumns - 1) / columns);\n      const breaksStartingNextLine = Math.floor((lengths[index] - 1) / columns);\n      if (breaksStartingNextLine < breaksStartingThisLine) {\n        rows.push('');\n      }\n      wrapWord(rows, word, columns);\n      continue;\n    }\n    if (rowLength + lengths[index] > columns && rowLength > 0 && lengths[index] > 0) {\n      if (options.wordWrap === false && rowLength < columns) {\n        wrapWord(rows, word, columns);\n        continue;\n      }\n      rows.push('');\n    }\n    if (rowLength + lengths[index] > columns && options.wordWrap === false) {\n      wrapWord(rows, word, columns);\n      continue;\n    }\n    rows[rows.length - 1] += word;\n  }\n  if (options.trim !== false) {\n    rows = rows.map(stringVisibleTrimSpacesRight);\n  }\n  const pre = [...rows.join('\\n')];\n  for (const [index, character] of pre.entries()) {\n    returnValue += character;\n    if (ESCAPES.has(character)) {\n      const {\n        groups\n      } = new RegExp(`(?:\\\\${ANSI_CSI}(?<code>\\\\d+)m|\\\\${ANSI_ESCAPE_LINK}(?<uri>.*)${ANSI_ESCAPE_BELL})`).exec(pre.slice(index).join('')) || {\n        groups: {}\n      };\n      if (groups.code !== undefined) {\n        const code = Number.parseFloat(groups.code);\n        escapeCode = code === END_CODE ? undefined : code;\n      } else if (groups.uri !== undefined) {\n        escapeUrl = groups.uri.length === 0 ? undefined : groups.uri;\n      }\n    }\n    const code = ansiStyles.codes.get(Number(escapeCode));\n    if (pre[index + 1] === '\\n') {\n      if (escapeUrl) {\n        returnValue += wrapAnsiHyperlink('');\n      }\n      if (escapeCode && code) {\n        returnValue += wrapAnsi(code);\n      }\n    } else if (character === '\\n') {\n      if (escapeCode && code) {\n        returnValue += wrapAnsi(escapeCode);\n      }\n      if (escapeUrl) {\n        returnValue += wrapAnsiHyperlink(escapeUrl);\n      }\n    }\n  }\n  return returnValue;\n};\n\n// For each newline, invoke the method separately\nmodule.exports = (string, columns, options) => {\n  return String(string).normalize().replace(/\\r\\n/g, '\\n').split('\\n').map(line => exec(line, columns, options)).join('\\n');\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["stringWidth","require","stripAnsi","ansiStyles","ESCAPES","Set","END_CODE","ANSI_ESCAPE_BELL","ANSI_CSI","ANSI_OSC","ANSI_SGR_TERMINATOR","ANSI_ESCAPE_LINK","wrapAnsi","code","values","next","value","wrapAnsiHyperlink","uri","wordLengths","string","split","map","character","wrapWord","rows","word","columns","characters","isInsideEscape","isInsideLinkEscape","visible","length","index","entries","characterLength","push","has","slice","join","startsWith","pop","stringVisibleTrimSpacesRight","words","last","exec","options","trim","returnValue","escapeCode","escapeUrl","lengths","trimStart","rowLength","wordWrap","hard","remainingColumns","breaksStartingThisLine","Math","floor","breaksStartingNextLine","pre","groups","RegExp","undefined","Number","parseFloat","codes","get","module","exports","String","normalize","replace","line"],"sourceRoot":"C:\\code\\FluidFramework5\\node_modules\\.pnpm\\wrap-ansi@7.0.0\\node_modules\\wrap-ansi\\","sources":["index.js"],"sourcesContent":["'use strict';\nconst stringWidth = require('string-width');\nconst stripAnsi = require('strip-ansi');\nconst ansiStyles = require('ansi-styles');\n\nconst ESCAPES = new Set([\n\t'\\u001B',\n\t'\\u009B'\n]);\n\nconst END_CODE = 39;\n\nconst ANSI_ESCAPE_BELL = '\\u0007';\nconst ANSI_CSI = '[';\nconst ANSI_OSC = ']';\nconst ANSI_SGR_TERMINATOR = 'm';\nconst ANSI_ESCAPE_LINK = `${ANSI_OSC}8;;`;\n\nconst wrapAnsi = code => `${ESCAPES.values().next().value}${ANSI_CSI}${code}${ANSI_SGR_TERMINATOR}`;\nconst wrapAnsiHyperlink = uri => `${ESCAPES.values().next().value}${ANSI_ESCAPE_LINK}${uri}${ANSI_ESCAPE_BELL}`;\n\n// Calculate the length of words split on ' ', ignoring\n// the extra characters added by ansi escape codes\nconst wordLengths = string => string.split(' ').map(character => stringWidth(character));\n\n// Wrap a long word across multiple rows\n// Ansi escape codes do not count towards length\nconst wrapWord = (rows, word, columns) => {\n\tconst characters = [...word];\n\n\tlet isInsideEscape = false;\n\tlet isInsideLinkEscape = false;\n\tlet visible = stringWidth(stripAnsi(rows[rows.length - 1]));\n\n\tfor (const [index, character] of characters.entries()) {\n\t\tconst characterLength = stringWidth(character);\n\n\t\tif (visible + characterLength <= columns) {\n\t\t\trows[rows.length - 1] += character;\n\t\t} else {\n\t\t\trows.push(character);\n\t\t\tvisible = 0;\n\t\t}\n\n\t\tif (ESCAPES.has(character)) {\n\t\t\tisInsideEscape = true;\n\t\t\tisInsideLinkEscape = characters.slice(index + 1).join('').startsWith(ANSI_ESCAPE_LINK);\n\t\t}\n\n\t\tif (isInsideEscape) {\n\t\t\tif (isInsideLinkEscape) {\n\t\t\t\tif (character === ANSI_ESCAPE_BELL) {\n\t\t\t\t\tisInsideEscape = false;\n\t\t\t\t\tisInsideLinkEscape = false;\n\t\t\t\t}\n\t\t\t} else if (character === ANSI_SGR_TERMINATOR) {\n\t\t\t\tisInsideEscape = false;\n\t\t\t}\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tvisible += characterLength;\n\n\t\tif (visible === columns && index < characters.length - 1) {\n\t\t\trows.push('');\n\t\t\tvisible = 0;\n\t\t}\n\t}\n\n\t// It's possible that the last row we copy over is only\n\t// ansi escape characters, handle this edge-case\n\tif (!visible && rows[rows.length - 1].length > 0 && rows.length > 1) {\n\t\trows[rows.length - 2] += rows.pop();\n\t}\n};\n\n// Trims spaces from a string ignoring invisible sequences\nconst stringVisibleTrimSpacesRight = string => {\n\tconst words = string.split(' ');\n\tlet last = words.length;\n\n\twhile (last > 0) {\n\t\tif (stringWidth(words[last - 1]) > 0) {\n\t\t\tbreak;\n\t\t}\n\n\t\tlast--;\n\t}\n\n\tif (last === words.length) {\n\t\treturn string;\n\t}\n\n\treturn words.slice(0, last).join(' ') + words.slice(last).join('');\n};\n\n// The wrap-ansi module can be invoked in either 'hard' or 'soft' wrap mode\n//\n// 'hard' will never allow a string to take up more than columns characters\n//\n// 'soft' allows long words to expand past the column length\nconst exec = (string, columns, options = {}) => {\n\tif (options.trim !== false && string.trim() === '') {\n\t\treturn '';\n\t}\n\n\tlet returnValue = '';\n\tlet escapeCode;\n\tlet escapeUrl;\n\n\tconst lengths = wordLengths(string);\n\tlet rows = [''];\n\n\tfor (const [index, word] of string.split(' ').entries()) {\n\t\tif (options.trim !== false) {\n\t\t\trows[rows.length - 1] = rows[rows.length - 1].trimStart();\n\t\t}\n\n\t\tlet rowLength = stringWidth(rows[rows.length - 1]);\n\n\t\tif (index !== 0) {\n\t\t\tif (rowLength >= columns && (options.wordWrap === false || options.trim === false)) {\n\t\t\t\t// If we start with a new word but the current row length equals the length of the columns, add a new row\n\t\t\t\trows.push('');\n\t\t\t\trowLength = 0;\n\t\t\t}\n\n\t\t\tif (rowLength > 0 || options.trim === false) {\n\t\t\t\trows[rows.length - 1] += ' ';\n\t\t\t\trowLength++;\n\t\t\t}\n\t\t}\n\n\t\t// In 'hard' wrap mode, the length of a line is never allowed to extend past 'columns'\n\t\tif (options.hard && lengths[index] > columns) {\n\t\t\tconst remainingColumns = (columns - rowLength);\n\t\t\tconst breaksStartingThisLine = 1 + Math.floor((lengths[index] - remainingColumns - 1) / columns);\n\t\t\tconst breaksStartingNextLine = Math.floor((lengths[index] - 1) / columns);\n\t\t\tif (breaksStartingNextLine < breaksStartingThisLine) {\n\t\t\t\trows.push('');\n\t\t\t}\n\n\t\t\twrapWord(rows, word, columns);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (rowLength + lengths[index] > columns && rowLength > 0 && lengths[index] > 0) {\n\t\t\tif (options.wordWrap === false && rowLength < columns) {\n\t\t\t\twrapWord(rows, word, columns);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\trows.push('');\n\t\t}\n\n\t\tif (rowLength + lengths[index] > columns && options.wordWrap === false) {\n\t\t\twrapWord(rows, word, columns);\n\t\t\tcontinue;\n\t\t}\n\n\t\trows[rows.length - 1] += word;\n\t}\n\n\tif (options.trim !== false) {\n\t\trows = rows.map(stringVisibleTrimSpacesRight);\n\t}\n\n\tconst pre = [...rows.join('\\n')];\n\n\tfor (const [index, character] of pre.entries()) {\n\t\treturnValue += character;\n\n\t\tif (ESCAPES.has(character)) {\n\t\t\tconst {groups} = new RegExp(`(?:\\\\${ANSI_CSI}(?<code>\\\\d+)m|\\\\${ANSI_ESCAPE_LINK}(?<uri>.*)${ANSI_ESCAPE_BELL})`).exec(pre.slice(index).join('')) || {groups: {}};\n\t\t\tif (groups.code !== undefined) {\n\t\t\t\tconst code = Number.parseFloat(groups.code);\n\t\t\t\tescapeCode = code === END_CODE ? undefined : code;\n\t\t\t} else if (groups.uri !== undefined) {\n\t\t\t\tescapeUrl = groups.uri.length === 0 ? undefined : groups.uri;\n\t\t\t}\n\t\t}\n\n\t\tconst code = ansiStyles.codes.get(Number(escapeCode));\n\n\t\tif (pre[index + 1] === '\\n') {\n\t\t\tif (escapeUrl) {\n\t\t\t\treturnValue += wrapAnsiHyperlink('');\n\t\t\t}\n\n\t\t\tif (escapeCode && code) {\n\t\t\t\treturnValue += wrapAnsi(code);\n\t\t\t}\n\t\t} else if (character === '\\n') {\n\t\t\tif (escapeCode && code) {\n\t\t\t\treturnValue += wrapAnsi(escapeCode);\n\t\t\t}\n\n\t\t\tif (escapeUrl) {\n\t\t\t\treturnValue += wrapAnsiHyperlink(escapeUrl);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn returnValue;\n};\n\n// For each newline, invoke the method separately\nmodule.exports = (string, columns, options) => {\n\treturn String(string)\n\t\t.normalize()\n\t\t.replace(/\\r\\n/g, '\\n')\n\t\t.split('\\n')\n\t\t.map(line => exec(line, columns, options))\n\t\t.join('\\n');\n};\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,WAAW,GAAGC,OAAO,CAAC,cAAc,CAAC;AAC3C,MAAMC,SAAS,GAAGD,OAAO,CAAC,YAAY,CAAC;AACvC,MAAME,UAAU,GAAGF,OAAO,CAAC,aAAa,CAAC;AAEzC,MAAMG,OAAO,GAAG,IAAIC,GAAG,CAAC,CACvB,QAAQ,EACR,QAAQ,CACR,CAAC;AAEF,MAAMC,QAAQ,GAAG,EAAE;AAEnB,MAAMC,gBAAgB,GAAG,QAAQ;AACjC,MAAMC,QAAQ,GAAG,GAAG;AACpB,MAAMC,QAAQ,GAAG,GAAG;AACpB,MAAMC,mBAAmB,GAAG,GAAG;AAC/B,MAAMC,gBAAgB,GAAI,GAAEF,QAAS,KAAI;AAEzC,MAAMG,QAAQ,GAAGC,IAAI,IAAK,GAAET,OAAO,CAACU,MAAM,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,KAAM,GAAER,QAAS,GAAEK,IAAK,GAAEH,mBAAoB,EAAC;AACnG,MAAMO,iBAAiB,GAAGC,GAAG,IAAK,GAAEd,OAAO,CAACU,MAAM,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,KAAM,GAAEL,gBAAiB,GAAEO,GAAI,GAAEX,gBAAiB,EAAC;;AAE/G;AACA;AACA,MAAMY,WAAW,GAAGC,MAAM,IAAIA,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,SAAS,IAAIvB,WAAW,CAACuB,SAAS,CAAC,CAAC;;AAExF;AACA;AACA,MAAMC,QAAQ,GAAGA,CAACC,IAAI,EAAEC,IAAI,EAAEC,OAAO,KAAK;EACzC,MAAMC,UAAU,GAAG,CAAC,GAAGF,IAAI,CAAC;EAE5B,IAAIG,cAAc,GAAG,KAAK;EAC1B,IAAIC,kBAAkB,GAAG,KAAK;EAC9B,IAAIC,OAAO,GAAG/B,WAAW,CAACE,SAAS,CAACuB,IAAI,CAACA,IAAI,CAACO,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;EAE3D,KAAK,MAAM,CAACC,KAAK,EAAEV,SAAS,CAAC,IAAIK,UAAU,CAACM,OAAO,CAAC,CAAC,EAAE;IACtD,MAAMC,eAAe,GAAGnC,WAAW,CAACuB,SAAS,CAAC;IAE9C,IAAIQ,OAAO,GAAGI,eAAe,IAAIR,OAAO,EAAE;MACzCF,IAAI,CAACA,IAAI,CAACO,MAAM,GAAG,CAAC,CAAC,IAAIT,SAAS;IACnC,CAAC,MAAM;MACNE,IAAI,CAACW,IAAI,CAACb,SAAS,CAAC;MACpBQ,OAAO,GAAG,CAAC;IACZ;IAEA,IAAI3B,OAAO,CAACiC,GAAG,CAACd,SAAS,CAAC,EAAE;MAC3BM,cAAc,GAAG,IAAI;MACrBC,kBAAkB,GAAGF,UAAU,CAACU,KAAK,CAACL,KAAK,GAAG,CAAC,CAAC,CAACM,IAAI,CAAC,EAAE,CAAC,CAACC,UAAU,CAAC7B,gBAAgB,CAAC;IACvF;IAEA,IAAIkB,cAAc,EAAE;MACnB,IAAIC,kBAAkB,EAAE;QACvB,IAAIP,SAAS,KAAKhB,gBAAgB,EAAE;UACnCsB,cAAc,GAAG,KAAK;UACtBC,kBAAkB,GAAG,KAAK;QAC3B;MACD,CAAC,MAAM,IAAIP,SAAS,KAAKb,mBAAmB,EAAE;QAC7CmB,cAAc,GAAG,KAAK;MACvB;MAEA;IACD;IAEAE,OAAO,IAAII,eAAe;IAE1B,IAAIJ,OAAO,KAAKJ,OAAO,IAAIM,KAAK,GAAGL,UAAU,CAACI,MAAM,GAAG,CAAC,EAAE;MACzDP,IAAI,CAACW,IAAI,CAAC,EAAE,CAAC;MACbL,OAAO,GAAG,CAAC;IACZ;EACD;;EAEA;EACA;EACA,IAAI,CAACA,OAAO,IAAIN,IAAI,CAACA,IAAI,CAACO,MAAM,GAAG,CAAC,CAAC,CAACA,MAAM,GAAG,CAAC,IAAIP,IAAI,CAACO,MAAM,GAAG,CAAC,EAAE;IACpEP,IAAI,CAACA,IAAI,CAACO,MAAM,GAAG,CAAC,CAAC,IAAIP,IAAI,CAACgB,GAAG,CAAC,CAAC;EACpC;AACD,CAAC;;AAED;AACA,MAAMC,4BAA4B,GAAGtB,MAAM,IAAI;EAC9C,MAAMuB,KAAK,GAAGvB,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC;EAC/B,IAAIuB,IAAI,GAAGD,KAAK,CAACX,MAAM;EAEvB,OAAOY,IAAI,GAAG,CAAC,EAAE;IAChB,IAAI5C,WAAW,CAAC2C,KAAK,CAACC,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;MACrC;IACD;IAEAA,IAAI,EAAE;EACP;EAEA,IAAIA,IAAI,KAAKD,KAAK,CAACX,MAAM,EAAE;IAC1B,OAAOZ,MAAM;EACd;EAEA,OAAOuB,KAAK,CAACL,KAAK,CAAC,CAAC,EAAEM,IAAI,CAAC,CAACL,IAAI,CAAC,GAAG,CAAC,GAAGI,KAAK,CAACL,KAAK,CAACM,IAAI,CAAC,CAACL,IAAI,CAAC,EAAE,CAAC;AACnE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMM,IAAI,GAAGA,CAACzB,MAAM,EAAEO,OAAO,EAAEmB,OAAO,GAAG,CAAC,CAAC,KAAK;EAC/C,IAAIA,OAAO,CAACC,IAAI,KAAK,KAAK,IAAI3B,MAAM,CAAC2B,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IACnD,OAAO,EAAE;EACV;EAEA,IAAIC,WAAW,GAAG,EAAE;EACpB,IAAIC,UAAU;EACd,IAAIC,SAAS;EAEb,MAAMC,OAAO,GAAGhC,WAAW,CAACC,MAAM,CAAC;EACnC,IAAIK,IAAI,GAAG,CAAC,EAAE,CAAC;EAEf,KAAK,MAAM,CAACQ,KAAK,EAAEP,IAAI,CAAC,IAAIN,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAACa,OAAO,CAAC,CAAC,EAAE;IACxD,IAAIY,OAAO,CAACC,IAAI,KAAK,KAAK,EAAE;MAC3BtB,IAAI,CAACA,IAAI,CAACO,MAAM,GAAG,CAAC,CAAC,GAAGP,IAAI,CAACA,IAAI,CAACO,MAAM,GAAG,CAAC,CAAC,CAACoB,SAAS,CAAC,CAAC;IAC1D;IAEA,IAAIC,SAAS,GAAGrD,WAAW,CAACyB,IAAI,CAACA,IAAI,CAACO,MAAM,GAAG,CAAC,CAAC,CAAC;IAElD,IAAIC,KAAK,KAAK,CAAC,EAAE;MAChB,IAAIoB,SAAS,IAAI1B,OAAO,KAAKmB,OAAO,CAACQ,QAAQ,KAAK,KAAK,IAAIR,OAAO,CAACC,IAAI,KAAK,KAAK,CAAC,EAAE;QACnF;QACAtB,IAAI,CAACW,IAAI,CAAC,EAAE,CAAC;QACbiB,SAAS,GAAG,CAAC;MACd;MAEA,IAAIA,SAAS,GAAG,CAAC,IAAIP,OAAO,CAACC,IAAI,KAAK,KAAK,EAAE;QAC5CtB,IAAI,CAACA,IAAI,CAACO,MAAM,GAAG,CAAC,CAAC,IAAI,GAAG;QAC5BqB,SAAS,EAAE;MACZ;IACD;;IAEA;IACA,IAAIP,OAAO,CAACS,IAAI,IAAIJ,OAAO,CAAClB,KAAK,CAAC,GAAGN,OAAO,EAAE;MAC7C,MAAM6B,gBAAgB,GAAI7B,OAAO,GAAG0B,SAAU;MAC9C,MAAMI,sBAAsB,GAAG,CAAC,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACR,OAAO,CAAClB,KAAK,CAAC,GAAGuB,gBAAgB,GAAG,CAAC,IAAI7B,OAAO,CAAC;MAChG,MAAMiC,sBAAsB,GAAGF,IAAI,CAACC,KAAK,CAAC,CAACR,OAAO,CAAClB,KAAK,CAAC,GAAG,CAAC,IAAIN,OAAO,CAAC;MACzE,IAAIiC,sBAAsB,GAAGH,sBAAsB,EAAE;QACpDhC,IAAI,CAACW,IAAI,CAAC,EAAE,CAAC;MACd;MAEAZ,QAAQ,CAACC,IAAI,EAAEC,IAAI,EAAEC,OAAO,CAAC;MAC7B;IACD;IAEA,IAAI0B,SAAS,GAAGF,OAAO,CAAClB,KAAK,CAAC,GAAGN,OAAO,IAAI0B,SAAS,GAAG,CAAC,IAAIF,OAAO,CAAClB,KAAK,CAAC,GAAG,CAAC,EAAE;MAChF,IAAIa,OAAO,CAACQ,QAAQ,KAAK,KAAK,IAAID,SAAS,GAAG1B,OAAO,EAAE;QACtDH,QAAQ,CAACC,IAAI,EAAEC,IAAI,EAAEC,OAAO,CAAC;QAC7B;MACD;MAEAF,IAAI,CAACW,IAAI,CAAC,EAAE,CAAC;IACd;IAEA,IAAIiB,SAAS,GAAGF,OAAO,CAAClB,KAAK,CAAC,GAAGN,OAAO,IAAImB,OAAO,CAACQ,QAAQ,KAAK,KAAK,EAAE;MACvE9B,QAAQ,CAACC,IAAI,EAAEC,IAAI,EAAEC,OAAO,CAAC;MAC7B;IACD;IAEAF,IAAI,CAACA,IAAI,CAACO,MAAM,GAAG,CAAC,CAAC,IAAIN,IAAI;EAC9B;EAEA,IAAIoB,OAAO,CAACC,IAAI,KAAK,KAAK,EAAE;IAC3BtB,IAAI,GAAGA,IAAI,CAACH,GAAG,CAACoB,4BAA4B,CAAC;EAC9C;EAEA,MAAMmB,GAAG,GAAG,CAAC,GAAGpC,IAAI,CAACc,IAAI,CAAC,IAAI,CAAC,CAAC;EAEhC,KAAK,MAAM,CAACN,KAAK,EAAEV,SAAS,CAAC,IAAIsC,GAAG,CAAC3B,OAAO,CAAC,CAAC,EAAE;IAC/Cc,WAAW,IAAIzB,SAAS;IAExB,IAAInB,OAAO,CAACiC,GAAG,CAACd,SAAS,CAAC,EAAE;MAC3B,MAAM;QAACuC;MAAM,CAAC,GAAG,IAAIC,MAAM,CAAE,QAAOvD,QAAS,oBAAmBG,gBAAiB,aAAYJ,gBAAiB,GAAE,CAAC,CAACsC,IAAI,CAACgB,GAAG,CAACvB,KAAK,CAACL,KAAK,CAAC,CAACM,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI;QAACuB,MAAM,EAAE,CAAC;MAAC,CAAC;MACjK,IAAIA,MAAM,CAACjD,IAAI,KAAKmD,SAAS,EAAE;QAC9B,MAAMnD,IAAI,GAAGoD,MAAM,CAACC,UAAU,CAACJ,MAAM,CAACjD,IAAI,CAAC;QAC3CoC,UAAU,GAAGpC,IAAI,KAAKP,QAAQ,GAAG0D,SAAS,GAAGnD,IAAI;MAClD,CAAC,MAAM,IAAIiD,MAAM,CAAC5C,GAAG,KAAK8C,SAAS,EAAE;QACpCd,SAAS,GAAGY,MAAM,CAAC5C,GAAG,CAACc,MAAM,KAAK,CAAC,GAAGgC,SAAS,GAAGF,MAAM,CAAC5C,GAAG;MAC7D;IACD;IAEA,MAAML,IAAI,GAAGV,UAAU,CAACgE,KAAK,CAACC,GAAG,CAACH,MAAM,CAAChB,UAAU,CAAC,CAAC;IAErD,IAAIY,GAAG,CAAC5B,KAAK,GAAG,CAAC,CAAC,KAAK,IAAI,EAAE;MAC5B,IAAIiB,SAAS,EAAE;QACdF,WAAW,IAAI/B,iBAAiB,CAAC,EAAE,CAAC;MACrC;MAEA,IAAIgC,UAAU,IAAIpC,IAAI,EAAE;QACvBmC,WAAW,IAAIpC,QAAQ,CAACC,IAAI,CAAC;MAC9B;IACD,CAAC,MAAM,IAAIU,SAAS,KAAK,IAAI,EAAE;MAC9B,IAAI0B,UAAU,IAAIpC,IAAI,EAAE;QACvBmC,WAAW,IAAIpC,QAAQ,CAACqC,UAAU,CAAC;MACpC;MAEA,IAAIC,SAAS,EAAE;QACdF,WAAW,IAAI/B,iBAAiB,CAACiC,SAAS,CAAC;MAC5C;IACD;EACD;EAEA,OAAOF,WAAW;AACnB,CAAC;;AAED;AACAqB,MAAM,CAACC,OAAO,GAAG,CAAClD,MAAM,EAAEO,OAAO,EAAEmB,OAAO,KAAK;EAC9C,OAAOyB,MAAM,CAACnD,MAAM,CAAC,CACnBoD,SAAS,CAAC,CAAC,CACXC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CACtBpD,KAAK,CAAC,IAAI,CAAC,CACXC,GAAG,CAACoD,IAAI,IAAI7B,IAAI,CAAC6B,IAAI,EAAE/C,OAAO,EAAEmB,OAAO,CAAC,CAAC,CACzCP,IAAI,CAAC,IAAI,CAAC;AACb,CAAC"}},"mtime":1674865326386},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\escalade@3.1.1\\\\node_modules\\\\escalade\\\\sync\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\escalade@3.1.1\\\\node_modules\\\\escalade\\\\sync\\\\index.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.22.6:development":{"value":{"code":"\"use strict\";\n\nconst {\n  dirname,\n  resolve\n} = require('path');\nconst {\n  readdirSync,\n  statSync\n} = require('fs');\nmodule.exports = function (start, callback) {\n  let dir = resolve('.', start);\n  let tmp,\n    stats = statSync(dir);\n  if (!stats.isDirectory()) {\n    dir = dirname(dir);\n  }\n  while (true) {\n    tmp = callback(dir, readdirSync(dir));\n    if (tmp) return resolve(dir, tmp);\n    dir = dirname(tmp = dir);\n    if (tmp === dir) break;\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkaXJuYW1lIiwicmVzb2x2ZSIsInJlcXVpcmUiLCJyZWFkZGlyU3luYyIsInN0YXRTeW5jIiwibW9kdWxlIiwiZXhwb3J0cyIsInN0YXJ0IiwiY2FsbGJhY2siLCJkaXIiLCJ0bXAiLCJzdGF0cyIsImlzRGlyZWN0b3J5Il0sInNvdXJjZVJvb3QiOiJDOlxcY29kZVxcRmx1aWRGcmFtZXdvcms1XFxub2RlX21vZHVsZXNcXC5wbnBtXFxlc2NhbGFkZUAzLjEuMVxcbm9kZV9tb2R1bGVzXFxlc2NhbGFkZVxcc3luY1xcIiwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IGRpcm5hbWUsIHJlc29sdmUgfSA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHsgcmVhZGRpclN5bmMsIHN0YXRTeW5jIH0gPSByZXF1aXJlKCdmcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdGFydCwgY2FsbGJhY2spIHtcblx0bGV0IGRpciA9IHJlc29sdmUoJy4nLCBzdGFydCk7XG5cdGxldCB0bXAsIHN0YXRzID0gc3RhdFN5bmMoZGlyKTtcblxuXHRpZiAoIXN0YXRzLmlzRGlyZWN0b3J5KCkpIHtcblx0XHRkaXIgPSBkaXJuYW1lKGRpcik7XG5cdH1cblxuXHR3aGlsZSAodHJ1ZSkge1xuXHRcdHRtcCA9IGNhbGxiYWNrKGRpciwgcmVhZGRpclN5bmMoZGlyKSk7XG5cdFx0aWYgKHRtcCkgcmV0dXJuIHJlc29sdmUoZGlyLCB0bXApO1xuXHRcdGRpciA9IGRpcm5hbWUodG1wID0gZGlyKTtcblx0XHRpZiAodG1wID09PSBkaXIpIGJyZWFrO1xuXHR9XG59XG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTTtFQUFFQSxPQUFPO0VBQUVDO0FBQVEsQ0FBQyxHQUFHQyxPQUFPLENBQUMsTUFBTSxDQUFDO0FBQzVDLE1BQU07RUFBRUMsV0FBVztFQUFFQztBQUFTLENBQUMsR0FBR0YsT0FBTyxDQUFDLElBQUksQ0FBQztBQUUvQ0csTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsS0FBSyxFQUFFQyxRQUFRLEVBQUU7RUFDM0MsSUFBSUMsR0FBRyxHQUFHUixPQUFPLENBQUMsR0FBRyxFQUFFTSxLQUFLLENBQUM7RUFDN0IsSUFBSUcsR0FBRztJQUFFQyxLQUFLLEdBQUdQLFFBQVEsQ0FBQ0ssR0FBRyxDQUFDO0VBRTlCLElBQUksQ0FBQ0UsS0FBSyxDQUFDQyxXQUFXLENBQUMsQ0FBQyxFQUFFO0lBQ3pCSCxHQUFHLEdBQUdULE9BQU8sQ0FBQ1MsR0FBRyxDQUFDO0VBQ25CO0VBRUEsT0FBTyxJQUFJLEVBQUU7SUFDWkMsR0FBRyxHQUFHRixRQUFRLENBQUNDLEdBQUcsRUFBRU4sV0FBVyxDQUFDTSxHQUFHLENBQUMsQ0FBQztJQUNyQyxJQUFJQyxHQUFHLEVBQUUsT0FBT1QsT0FBTyxDQUFDUSxHQUFHLEVBQUVDLEdBQUcsQ0FBQztJQUNqQ0QsR0FBRyxHQUFHVCxPQUFPLENBQUNVLEdBQUcsR0FBR0QsR0FBRyxDQUFDO0lBQ3hCLElBQUlDLEdBQUcsS0FBS0QsR0FBRyxFQUFFO0VBQ2xCO0FBQ0QsQ0FBQyJ9","map":{"version":3,"names":["dirname","resolve","require","readdirSync","statSync","module","exports","start","callback","dir","tmp","stats","isDirectory"],"sourceRoot":"C:\\code\\FluidFramework5\\node_modules\\.pnpm\\escalade@3.1.1\\node_modules\\escalade\\sync\\","sources":["index.js"],"sourcesContent":["const { dirname, resolve } = require('path');\nconst { readdirSync, statSync } = require('fs');\n\nmodule.exports = function (start, callback) {\n\tlet dir = resolve('.', start);\n\tlet tmp, stats = statSync(dir);\n\n\tif (!stats.isDirectory()) {\n\t\tdir = dirname(dir);\n\t}\n\n\twhile (true) {\n\t\ttmp = callback(dir, readdirSync(dir));\n\t\tif (tmp) return resolve(dir, tmp);\n\t\tdir = dirname(tmp = dir);\n\t\tif (tmp === dir) break;\n\t}\n}\n"],"mappings":";;AAAA,MAAM;EAAEA,OAAO;EAAEC;AAAQ,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5C,MAAM;EAAEC,WAAW;EAAEC;AAAS,CAAC,GAAGF,OAAO,CAAC,IAAI,CAAC;AAE/CG,MAAM,CAACC,OAAO,GAAG,UAAUC,KAAK,EAAEC,QAAQ,EAAE;EAC3C,IAAIC,GAAG,GAAGR,OAAO,CAAC,GAAG,EAAEM,KAAK,CAAC;EAC7B,IAAIG,GAAG;IAAEC,KAAK,GAAGP,QAAQ,CAACK,GAAG,CAAC;EAE9B,IAAI,CAACE,KAAK,CAACC,WAAW,CAAC,CAAC,EAAE;IACzBH,GAAG,GAAGT,OAAO,CAACS,GAAG,CAAC;EACnB;EAEA,OAAO,IAAI,EAAE;IACZC,GAAG,GAAGF,QAAQ,CAACC,GAAG,EAAEN,WAAW,CAACM,GAAG,CAAC,CAAC;IACrC,IAAIC,GAAG,EAAE,OAAOT,OAAO,CAACQ,GAAG,EAAEC,GAAG,CAAC;IACjCD,GAAG,GAAGT,OAAO,CAACU,GAAG,GAAGD,GAAG,CAAC;IACxB,IAAIC,GAAG,KAAKD,GAAG,EAAE;EAClB;AACD,CAAC"}},"mtime":1674865335172},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\get-caller-file@2.0.5\\\\node_modules\\\\get-caller-file\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\get-caller-file@2.0.5\\\\node_modules\\\\get-caller-file\\\\index.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.22.6:development":{"value":{"code":"\"use strict\";\n\n// Call this function in a another function to find out the file from\n// which that function was called from. (Inspects the v8 stack trace)\n//\n// Inspired by http://stackoverflow.com/questions/13227489\nmodule.exports = function getCallerFile(position) {\n  if (position === void 0) {\n    position = 2;\n  }\n  if (position >= Error.stackTraceLimit) {\n    throw new TypeError('getCallerFile(position) requires position be less then Error.stackTraceLimit but position was: `' + position + '` and Error.stackTraceLimit was: `' + Error.stackTraceLimit + '`');\n  }\n  var oldPrepareStackTrace = Error.prepareStackTrace;\n  Error.prepareStackTrace = function (_, stack) {\n    return stack;\n  };\n  var stack = new Error().stack;\n  Error.prepareStackTrace = oldPrepareStackTrace;\n  if (stack !== null && typeof stack === 'object') {\n    // stack[0] holds this file\n    // stack[1] holds where this function was called\n    // stack[2] holds the file we're interested in\n    return stack[position] ? stack[position].getFileName() : undefined;\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZ2V0Q2FsbGVyRmlsZSIsInBvc2l0aW9uIiwiRXJyb3IiLCJzdGFja1RyYWNlTGltaXQiLCJUeXBlRXJyb3IiLCJvbGRQcmVwYXJlU3RhY2tUcmFjZSIsInByZXBhcmVTdGFja1RyYWNlIiwiXyIsInN0YWNrIiwiZ2V0RmlsZU5hbWUiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IkM6XFxjb2RlXFxGbHVpZEZyYW1ld29yazVcXG5vZGVfbW9kdWxlc1xcLnBucG1cXGdldC1jYWxsZXItZmlsZUAyLjAuNVxcbm9kZV9tb2R1bGVzXFxnZXQtY2FsbGVyLWZpbGVcXCIsInNvdXJjZXMiOlsiaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQUEsTUFBQSxDQUFBQyxPQUFBLEdBQVMsU0FBU0MsYUFBYUEsQ0FBQ0MsUUFBWTtFQUFaLElBQUFBLFFBQUE7SUFBQUEsUUFBQSxJQUFZO0VBQUE7RUFDMUMsSUFBSUEsUUFBUSxJQUFJQyxLQUFLLENBQUNDLGVBQWUsRUFBRTtJQUNyQyxNQUFNLElBQUlDLFNBQVMsQ0FBQyxrR0FBa0csR0FBR0gsUUFBUSxHQUFHLG9DQUFvQyxHQUFHQyxLQUFLLENBQUNDLGVBQWUsR0FBRyxHQUFHLENBQUM7O0VBR3pNLElBQU1FLG9CQUFvQixHQUFHSCxLQUFLLENBQUNJLGlCQUFpQjtFQUNwREosS0FBSyxDQUFDSSxpQkFBaUIsR0FBRyxVQUFDQyxDQUFDLEVBQUVDLEtBQUs7SUFBTSxPQUFBQSxLQUFLO0VBQUwsQ0FBSztFQUM5QyxJQUFNQSxLQUFLLEdBQUcsSUFBSU4sS0FBSyxFQUFFLENBQUNNLEtBQUs7RUFDL0JOLEtBQUssQ0FBQ0ksaUJBQWlCLEdBQUdELG9CQUFvQjtFQUc5QyxJQUFJRyxLQUFLLEtBQUssSUFBSSxJQUFJLE9BQU9BLEtBQUssS0FBSyxRQUFRLEVBQUU7SUFDL0M7SUFDQTtJQUNBO0lBQ0EsT0FBT0EsS0FBSyxDQUFDUCxRQUFRLENBQUMsR0FBSU8sS0FBSyxDQUFDUCxRQUFRLENBQVMsQ0FBQ1EsV0FBVyxFQUFFLEdBQUdDLFNBQVM7O0FBRS9FLENBQUMifQ==","map":{"version":3,"names":["module","exports","getCallerFile","position","Error","stackTraceLimit","TypeError","oldPrepareStackTrace","prepareStackTrace","_","stack","getFileName","undefined"],"sourceRoot":"C:\\code\\FluidFramework5\\node_modules\\.pnpm\\get-caller-file@2.0.5\\node_modules\\get-caller-file\\","sources":["index.ts"],"sourcesContent":[null],"mappings":";;AAAA;AACA;AACA;AACA;AAEAA,MAAA,CAAAC,OAAA,GAAS,SAASC,aAAaA,CAACC,QAAY;EAAZ,IAAAA,QAAA;IAAAA,QAAA,IAAY;EAAA;EAC1C,IAAIA,QAAQ,IAAIC,KAAK,CAACC,eAAe,EAAE;IACrC,MAAM,IAAIC,SAAS,CAAC,kGAAkG,GAAGH,QAAQ,GAAG,oCAAoC,GAAGC,KAAK,CAACC,eAAe,GAAG,GAAG,CAAC;;EAGzM,IAAME,oBAAoB,GAAGH,KAAK,CAACI,iBAAiB;EACpDJ,KAAK,CAACI,iBAAiB,GAAG,UAACC,CAAC,EAAEC,KAAK;IAAM,OAAAA,KAAK;EAAL,CAAK;EAC9C,IAAMA,KAAK,GAAG,IAAIN,KAAK,EAAE,CAACM,KAAK;EAC/BN,KAAK,CAACI,iBAAiB,GAAGD,oBAAoB;EAG9C,IAAIG,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC/C;IACA;IACA;IACA,OAAOA,KAAK,CAACP,QAAQ,CAAC,GAAIO,KAAK,CAACP,QAAQ,CAAS,CAACQ,WAAW,EAAE,GAAGC,SAAS;;AAE/E,CAAC"}},"mtime":1674865325026},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\require-directory@2.1.1\\\\node_modules\\\\require-directory\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\require-directory@2.1.1\\\\node_modules\\\\require-directory\\\\index.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.22.6:development":{"value":{"code":"'use strict';\n\nvar fs = require('fs'),\n  join = require('path').join,\n  resolve = require('path').resolve,\n  dirname = require('path').dirname,\n  defaultOptions = {\n    extensions: ['js', 'json', 'coffee'],\n    recurse: true,\n    rename: function (name) {\n      return name;\n    },\n    visit: function (obj) {\n      return obj;\n    }\n  };\nfunction checkFileInclusion(path, filename, options) {\n  return (\n    // verify file has valid extension\n    new RegExp('\\\\.(' + options.extensions.join('|') + ')$', 'i').test(filename) &&\n    // if options.include is a RegExp, evaluate it and make sure the path passes\n    !(options.include && options.include instanceof RegExp && !options.include.test(path)) &&\n    // if options.include is a function, evaluate it and make sure the path passes\n    !(options.include && typeof options.include === 'function' && !options.include(path, filename)) &&\n    // if options.exclude is a RegExp, evaluate it and make sure the path doesn't pass\n    !(options.exclude && options.exclude instanceof RegExp && options.exclude.test(path)) &&\n    // if options.exclude is a function, evaluate it and make sure the path doesn't pass\n    !(options.exclude && typeof options.exclude === 'function' && options.exclude(path, filename))\n  );\n}\nfunction requireDirectory(m, path, options) {\n  var retval = {};\n\n  // path is optional\n  if (path && !options && typeof path !== 'string') {\n    options = path;\n    path = null;\n  }\n\n  // default options\n  options = options || {};\n  for (var prop in defaultOptions) {\n    if (typeof options[prop] === 'undefined') {\n      options[prop] = defaultOptions[prop];\n    }\n  }\n\n  // if no path was passed in, assume the equivelant of __dirname from caller\n  // otherwise, resolve path relative to the equivalent of __dirname\n  path = !path ? dirname(m.filename) : resolve(dirname(m.filename), path);\n\n  // get the path of each file in specified directory, append to current tree node, recurse\n  fs.readdirSync(path).forEach(function (filename) {\n    var joined = join(path, filename),\n      files,\n      key,\n      obj;\n    if (fs.statSync(joined).isDirectory() && options.recurse) {\n      // this node is a directory; recurse\n      files = requireDirectory(m, joined, options);\n      // exclude empty directories\n      if (Object.keys(files).length) {\n        retval[options.rename(filename, joined, filename)] = files;\n      }\n    } else {\n      if (joined !== m.filename && checkFileInclusion(joined, filename, options)) {\n        // hash node key shouldn't include file extension\n        key = filename.substring(0, filename.lastIndexOf('.'));\n        obj = m.require(joined);\n        retval[options.rename(key, joined, filename)] = options.visit(obj, joined, filename) || obj;\n      }\n    }\n  });\n  return retval;\n}\nmodule.exports = requireDirectory;\nmodule.exports.defaults = defaultOptions;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["fs","require","join","resolve","dirname","defaultOptions","extensions","recurse","rename","name","visit","obj","checkFileInclusion","path","filename","options","RegExp","test","include","exclude","requireDirectory","m","retval","prop","readdirSync","forEach","joined","files","key","statSync","isDirectory","Object","keys","length","substring","lastIndexOf","module","exports","defaults"],"sourceRoot":"C:\\code\\FluidFramework5\\node_modules\\.pnpm\\require-directory@2.1.1\\node_modules\\require-directory\\","sources":["index.js"],"sourcesContent":["'use strict';\n\nvar fs = require('fs'),\n  join = require('path').join,\n  resolve = require('path').resolve,\n  dirname = require('path').dirname,\n  defaultOptions = {\n    extensions: ['js', 'json', 'coffee'],\n    recurse: true,\n    rename: function (name) {\n      return name;\n    },\n    visit: function (obj) {\n      return obj;\n    }\n  };\n\nfunction checkFileInclusion(path, filename, options) {\n  return (\n    // verify file has valid extension\n    (new RegExp('\\\\.(' + options.extensions.join('|') + ')$', 'i').test(filename)) &&\n\n    // if options.include is a RegExp, evaluate it and make sure the path passes\n    !(options.include && options.include instanceof RegExp && !options.include.test(path)) &&\n\n    // if options.include is a function, evaluate it and make sure the path passes\n    !(options.include && typeof options.include === 'function' && !options.include(path, filename)) &&\n\n    // if options.exclude is a RegExp, evaluate it and make sure the path doesn't pass\n    !(options.exclude && options.exclude instanceof RegExp && options.exclude.test(path)) &&\n\n    // if options.exclude is a function, evaluate it and make sure the path doesn't pass\n    !(options.exclude && typeof options.exclude === 'function' && options.exclude(path, filename))\n  );\n}\n\nfunction requireDirectory(m, path, options) {\n  var retval = {};\n\n  // path is optional\n  if (path && !options && typeof path !== 'string') {\n    options = path;\n    path = null;\n  }\n\n  // default options\n  options = options || {};\n  for (var prop in defaultOptions) {\n    if (typeof options[prop] === 'undefined') {\n      options[prop] = defaultOptions[prop];\n    }\n  }\n\n  // if no path was passed in, assume the equivelant of __dirname from caller\n  // otherwise, resolve path relative to the equivalent of __dirname\n  path = !path ? dirname(m.filename) : resolve(dirname(m.filename), path);\n\n  // get the path of each file in specified directory, append to current tree node, recurse\n  fs.readdirSync(path).forEach(function (filename) {\n    var joined = join(path, filename),\n      files,\n      key,\n      obj;\n\n    if (fs.statSync(joined).isDirectory() && options.recurse) {\n      // this node is a directory; recurse\n      files = requireDirectory(m, joined, options);\n      // exclude empty directories\n      if (Object.keys(files).length) {\n        retval[options.rename(filename, joined, filename)] = files;\n      }\n    } else {\n      if (joined !== m.filename && checkFileInclusion(joined, filename, options)) {\n        // hash node key shouldn't include file extension\n        key = filename.substring(0, filename.lastIndexOf('.'));\n        obj = m.require(joined);\n        retval[options.rename(key, joined, filename)] = options.visit(obj, joined, filename) || obj;\n      }\n    }\n  });\n\n  return retval;\n}\n\nmodule.exports = requireDirectory;\nmodule.exports.defaults = defaultOptions;\n"],"mappings":"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"}},"mtime":1674865325045},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\nconf@0.12.0\\\\node_modules\\\\nconf\\\\lib\\\\nconf\\\\stores\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\nconf@0.12.0\\\\node_modules\\\\nconf\\\\lib\\\\nconf\\\\stores\\\\env.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.22.6:development":{"value":{"code":"\"use strict\";\n\n/*\n * env.js: Simple memory-based store for environment variables\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar util = require('util'),\n  common = require('../common'),\n  Memory = require('./memory').Memory;\n\n//\n// ### function Env (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Env nconf store, a simple abstraction\n// around the Memory store that can read process environment variables.\n//\nvar Env = exports.Env = function (options) {\n  Memory.call(this, options);\n  options = options || {};\n  this.type = 'env';\n  this.readOnly = true;\n  this.whitelist = options.whitelist || [];\n  this.separator = options.separator || '';\n  this.lowerCase = options.lowerCase || false;\n  this.parseValues = options.parseValues || false;\n  this.transform = options.transform || false;\n  if ({}.toString.call(options.match) === '[object RegExp]' && typeof options !== 'string') {\n    this.match = options.match;\n  }\n  if (options instanceof Array) {\n    this.whitelist = options;\n  }\n  if (typeof options === 'string' || options instanceof RegExp) {\n    this.separator = options;\n  }\n};\n\n// Inherit from the Memory store\nutil.inherits(Env, Memory);\n\n//\n// ### function loadSync ()\n// Loads the data passed in from `process.env` into this instance.\n//\nEnv.prototype.loadSync = function () {\n  this.loadEnv();\n  return this.store;\n};\n\n//\n// ### function loadEnv ()\n// Loads the data passed in from `process.env` into this instance.\n//\nEnv.prototype.loadEnv = function () {\n  var self = this;\n  var env = process.env;\n  if (this.lowerCase) {\n    env = {};\n    Object.keys(process.env).forEach(function (key) {\n      env[key.toLowerCase()] = process.env[key];\n    });\n  }\n  if (this.transform) {\n    env = common.transform(env, this.transform);\n  }\n  this.readOnly = false;\n  Object.keys(env).filter(function (key) {\n    if (self.match && self.whitelist.length) {\n      return key.match(self.match) || self.whitelist.indexOf(key) !== -1;\n    } else if (self.match) {\n      return key.match(self.match);\n    } else {\n      return !self.whitelist.length || self.whitelist.indexOf(key) !== -1;\n    }\n  }).forEach(function (key) {\n    var val = env[key];\n    if (self.parseValues) {\n      val = common.parseValues(val);\n    }\n    if (self.separator) {\n      self.set(common.key.apply(common, key.split(self.separator)), val);\n    } else {\n      self.set(key, val);\n    }\n  });\n  this.readOnly = true;\n  return this.store;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1dGlsIiwicmVxdWlyZSIsImNvbW1vbiIsIk1lbW9yeSIsIkVudiIsImV4cG9ydHMiLCJvcHRpb25zIiwiY2FsbCIsInR5cGUiLCJyZWFkT25seSIsIndoaXRlbGlzdCIsInNlcGFyYXRvciIsImxvd2VyQ2FzZSIsInBhcnNlVmFsdWVzIiwidHJhbnNmb3JtIiwidG9TdHJpbmciLCJtYXRjaCIsIkFycmF5IiwiUmVnRXhwIiwiaW5oZXJpdHMiLCJwcm90b3R5cGUiLCJsb2FkU3luYyIsImxvYWRFbnYiLCJzdG9yZSIsInNlbGYiLCJlbnYiLCJwcm9jZXNzIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJ0b0xvd2VyQ2FzZSIsImZpbHRlciIsImxlbmd0aCIsImluZGV4T2YiLCJ2YWwiLCJzZXQiLCJhcHBseSIsInNwbGl0Il0sInNvdXJjZVJvb3QiOiJDOlxcY29kZVxcRmx1aWRGcmFtZXdvcms1XFxub2RlX21vZHVsZXNcXC5wbnBtXFxuY29uZkAwLjEyLjBcXG5vZGVfbW9kdWxlc1xcbmNvbmZcXGxpYlxcbmNvbmZcXHN0b3Jlc1xcIiwic291cmNlcyI6WyJlbnYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIGVudi5qczogU2ltcGxlIG1lbW9yeS1iYXNlZCBzdG9yZSBmb3IgZW52aXJvbm1lbnQgdmFyaWFibGVzXG4gKlxuICogKEMpIDIwMTEsIENoYXJsaWUgUm9iYmlucyBhbmQgdGhlIENvbnRyaWJ1dG9ycy5cbiAqXG4gKi9cblxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyksXG4gICAgY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyksXG4gICAgTWVtb3J5ID0gcmVxdWlyZSgnLi9tZW1vcnknKS5NZW1vcnk7XG5cbi8vXG4vLyAjIyMgZnVuY3Rpb24gRW52IChvcHRpb25zKVxuLy8gIyMjIyBAb3B0aW9ucyB7T2JqZWN0fSBPcHRpb25zIGZvciB0aGlzIGluc3RhbmNlLlxuLy8gQ29uc3RydWN0b3IgZnVuY3Rpb24gZm9yIHRoZSBFbnYgbmNvbmYgc3RvcmUsIGEgc2ltcGxlIGFic3RyYWN0aW9uXG4vLyBhcm91bmQgdGhlIE1lbW9yeSBzdG9yZSB0aGF0IGNhbiByZWFkIHByb2Nlc3MgZW52aXJvbm1lbnQgdmFyaWFibGVzLlxuLy9cbnZhciBFbnYgPSBleHBvcnRzLkVudiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIE1lbW9yeS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIG9wdGlvbnMgICAgICAgID0gb3B0aW9ucyB8fCB7fTtcbiAgdGhpcy50eXBlICAgICAgPSAnZW52JztcbiAgdGhpcy5yZWFkT25seSAgPSB0cnVlO1xuICB0aGlzLndoaXRlbGlzdCA9IG9wdGlvbnMud2hpdGVsaXN0IHx8IFtdO1xuICB0aGlzLnNlcGFyYXRvciA9IG9wdGlvbnMuc2VwYXJhdG9yIHx8ICcnO1xuICB0aGlzLmxvd2VyQ2FzZSA9IG9wdGlvbnMubG93ZXJDYXNlIHx8IGZhbHNlO1xuICB0aGlzLnBhcnNlVmFsdWVzID0gb3B0aW9ucy5wYXJzZVZhbHVlcyB8fCBmYWxzZTtcbiAgdGhpcy50cmFuc2Zvcm0gPSBvcHRpb25zLnRyYW5zZm9ybSB8fCBmYWxzZTtcblxuICBpZiAoKHt9KS50b1N0cmluZy5jYWxsKG9wdGlvbnMubWF0Y2gpID09PSAnW29iamVjdCBSZWdFeHBdJ1xuICAgICAgJiYgdHlwZW9mIG9wdGlvbnMgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhpcy5tYXRjaCA9IG9wdGlvbnMubWF0Y2g7XG4gIH1cblxuICBpZiAob3B0aW9ucyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgdGhpcy53aGl0ZWxpc3QgPSBvcHRpb25zO1xuICB9XG4gIGlmICh0eXBlb2Yob3B0aW9ucykgPT09ICdzdHJpbmcnIHx8IG9wdGlvbnMgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICB0aGlzLnNlcGFyYXRvciA9IG9wdGlvbnM7XG4gIH1cbn07XG5cbi8vIEluaGVyaXQgZnJvbSB0aGUgTWVtb3J5IHN0b3JlXG51dGlsLmluaGVyaXRzKEVudiwgTWVtb3J5KTtcblxuLy9cbi8vICMjIyBmdW5jdGlvbiBsb2FkU3luYyAoKVxuLy8gTG9hZHMgdGhlIGRhdGEgcGFzc2VkIGluIGZyb20gYHByb2Nlc3MuZW52YCBpbnRvIHRoaXMgaW5zdGFuY2UuXG4vL1xuRW52LnByb3RvdHlwZS5sb2FkU3luYyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5sb2FkRW52KCk7XG4gIHJldHVybiB0aGlzLnN0b3JlO1xufTtcblxuLy9cbi8vICMjIyBmdW5jdGlvbiBsb2FkRW52ICgpXG4vLyBMb2FkcyB0aGUgZGF0YSBwYXNzZWQgaW4gZnJvbSBgcHJvY2Vzcy5lbnZgIGludG8gdGhpcyBpbnN0YW5jZS5cbi8vXG5FbnYucHJvdG90eXBlLmxvYWRFbnYgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB2YXIgZW52ID0gcHJvY2Vzcy5lbnY7XG5cbiAgaWYgKHRoaXMubG93ZXJDYXNlKSB7XG4gICAgZW52ID0ge307XG4gICAgT2JqZWN0LmtleXMocHJvY2Vzcy5lbnYpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgZW52W2tleS50b0xvd2VyQ2FzZSgpXSA9IHByb2Nlc3MuZW52W2tleV07XG4gICAgfSk7XG4gIH1cblxuICBpZiAodGhpcy50cmFuc2Zvcm0pIHtcbiAgICBlbnYgPSBjb21tb24udHJhbnNmb3JtKGVudiwgdGhpcy50cmFuc2Zvcm0pO1xuICB9XG5cbiAgdGhpcy5yZWFkT25seSA9IGZhbHNlO1xuICBPYmplY3Qua2V5cyhlbnYpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKHNlbGYubWF0Y2ggJiYgc2VsZi53aGl0ZWxpc3QubGVuZ3RoKSB7XG4gICAgICByZXR1cm4ga2V5Lm1hdGNoKHNlbGYubWF0Y2gpIHx8IHNlbGYud2hpdGVsaXN0LmluZGV4T2Yoa2V5KSAhPT0gLTFcbiAgICB9XG4gICAgZWxzZSBpZiAoc2VsZi5tYXRjaCkge1xuICAgICAgcmV0dXJuIGtleS5tYXRjaChzZWxmLm1hdGNoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gIXNlbGYud2hpdGVsaXN0Lmxlbmd0aCB8fCBzZWxmLndoaXRlbGlzdC5pbmRleE9mKGtleSkgIT09IC0xXG4gICAgfVxuICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBcbiAgICB2YXIgdmFsID0gZW52W2tleV07XG5cbiAgICBpZiAoc2VsZi5wYXJzZVZhbHVlcykge1xuICAgICAgdmFsID0gY29tbW9uLnBhcnNlVmFsdWVzKHZhbCk7XG4gICAgfVxuXG4gICAgaWYgKHNlbGYuc2VwYXJhdG9yKSB7XG4gICAgICBzZWxmLnNldChjb21tb24ua2V5LmFwcGx5KGNvbW1vbiwga2V5LnNwbGl0KHNlbGYuc2VwYXJhdG9yKSksIHZhbCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgc2VsZi5zZXQoa2V5LCB2YWwpO1xuICAgIH1cbiAgfSk7XG5cbiAgdGhpcy5yZWFkT25seSA9IHRydWU7XG4gIHJldHVybiB0aGlzLnN0b3JlO1xufTtcblxuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFNLENBQUM7RUFDdEJDLE1BQU0sR0FBR0QsT0FBTyxDQUFDLFdBQVcsQ0FBQztFQUM3QkUsTUFBTSxHQUFHRixPQUFPLENBQUMsVUFBVSxDQUFDLENBQUNFLE1BQU07O0FBRXZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUlDLEdBQUcsR0FBR0MsT0FBTyxDQUFDRCxHQUFHLEdBQUcsVUFBVUUsT0FBTyxFQUFFO0VBQ3pDSCxNQUFNLENBQUNJLElBQUksQ0FBQyxJQUFJLEVBQUVELE9BQU8sQ0FBQztFQUUxQkEsT0FBTyxHQUFVQSxPQUFPLElBQUksQ0FBQyxDQUFDO0VBQzlCLElBQUksQ0FBQ0UsSUFBSSxHQUFRLEtBQUs7RUFDdEIsSUFBSSxDQUFDQyxRQUFRLEdBQUksSUFBSTtFQUNyQixJQUFJ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","map":{"version":3,"names":["util","require","common","Memory","Env","exports","options","call","type","readOnly","whitelist","separator","lowerCase","parseValues","transform","toString","match","Array","RegExp","inherits","prototype","loadSync","loadEnv","store","self","env","process","Object","keys","forEach","key","toLowerCase","filter","length","indexOf","val","set","apply","split"],"sourceRoot":"C:\\code\\FluidFramework5\\node_modules\\.pnpm\\nconf@0.12.0\\node_modules\\nconf\\lib\\nconf\\stores\\","sources":["env.js"],"sourcesContent":["/*\n * env.js: Simple memory-based store for environment variables\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar util = require('util'),\n    common = require('../common'),\n    Memory = require('./memory').Memory;\n\n//\n// ### function Env (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Env nconf store, a simple abstraction\n// around the Memory store that can read process environment variables.\n//\nvar Env = exports.Env = function (options) {\n  Memory.call(this, options);\n\n  options        = options || {};\n  this.type      = 'env';\n  this.readOnly  = true;\n  this.whitelist = options.whitelist || [];\n  this.separator = options.separator || '';\n  this.lowerCase = options.lowerCase || false;\n  this.parseValues = options.parseValues || false;\n  this.transform = options.transform || false;\n\n  if (({}).toString.call(options.match) === '[object RegExp]'\n      && typeof options !== 'string') {\n    this.match = options.match;\n  }\n\n  if (options instanceof Array) {\n    this.whitelist = options;\n  }\n  if (typeof(options) === 'string' || options instanceof RegExp) {\n    this.separator = options;\n  }\n};\n\n// Inherit from the Memory store\nutil.inherits(Env, Memory);\n\n//\n// ### function loadSync ()\n// Loads the data passed in from `process.env` into this instance.\n//\nEnv.prototype.loadSync = function () {\n  this.loadEnv();\n  return this.store;\n};\n\n//\n// ### function loadEnv ()\n// Loads the data passed in from `process.env` into this instance.\n//\nEnv.prototype.loadEnv = function () {\n  var self = this;\n\n  var env = process.env;\n\n  if (this.lowerCase) {\n    env = {};\n    Object.keys(process.env).forEach(function (key) {\n      env[key.toLowerCase()] = process.env[key];\n    });\n  }\n\n  if (this.transform) {\n    env = common.transform(env, this.transform);\n  }\n\n  this.readOnly = false;\n  Object.keys(env).filter(function (key) {\n    if (self.match && self.whitelist.length) {\n      return key.match(self.match) || self.whitelist.indexOf(key) !== -1\n    }\n    else if (self.match) {\n      return key.match(self.match);\n    }\n    else {\n      return !self.whitelist.length || self.whitelist.indexOf(key) !== -1\n    }\n  }).forEach(function (key) {\n    \n    var val = env[key];\n\n    if (self.parseValues) {\n      val = common.parseValues(val);\n    }\n\n    if (self.separator) {\n      self.set(common.key.apply(common, key.split(self.separator)), val);\n    }\n    else {\n      self.set(key, val);\n    }\n  });\n\n  this.readOnly = true;\n  return this.store;\n};\n\n"],"mappings":"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"}},"mtime":1674865250460},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\nconf@0.12.0\\\\node_modules\\\\nconf\\\\lib\\\\nconf\\\\stores\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\node_modules\\\\.pnpm\\\\nconf@0.12.0\\\\node_modules\\\\nconf\\\\lib\\\\nconf\\\\stores\\\\literal.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.22.6:development":{"value":{"code":"\"use strict\";\n\n/*\n * literal.js: Simple literal Object store for nconf.\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar util = require('util'),\n  Memory = require('./memory').Memory;\nvar Literal = exports.Literal = function Literal(options) {\n  Memory.call(this, options);\n  options = options || {};\n  this.type = 'literal';\n  this.readOnly = true;\n  this.store = options.store || options;\n};\n\n// Inherit from Memory store.\nutil.inherits(Literal, Memory);\n\n//\n// ### function loadSync (callback)\n// Returns the data stored in `this.store` synchronously.\n//\nLiteral.prototype.loadSync = function () {\n  return this.store;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1dGlsIiwicmVxdWlyZSIsIk1lbW9yeSIsIkxpdGVyYWwiLCJleHBvcnRzIiwib3B0aW9ucyIsImNhbGwiLCJ0eXBlIiwicmVhZE9ubHkiLCJzdG9yZSIsImluaGVyaXRzIiwicHJvdG90eXBlIiwibG9hZFN5bmMiXSwic291cmNlUm9vdCI6IkM6XFxjb2RlXFxGbHVpZEZyYW1ld29yazVcXG5vZGVfbW9kdWxlc1xcLnBucG1cXG5jb25mQDAuMTIuMFxcbm9kZV9tb2R1bGVzXFxuY29uZlxcbGliXFxuY29uZlxcc3RvcmVzXFwiLCJzb3VyY2VzIjpbImxpdGVyYWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIGxpdGVyYWwuanM6IFNpbXBsZSBsaXRlcmFsIE9iamVjdCBzdG9yZSBmb3IgbmNvbmYuXG4gKlxuICogKEMpIDIwMTEsIENoYXJsaWUgUm9iYmlucyBhbmQgdGhlIENvbnRyaWJ1dG9ycy5cbiAqXG4gKi9cblxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyksXG4gICAgTWVtb3J5ID0gcmVxdWlyZSgnLi9tZW1vcnknKS5NZW1vcnlcblxudmFyIExpdGVyYWwgPSBleHBvcnRzLkxpdGVyYWwgPSBmdW5jdGlvbiBMaXRlcmFsIChvcHRpb25zKSB7XG4gIE1lbW9yeS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIG9wdGlvbnMgICAgICAgPSBvcHRpb25zIHx8IHt9XG4gIHRoaXMudHlwZSAgICAgPSAnbGl0ZXJhbCc7XG4gIHRoaXMucmVhZE9ubHkgPSB0cnVlO1xuICB0aGlzLnN0b3JlICAgID0gb3B0aW9ucy5zdG9yZSB8fCBvcHRpb25zO1xufTtcblxuLy8gSW5oZXJpdCBmcm9tIE1lbW9yeSBzdG9yZS5cbnV0aWwuaW5oZXJpdHMoTGl0ZXJhbCwgTWVtb3J5KTtcblxuLy9cbi8vICMjIyBmdW5jdGlvbiBsb2FkU3luYyAoY2FsbGJhY2spXG4vLyBSZXR1cm5zIHRoZSBkYXRhIHN0b3JlZCBpbiBgdGhpcy5zdG9yZWAgc3luY2hyb25vdXNseS5cbi8vXG5MaXRlcmFsLnByb3RvdHlwZS5sb2FkU3luYyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuc3RvcmU7XG59OyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBTSxDQUFDO0VBQ3RCQyxNQUFNLEdBQUdELE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQ0MsTUFBTTtBQUV2QyxJQUFJQyxPQUFPLEdBQUdDLE9BQU8sQ0FBQ0QsT0FBTyxHQUFHLFNBQVNBLE9BQU9BLENBQUVFLE9BQU8sRUFBRTtFQUN6REgsTUFBTSxDQUFDSSxJQUFJLENBQUMsSUFBSSxFQUFFRCxPQUFPLENBQUM7RUFFMUJBLE9BQU8sR0FBU0EsT0FBTyxJQUFJLENBQUMsQ0FBQztFQUM3QixJQUFJLENBQUNFLElBQUksR0FBTyxTQUFTO0VBQ3pCLElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUk7RUFDcEIsSUFBSSxDQUFDQyxLQUFLLEdBQU1KLE9BQU8sQ0FBQ0ksS0FBSyxJQUFJSixPQUFPO0FBQzFDLENBQUM7O0FBRUQ7QUFDQUwsSUFBSSxDQUFDVSxRQUFRLENBQUNQLE9BQU8sRUFBRUQsTUFBTSxDQUFDOztBQUU5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBQyxPQUFPLENBQUNRLFNBQVMsQ0FBQ0MsUUFBUSxHQUFHLFlBQVk7RUFDdkMsT0FBTyxJQUFJLENBQUNILEtBQUs7QUFDbkIsQ0FBQyJ9","map":{"version":3,"names":["util","require","Memory","Literal","exports","options","call","type","readOnly","store","inherits","prototype","loadSync"],"sourceRoot":"C:\\code\\FluidFramework5\\node_modules\\.pnpm\\nconf@0.12.0\\node_modules\\nconf\\lib\\nconf\\stores\\","sources":["literal.js"],"sourcesContent":["/*\n * literal.js: Simple literal Object store for nconf.\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar util = require('util'),\n    Memory = require('./memory').Memory\n\nvar Literal = exports.Literal = function Literal (options) {\n  Memory.call(this, options);\n\n  options       = options || {}\n  this.type     = 'literal';\n  this.readOnly = true;\n  this.store    = options.store || options;\n};\n\n// Inherit from Memory store.\nutil.inherits(Literal, Memory);\n\n//\n// ### function loadSync (callback)\n// Returns the data stored in `this.store` synchronously.\n//\nLiteral.prototype.loadSync = function () {\n  return this.store;\n};"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;EACtBC,MAAM,GAAGD,OAAO,CAAC,UAAU,CAAC,CAACC,MAAM;AAEvC,IAAIC,OAAO,GAAGC,OAAO,CAACD,OAAO,GAAG,SAASA,OAAOA,CAAEE,OAAO,EAAE;EACzDH,MAAM,CAACI,IAAI,CAAC,IAAI,EAAED,OAAO,CAAC;EAE1BA,OAAO,GAASA,OAAO,IAAI,CAAC,CAAC;EAC7B,IAAI,CAACE,IAAI,GAAO,SAAS;EACzB,IAAI,CAACC,QAAQ,GAAG,IAAI;EACpB,IAAI,CAACC,KAAK,GAAMJ,OAAO,CAACI,KAAK,IAAIJ,OAAO;AAC1C,CAAC;;AAED;AACAL,IAAI,CAACU,QAAQ,CAACP,OAAO,EAAED,MAAM,CAAC;;AAE9B;AACA;AACA;AACA;AACAC,OAAO,CAACQ,SAAS,CAACC,QAAQ,GAAG,YAAY;EACvC,OAAO,IAAI,CAACH,KAAK;AACnB,CAAC"}},"mtime":1674865250520},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\mocha-test-setup\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"filename\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\mocha-test-setup\\\\mocharc-common.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\code\\\\FluidFramework5\\\\packages\\\\test\\\\test-end-to-end-tests\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.22.6:development":{"value":{"code":"/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\n\"use strict\";\n\nconst {\n  existsSync\n} = require(\"fs\");\nconst path = require(\"path\");\nfunction getFluidTestMochaConfig(packageDir, additionalRequiredModules, testReportPrefix) {\n  const moduleDir = `${packageDir}/node_modules`;\n  const requiredModules = [\n  // General mocha setup e.g. suppresses console.log,\n  // This has to be before others (except logger) so that registerMochaTestWrapperFuncs is available\n  `@fluidframework/mocha-test-setup`, ...(additionalRequiredModules ? additionalRequiredModules : [])];\n\n  // mocha install node_modules directory might not be the same as the module required because of hoisting\n  // We need to give the full path in that case.\n  // TODO: this path mapping might not be necessary once we move to pnpm, since it sets up node_modules differently\n  // from what Lerna does (all dependencies of a given package show up in its own node_modules folder and just symlink\n  // to the actual location of the installed package, instead of common dependencies being hoisted to a parent\n  // node_modules folder and not being present at all in the package's own node_modules).\n  const requiredModulePaths = requiredModules.map(mod => {\n    // Just return if it is path already\n    if (existsSync(mod) || existsSync(`${mod}.js`)) {\n      return mod;\n    }\n\n    // Try to find it in the test package's directory\n    const modulePath = path.join(moduleDir, mod);\n    if (existsSync(modulePath)) {\n      return modulePath;\n    }\n\n    // Otherwise keep it as is\n    return mod;\n  });\n  if (process.env.FLUID_TEST_LOGGER_PKG_PATH) {\n    // Inject implementation of getTestLogger, put it first before mocha-test-setup\n    requiredModulePaths.unshift(process.env.FLUID_TEST_LOGGER_PKG_PATH);\n  }\n  const config = {\n    \"exit\": true,\n    \"recursive\": true,\n    \"require\": requiredModulePaths,\n    \"unhandled-rejections\": \"strict\",\n    // Performance tests benefit from having access to GC, and memory tests require it.\n    // Exposing it here avoids all packages which do perf testing from having to expose it.\n    \"v8-expose-gc\": true\n  };\n  if (process.env.FLUID_TEST_TIMEOUT !== undefined) {\n    config[\"timeout\"] = process.env.FLUID_TEST_TIMEOUT;\n  }\n  if (process.env.FLUID_TEST_REPORT === \"1\") {\n    const packageJson = require(`${packageDir}/package.json`);\n    config[\"reporter\"] = `xunit`;\n    if (testReportPrefix) {\n      config[\"reporter-options\"] = [\n      // give the report file a unique name based on testReportPrefix\n      `output=${packageDir}/nyc/${testReportPrefix}-junit-report.xml`, `suiteName=${packageJson.name} - ${testReportPrefix}`];\n    } else {\n      config[\"reporter-options\"] = [`output=${packageDir}/nyc/junit-report.xml`, `suiteName=${packageJson.name}`];\n    }\n  }\n  if (process.env.FLUID_TEST_MULTIREPORT === \"1\") {\n    config[\"reporter\"] = `mocha-multi-reporters`;\n    // See https://www.npmjs.com/package/mocha-multi-reporters#cmroutput-option\n    const outputFilePrefix = testReportPrefix !== undefined ? `${testReportPrefix}-` : \"\";\n    console.log(`Writing test results relative to package to nyc/${outputFilePrefix}junit-report.xml and nyc/${outputFilePrefix}junit-report.json`);\n    config[\"reporter-options\"] = [`configFile=${path.join(__dirname, \"test-config.json\")},cmrOutput=xunit+output+${outputFilePrefix}:mocha-json-output-reporter+output+${outputFilePrefix}`];\n  }\n  if (process.env.FLUID_TEST_FORBID_ONLY !== undefined) {\n    config[\"forbid-only\"] = true;\n  }\n  return config;\n}\nmodule.exports = getFluidTestMochaConfig;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["existsSync","require","path","getFluidTestMochaConfig","packageDir","additionalRequiredModules","testReportPrefix","moduleDir","requiredModules","requiredModulePaths","map","mod","modulePath","join","process","env","FLUID_TEST_LOGGER_PKG_PATH","unshift","config","FLUID_TEST_TIMEOUT","undefined","FLUID_TEST_REPORT","packageJson","name","FLUID_TEST_MULTIREPORT","outputFilePrefix","console","log","__dirname","FLUID_TEST_FORBID_ONLY","module","exports"],"sourceRoot":"C:\\code\\FluidFramework5\\packages\\test\\mocha-test-setup\\","sources":["mocharc-common.js"],"sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\n\"use strict\";\n\nconst { existsSync } = require(\"fs\");\nconst path = require(\"path\");\n\nfunction getFluidTestMochaConfig(packageDir, additionalRequiredModules, testReportPrefix) {\n\tconst moduleDir = `${packageDir}/node_modules`;\n\n\tconst requiredModules = [\n\t\t// General mocha setup e.g. suppresses console.log,\n\t\t// This has to be before others (except logger) so that registerMochaTestWrapperFuncs is available\n\t\t`@fluidframework/mocha-test-setup`,\n\t\t...(additionalRequiredModules ? additionalRequiredModules : []),\n\t];\n\n\t// mocha install node_modules directory might not be the same as the module required because of hoisting\n\t// We need to give the full path in that case.\n\t// TODO: this path mapping might not be necessary once we move to pnpm, since it sets up node_modules differently\n\t// from what Lerna does (all dependencies of a given package show up in its own node_modules folder and just symlink\n\t// to the actual location of the installed package, instead of common dependencies being hoisted to a parent\n\t// node_modules folder and not being present at all in the package's own node_modules).\n\tconst requiredModulePaths = requiredModules.map((mod) => {\n\t\t// Just return if it is path already\n\t\tif (existsSync(mod) || existsSync(`${mod}.js`)) {\n\t\t\treturn mod;\n\t\t}\n\n\t\t// Try to find it in the test package's directory\n\t\tconst modulePath = path.join(moduleDir, mod);\n\t\tif (existsSync(modulePath)) {\n\t\t\treturn modulePath;\n\t\t}\n\n\t\t// Otherwise keep it as is\n\t\treturn mod;\n\t});\n\n\tif (process.env.FLUID_TEST_LOGGER_PKG_PATH) {\n\t\t// Inject implementation of getTestLogger, put it first before mocha-test-setup\n\t\trequiredModulePaths.unshift(process.env.FLUID_TEST_LOGGER_PKG_PATH);\n\t}\n\n\tconst config = {\n\t\t\"exit\": true,\n\t\t\"recursive\": true,\n\t\t\"require\": requiredModulePaths,\n\t\t\"unhandled-rejections\": \"strict\",\n\t\t// Performance tests benefit from having access to GC, and memory tests require it.\n\t\t// Exposing it here avoids all packages which do perf testing from having to expose it.\n\t\t\"v8-expose-gc\": true,\n\t};\n\n\tif (process.env.FLUID_TEST_TIMEOUT !== undefined) {\n\t\tconfig[\"timeout\"] = process.env.FLUID_TEST_TIMEOUT;\n\t}\n\n\tif (process.env.FLUID_TEST_REPORT === \"1\") {\n\t\tconst packageJson = require(`${packageDir}/package.json`);\n\t\tconfig[\"reporter\"] = `xunit`;\n\t\tif (testReportPrefix) {\n\t\t\tconfig[\"reporter-options\"] = [\n\t\t\t\t// give the report file a unique name based on testReportPrefix\n\t\t\t\t`output=${packageDir}/nyc/${testReportPrefix}-junit-report.xml`,\n\t\t\t\t`suiteName=${packageJson.name} - ${testReportPrefix}`,\n\t\t\t];\n\t\t} else {\n\t\t\tconfig[\"reporter-options\"] = [\n\t\t\t\t`output=${packageDir}/nyc/junit-report.xml`,\n\t\t\t\t`suiteName=${packageJson.name}`,\n\t\t\t];\n\t\t}\n\t}\n\n\tif (process.env.FLUID_TEST_MULTIREPORT === \"1\") {\n\t\tconfig[\"reporter\"] = `mocha-multi-reporters`;\n\t\t// See https://www.npmjs.com/package/mocha-multi-reporters#cmroutput-option\n\t\tconst outputFilePrefix = testReportPrefix !== undefined ? `${testReportPrefix}-` : \"\";\n\t\tconsole.log(\n\t\t\t`Writing test results relative to package to nyc/${outputFilePrefix}junit-report.xml and nyc/${outputFilePrefix}junit-report.json`,\n\t\t);\n\t\tconfig[\"reporter-options\"] = [\n\t\t\t`configFile=${path.join(\n\t\t\t\t__dirname,\n\t\t\t\t\"test-config.json\",\n\t\t\t)},cmrOutput=xunit+output+${outputFilePrefix}:mocha-json-output-reporter+output+${outputFilePrefix}`,\n\t\t];\n\t}\n\n\tif (process.env.FLUID_TEST_FORBID_ONLY !== undefined) {\n\t\tconfig[\"forbid-only\"] = true;\n\t}\n\n\treturn config;\n}\n\nmodule.exports = getFluidTestMochaConfig;\n"],"mappings":"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"}},"mtime":1687986257686}}