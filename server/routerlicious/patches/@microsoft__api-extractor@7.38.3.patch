diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000000000000000000000000000000000000..7c2feb7ef4731d430facfcafcbac59e3ea861849
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,3 @@
+{
+  "editor.formatOnSave": false
+}
diff --git a/lib/api/ExtractorConfig.js b/lib/api/ExtractorConfig.js
index 76604a00e7e6a1028db6803ab38bdb45d2b5d395..4999a627a954d859eafb3b1586c86d8658b1cf00 100644
--- a/lib/api/ExtractorConfig.js
+++ b/lib/api/ExtractorConfig.js
@@ -448,11 +448,8 @@ class ExtractorConfig {
                 throw new Error('The "mainEntryPointFilePath" path does not exist: ' + mainEntryPointFilePath);
             }
             const bundledPackages = configObject.bundledPackages || [];
-            for (const bundledPackage of bundledPackages) {
-                if (!node_core_library_1.PackageName.isValidName(bundledPackage)) {
-                    throw new Error(`The "bundledPackages" list contains an invalid package name: "${bundledPackage}"`);
-                }
-            }
+            // Note: we cannot fully validate package name pattern, as the string may be a RegExp pattern.
+            // We won't know if the entries are valid until we can compare them against the package.json "dependencies" contents.
             const tsconfigFilePath = ExtractorConfig._resolvePathWithTokens('tsconfigFilePath', configObject.compiler.tsconfigFilePath, tokenContext);
             if (configObject.compiler.overrideTsconfig === undefined) {
                 if (!tsconfigFilePath) {
diff --git a/lib/collector/Collector.js b/lib/collector/Collector.js
index 34702cd3969e8357dd97815185af571c7d85b49e..e777cae87784182a747ddce8a97436e35937fb73 100644
--- a/lib/collector/Collector.js
+++ b/lib/collector/Collector.js
@@ -81,11 +81,55 @@ class Collector {
         this.typeChecker = options.program.getTypeChecker();
         this.globalVariableAnalyzer = TypeScriptInternals_1.TypeScriptInternals.getGlobalVariableAnalyzer(this.program);
         this._tsdocParser = new tsdoc.TSDocParser(this.extractorConfig.tsdocConfiguration);
-        this.bundledPackageNames = new Set(this.extractorConfig.bundledPackages);
+        // Resolve package name patterns and store concrete set of bundled package dependency names
+        this.bundledPackageNames = Collector._resolveBundledPackagePatterns(this.extractorConfig.bundledPackages, this.extractorConfig.packageJson);
         this.astSymbolTable = new AstSymbolTable_1.AstSymbolTable(this.program, this.typeChecker, this.packageJsonLookup, this.bundledPackageNames, this.messageRouter);
         this.astReferenceResolver = new AstReferenceResolver_1.AstReferenceResolver(this);
         this._cachedOverloadIndexesByDeclaration = new Map();
     }
+    /**
+     * Searches the provided package.json for dependencies that match the provided package names and/or RegExp patterns
+     * in `bundledPackages`.
+     * @param bundledPackages - The list of package names and/or RegExp patterns to search for in the package.json.
+     * @param packageJson - The package.json of the package being processed.
+     * @returns The set of matching package names.
+     */
+    static _resolveBundledPackagePatterns(bundledPackages, packageJson) {
+        var _a;
+        // The set to be built up and returned
+        const packageNames = new Set();
+        if (bundledPackages.length === 0) {
+            // If no `bundledPackages` were specified, then there is nothing to resolve.
+            // Return an empty set.
+            return packageNames;
+        }
+        if (packageJson === undefined) {
+            // If no package.json is present, then there are no possible package matches.
+            // Return an empty set.
+            return packageNames;
+        }
+        const dependencyNames = Object.keys((_a = packageJson.dependencies) !== null && _a !== void 0 ? _a : {});
+        if (dependencyNames.length === 0) {
+            // If there are no dependencies, then there are no possible package matches.
+            // Return an empty set.
+            return packageNames;
+        }
+        for (const packageNameOrPattern of bundledPackages) {
+            // If the string is an exact package name, search for exact match
+            if (node_core_library_1.PackageName.isValidName(packageNameOrPattern)) {
+                if (dependencyNames.includes(packageNameOrPattern)) {
+                    packageNames.add(packageNameOrPattern);
+                }
+            }
+            else {
+                // If the entry isn't an exact package name, assume RegExp and search for matches
+                const regexp = new RegExp(packageNameOrPattern);
+                const matches = dependencyNames.filter((dependencyName) => regexp.test(dependencyName));
+                matches.forEach((match) => packageNames.add(match));
+            }
+        }
+        return packageNames;
+    }
     /**
      * Returns a list of names (e.g. "example-library") that should appear in a reference like this:
      *
diff --git a/lib/enhancers/ValidationEnhancer.js b/lib/enhancers/ValidationEnhancer.js
index 3511bb2fd2269cce8c45197ef8dc61c28158f743..61101cea95d362b94be8b9e9ccc3e833fca8fccc 100644
--- a/lib/enhancers/ValidationEnhancer.js
+++ b/lib/enhancers/ValidationEnhancer.js
@@ -186,15 +186,13 @@ class ValidationEnhancer {
             else {
                 continue;
             }
-            if (collectorEntity && collectorEntity.consumable) {
-                if (api_extractor_model_1.ReleaseTag.compare(declarationReleaseTag, referencedReleaseTag) > 0) {
-                    collector.messageRouter.addAnalyzerIssue("ae-incompatible-release-tags" /* ExtractorMessageId.IncompatibleReleaseTags */, `The symbol "${astDeclaration.astSymbol.localName}"` +
-                        ` is marked as ${api_extractor_model_1.ReleaseTag.getTagName(declarationReleaseTag)},` +
-                        ` but its signature references "${localName}"` +
-                        ` which is marked as ${api_extractor_model_1.ReleaseTag.getTagName(referencedReleaseTag)}`, astDeclaration);
-                }
+            if (api_extractor_model_1.ReleaseTag.compare(declarationReleaseTag, referencedReleaseTag) > 0) {
+                collector.messageRouter.addAnalyzerIssue("ae-incompatible-release-tags" /* ExtractorMessageId.IncompatibleReleaseTags */, `The symbol "${astDeclaration.astSymbol.localName}"` +
+                    ` is marked as ${api_extractor_model_1.ReleaseTag.getTagName(declarationReleaseTag)},` +
+                    ` but its signature references "${localName}"` +
+                    ` which is marked as ${api_extractor_model_1.ReleaseTag.getTagName(referencedReleaseTag)}`, astDeclaration);
             }
-            else {
+            if (!collectorEntity || !collectorEntity.consumable) {
                 const entryPointFilename = path.basename(collector.workingPackage.entryPointSourceFile.fileName);
                 if (!alreadyWarnedEntities.has(referencedEntity)) {
                     alreadyWarnedEntities.add(referencedEntity);
diff --git a/lib/generators/DtsRollupGenerator.js b/lib/generators/DtsRollupGenerator.js
index 5a6490760417c2cbefc8ff277f9183a7c870e797..4b93942c049e1fe3940f9cc71c781c591d2bb97a 100644
--- a/lib/generators/DtsRollupGenerator.js
+++ b/lib/generators/DtsRollupGenerator.js
@@ -103,16 +103,9 @@ class DtsRollupGenerator {
         // Emit the imports
         for (const entity of collector.entities) {
             if (entity.astEntity instanceof AstImport_1.AstImport) {
+                // BUG MITIGATION: don't trim imports based on their release tags
                 const astImport = entity.astEntity;
-                // For example, if the imported API comes from an external package that supports AEDoc,
-                // and it was marked as `@internal`, then don't emit it.
-                const symbolMetadata = collector.tryFetchMetadataForAstEntity(astImport);
-                const maxEffectiveReleaseTag = symbolMetadata
-                    ? symbolMetadata.maxEffectiveReleaseTag
-                    : api_extractor_model_1.ReleaseTag.None;
-                if (this._shouldIncludeReleaseTag(maxEffectiveReleaseTag, dtsKind)) {
-                    DtsEmitHelpers_1.DtsEmitHelpers.emitImport(writer, entity, astImport);
-                }
+                DtsEmitHelpers_1.DtsEmitHelpers.emitImport(writer, entity, astImport);
             }
         }
         writer.ensureSkippedLine();
