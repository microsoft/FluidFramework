# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

FROM node:10.16.0-slim AS base

# node-gyp dependencies
RUN apt-get update && apt-get install -y \
        python \
        make \
        git \
        curl \
        g++

# Add Tini
ENV TINI_VERSION v0.18.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini
RUN chmod +x /tini

# Copy over and build the server
WORKDIR /usr/src/server

# Copy over the package and package-lock and install prior to the other code to optimize Docker's file system cache on rebuilds
COPY LICENSE.txt .
COPY server/routerlicious/package*.json server/routerlicious/
COPY server/routerlicious/lerna.json server/routerlicious/lerna.json
COPY server/routerlicious/.npmrc server/routerlicious/
COPY tools/build-server-resources/build-version.js server/routerlicious/tools/build-server-resources/

COPY server/routerlicious/packages/gitresources/package*.json server/routerlicious/packages/gitresources/
COPY server/routerlicious/packages/protocol-definitions/package*.json server/routerlicious/packages/protocol-definitions/
COPY server/routerlicious/packages/kafka-orderer/package*.json server/routerlicious/packages/kafka-orderer/
COPY server/routerlicious/packages/lambdas-driver/package*.json server/routerlicious/packages/lambdas-driver/
COPY server/routerlicious/packages/lambdas/package*.json server/routerlicious/packages/lambdas/
COPY server/routerlicious/packages/memory-orderer/package*.json server/routerlicious/packages/memory-orderer/
COPY server/routerlicious/packages/routerlicious/package*.json server/routerlicious/packages/routerlicious/
COPY server/routerlicious/packages/services/package*.json server/routerlicious/packages/services/
COPY server/routerlicious/packages/services-client/package*.json server/routerlicious/packages/services-client/
COPY server/routerlicious/packages/services-core/package*.json server/routerlicious/packages/services-core/
COPY server/routerlicious/packages/services-utils/package*.json server/routerlicious/packages/services-utils/
COPY server/routerlicious/packages/test-utils/package*.json server/routerlicious/packages/test-utils/
COPY server/routerlicious/packages/protocol-base/package*.json server/routerlicious/packages/protocol-base/

# Copy over component npmrc and package.json to dynamically install packages.
COPY server/routerlicious/component/* /tmp/component/

# Give write permission to node user.
RUN chown -R node:node /tmp/component/
RUN chmod -R 755 /tmp/component/*

# Give node user access to nyc in order to run and store coverage tests. Do this in all packages directory
# as well as the root
RUN for d in ./*/*/ ; do (cd "$d" && mkdir nyc && chown node: nyc); done
RUN mkdir nyc && chown node: nyc

# Expose the port the app runs under
EXPOSE 3000

# Switch to the server folder for npm install
WORKDIR /usr/src/server/server/routerlicious

# Need to set the --unsafe-perm flag since we are doing the install as root. Consider adding an 'app' accout so we
# can do the install as node but then switch to 'app' to run. As app we won't be able to write to installed files
# and be able to change them.
RUN npm install --unsafe-perm

# And now copy over our actual code and build
WORKDIR /usr/src/server
COPY server/routerlicious/packages/ server/routerlicious/packages/

# Switch to the server folder and build
WORKDIR /usr/src/server/server/routerlicious
# Set the version number
ARG VERSION_BUILDNUMBER=0
RUN echo $VERSION_BUILDNUMBER
RUN version=`node tools/build-server-resources/build-version.js`; echo $version; npx lerna version $version --no-git-tag-version --no-push --yes
RUN npm run build:ci

# Build that alfred uses
FROM base AS runner

# Don't run as root user
USER node

# Switch to the routerlicious folder
WORKDIR /usr/src/server/server/routerlicious/packages/routerlicious

# Node wasn't designed to be run as PID 1. Tini is a tiny init wrapper. You can also set --init on docker later than
# 1.13 but Kubernetes is at 1.12 so we prefer tini for now.
ENTRYPOINT ["/tini", "--"]

# And set the default command to start the server
CMD ["npm", "run", "alfred"]

# Partial Build Target for publishing
FROM base AS publish

# Webpack components for publishing
RUN npm run webpack

# Node wasn't designed to be run as PID 1. Tini is a tiny init wrapper. You can also set --init on docker later than
# 1.13 but Kubernetes is at 1.12 so we prefer tini for now.
ENTRYPOINT ["/tini", "--"]
