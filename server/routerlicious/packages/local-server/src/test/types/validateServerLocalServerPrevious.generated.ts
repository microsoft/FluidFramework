/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType, requireAssignableTo } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/server-local-server-previous";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current | requireAssignableTo<true, true>;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_LocalDeltaConnectionServer": {"forwardCompat": false}
 */
declare type old_as_current_for_Class_LocalDeltaConnectionServer = requireAssignableTo<TypeOnly<old.LocalDeltaConnectionServer>, TypeOnly<current.LocalDeltaConnectionServer>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_LocalDeltaConnectionServer": {"backCompat": false}
 */
declare type current_as_old_for_Class_LocalDeltaConnectionServer = requireAssignableTo<TypeOnly<current.LocalDeltaConnectionServer>, TypeOnly<old.LocalDeltaConnectionServer>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_LocalOrdererManager": {"forwardCompat": false}
 */
// @ts-expect-error compatibility expected to be broken
declare type old_as_current_for_Class_LocalOrdererManager = requireAssignableTo<TypeOnly<old.LocalOrdererManager>, TypeOnly<current.LocalOrdererManager>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_LocalOrdererManager": {"backCompat": false}
 */
declare type current_as_old_for_Class_LocalOrdererManager = requireAssignableTo<TypeOnly<current.LocalOrdererManager>, TypeOnly<old.LocalOrdererManager>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_LocalWebSocket": {"forwardCompat": false}
 */
declare type old_as_current_for_Class_LocalWebSocket = requireAssignableTo<TypeOnly<old.LocalWebSocket>, TypeOnly<current.LocalWebSocket>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_LocalWebSocket": {"backCompat": false}
 */
declare type current_as_old_for_Class_LocalWebSocket = requireAssignableTo<TypeOnly<current.LocalWebSocket>, TypeOnly<old.LocalWebSocket>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_LocalWebSocketServer": {"forwardCompat": false}
 */
declare type old_as_current_for_Class_LocalWebSocketServer = requireAssignableTo<TypeOnly<old.LocalWebSocketServer>, TypeOnly<current.LocalWebSocketServer>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_LocalWebSocketServer": {"backCompat": false}
 */
declare type current_as_old_for_Class_LocalWebSocketServer = requireAssignableTo<TypeOnly<current.LocalWebSocketServer>, TypeOnly<old.LocalWebSocketServer>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_LocalDeltaConnectionServer": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_LocalDeltaConnectionServer = requireAssignableTo<TypeOnly<typeof current.LocalDeltaConnectionServer>, TypeOnly<typeof old.LocalDeltaConnectionServer>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_LocalOrdererManager": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_LocalOrdererManager = requireAssignableTo<TypeOnly<typeof current.LocalOrdererManager>, TypeOnly<typeof old.LocalOrdererManager>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_LocalWebSocket": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_LocalWebSocket = requireAssignableTo<TypeOnly<typeof current.LocalWebSocket>, TypeOnly<typeof old.LocalWebSocket>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_LocalWebSocketServer": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_LocalWebSocketServer = requireAssignableTo<TypeOnly<typeof current.LocalWebSocketServer>, TypeOnly<typeof old.LocalWebSocketServer>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ILocalDeltaConnectionServer": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ILocalDeltaConnectionServer = requireAssignableTo<TypeOnly<old.ILocalDeltaConnectionServer>, TypeOnly<current.ILocalDeltaConnectionServer>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ILocalDeltaConnectionServer": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ILocalDeltaConnectionServer = requireAssignableTo<TypeOnly<current.ILocalDeltaConnectionServer>, TypeOnly<old.ILocalDeltaConnectionServer>>
