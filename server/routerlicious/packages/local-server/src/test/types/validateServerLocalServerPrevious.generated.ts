/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-test-generator in @fluidframework/build-tools.
 */

import type * as old from "@fluidframework/server-local-server-previous";
import type * as current from "../../index.js";


type ValueOf<T> = T[keyof T];
type OnlySymbols<T> = T extends symbol ? T : never;
type WellKnownSymbols = OnlySymbols<ValueOf<typeof Symbol>>;
/**
 * Omit (replace with never) a key if it is a custom symbol,
 * not just symbol or a well known symbol from the global Symbol.
 */
type SkipUniqueSymbols<Key> = symbol extends Key
	? Key // Key is symbol or a generalization of symbol, so leave it as is.
	: Key extends symbol
		? Key extends WellKnownSymbols
			? Key // Key is a well known symbol from the global Symbol object. These are shared between packages, so they are fine and kept as is.
			: never // Key is most likely some specialized symbol, typically a unique symbol. These break type comparisons so are removed by replacing them with never.
		: Key; // Key is not a symbol (for example its a string or number), so leave it as is.
/**
 * Remove details of T which are incompatible with type testing while keeping as much as is practical.
 *
 * See 'build-tools/packages/build-tools/src/typeValidator/compatibility.ts' for more information.
 */
type TypeOnly<T> = T extends number
	? number
	: T extends boolean | bigint | string
		? T
		: T extends symbol
			? SkipUniqueSymbols<T>
			: {
					[P in keyof T as SkipUniqueSymbols<P>]: TypeOnly<T[P]>;
				};

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ILocalDeltaConnectionServer": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ILocalDeltaConnectionServer():
    TypeOnly<old.ILocalDeltaConnectionServer>;
declare function use_current_InterfaceDeclaration_ILocalDeltaConnectionServer(
    use: TypeOnly<current.ILocalDeltaConnectionServer>): void;
use_current_InterfaceDeclaration_ILocalDeltaConnectionServer(
    get_old_InterfaceDeclaration_ILocalDeltaConnectionServer());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ILocalDeltaConnectionServer": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ILocalDeltaConnectionServer():
    TypeOnly<current.ILocalDeltaConnectionServer>;
declare function use_old_InterfaceDeclaration_ILocalDeltaConnectionServer(
    use: TypeOnly<old.ILocalDeltaConnectionServer>): void;
use_old_InterfaceDeclaration_ILocalDeltaConnectionServer(
    get_current_InterfaceDeclaration_ILocalDeltaConnectionServer());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_LocalDeltaConnectionServer": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_LocalDeltaConnectionServer():
    TypeOnly<old.LocalDeltaConnectionServer>;
declare function use_current_ClassDeclaration_LocalDeltaConnectionServer(
    use: TypeOnly<current.LocalDeltaConnectionServer>): void;
use_current_ClassDeclaration_LocalDeltaConnectionServer(
    get_old_ClassDeclaration_LocalDeltaConnectionServer());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_LocalDeltaConnectionServer": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_LocalDeltaConnectionServer():
    TypeOnly<current.LocalDeltaConnectionServer>;
declare function use_old_ClassDeclaration_LocalDeltaConnectionServer(
    use: TypeOnly<old.LocalDeltaConnectionServer>): void;
use_old_ClassDeclaration_LocalDeltaConnectionServer(
    get_current_ClassDeclaration_LocalDeltaConnectionServer());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_LocalOrdererManager": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_LocalOrdererManager():
    TypeOnly<old.LocalOrdererManager>;
declare function use_current_ClassDeclaration_LocalOrdererManager(
    use: TypeOnly<current.LocalOrdererManager>): void;
use_current_ClassDeclaration_LocalOrdererManager(
    get_old_ClassDeclaration_LocalOrdererManager());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_LocalOrdererManager": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_LocalOrdererManager():
    TypeOnly<current.LocalOrdererManager>;
declare function use_old_ClassDeclaration_LocalOrdererManager(
    use: TypeOnly<old.LocalOrdererManager>): void;
use_old_ClassDeclaration_LocalOrdererManager(
    get_current_ClassDeclaration_LocalOrdererManager());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_LocalWebSocket": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_LocalWebSocket():
    TypeOnly<old.LocalWebSocket>;
declare function use_current_ClassDeclaration_LocalWebSocket(
    use: TypeOnly<current.LocalWebSocket>): void;
use_current_ClassDeclaration_LocalWebSocket(
    get_old_ClassDeclaration_LocalWebSocket());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_LocalWebSocket": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_LocalWebSocket():
    TypeOnly<current.LocalWebSocket>;
declare function use_old_ClassDeclaration_LocalWebSocket(
    use: TypeOnly<old.LocalWebSocket>): void;
use_old_ClassDeclaration_LocalWebSocket(
    get_current_ClassDeclaration_LocalWebSocket());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_LocalWebSocketServer": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_LocalWebSocketServer():
    TypeOnly<old.LocalWebSocketServer>;
declare function use_current_ClassDeclaration_LocalWebSocketServer(
    use: TypeOnly<current.LocalWebSocketServer>): void;
use_current_ClassDeclaration_LocalWebSocketServer(
    get_old_ClassDeclaration_LocalWebSocketServer());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_LocalWebSocketServer": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_LocalWebSocketServer():
    TypeOnly<current.LocalWebSocketServer>;
declare function use_old_ClassDeclaration_LocalWebSocketServer(
    use: TypeOnly<old.LocalWebSocketServer>): void;
use_old_ClassDeclaration_LocalWebSocketServer(
    get_current_ClassDeclaration_LocalWebSocketServer());
