/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/server-local-server-previous";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ILocalDeltaConnectionServer": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_ILocalDeltaConnectionServer():
    TypeOnly<old.ILocalDeltaConnectionServer>;
declare function use_current_InterfaceDeclaration_ILocalDeltaConnectionServer(
    use: TypeOnly<current.ILocalDeltaConnectionServer>): void;
use_current_InterfaceDeclaration_ILocalDeltaConnectionServer(
    get_old_InterfaceDeclaration_ILocalDeltaConnectionServer());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ILocalDeltaConnectionServer": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_ILocalDeltaConnectionServer():
    TypeOnly<current.ILocalDeltaConnectionServer>;
declare function use_old_InterfaceDeclaration_ILocalDeltaConnectionServer(
    use: TypeOnly<old.ILocalDeltaConnectionServer>): void;
use_old_InterfaceDeclaration_ILocalDeltaConnectionServer(
    get_current_InterfaceDeclaration_ILocalDeltaConnectionServer());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_LocalDeltaConnectionServer": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_LocalDeltaConnectionServer():
    TypeOnly<old.LocalDeltaConnectionServer>;
declare function use_current_ClassDeclaration_LocalDeltaConnectionServer(
    use: TypeOnly<current.LocalDeltaConnectionServer>): void;
use_current_ClassDeclaration_LocalDeltaConnectionServer(
    get_old_ClassDeclaration_LocalDeltaConnectionServer());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_LocalDeltaConnectionServer": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_LocalDeltaConnectionServer():
    TypeOnly<current.LocalDeltaConnectionServer>;
declare function use_old_ClassDeclaration_LocalDeltaConnectionServer(
    use: TypeOnly<old.LocalDeltaConnectionServer>): void;
use_old_ClassDeclaration_LocalDeltaConnectionServer(
    get_current_ClassDeclaration_LocalDeltaConnectionServer());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_LocalOrdererManager": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_LocalOrdererManager():
    TypeOnly<old.LocalOrdererManager>;
declare function use_current_ClassDeclaration_LocalOrdererManager(
    use: TypeOnly<current.LocalOrdererManager>): void;
use_current_ClassDeclaration_LocalOrdererManager(
    get_old_ClassDeclaration_LocalOrdererManager());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_LocalOrdererManager": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_LocalOrdererManager():
    TypeOnly<current.LocalOrdererManager>;
declare function use_old_ClassDeclaration_LocalOrdererManager(
    use: TypeOnly<old.LocalOrdererManager>): void;
use_old_ClassDeclaration_LocalOrdererManager(
    get_current_ClassDeclaration_LocalOrdererManager());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_LocalWebSocket": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_LocalWebSocket():
    TypeOnly<old.LocalWebSocket>;
declare function use_current_ClassDeclaration_LocalWebSocket(
    use: TypeOnly<current.LocalWebSocket>): void;
use_current_ClassDeclaration_LocalWebSocket(
    get_old_ClassDeclaration_LocalWebSocket());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_LocalWebSocket": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_LocalWebSocket():
    TypeOnly<current.LocalWebSocket>;
declare function use_old_ClassDeclaration_LocalWebSocket(
    use: TypeOnly<old.LocalWebSocket>): void;
use_old_ClassDeclaration_LocalWebSocket(
    get_current_ClassDeclaration_LocalWebSocket());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_LocalWebSocketServer": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_LocalWebSocketServer():
    TypeOnly<old.LocalWebSocketServer>;
declare function use_current_ClassDeclaration_LocalWebSocketServer(
    use: TypeOnly<current.LocalWebSocketServer>): void;
use_current_ClassDeclaration_LocalWebSocketServer(
    get_old_ClassDeclaration_LocalWebSocketServer());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_LocalWebSocketServer": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_LocalWebSocketServer():
    TypeOnly<current.LocalWebSocketServer>;
declare function use_old_ClassDeclaration_LocalWebSocketServer(
    use: TypeOnly<old.LocalWebSocketServer>): void;
use_old_ClassDeclaration_LocalWebSocketServer(
    get_current_ClassDeclaration_LocalWebSocketServer());
