/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/server-services-ordering-rdkafka-previous";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IKafkaConsumerOptions": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IKafkaConsumerOptions():
    TypeOnly<old.IKafkaConsumerOptions>;
declare function use_current_InterfaceDeclaration_IKafkaConsumerOptions(
    use: TypeOnly<current.IKafkaConsumerOptions>): void;
use_current_InterfaceDeclaration_IKafkaConsumerOptions(
    get_old_InterfaceDeclaration_IKafkaConsumerOptions());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IKafkaConsumerOptions": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IKafkaConsumerOptions():
    TypeOnly<current.IKafkaConsumerOptions>;
declare function use_old_InterfaceDeclaration_IKafkaConsumerOptions(
    use: TypeOnly<old.IKafkaConsumerOptions>): void;
use_old_InterfaceDeclaration_IKafkaConsumerOptions(
    get_current_InterfaceDeclaration_IKafkaConsumerOptions());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IKafkaProducerOptions": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IKafkaProducerOptions():
    TypeOnly<old.IKafkaProducerOptions>;
declare function use_current_InterfaceDeclaration_IKafkaProducerOptions(
    use: TypeOnly<current.IKafkaProducerOptions>): void;
use_current_InterfaceDeclaration_IKafkaProducerOptions(
    get_old_InterfaceDeclaration_IKafkaProducerOptions());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IKafkaProducerOptions": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IKafkaProducerOptions():
    TypeOnly<current.IKafkaProducerOptions>;
declare function use_old_InterfaceDeclaration_IKafkaProducerOptions(
    use: TypeOnly<old.IKafkaProducerOptions>): void;
use_old_InterfaceDeclaration_IKafkaProducerOptions(
    get_current_InterfaceDeclaration_IKafkaProducerOptions());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IRdkafkaResources": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IRdkafkaResources():
    TypeOnly<old.IRdkafkaResources>;
declare function use_current_InterfaceDeclaration_IRdkafkaResources(
    use: TypeOnly<current.IRdkafkaResources>): void;
use_current_InterfaceDeclaration_IRdkafkaResources(
    get_old_InterfaceDeclaration_IRdkafkaResources());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IRdkafkaResources": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IRdkafkaResources():
    TypeOnly<current.IRdkafkaResources>;
declare function use_old_InterfaceDeclaration_IRdkafkaResources(
    use: TypeOnly<old.IRdkafkaResources>): void;
use_old_InterfaceDeclaration_IRdkafkaResources(
    get_current_InterfaceDeclaration_IRdkafkaResources());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_RdkafkaConsumer": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_RdkafkaConsumer():
    TypeOnly<old.RdkafkaConsumer>;
declare function use_current_ClassDeclaration_RdkafkaConsumer(
    use: TypeOnly<current.RdkafkaConsumer>): void;
use_current_ClassDeclaration_RdkafkaConsumer(
    get_old_ClassDeclaration_RdkafkaConsumer());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_RdkafkaConsumer": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_RdkafkaConsumer():
    TypeOnly<current.RdkafkaConsumer>;
declare function use_old_ClassDeclaration_RdkafkaConsumer(
    use: TypeOnly<old.RdkafkaConsumer>): void;
use_old_ClassDeclaration_RdkafkaConsumer(
    get_current_ClassDeclaration_RdkafkaConsumer());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_RdkafkaProducer": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_RdkafkaProducer():
    TypeOnly<old.RdkafkaProducer>;
declare function use_current_ClassDeclaration_RdkafkaProducer(
    use: TypeOnly<current.RdkafkaProducer>): void;
use_current_ClassDeclaration_RdkafkaProducer(
    get_old_ClassDeclaration_RdkafkaProducer());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_RdkafkaProducer": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_RdkafkaProducer():
    TypeOnly<current.RdkafkaProducer>;
declare function use_old_ClassDeclaration_RdkafkaProducer(
    use: TypeOnly<old.RdkafkaProducer>): void;
use_old_ClassDeclaration_RdkafkaProducer(
    get_current_ClassDeclaration_RdkafkaProducer());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_RdkafkaResources": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_RdkafkaResources():
    TypeOnly<old.RdkafkaResources>;
declare function use_current_ClassDeclaration_RdkafkaResources(
    use: TypeOnly<current.RdkafkaResources>): void;
use_current_ClassDeclaration_RdkafkaResources(
    get_old_ClassDeclaration_RdkafkaResources());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_RdkafkaResources": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_RdkafkaResources():
    TypeOnly<current.RdkafkaResources>;
declare function use_old_ClassDeclaration_RdkafkaResources(
    use: TypeOnly<old.RdkafkaResources>): void;
use_old_ClassDeclaration_RdkafkaResources(
    get_current_ClassDeclaration_RdkafkaResources());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_RdkafkaResourcesFactory": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_RdkafkaResourcesFactory():
    TypeOnly<old.RdkafkaResourcesFactory>;
declare function use_current_ClassDeclaration_RdkafkaResourcesFactory(
    use: TypeOnly<current.RdkafkaResourcesFactory>): void;
use_current_ClassDeclaration_RdkafkaResourcesFactory(
    get_old_ClassDeclaration_RdkafkaResourcesFactory());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_RdkafkaResourcesFactory": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_RdkafkaResourcesFactory():
    TypeOnly<current.RdkafkaResourcesFactory>;
declare function use_old_ClassDeclaration_RdkafkaResourcesFactory(
    use: TypeOnly<old.RdkafkaResourcesFactory>): void;
use_old_ClassDeclaration_RdkafkaResourcesFactory(
    get_current_ClassDeclaration_RdkafkaResourcesFactory());
