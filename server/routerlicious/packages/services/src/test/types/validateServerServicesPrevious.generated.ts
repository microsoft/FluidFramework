/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-test-generator in @fluidframework/build-tools.
 */

import type * as old from "@fluidframework/server-services-previous";
import type * as current from "../../index.js";


// See 'build-tools/src/type-test-generator/compatibility.ts' for more information.
type TypeOnly<T> = T extends number
	? number
	: T extends string
	? string
	: T extends boolean | bigint | symbol
	? T
	: {
			[P in keyof T]: TypeOnly<T[P]>;
	  };

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_BasicWebServerFactory": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_BasicWebServerFactory():
    TypeOnly<old.BasicWebServerFactory>;
declare function use_current_ClassDeclaration_BasicWebServerFactory(
    use: TypeOnly<current.BasicWebServerFactory>): void;
use_current_ClassDeclaration_BasicWebServerFactory(
    get_old_ClassDeclaration_BasicWebServerFactory());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_BasicWebServerFactory": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_BasicWebServerFactory():
    TypeOnly<current.BasicWebServerFactory>;
declare function use_old_ClassDeclaration_BasicWebServerFactory(
    use: TypeOnly<old.BasicWebServerFactory>): void;
use_old_ClassDeclaration_BasicWebServerFactory(
    get_current_ClassDeclaration_BasicWebServerFactory());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_ClientManager": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_ClientManager():
    TypeOnly<old.ClientManager>;
declare function use_current_ClassDeclaration_ClientManager(
    use: TypeOnly<current.ClientManager>): void;
use_current_ClassDeclaration_ClientManager(
    get_old_ClassDeclaration_ClientManager());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_ClientManager": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_ClientManager():
    TypeOnly<current.ClientManager>;
declare function use_old_ClassDeclaration_ClientManager(
    use: TypeOnly<old.ClientManager>): void;
use_old_ClassDeclaration_ClientManager(
    get_current_ClassDeclaration_ClientManager());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_ConnectionNotAvailableMode": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_ConnectionNotAvailableMode():
    TypeOnly<old.ConnectionNotAvailableMode>;
declare function use_current_TypeAliasDeclaration_ConnectionNotAvailableMode(
    use: TypeOnly<current.ConnectionNotAvailableMode>): void;
use_current_TypeAliasDeclaration_ConnectionNotAvailableMode(
    get_old_TypeAliasDeclaration_ConnectionNotAvailableMode());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_ConnectionNotAvailableMode": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_ConnectionNotAvailableMode():
    TypeOnly<current.ConnectionNotAvailableMode>;
declare function use_old_TypeAliasDeclaration_ConnectionNotAvailableMode(
    use: TypeOnly<old.ConnectionNotAvailableMode>): void;
use_old_TypeAliasDeclaration_ConnectionNotAvailableMode(
    get_current_TypeAliasDeclaration_ConnectionNotAvailableMode());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DeltaManager": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_DeltaManager():
    TypeOnly<old.DeltaManager>;
declare function use_current_ClassDeclaration_DeltaManager(
    use: TypeOnly<current.DeltaManager>): void;
use_current_ClassDeclaration_DeltaManager(
    get_old_ClassDeclaration_DeltaManager());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DeltaManager": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_DeltaManager():
    TypeOnly<current.DeltaManager>;
declare function use_old_ClassDeclaration_DeltaManager(
    use: TypeOnly<old.DeltaManager>): void;
use_old_ClassDeclaration_DeltaManager(
    get_current_ClassDeclaration_DeltaManager());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DocumentManager": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_DocumentManager():
    TypeOnly<old.DocumentManager>;
declare function use_current_ClassDeclaration_DocumentManager(
    use: TypeOnly<current.DocumentManager>): void;
use_current_ClassDeclaration_DocumentManager(
    get_old_ClassDeclaration_DocumentManager());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DocumentManager": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_DocumentManager():
    TypeOnly<current.DocumentManager>;
declare function use_old_ClassDeclaration_DocumentManager(
    use: TypeOnly<old.DocumentManager>): void;
use_old_ClassDeclaration_DocumentManager(
    get_current_ClassDeclaration_DocumentManager());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DocumentStorage": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_DocumentStorage():
    TypeOnly<old.DocumentStorage>;
declare function use_current_ClassDeclaration_DocumentStorage(
    use: TypeOnly<current.DocumentStorage>): void;
use_current_ClassDeclaration_DocumentStorage(
    get_old_ClassDeclaration_DocumentStorage());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DocumentStorage": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_DocumentStorage():
    TypeOnly<current.DocumentStorage>;
declare function use_old_ClassDeclaration_DocumentStorage(
    use: TypeOnly<old.DocumentStorage>): void;
use_old_ClassDeclaration_DocumentStorage(
    get_current_ClassDeclaration_DocumentStorage());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_HttpServer": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_HttpServer():
    TypeOnly<old.HttpServer>;
declare function use_current_ClassDeclaration_HttpServer(
    use: TypeOnly<current.HttpServer>): void;
use_current_ClassDeclaration_HttpServer(
    get_old_ClassDeclaration_HttpServer());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_HttpServer": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_HttpServer():
    TypeOnly<current.HttpServer>;
declare function use_old_ClassDeclaration_HttpServer(
    use: TypeOnly<old.HttpServer>): void;
use_old_ClassDeclaration_HttpServer(
    get_current_ClassDeclaration_HttpServer());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IHttpServerConfig": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IHttpServerConfig():
    TypeOnly<old.IHttpServerConfig>;
declare function use_current_InterfaceDeclaration_IHttpServerConfig(
    use: TypeOnly<current.IHttpServerConfig>): void;
use_current_InterfaceDeclaration_IHttpServerConfig(
    get_old_InterfaceDeclaration_IHttpServerConfig());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IHttpServerConfig": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IHttpServerConfig():
    TypeOnly<current.IHttpServerConfig>;
declare function use_old_InterfaceDeclaration_IHttpServerConfig(
    use: TypeOnly<old.IHttpServerConfig>): void;
use_old_InterfaceDeclaration_IHttpServerConfig(
    get_current_InterfaceDeclaration_IHttpServerConfig());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_INodeClusterConfig": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_INodeClusterConfig():
    TypeOnly<old.INodeClusterConfig>;
declare function use_current_InterfaceDeclaration_INodeClusterConfig(
    use: TypeOnly<current.INodeClusterConfig>): void;
use_current_InterfaceDeclaration_INodeClusterConfig(
    get_old_InterfaceDeclaration_INodeClusterConfig());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_INodeClusterConfig": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_INodeClusterConfig():
    TypeOnly<current.INodeClusterConfig>;
declare function use_old_InterfaceDeclaration_INodeClusterConfig(
    use: TypeOnly<old.INodeClusterConfig>): void;
use_old_InterfaceDeclaration_INodeClusterConfig(
    get_current_InterfaceDeclaration_INodeClusterConfig());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISocketIoRedisConnection": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISocketIoRedisConnection():
    TypeOnly<old.ISocketIoRedisConnection>;
declare function use_current_InterfaceDeclaration_ISocketIoRedisConnection(
    use: TypeOnly<current.ISocketIoRedisConnection>): void;
use_current_InterfaceDeclaration_ISocketIoRedisConnection(
    get_old_InterfaceDeclaration_ISocketIoRedisConnection());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISocketIoRedisConnection": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISocketIoRedisConnection():
    TypeOnly<current.ISocketIoRedisConnection>;
declare function use_old_InterfaceDeclaration_ISocketIoRedisConnection(
    use: TypeOnly<old.ISocketIoRedisConnection>): void;
use_old_InterfaceDeclaration_ISocketIoRedisConnection(
    get_current_InterfaceDeclaration_ISocketIoRedisConnection());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISocketIoRedisOptions": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISocketIoRedisOptions():
    TypeOnly<old.ISocketIoRedisOptions>;
declare function use_current_InterfaceDeclaration_ISocketIoRedisOptions(
    use: TypeOnly<current.ISocketIoRedisOptions>): void;
use_current_InterfaceDeclaration_ISocketIoRedisOptions(
    get_old_InterfaceDeclaration_ISocketIoRedisOptions());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISocketIoRedisOptions": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISocketIoRedisOptions():
    TypeOnly<current.ISocketIoRedisOptions>;
declare function use_old_InterfaceDeclaration_ISocketIoRedisOptions(
    use: TypeOnly<old.ISocketIoRedisOptions>): void;
use_old_InterfaceDeclaration_ISocketIoRedisOptions(
    get_current_InterfaceDeclaration_ISocketIoRedisOptions());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISocketIoRedisSubscriptionConnection": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISocketIoRedisSubscriptionConnection():
    TypeOnly<old.ISocketIoRedisSubscriptionConnection>;
declare function use_current_InterfaceDeclaration_ISocketIoRedisSubscriptionConnection(
    use: TypeOnly<current.ISocketIoRedisSubscriptionConnection>): void;
use_current_InterfaceDeclaration_ISocketIoRedisSubscriptionConnection(
    get_old_InterfaceDeclaration_ISocketIoRedisSubscriptionConnection());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_ISocketIoRedisSubscriptionConnection": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISocketIoRedisSubscriptionConnection():
    TypeOnly<current.ISocketIoRedisSubscriptionConnection>;
declare function use_old_InterfaceDeclaration_ISocketIoRedisSubscriptionConnection(
    use: TypeOnly<old.ISocketIoRedisSubscriptionConnection>): void;
use_old_InterfaceDeclaration_ISocketIoRedisSubscriptionConnection(
    get_current_InterfaceDeclaration_ISocketIoRedisSubscriptionConnection());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_IsEphemeralContainer": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_IsEphemeralContainer():
    TypeOnly<typeof old.IsEphemeralContainer>;
declare function use_current_VariableDeclaration_IsEphemeralContainer(
    use: TypeOnly<typeof current.IsEphemeralContainer>): void;
use_current_VariableDeclaration_IsEphemeralContainer(
    get_old_VariableDeclaration_IsEphemeralContainer());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_IsEphemeralContainer": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_IsEphemeralContainer():
    TypeOnly<typeof current.IsEphemeralContainer>;
declare function use_old_VariableDeclaration_IsEphemeralContainer(
    use: TypeOnly<typeof old.IsEphemeralContainer>): void;
use_old_VariableDeclaration_IsEphemeralContainer(
    get_current_VariableDeclaration_IsEphemeralContainer());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_MongoCollection": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_MongoCollection():
    TypeOnly<old.MongoCollection<any>>;
declare function use_current_ClassDeclaration_MongoCollection(
    use: TypeOnly<current.MongoCollection<any>>): void;
use_current_ClassDeclaration_MongoCollection(
    get_old_ClassDeclaration_MongoCollection());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_MongoCollection": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_MongoCollection():
    TypeOnly<current.MongoCollection<any>>;
declare function use_old_ClassDeclaration_MongoCollection(
    use: TypeOnly<old.MongoCollection<any>>): void;
use_old_ClassDeclaration_MongoCollection(
    get_current_ClassDeclaration_MongoCollection());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_MongoDb": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_MongoDb():
    TypeOnly<old.MongoDb>;
declare function use_current_ClassDeclaration_MongoDb(
    use: TypeOnly<current.MongoDb>): void;
use_current_ClassDeclaration_MongoDb(
    get_old_ClassDeclaration_MongoDb());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_MongoDb": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_MongoDb():
    TypeOnly<current.MongoDb>;
declare function use_old_ClassDeclaration_MongoDb(
    use: TypeOnly<old.MongoDb>): void;
use_old_ClassDeclaration_MongoDb(
    get_current_ClassDeclaration_MongoDb());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_MongoDbFactory": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_MongoDbFactory():
    TypeOnly<old.MongoDbFactory>;
declare function use_current_ClassDeclaration_MongoDbFactory(
    use: TypeOnly<current.MongoDbFactory>): void;
use_current_ClassDeclaration_MongoDbFactory(
    get_old_ClassDeclaration_MongoDbFactory());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_MongoDbFactory": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_MongoDbFactory():
    TypeOnly<current.MongoDbFactory>;
declare function use_old_ClassDeclaration_MongoDbFactory(
    use: TypeOnly<old.MongoDbFactory>): void;
use_old_ClassDeclaration_MongoDbFactory(
    get_current_ClassDeclaration_MongoDbFactory());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_NodeAllowList": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_NodeAllowList():
    TypeOnly<old.NodeAllowList>;
declare function use_current_ClassDeclaration_NodeAllowList(
    use: TypeOnly<current.NodeAllowList>): void;
use_current_ClassDeclaration_NodeAllowList(
    get_old_ClassDeclaration_NodeAllowList());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_NodeAllowList": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_NodeAllowList():
    TypeOnly<current.NodeAllowList>;
declare function use_old_ClassDeclaration_NodeAllowList(
    use: TypeOnly<old.NodeAllowList>): void;
use_old_ClassDeclaration_NodeAllowList(
    get_current_ClassDeclaration_NodeAllowList());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_NodeClusterWebServerFactory": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_NodeClusterWebServerFactory():
    TypeOnly<old.NodeClusterWebServerFactory>;
declare function use_current_ClassDeclaration_NodeClusterWebServerFactory(
    use: TypeOnly<current.NodeClusterWebServerFactory>): void;
use_current_ClassDeclaration_NodeClusterWebServerFactory(
    get_old_ClassDeclaration_NodeClusterWebServerFactory());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_NodeClusterWebServerFactory": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_NodeClusterWebServerFactory():
    TypeOnly<current.NodeClusterWebServerFactory>;
declare function use_old_ClassDeclaration_NodeClusterWebServerFactory(
    use: TypeOnly<old.NodeClusterWebServerFactory>): void;
use_old_ClassDeclaration_NodeClusterWebServerFactory(
    get_current_ClassDeclaration_NodeClusterWebServerFactory());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_NodeCodeLoader": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_NodeCodeLoader():
    TypeOnly<old.NodeCodeLoader>;
declare function use_current_ClassDeclaration_NodeCodeLoader(
    use: TypeOnly<current.NodeCodeLoader>): void;
use_current_ClassDeclaration_NodeCodeLoader(
    get_old_ClassDeclaration_NodeCodeLoader());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_NodeCodeLoader": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_NodeCodeLoader():
    TypeOnly<current.NodeCodeLoader>;
declare function use_old_ClassDeclaration_NodeCodeLoader(
    use: TypeOnly<old.NodeCodeLoader>): void;
use_old_ClassDeclaration_NodeCodeLoader(
    get_current_ClassDeclaration_NodeCodeLoader());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_RedisCache": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_RedisCache():
    TypeOnly<old.RedisCache>;
declare function use_current_ClassDeclaration_RedisCache(
    use: TypeOnly<current.RedisCache>): void;
use_current_ClassDeclaration_RedisCache(
    get_old_ClassDeclaration_RedisCache());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_RedisCache": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_RedisCache():
    TypeOnly<current.RedisCache>;
declare function use_old_ClassDeclaration_RedisCache(
    use: TypeOnly<old.RedisCache>): void;
use_old_ClassDeclaration_RedisCache(
    get_current_ClassDeclaration_RedisCache());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_RedisSocketIoAdapter": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_RedisSocketIoAdapter():
    TypeOnly<old.RedisSocketIoAdapter>;
declare function use_current_ClassDeclaration_RedisSocketIoAdapter(
    use: TypeOnly<current.RedisSocketIoAdapter>): void;
use_current_ClassDeclaration_RedisSocketIoAdapter(
    get_old_ClassDeclaration_RedisSocketIoAdapter());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_RedisSocketIoAdapter": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_RedisSocketIoAdapter():
    TypeOnly<current.RedisSocketIoAdapter>;
declare function use_old_ClassDeclaration_RedisSocketIoAdapter(
    use: TypeOnly<old.RedisSocketIoAdapter>): void;
use_old_ClassDeclaration_RedisSocketIoAdapter(
    get_current_ClassDeclaration_RedisSocketIoAdapter());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_RedisThrottleAndUsageStorageManager": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_RedisThrottleAndUsageStorageManager():
    TypeOnly<old.RedisThrottleAndUsageStorageManager>;
declare function use_current_ClassDeclaration_RedisThrottleAndUsageStorageManager(
    use: TypeOnly<current.RedisThrottleAndUsageStorageManager>): void;
use_current_ClassDeclaration_RedisThrottleAndUsageStorageManager(
    get_old_ClassDeclaration_RedisThrottleAndUsageStorageManager());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_RedisThrottleAndUsageStorageManager": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_RedisThrottleAndUsageStorageManager():
    TypeOnly<current.RedisThrottleAndUsageStorageManager>;
declare function use_old_ClassDeclaration_RedisThrottleAndUsageStorageManager(
    use: TypeOnly<old.RedisThrottleAndUsageStorageManager>): void;
use_old_ClassDeclaration_RedisThrottleAndUsageStorageManager(
    get_current_ClassDeclaration_RedisThrottleAndUsageStorageManager());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_RequestListener": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_RequestListener():
    TypeOnly<old.RequestListener>;
declare function use_current_TypeAliasDeclaration_RequestListener(
    use: TypeOnly<current.RequestListener>): void;
use_current_TypeAliasDeclaration_RequestListener(
    get_old_TypeAliasDeclaration_RequestListener());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "TypeAliasDeclaration_RequestListener": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_RequestListener():
    TypeOnly<current.RequestListener>;
declare function use_old_TypeAliasDeclaration_RequestListener(
    use: TypeOnly<old.RequestListener>): void;
use_old_TypeAliasDeclaration_RequestListener(
    get_current_TypeAliasDeclaration_RequestListener());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_RestLessServer": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_RestLessServer():
    TypeOnly<old.RestLessServer>;
declare function use_current_ClassDeclaration_RestLessServer(
    use: TypeOnly<current.RestLessServer>): void;
use_current_ClassDeclaration_RestLessServer(
    get_old_ClassDeclaration_RestLessServer());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_RestLessServer": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_RestLessServer():
    TypeOnly<current.RestLessServer>;
declare function use_old_ClassDeclaration_RestLessServer(
    use: TypeOnly<old.RestLessServer>): void;
use_old_ClassDeclaration_RestLessServer(
    get_current_ClassDeclaration_RestLessServer());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SecretManager": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_SecretManager():
    TypeOnly<old.SecretManager>;
declare function use_current_ClassDeclaration_SecretManager(
    use: TypeOnly<current.SecretManager>): void;
use_current_ClassDeclaration_SecretManager(
    get_old_ClassDeclaration_SecretManager());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SecretManager": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_SecretManager():
    TypeOnly<current.SecretManager>;
declare function use_old_ClassDeclaration_SecretManager(
    use: TypeOnly<old.SecretManager>): void;
use_old_ClassDeclaration_SecretManager(
    get_current_ClassDeclaration_SecretManager());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SocketIoNodeClusterWebServerFactory": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_SocketIoNodeClusterWebServerFactory():
    TypeOnly<old.SocketIoNodeClusterWebServerFactory>;
declare function use_current_ClassDeclaration_SocketIoNodeClusterWebServerFactory(
    use: TypeOnly<current.SocketIoNodeClusterWebServerFactory>): void;
use_current_ClassDeclaration_SocketIoNodeClusterWebServerFactory(
    get_old_ClassDeclaration_SocketIoNodeClusterWebServerFactory());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SocketIoNodeClusterWebServerFactory": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_SocketIoNodeClusterWebServerFactory():
    TypeOnly<current.SocketIoNodeClusterWebServerFactory>;
declare function use_old_ClassDeclaration_SocketIoNodeClusterWebServerFactory(
    use: TypeOnly<old.SocketIoNodeClusterWebServerFactory>): void;
use_old_ClassDeclaration_SocketIoNodeClusterWebServerFactory(
    get_current_ClassDeclaration_SocketIoNodeClusterWebServerFactory());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SocketIoRedisPublisher": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_SocketIoRedisPublisher():
    TypeOnly<old.SocketIoRedisPublisher>;
declare function use_current_ClassDeclaration_SocketIoRedisPublisher(
    use: TypeOnly<current.SocketIoRedisPublisher>): void;
use_current_ClassDeclaration_SocketIoRedisPublisher(
    get_old_ClassDeclaration_SocketIoRedisPublisher());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SocketIoRedisPublisher": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_SocketIoRedisPublisher():
    TypeOnly<current.SocketIoRedisPublisher>;
declare function use_old_ClassDeclaration_SocketIoRedisPublisher(
    use: TypeOnly<old.SocketIoRedisPublisher>): void;
use_old_ClassDeclaration_SocketIoRedisPublisher(
    get_current_ClassDeclaration_SocketIoRedisPublisher());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SocketIoRedisTopic": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_SocketIoRedisTopic():
    TypeOnly<old.SocketIoRedisTopic>;
declare function use_current_ClassDeclaration_SocketIoRedisTopic(
    use: TypeOnly<current.SocketIoRedisTopic>): void;
use_current_ClassDeclaration_SocketIoRedisTopic(
    get_old_ClassDeclaration_SocketIoRedisTopic());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SocketIoRedisTopic": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_SocketIoRedisTopic():
    TypeOnly<current.SocketIoRedisTopic>;
declare function use_old_ClassDeclaration_SocketIoRedisTopic(
    use: TypeOnly<old.SocketIoRedisTopic>): void;
use_old_ClassDeclaration_SocketIoRedisTopic(
    get_current_ClassDeclaration_SocketIoRedisTopic());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SocketIoWebServerFactory": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_SocketIoWebServerFactory():
    TypeOnly<old.SocketIoWebServerFactory>;
declare function use_current_ClassDeclaration_SocketIoWebServerFactory(
    use: TypeOnly<current.SocketIoWebServerFactory>): void;
use_current_ClassDeclaration_SocketIoWebServerFactory(
    get_old_ClassDeclaration_SocketIoWebServerFactory());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_SocketIoWebServerFactory": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_SocketIoWebServerFactory():
    TypeOnly<current.SocketIoWebServerFactory>;
declare function use_old_ClassDeclaration_SocketIoWebServerFactory(
    use: TypeOnly<old.SocketIoWebServerFactory>): void;
use_old_ClassDeclaration_SocketIoWebServerFactory(
    get_current_ClassDeclaration_SocketIoWebServerFactory());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_StorageNameRetriever": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_StorageNameRetriever():
    TypeOnly<old.StorageNameRetriever>;
declare function use_current_ClassDeclaration_StorageNameRetriever(
    use: TypeOnly<current.StorageNameRetriever>): void;
use_current_ClassDeclaration_StorageNameRetriever(
    get_old_ClassDeclaration_StorageNameRetriever());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_StorageNameRetriever": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_StorageNameRetriever():
    TypeOnly<current.StorageNameRetriever>;
declare function use_old_ClassDeclaration_StorageNameRetriever(
    use: TypeOnly<old.StorageNameRetriever>): void;
use_old_ClassDeclaration_StorageNameRetriever(
    get_current_ClassDeclaration_StorageNameRetriever());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_Tenant": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_Tenant():
    TypeOnly<old.Tenant>;
declare function use_current_ClassDeclaration_Tenant(
    use: TypeOnly<current.Tenant>): void;
use_current_ClassDeclaration_Tenant(
    get_old_ClassDeclaration_Tenant());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_Tenant": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_Tenant():
    TypeOnly<current.Tenant>;
declare function use_old_ClassDeclaration_Tenant(
    use: TypeOnly<old.Tenant>): void;
use_old_ClassDeclaration_Tenant(
    get_current_ClassDeclaration_Tenant());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_TenantManager": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_TenantManager():
    TypeOnly<old.TenantManager>;
declare function use_current_ClassDeclaration_TenantManager(
    use: TypeOnly<current.TenantManager>): void;
use_current_ClassDeclaration_TenantManager(
    get_old_ClassDeclaration_TenantManager());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_TenantManager": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_TenantManager():
    TypeOnly<current.TenantManager>;
declare function use_old_ClassDeclaration_TenantManager(
    use: TypeOnly<old.TenantManager>): void;
use_old_ClassDeclaration_TenantManager(
    get_current_ClassDeclaration_TenantManager());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_Throttler": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_Throttler():
    TypeOnly<old.Throttler>;
declare function use_current_ClassDeclaration_Throttler(
    use: TypeOnly<current.Throttler>): void;
use_current_ClassDeclaration_Throttler(
    get_old_ClassDeclaration_Throttler());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_Throttler": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_Throttler():
    TypeOnly<current.Throttler>;
declare function use_old_ClassDeclaration_Throttler(
    use: TypeOnly<old.Throttler>): void;
use_old_ClassDeclaration_Throttler(
    get_current_ClassDeclaration_Throttler());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_ThrottlerHelper": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_ThrottlerHelper():
    TypeOnly<old.ThrottlerHelper>;
declare function use_current_ClassDeclaration_ThrottlerHelper(
    use: TypeOnly<current.ThrottlerHelper>): void;
use_current_ClassDeclaration_ThrottlerHelper(
    get_old_ClassDeclaration_ThrottlerHelper());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_ThrottlerHelper": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_ThrottlerHelper():
    TypeOnly<current.ThrottlerHelper>;
declare function use_old_ClassDeclaration_ThrottlerHelper(
    use: TypeOnly<old.ThrottlerHelper>): void;
use_old_ClassDeclaration_ThrottlerHelper(
    get_current_ClassDeclaration_ThrottlerHelper());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_WebServer": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_WebServer():
    TypeOnly<old.WebServer>;
declare function use_current_ClassDeclaration_WebServer(
    use: TypeOnly<current.WebServer>): void;
use_current_ClassDeclaration_WebServer(
    get_old_ClassDeclaration_WebServer());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_WebServer": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_WebServer():
    TypeOnly<current.WebServer>;
declare function use_old_ClassDeclaration_WebServer(
    use: TypeOnly<old.WebServer>): void;
use_old_ClassDeclaration_WebServer(
    get_current_ClassDeclaration_WebServer());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_WholeSummaryReadGitManager": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_WholeSummaryReadGitManager():
    TypeOnly<old.WholeSummaryReadGitManager>;
declare function use_current_ClassDeclaration_WholeSummaryReadGitManager(
    use: TypeOnly<current.WholeSummaryReadGitManager>): void;
use_current_ClassDeclaration_WholeSummaryReadGitManager(
    get_old_ClassDeclaration_WholeSummaryReadGitManager());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_WholeSummaryReadGitManager": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_WholeSummaryReadGitManager():
    TypeOnly<current.WholeSummaryReadGitManager>;
declare function use_old_ClassDeclaration_WholeSummaryReadGitManager(
    use: TypeOnly<old.WholeSummaryReadGitManager>): void;
use_old_ClassDeclaration_WholeSummaryReadGitManager(
    get_current_ClassDeclaration_WholeSummaryReadGitManager());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_WholeSummaryWriteGitManager": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_WholeSummaryWriteGitManager():
    TypeOnly<old.WholeSummaryWriteGitManager>;
declare function use_current_ClassDeclaration_WholeSummaryWriteGitManager(
    use: TypeOnly<current.WholeSummaryWriteGitManager>): void;
use_current_ClassDeclaration_WholeSummaryWriteGitManager(
    get_old_ClassDeclaration_WholeSummaryWriteGitManager());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_WholeSummaryWriteGitManager": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_WholeSummaryWriteGitManager():
    TypeOnly<current.WholeSummaryWriteGitManager>;
declare function use_old_ClassDeclaration_WholeSummaryWriteGitManager(
    use: TypeOnly<old.WholeSummaryWriteGitManager>): void;
use_old_ClassDeclaration_WholeSummaryWriteGitManager(
    get_current_ClassDeclaration_WholeSummaryWriteGitManager());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_containsPathTraversal": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_containsPathTraversal():
    TypeOnly<typeof old.containsPathTraversal>;
declare function use_current_FunctionDeclaration_containsPathTraversal(
    use: TypeOnly<typeof current.containsPathTraversal>): void;
use_current_FunctionDeclaration_containsPathTraversal(
    get_old_FunctionDeclaration_containsPathTraversal());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_containsPathTraversal": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_containsPathTraversal():
    TypeOnly<typeof current.containsPathTraversal>;
declare function use_old_FunctionDeclaration_containsPathTraversal(
    use: TypeOnly<typeof old.containsPathTraversal>): void;
use_old_FunctionDeclaration_containsPathTraversal(
    get_current_FunctionDeclaration_containsPathTraversal());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_createMessageReceiver": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_createMessageReceiver():
    TypeOnly<typeof old.createMessageReceiver>;
declare function use_current_FunctionDeclaration_createMessageReceiver(
    use: TypeOnly<typeof current.createMessageReceiver>): void;
use_current_FunctionDeclaration_createMessageReceiver(
    get_old_FunctionDeclaration_createMessageReceiver());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_createMessageReceiver": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_createMessageReceiver():
    TypeOnly<typeof current.createMessageReceiver>;
declare function use_old_FunctionDeclaration_createMessageReceiver(
    use: TypeOnly<typeof old.createMessageReceiver>): void;
use_old_FunctionDeclaration_createMessageReceiver(
    get_current_FunctionDeclaration_createMessageReceiver());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_createMessageSender": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_createMessageSender():
    TypeOnly<typeof old.createMessageSender>;
declare function use_current_FunctionDeclaration_createMessageSender(
    use: TypeOnly<typeof current.createMessageSender>): void;
use_current_FunctionDeclaration_createMessageSender(
    get_old_FunctionDeclaration_createMessageSender());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_createMessageSender": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_createMessageSender():
    TypeOnly<typeof current.createMessageSender>;
declare function use_old_FunctionDeclaration_createMessageSender(
    use: TypeOnly<typeof old.createMessageSender>): void;
use_old_FunctionDeclaration_createMessageSender(
    get_current_FunctionDeclaration_createMessageSender());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_createMetricClient": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_createMetricClient():
    TypeOnly<typeof old.createMetricClient>;
declare function use_current_FunctionDeclaration_createMetricClient(
    use: TypeOnly<typeof current.createMetricClient>): void;
use_current_FunctionDeclaration_createMetricClient(
    get_old_FunctionDeclaration_createMetricClient());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_createMetricClient": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_createMetricClient():
    TypeOnly<typeof current.createMetricClient>;
declare function use_old_FunctionDeclaration_createMetricClient(
    use: TypeOnly<typeof old.createMetricClient>): void;
use_old_FunctionDeclaration_createMetricClient(
    get_current_FunctionDeclaration_createMetricClient());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_createProducer": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_createProducer():
    TypeOnly<typeof old.createProducer>;
declare function use_current_FunctionDeclaration_createProducer(
    use: TypeOnly<typeof current.createProducer>): void;
use_current_FunctionDeclaration_createProducer(
    get_old_FunctionDeclaration_createProducer());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_createProducer": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_createProducer():
    TypeOnly<typeof current.createProducer>;
declare function use_old_FunctionDeclaration_createProducer(
    use: TypeOnly<typeof old.createProducer>): void;
use_old_FunctionDeclaration_createProducer(
    get_current_FunctionDeclaration_createProducer());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_decodeHeader": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_decodeHeader():
    TypeOnly<typeof old.decodeHeader>;
declare function use_current_VariableDeclaration_decodeHeader(
    use: TypeOnly<typeof current.decodeHeader>): void;
use_current_VariableDeclaration_decodeHeader(
    get_old_VariableDeclaration_decodeHeader());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_decodeHeader": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_decodeHeader():
    TypeOnly<typeof current.decodeHeader>;
declare function use_old_VariableDeclaration_decodeHeader(
    use: TypeOnly<typeof old.decodeHeader>): void;
use_old_VariableDeclaration_decodeHeader(
    get_current_VariableDeclaration_decodeHeader());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_defaultErrorMessage": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_defaultErrorMessage():
    TypeOnly<typeof old.defaultErrorMessage>;
declare function use_current_VariableDeclaration_defaultErrorMessage(
    use: TypeOnly<typeof current.defaultErrorMessage>): void;
use_current_VariableDeclaration_defaultErrorMessage(
    get_old_VariableDeclaration_defaultErrorMessage());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "VariableDeclaration_defaultErrorMessage": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_defaultErrorMessage():
    TypeOnly<typeof current.defaultErrorMessage>;
declare function use_old_VariableDeclaration_defaultErrorMessage(
    use: TypeOnly<typeof old.defaultErrorMessage>): void;
use_old_VariableDeclaration_defaultErrorMessage(
    get_current_VariableDeclaration_defaultErrorMessage());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_getBooleanParam": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_getBooleanParam():
    TypeOnly<typeof old.getBooleanParam>;
declare function use_current_FunctionDeclaration_getBooleanParam(
    use: TypeOnly<typeof current.getBooleanParam>): void;
use_current_FunctionDeclaration_getBooleanParam(
    get_old_FunctionDeclaration_getBooleanParam());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_getBooleanParam": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_getBooleanParam():
    TypeOnly<typeof current.getBooleanParam>;
declare function use_old_FunctionDeclaration_getBooleanParam(
    use: TypeOnly<typeof old.getBooleanParam>): void;
use_old_FunctionDeclaration_getBooleanParam(
    get_current_FunctionDeclaration_getBooleanParam());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_getDbFactory": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_getDbFactory():
    TypeOnly<typeof old.getDbFactory>;
declare function use_current_FunctionDeclaration_getDbFactory(
    use: TypeOnly<typeof current.getDbFactory>): void;
use_current_FunctionDeclaration_getDbFactory(
    get_old_FunctionDeclaration_getDbFactory());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_getDbFactory": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_getDbFactory():
    TypeOnly<typeof current.getDbFactory>;
declare function use_old_FunctionDeclaration_getDbFactory(
    use: TypeOnly<typeof old.getDbFactory>): void;
use_old_FunctionDeclaration_getDbFactory(
    get_current_FunctionDeclaration_getDbFactory());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_handleResponse": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_handleResponse():
    TypeOnly<typeof old.handleResponse>;
declare function use_current_FunctionDeclaration_handleResponse(
    use: TypeOnly<typeof current.handleResponse>): void;
use_current_FunctionDeclaration_handleResponse(
    get_old_FunctionDeclaration_handleResponse());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_handleResponse": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_handleResponse():
    TypeOnly<typeof current.handleResponse>;
declare function use_old_FunctionDeclaration_handleResponse(
    use: TypeOnly<typeof old.handleResponse>): void;
use_old_FunctionDeclaration_handleResponse(
    get_current_FunctionDeclaration_handleResponse());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_run": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_run():
    TypeOnly<typeof old.run>;
declare function use_current_FunctionDeclaration_run(
    use: TypeOnly<typeof current.run>): void;
use_current_FunctionDeclaration_run(
    get_old_FunctionDeclaration_run());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_run": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_run():
    TypeOnly<typeof current.run>;
declare function use_old_FunctionDeclaration_run(
    use: TypeOnly<typeof old.run>): void;
use_old_FunctionDeclaration_run(
    get_current_FunctionDeclaration_run());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_runService": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_runService():
    TypeOnly<typeof old.runService>;
declare function use_current_FunctionDeclaration_runService(
    use: TypeOnly<typeof current.runService>): void;
use_current_FunctionDeclaration_runService(
    get_old_FunctionDeclaration_runService());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_runService": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_runService():
    TypeOnly<typeof current.runService>;
declare function use_old_FunctionDeclaration_runService(
    use: TypeOnly<typeof old.runService>): void;
use_old_FunctionDeclaration_runService(
    get_current_FunctionDeclaration_runService());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_validateRequestParams": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_validateRequestParams():
    TypeOnly<typeof old.validateRequestParams>;
declare function use_current_FunctionDeclaration_validateRequestParams(
    use: TypeOnly<typeof current.validateRequestParams>): void;
use_current_FunctionDeclaration_validateRequestParams(
    get_old_FunctionDeclaration_validateRequestParams());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "FunctionDeclaration_validateRequestParams": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_validateRequestParams():
    TypeOnly<typeof current.validateRequestParams>;
declare function use_old_FunctionDeclaration_validateRequestParams(
    use: TypeOnly<typeof old.validateRequestParams>): void;
use_old_FunctionDeclaration_validateRequestParams(
    get_current_FunctionDeclaration_validateRequestParams());
