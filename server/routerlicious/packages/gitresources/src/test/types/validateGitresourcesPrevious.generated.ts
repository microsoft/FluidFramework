/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType, requireAssignableTo } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/gitresources-previous";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current | requireAssignableTo<true, true>;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IAuthor": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IAuthor = requireAssignableTo<TypeOnly<old.IAuthor>, TypeOnly<current.IAuthor>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IAuthor": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IAuthor = requireAssignableTo<TypeOnly<current.IAuthor>, TypeOnly<old.IAuthor>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IBlob": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IBlob = requireAssignableTo<TypeOnly<old.IBlob>, TypeOnly<current.IBlob>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IBlob": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IBlob = requireAssignableTo<TypeOnly<current.IBlob>, TypeOnly<old.IBlob>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICommit": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ICommit = requireAssignableTo<TypeOnly<old.ICommit>, TypeOnly<current.ICommit>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICommit": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ICommit = requireAssignableTo<TypeOnly<current.ICommit>, TypeOnly<old.ICommit>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICommitDetails": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ICommitDetails = requireAssignableTo<TypeOnly<old.ICommitDetails>, TypeOnly<current.ICommitDetails>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICommitDetails": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ICommitDetails = requireAssignableTo<TypeOnly<current.ICommitDetails>, TypeOnly<old.ICommitDetails>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICommitHash": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ICommitHash = requireAssignableTo<TypeOnly<old.ICommitHash>, TypeOnly<current.ICommitHash>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICommitHash": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ICommitHash = requireAssignableTo<TypeOnly<current.ICommitHash>, TypeOnly<old.ICommitHash>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICommitter": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ICommitter = requireAssignableTo<TypeOnly<old.ICommitter>, TypeOnly<current.ICommitter>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICommitter": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ICommitter = requireAssignableTo<TypeOnly<current.ICommitter>, TypeOnly<old.ICommitter>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICreateBlobParams": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ICreateBlobParams = requireAssignableTo<TypeOnly<old.ICreateBlobParams>, TypeOnly<current.ICreateBlobParams>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICreateBlobParams": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ICreateBlobParams = requireAssignableTo<TypeOnly<current.ICreateBlobParams>, TypeOnly<old.ICreateBlobParams>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICreateBlobResponse": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ICreateBlobResponse = requireAssignableTo<TypeOnly<old.ICreateBlobResponse>, TypeOnly<current.ICreateBlobResponse>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICreateBlobResponse": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ICreateBlobResponse = requireAssignableTo<TypeOnly<current.ICreateBlobResponse>, TypeOnly<old.ICreateBlobResponse>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICreateCommitParams": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ICreateCommitParams = requireAssignableTo<TypeOnly<old.ICreateCommitParams>, TypeOnly<current.ICreateCommitParams>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICreateCommitParams": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ICreateCommitParams = requireAssignableTo<TypeOnly<current.ICreateCommitParams>, TypeOnly<old.ICreateCommitParams>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICreateRefParams": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ICreateRefParams = requireAssignableTo<TypeOnly<old.ICreateRefParams>, TypeOnly<current.ICreateRefParams>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICreateRefParams": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ICreateRefParams = requireAssignableTo<TypeOnly<current.ICreateRefParams>, TypeOnly<old.ICreateRefParams>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICreateRepoParams": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ICreateRepoParams = requireAssignableTo<TypeOnly<old.ICreateRepoParams>, TypeOnly<current.ICreateRepoParams>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICreateRepoParams": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ICreateRepoParams = requireAssignableTo<TypeOnly<current.ICreateRepoParams>, TypeOnly<old.ICreateRepoParams>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICreateTagParams": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ICreateTagParams = requireAssignableTo<TypeOnly<old.ICreateTagParams>, TypeOnly<current.ICreateTagParams>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICreateTagParams": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ICreateTagParams = requireAssignableTo<TypeOnly<current.ICreateTagParams>, TypeOnly<old.ICreateTagParams>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICreateTreeEntry": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ICreateTreeEntry = requireAssignableTo<TypeOnly<old.ICreateTreeEntry>, TypeOnly<current.ICreateTreeEntry>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICreateTreeEntry": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ICreateTreeEntry = requireAssignableTo<TypeOnly<current.ICreateTreeEntry>, TypeOnly<old.ICreateTreeEntry>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICreateTreeParams": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ICreateTreeParams = requireAssignableTo<TypeOnly<old.ICreateTreeParams>, TypeOnly<current.ICreateTreeParams>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ICreateTreeParams": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ICreateTreeParams = requireAssignableTo<TypeOnly<current.ICreateTreeParams>, TypeOnly<old.ICreateTreeParams>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IHeader": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IHeader = requireAssignableTo<TypeOnly<old.IHeader>, TypeOnly<current.IHeader>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IHeader": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IHeader = requireAssignableTo<TypeOnly<current.IHeader>, TypeOnly<old.IHeader>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IPatchRefParams": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IPatchRefParams = requireAssignableTo<TypeOnly<old.IPatchRefParams>, TypeOnly<current.IPatchRefParams>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IPatchRefParams": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IPatchRefParams = requireAssignableTo<TypeOnly<current.IPatchRefParams>, TypeOnly<old.IPatchRefParams>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IRef": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IRef = requireAssignableTo<TypeOnly<old.IRef>, TypeOnly<current.IRef>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IRef": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IRef = requireAssignableTo<TypeOnly<current.IRef>, TypeOnly<old.IRef>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ITag": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ITag = requireAssignableTo<TypeOnly<old.ITag>, TypeOnly<current.ITag>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ITag": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ITag = requireAssignableTo<TypeOnly<current.ITag>, TypeOnly<old.ITag>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ITagger": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ITagger = requireAssignableTo<TypeOnly<old.ITagger>, TypeOnly<current.ITagger>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ITagger": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ITagger = requireAssignableTo<TypeOnly<current.ITagger>, TypeOnly<old.ITagger>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ITree": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ITree = requireAssignableTo<TypeOnly<old.ITree>, TypeOnly<current.ITree>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ITree": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ITree = requireAssignableTo<TypeOnly<current.ITree>, TypeOnly<old.ITree>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ITreeEntry": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_ITreeEntry = requireAssignableTo<TypeOnly<old.ITreeEntry>, TypeOnly<current.ITreeEntry>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_ITreeEntry": {"backCompat": false}
 */
declare type current_as_old_for_Interface_ITreeEntry = requireAssignableTo<TypeOnly<current.ITreeEntry>, TypeOnly<old.ITreeEntry>>
