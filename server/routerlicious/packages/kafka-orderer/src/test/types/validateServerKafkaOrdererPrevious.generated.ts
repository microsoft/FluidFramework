/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-test-generator in @fluidframework/build-tools.
 */
import * as old from "@fluidframework/server-kafka-orderer-previous";
import * as current from "../../index";

type TypeOnly<T> = {
    [P in keyof T]: TypeOnly<T[P]>;
};

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_KafkaOrderer": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_KafkaOrderer():
    TypeOnly<old.KafkaOrderer>;
declare function use_current_ClassDeclaration_KafkaOrderer(
    use: TypeOnly<current.KafkaOrderer>);
use_current_ClassDeclaration_KafkaOrderer(
    get_old_ClassDeclaration_KafkaOrderer());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_KafkaOrderer": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_KafkaOrderer():
    TypeOnly<current.KafkaOrderer>;
declare function use_old_ClassDeclaration_KafkaOrderer(
    use: TypeOnly<old.KafkaOrderer>);
use_old_ClassDeclaration_KafkaOrderer(
    get_current_ClassDeclaration_KafkaOrderer());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_KafkaOrdererConnection": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_KafkaOrdererConnection():
    TypeOnly<old.KafkaOrdererConnection>;
declare function use_current_ClassDeclaration_KafkaOrdererConnection(
    use: TypeOnly<current.KafkaOrdererConnection>);
use_current_ClassDeclaration_KafkaOrdererConnection(
    get_old_ClassDeclaration_KafkaOrdererConnection());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_KafkaOrdererConnection": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_KafkaOrdererConnection():
    TypeOnly<current.KafkaOrdererConnection>;
declare function use_old_ClassDeclaration_KafkaOrdererConnection(
    use: TypeOnly<old.KafkaOrdererConnection>);
use_old_ClassDeclaration_KafkaOrdererConnection(
    get_current_ClassDeclaration_KafkaOrdererConnection());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_KafkaOrdererFactory": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_KafkaOrdererFactory():
    TypeOnly<old.KafkaOrdererFactory>;
declare function use_current_ClassDeclaration_KafkaOrdererFactory(
    use: TypeOnly<current.KafkaOrdererFactory>);
use_current_ClassDeclaration_KafkaOrdererFactory(
    get_old_ClassDeclaration_KafkaOrdererFactory());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_KafkaOrdererFactory": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_KafkaOrdererFactory():
    TypeOnly<current.KafkaOrdererFactory>;
declare function use_old_ClassDeclaration_KafkaOrdererFactory(
    use: TypeOnly<old.KafkaOrdererFactory>);
use_old_ClassDeclaration_KafkaOrdererFactory(
    get_current_ClassDeclaration_KafkaOrdererFactory());
