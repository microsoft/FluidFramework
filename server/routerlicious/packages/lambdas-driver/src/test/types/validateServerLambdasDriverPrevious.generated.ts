/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-test-generator in @fluidframework/build-tools.
 */

import type * as old from "@fluidframework/server-lambdas-driver-previous";
import type * as current from "../../index.js";


type ValueOf<T> = T[keyof T];
type OnlySymbols<T> = T extends symbol ? T : never;
type WellKnownSymbols = OnlySymbols<ValueOf<typeof Symbol>>;
/**
 * Omit (replace with never) a key if it is a custom symbol,
 * not just symbol or a well known symbol from the global Symbol.
 */
type SkipUniqueSymbols<Key> = symbol extends Key
	? Key // Key is symbol or a generalization of symbol, so leave it as is.
	: Key extends symbol
		? Key extends WellKnownSymbols
			? Key // Key is a well known symbol from the global Symbol object. These are shared between packages, so they are fine and kept as is.
			: never // Key is most likely some specialized symbol, typically a unique symbol. These break type comparisons so are removed by replacing them with never.
		: Key; // Key is not a symbol (for example its a string or number), so leave it as is.
/**
 * Remove details of T which are incompatible with type testing while keeping as much as is practical.
 *
 * See 'build-tools/packages/build-tools/src/typeValidator/compatibility.ts' for more information.
 */
type TypeOnly<T> = T extends number
	? number
	: T extends boolean | bigint | string
		? T
		: T extends symbol
			? SkipUniqueSymbols<T>
			: {
					[P in keyof T as SkipUniqueSymbols<P>]: TypeOnly<T[P]>;
				};

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DocumentContext": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_DocumentContext():
    TypeOnly<old.DocumentContext>;
declare function use_current_ClassDeclaration_DocumentContext(
    use: TypeOnly<current.DocumentContext>): void;
use_current_ClassDeclaration_DocumentContext(
    get_old_ClassDeclaration_DocumentContext());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DocumentContext": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_DocumentContext():
    TypeOnly<current.DocumentContext>;
declare function use_old_ClassDeclaration_DocumentContext(
    use: TypeOnly<old.DocumentContext>): void;
use_old_ClassDeclaration_DocumentContext(
    get_current_ClassDeclaration_DocumentContext());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DocumentLambdaFactory": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_DocumentLambdaFactory():
    TypeOnly<old.DocumentLambdaFactory>;
declare function use_current_ClassDeclaration_DocumentLambdaFactory(
    use: TypeOnly<current.DocumentLambdaFactory>): void;
use_current_ClassDeclaration_DocumentLambdaFactory(
    get_old_ClassDeclaration_DocumentLambdaFactory());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_DocumentLambdaFactory": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_DocumentLambdaFactory():
    TypeOnly<current.DocumentLambdaFactory>;
declare function use_old_ClassDeclaration_DocumentLambdaFactory(
    use: TypeOnly<old.DocumentLambdaFactory>): void;
use_old_ClassDeclaration_DocumentLambdaFactory(
    get_current_ClassDeclaration_DocumentLambdaFactory());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IKafkaResources": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IKafkaResources():
    TypeOnly<old.IKafkaResources>;
declare function use_current_InterfaceDeclaration_IKafkaResources(
    use: TypeOnly<current.IKafkaResources>): void;
use_current_InterfaceDeclaration_IKafkaResources(
    get_old_InterfaceDeclaration_IKafkaResources());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "InterfaceDeclaration_IKafkaResources": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IKafkaResources():
    TypeOnly<current.IKafkaResources>;
declare function use_old_InterfaceDeclaration_IKafkaResources(
    use: TypeOnly<old.IKafkaResources>): void;
use_old_InterfaceDeclaration_IKafkaResources(
    get_current_InterfaceDeclaration_IKafkaResources());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_KafkaRunner": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_KafkaRunner():
    TypeOnly<old.KafkaRunner>;
declare function use_current_ClassDeclaration_KafkaRunner(
    use: TypeOnly<current.KafkaRunner>): void;
use_current_ClassDeclaration_KafkaRunner(
    get_old_ClassDeclaration_KafkaRunner());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_KafkaRunner": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_KafkaRunner():
    TypeOnly<current.KafkaRunner>;
declare function use_old_ClassDeclaration_KafkaRunner(
    use: TypeOnly<old.KafkaRunner>): void;
use_old_ClassDeclaration_KafkaRunner(
    get_current_ClassDeclaration_KafkaRunner());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_KafkaRunnerFactory": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_KafkaRunnerFactory():
    TypeOnly<old.KafkaRunnerFactory>;
declare function use_current_ClassDeclaration_KafkaRunnerFactory(
    use: TypeOnly<current.KafkaRunnerFactory>): void;
use_current_ClassDeclaration_KafkaRunnerFactory(
    get_old_ClassDeclaration_KafkaRunnerFactory());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_KafkaRunnerFactory": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_KafkaRunnerFactory():
    TypeOnly<current.KafkaRunnerFactory>;
declare function use_old_ClassDeclaration_KafkaRunnerFactory(
    use: TypeOnly<old.KafkaRunnerFactory>): void;
use_old_ClassDeclaration_KafkaRunnerFactory(
    get_current_ClassDeclaration_KafkaRunnerFactory());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_PartitionManager": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_PartitionManager():
    TypeOnly<old.PartitionManager>;
declare function use_current_ClassDeclaration_PartitionManager(
    use: TypeOnly<current.PartitionManager>): void;
use_current_ClassDeclaration_PartitionManager(
    get_old_ClassDeclaration_PartitionManager());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken:
* "ClassDeclaration_PartitionManager": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_PartitionManager():
    TypeOnly<current.PartitionManager>;
declare function use_old_ClassDeclaration_PartitionManager(
    use: TypeOnly<old.PartitionManager>): void;
use_old_ClassDeclaration_PartitionManager(
    get_current_ClassDeclaration_PartitionManager());
