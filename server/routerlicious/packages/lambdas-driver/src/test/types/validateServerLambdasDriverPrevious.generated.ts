/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType, requireAssignableTo } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/server-lambdas-driver-previous";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current | requireAssignableTo<true, true>;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_DocumentContext": {"forwardCompat": false}
 */
// @ts-expect-error compatibility expected to be broken
declare type old_as_current_for_Class_DocumentContext = requireAssignableTo<TypeOnly<old.DocumentContext>, TypeOnly<current.DocumentContext>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_DocumentContext": {"backCompat": false}
 */
declare type current_as_old_for_Class_DocumentContext = requireAssignableTo<TypeOnly<current.DocumentContext>, TypeOnly<old.DocumentContext>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_DocumentLambdaFactory": {"forwardCompat": false}
 */
// @ts-expect-error compatibility expected to be broken
declare type old_as_current_for_Class_DocumentLambdaFactory = requireAssignableTo<TypeOnly<old.DocumentLambdaFactory>, TypeOnly<current.DocumentLambdaFactory>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_DocumentLambdaFactory": {"backCompat": false}
 */
// @ts-expect-error compatibility expected to be broken
declare type current_as_old_for_Class_DocumentLambdaFactory = requireAssignableTo<TypeOnly<current.DocumentLambdaFactory>, TypeOnly<old.DocumentLambdaFactory>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_KafkaRunner": {"forwardCompat": false}
 */
// @ts-expect-error compatibility expected to be broken
declare type old_as_current_for_Class_KafkaRunner = requireAssignableTo<TypeOnly<old.KafkaRunner>, TypeOnly<current.KafkaRunner>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_KafkaRunner": {"backCompat": false}
 */
declare type current_as_old_for_Class_KafkaRunner = requireAssignableTo<TypeOnly<current.KafkaRunner>, TypeOnly<old.KafkaRunner>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_KafkaRunnerFactory": {"forwardCompat": false}
 */
declare type old_as_current_for_Class_KafkaRunnerFactory = requireAssignableTo<TypeOnly<old.KafkaRunnerFactory>, TypeOnly<current.KafkaRunnerFactory>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_KafkaRunnerFactory": {"backCompat": false}
 */
declare type current_as_old_for_Class_KafkaRunnerFactory = requireAssignableTo<TypeOnly<current.KafkaRunnerFactory>, TypeOnly<old.KafkaRunnerFactory>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_PartitionManager": {"forwardCompat": false}
 */
// @ts-expect-error compatibility expected to be broken
declare type old_as_current_for_Class_PartitionManager = requireAssignableTo<TypeOnly<old.PartitionManager>, TypeOnly<current.PartitionManager>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Class_PartitionManager": {"backCompat": false}
 */
declare type current_as_old_for_Class_PartitionManager = requireAssignableTo<TypeOnly<current.PartitionManager>, TypeOnly<old.PartitionManager>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_DocumentContext": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_DocumentContext = requireAssignableTo<TypeOnly<typeof current.DocumentContext>, TypeOnly<typeof old.DocumentContext>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_DocumentLambdaFactory": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_DocumentLambdaFactory = requireAssignableTo<TypeOnly<typeof current.DocumentLambdaFactory>, TypeOnly<typeof old.DocumentLambdaFactory>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_KafkaRunner": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_KafkaRunner = requireAssignableTo<TypeOnly<typeof current.KafkaRunner>, TypeOnly<typeof old.KafkaRunner>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_KafkaRunnerFactory": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_KafkaRunnerFactory = requireAssignableTo<TypeOnly<typeof current.KafkaRunnerFactory>, TypeOnly<typeof old.KafkaRunnerFactory>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassStatics_PartitionManager": {"backCompat": false}
 */
declare type current_as_old_for_ClassStatics_PartitionManager = requireAssignableTo<TypeOnly<typeof current.PartitionManager>, TypeOnly<typeof old.PartitionManager>>

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IKafkaResources": {"forwardCompat": false}
 */
declare type old_as_current_for_Interface_IKafkaResources = requireAssignableTo<TypeOnly<old.IKafkaResources>, TypeOnly<current.IKafkaResources>>

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "Interface_IKafkaResources": {"backCompat": false}
 */
declare type current_as_old_for_Interface_IKafkaResources = requireAssignableTo<TypeOnly<current.IKafkaResources>, TypeOnly<old.IKafkaResources>>
