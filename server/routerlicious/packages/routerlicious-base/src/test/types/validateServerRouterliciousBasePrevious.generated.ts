/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by flub generate:typetests in @fluid-tools/build-cli.
 */

import type { TypeOnly, MinimalType, FullType } from "@fluidframework/build-tools";
import type * as old from "@fluidframework/server-routerlicious-base-previous";

import type * as current from "../../index.js";

declare type MakeUnusedImportErrorsGoAway<T> = TypeOnly<T> | MinimalType<T> | FullType<T> | typeof old | typeof current;

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_AlfredResources": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_AlfredResources():
    TypeOnly<old.AlfredResources>;
declare function use_current_ClassDeclaration_AlfredResources(
    use: TypeOnly<current.AlfredResources>): void;
use_current_ClassDeclaration_AlfredResources(
    get_old_ClassDeclaration_AlfredResources());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_AlfredResources": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_AlfredResources():
    TypeOnly<current.AlfredResources>;
declare function use_old_ClassDeclaration_AlfredResources(
    use: TypeOnly<old.AlfredResources>): void;
use_old_ClassDeclaration_AlfredResources(
    get_current_ClassDeclaration_AlfredResources());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_AlfredResourcesFactory": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_AlfredResourcesFactory():
    TypeOnly<old.AlfredResourcesFactory>;
declare function use_current_ClassDeclaration_AlfredResourcesFactory(
    use: TypeOnly<current.AlfredResourcesFactory>): void;
use_current_ClassDeclaration_AlfredResourcesFactory(
    get_old_ClassDeclaration_AlfredResourcesFactory());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_AlfredResourcesFactory": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_AlfredResourcesFactory():
    TypeOnly<current.AlfredResourcesFactory>;
declare function use_old_ClassDeclaration_AlfredResourcesFactory(
    use: TypeOnly<old.AlfredResourcesFactory>): void;
use_old_ClassDeclaration_AlfredResourcesFactory(
    get_current_ClassDeclaration_AlfredResourcesFactory());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_AlfredRunner": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_AlfredRunner():
    TypeOnly<old.AlfredRunner>;
declare function use_current_ClassDeclaration_AlfredRunner(
    use: TypeOnly<current.AlfredRunner>): void;
use_current_ClassDeclaration_AlfredRunner(
    get_old_ClassDeclaration_AlfredRunner());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_AlfredRunner": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_AlfredRunner():
    TypeOnly<current.AlfredRunner>;
declare function use_old_ClassDeclaration_AlfredRunner(
    use: TypeOnly<old.AlfredRunner>): void;
use_old_ClassDeclaration_AlfredRunner(
    get_current_ClassDeclaration_AlfredRunner());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_AlfredRunnerFactory": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_AlfredRunnerFactory():
    TypeOnly<old.AlfredRunnerFactory>;
declare function use_current_ClassDeclaration_AlfredRunnerFactory(
    use: TypeOnly<current.AlfredRunnerFactory>): void;
use_current_ClassDeclaration_AlfredRunnerFactory(
    get_old_ClassDeclaration_AlfredRunnerFactory());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_AlfredRunnerFactory": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_AlfredRunnerFactory():
    TypeOnly<current.AlfredRunnerFactory>;
declare function use_old_ClassDeclaration_AlfredRunnerFactory(
    use: TypeOnly<old.AlfredRunnerFactory>): void;
use_old_ClassDeclaration_AlfredRunnerFactory(
    get_current_ClassDeclaration_AlfredRunnerFactory());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_Constants": {"forwardCompat": false}
 */
declare function get_old_VariableDeclaration_Constants():
    TypeOnly<typeof old.Constants>;
declare function use_current_VariableDeclaration_Constants(
    use: TypeOnly<typeof current.Constants>): void;
use_current_VariableDeclaration_Constants(
    // @ts-expect-error compatibility expected to be broken
    get_old_VariableDeclaration_Constants());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_Constants": {"backCompat": false}
 */
declare function get_current_VariableDeclaration_Constants():
    TypeOnly<typeof current.Constants>;
declare function use_old_VariableDeclaration_Constants(
    use: TypeOnly<typeof old.Constants>): void;
use_old_VariableDeclaration_Constants(
    get_current_VariableDeclaration_Constants());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_DeltaService": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_DeltaService():
    TypeOnly<old.DeltaService>;
declare function use_current_ClassDeclaration_DeltaService(
    use: TypeOnly<current.DeltaService>): void;
use_current_ClassDeclaration_DeltaService(
    get_old_ClassDeclaration_DeltaService());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_DeltaService": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_DeltaService():
    TypeOnly<current.DeltaService>;
declare function use_old_ClassDeclaration_DeltaService(
    use: TypeOnly<old.DeltaService>): void;
use_old_ClassDeclaration_DeltaService(
    get_current_ClassDeclaration_DeltaService());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_DocumentDeleteService": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_DocumentDeleteService():
    TypeOnly<old.DocumentDeleteService>;
declare function use_current_ClassDeclaration_DocumentDeleteService(
    use: TypeOnly<current.DocumentDeleteService>): void;
use_current_ClassDeclaration_DocumentDeleteService(
    get_old_ClassDeclaration_DocumentDeleteService());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_DocumentDeleteService": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_DocumentDeleteService():
    TypeOnly<current.DocumentDeleteService>;
declare function use_old_ClassDeclaration_DocumentDeleteService(
    use: TypeOnly<old.DocumentDeleteService>): void;
use_old_ClassDeclaration_DocumentDeleteService(
    get_current_ClassDeclaration_DocumentDeleteService());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IAlfredResourcesCustomizations": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IAlfredResourcesCustomizations():
    TypeOnly<old.IAlfredResourcesCustomizations>;
declare function use_current_InterfaceDeclaration_IAlfredResourcesCustomizations(
    use: TypeOnly<current.IAlfredResourcesCustomizations>): void;
use_current_InterfaceDeclaration_IAlfredResourcesCustomizations(
    get_old_InterfaceDeclaration_IAlfredResourcesCustomizations());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IAlfredResourcesCustomizations": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IAlfredResourcesCustomizations():
    TypeOnly<current.IAlfredResourcesCustomizations>;
declare function use_old_InterfaceDeclaration_IAlfredResourcesCustomizations(
    use: TypeOnly<old.IAlfredResourcesCustomizations>): void;
use_old_InterfaceDeclaration_IAlfredResourcesCustomizations(
    get_current_InterfaceDeclaration_IAlfredResourcesCustomizations());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IDocumentDeleteService": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IDocumentDeleteService():
    TypeOnly<old.IDocumentDeleteService>;
declare function use_current_InterfaceDeclaration_IDocumentDeleteService(
    use: TypeOnly<current.IDocumentDeleteService>): void;
use_current_InterfaceDeclaration_IDocumentDeleteService(
    get_old_InterfaceDeclaration_IDocumentDeleteService());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IDocumentDeleteService": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IDocumentDeleteService():
    TypeOnly<current.IDocumentDeleteService>;
declare function use_old_InterfaceDeclaration_IDocumentDeleteService(
    use: TypeOnly<old.IDocumentDeleteService>): void;
use_old_InterfaceDeclaration_IDocumentDeleteService(
    get_current_InterfaceDeclaration_IDocumentDeleteService());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_INexusResourcesCustomizations": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_INexusResourcesCustomizations():
    TypeOnly<old.INexusResourcesCustomizations>;
declare function use_current_InterfaceDeclaration_INexusResourcesCustomizations(
    use: TypeOnly<current.INexusResourcesCustomizations>): void;
use_current_InterfaceDeclaration_INexusResourcesCustomizations(
    get_old_InterfaceDeclaration_INexusResourcesCustomizations());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_INexusResourcesCustomizations": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_INexusResourcesCustomizations():
    TypeOnly<current.INexusResourcesCustomizations>;
declare function use_old_InterfaceDeclaration_INexusResourcesCustomizations(
    use: TypeOnly<old.INexusResourcesCustomizations>): void;
use_old_InterfaceDeclaration_INexusResourcesCustomizations(
    get_current_InterfaceDeclaration_INexusResourcesCustomizations());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IPlugin": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IPlugin():
    TypeOnly<old.IPlugin>;
declare function use_current_InterfaceDeclaration_IPlugin(
    use: TypeOnly<current.IPlugin>): void;
use_current_InterfaceDeclaration_IPlugin(
    get_old_InterfaceDeclaration_IPlugin());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IPlugin": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IPlugin():
    TypeOnly<current.IPlugin>;
declare function use_old_InterfaceDeclaration_IPlugin(
    use: TypeOnly<old.IPlugin>): void;
use_old_InterfaceDeclaration_IPlugin(
    get_current_InterfaceDeclaration_IPlugin());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IRiddlerResourcesCustomizations": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_IRiddlerResourcesCustomizations():
    TypeOnly<old.IRiddlerResourcesCustomizations>;
declare function use_current_InterfaceDeclaration_IRiddlerResourcesCustomizations(
    use: TypeOnly<current.IRiddlerResourcesCustomizations>): void;
use_current_InterfaceDeclaration_IRiddlerResourcesCustomizations(
    get_old_InterfaceDeclaration_IRiddlerResourcesCustomizations());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_IRiddlerResourcesCustomizations": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_IRiddlerResourcesCustomizations():
    TypeOnly<current.IRiddlerResourcesCustomizations>;
declare function use_old_InterfaceDeclaration_IRiddlerResourcesCustomizations(
    use: TypeOnly<old.IRiddlerResourcesCustomizations>): void;
use_old_InterfaceDeclaration_IRiddlerResourcesCustomizations(
    get_current_InterfaceDeclaration_IRiddlerResourcesCustomizations());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ITenantDocument": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_ITenantDocument():
    TypeOnly<old.ITenantDocument>;
declare function use_current_InterfaceDeclaration_ITenantDocument(
    use: TypeOnly<current.ITenantDocument>): void;
use_current_InterfaceDeclaration_ITenantDocument(
    get_old_InterfaceDeclaration_ITenantDocument());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ITenantDocument": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_ITenantDocument():
    TypeOnly<current.ITenantDocument>;
declare function use_old_InterfaceDeclaration_ITenantDocument(
    use: TypeOnly<old.ITenantDocument>): void;
use_old_InterfaceDeclaration_ITenantDocument(
    get_current_InterfaceDeclaration_ITenantDocument());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ITenantRepository": {"forwardCompat": false}
 */
declare function get_old_InterfaceDeclaration_ITenantRepository():
    TypeOnly<old.ITenantRepository>;
declare function use_current_InterfaceDeclaration_ITenantRepository(
    use: TypeOnly<current.ITenantRepository>): void;
use_current_InterfaceDeclaration_ITenantRepository(
    get_old_InterfaceDeclaration_ITenantRepository());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "InterfaceDeclaration_ITenantRepository": {"backCompat": false}
 */
declare function get_current_InterfaceDeclaration_ITenantRepository():
    TypeOnly<current.ITenantRepository>;
declare function use_old_InterfaceDeclaration_ITenantRepository(
    use: TypeOnly<old.ITenantRepository>): void;
use_old_InterfaceDeclaration_ITenantRepository(
    get_current_InterfaceDeclaration_ITenantRepository());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_MongoTenantRepository": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_MongoTenantRepository():
    TypeOnly<old.MongoTenantRepository>;
declare function use_current_ClassDeclaration_MongoTenantRepository(
    use: TypeOnly<current.MongoTenantRepository>): void;
use_current_ClassDeclaration_MongoTenantRepository(
    get_old_ClassDeclaration_MongoTenantRepository());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_MongoTenantRepository": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_MongoTenantRepository():
    TypeOnly<current.MongoTenantRepository>;
declare function use_old_ClassDeclaration_MongoTenantRepository(
    use: TypeOnly<old.MongoTenantRepository>): void;
use_old_ClassDeclaration_MongoTenantRepository(
    get_current_ClassDeclaration_MongoTenantRepository());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_NexusResources": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_NexusResources():
    TypeOnly<old.NexusResources>;
declare function use_current_ClassDeclaration_NexusResources(
    use: TypeOnly<current.NexusResources>): void;
use_current_ClassDeclaration_NexusResources(
    get_old_ClassDeclaration_NexusResources());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_NexusResources": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_NexusResources():
    TypeOnly<current.NexusResources>;
declare function use_old_ClassDeclaration_NexusResources(
    use: TypeOnly<old.NexusResources>): void;
use_old_ClassDeclaration_NexusResources(
    // @ts-expect-error compatibility expected to be broken
    get_current_ClassDeclaration_NexusResources());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_NexusResourcesFactory": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_NexusResourcesFactory():
    TypeOnly<old.NexusResourcesFactory>;
declare function use_current_ClassDeclaration_NexusResourcesFactory(
    use: TypeOnly<current.NexusResourcesFactory>): void;
use_current_ClassDeclaration_NexusResourcesFactory(
    get_old_ClassDeclaration_NexusResourcesFactory());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_NexusResourcesFactory": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_NexusResourcesFactory():
    TypeOnly<current.NexusResourcesFactory>;
declare function use_old_ClassDeclaration_NexusResourcesFactory(
    use: TypeOnly<old.NexusResourcesFactory>): void;
use_old_ClassDeclaration_NexusResourcesFactory(
    get_current_ClassDeclaration_NexusResourcesFactory());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_NexusRunnerFactory": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_NexusRunnerFactory():
    TypeOnly<old.NexusRunnerFactory>;
declare function use_current_ClassDeclaration_NexusRunnerFactory(
    use: TypeOnly<current.NexusRunnerFactory>): void;
use_current_ClassDeclaration_NexusRunnerFactory(
    get_old_ClassDeclaration_NexusRunnerFactory());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_NexusRunnerFactory": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_NexusRunnerFactory():
    TypeOnly<current.NexusRunnerFactory>;
declare function use_old_ClassDeclaration_NexusRunnerFactory(
    use: TypeOnly<old.NexusRunnerFactory>): void;
use_old_ClassDeclaration_NexusRunnerFactory(
    get_current_ClassDeclaration_NexusRunnerFactory());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_OrdererManager": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_OrdererManager():
    TypeOnly<old.OrdererManager>;
declare function use_current_ClassDeclaration_OrdererManager(
    use: TypeOnly<current.OrdererManager>): void;
use_current_ClassDeclaration_OrdererManager(
    get_old_ClassDeclaration_OrdererManager());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_OrdererManager": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_OrdererManager():
    TypeOnly<current.OrdererManager>;
declare function use_old_ClassDeclaration_OrdererManager(
    use: TypeOnly<old.OrdererManager>): void;
use_old_ClassDeclaration_OrdererManager(
    get_current_ClassDeclaration_OrdererManager());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_OrderingResourcesFactory": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_OrderingResourcesFactory():
    TypeOnly<old.OrderingResourcesFactory>;
declare function use_current_ClassDeclaration_OrderingResourcesFactory(
    use: TypeOnly<current.OrderingResourcesFactory>): void;
use_current_ClassDeclaration_OrderingResourcesFactory(
    get_old_ClassDeclaration_OrderingResourcesFactory());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_OrderingResourcesFactory": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_OrderingResourcesFactory():
    TypeOnly<current.OrderingResourcesFactory>;
declare function use_old_ClassDeclaration_OrderingResourcesFactory(
    use: TypeOnly<old.OrderingResourcesFactory>): void;
use_old_ClassDeclaration_OrderingResourcesFactory(
    get_current_ClassDeclaration_OrderingResourcesFactory());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_RiddlerResources": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_RiddlerResources():
    TypeOnly<old.RiddlerResources>;
declare function use_current_ClassDeclaration_RiddlerResources(
    use: TypeOnly<current.RiddlerResources>): void;
use_current_ClassDeclaration_RiddlerResources(
    // @ts-expect-error compatibility expected to be broken
    get_old_ClassDeclaration_RiddlerResources());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_RiddlerResources": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_RiddlerResources():
    TypeOnly<current.RiddlerResources>;
declare function use_old_ClassDeclaration_RiddlerResources(
    use: TypeOnly<old.RiddlerResources>): void;
use_old_ClassDeclaration_RiddlerResources(
    get_current_ClassDeclaration_RiddlerResources());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_RiddlerResourcesFactory": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_RiddlerResourcesFactory():
    TypeOnly<old.RiddlerResourcesFactory>;
declare function use_current_ClassDeclaration_RiddlerResourcesFactory(
    use: TypeOnly<current.RiddlerResourcesFactory>): void;
use_current_ClassDeclaration_RiddlerResourcesFactory(
    get_old_ClassDeclaration_RiddlerResourcesFactory());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_RiddlerResourcesFactory": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_RiddlerResourcesFactory():
    TypeOnly<current.RiddlerResourcesFactory>;
declare function use_old_ClassDeclaration_RiddlerResourcesFactory(
    use: TypeOnly<old.RiddlerResourcesFactory>): void;
use_old_ClassDeclaration_RiddlerResourcesFactory(
    get_current_ClassDeclaration_RiddlerResourcesFactory());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_RiddlerRunner": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_RiddlerRunner():
    TypeOnly<old.RiddlerRunner>;
declare function use_current_ClassDeclaration_RiddlerRunner(
    use: TypeOnly<current.RiddlerRunner>): void;
use_current_ClassDeclaration_RiddlerRunner(
    get_old_ClassDeclaration_RiddlerRunner());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_RiddlerRunner": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_RiddlerRunner():
    TypeOnly<current.RiddlerRunner>;
declare function use_old_ClassDeclaration_RiddlerRunner(
    use: TypeOnly<old.RiddlerRunner>): void;
use_old_ClassDeclaration_RiddlerRunner(
    get_current_ClassDeclaration_RiddlerRunner());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_RiddlerRunnerFactory": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_RiddlerRunnerFactory():
    TypeOnly<old.RiddlerRunnerFactory>;
declare function use_current_ClassDeclaration_RiddlerRunnerFactory(
    use: TypeOnly<current.RiddlerRunnerFactory>): void;
use_current_ClassDeclaration_RiddlerRunnerFactory(
    get_old_ClassDeclaration_RiddlerRunnerFactory());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_RiddlerRunnerFactory": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_RiddlerRunnerFactory():
    TypeOnly<current.RiddlerRunnerFactory>;
declare function use_old_ClassDeclaration_RiddlerRunnerFactory(
    use: TypeOnly<old.RiddlerRunnerFactory>): void;
use_old_ClassDeclaration_RiddlerRunnerFactory(
    get_current_ClassDeclaration_RiddlerRunnerFactory());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_TenantManager": {"forwardCompat": false}
 */
declare function get_old_ClassDeclaration_TenantManager():
    TypeOnly<old.TenantManager>;
declare function use_current_ClassDeclaration_TenantManager(
    use: TypeOnly<current.TenantManager>): void;
use_current_ClassDeclaration_TenantManager(
    get_old_ClassDeclaration_TenantManager());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "ClassDeclaration_TenantManager": {"backCompat": false}
 */
declare function get_current_ClassDeclaration_TenantManager():
    TypeOnly<current.TenantManager>;
declare function use_old_ClassDeclaration_TenantManager(
    use: TypeOnly<old.TenantManager>): void;
use_old_ClassDeclaration_TenantManager(
    get_current_ClassDeclaration_TenantManager());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_catch404": {"forwardCompat": false}
 */
declare function get_old_VariableDeclaration_catch404():
    TypeOnly<typeof old.catch404>;
declare function use_current_VariableDeclaration_catch404(
    use: TypeOnly<typeof current.catch404>): void;
use_current_VariableDeclaration_catch404(
    get_old_VariableDeclaration_catch404());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_catch404": {"backCompat": false}
 */
declare function get_current_VariableDeclaration_catch404():
    TypeOnly<typeof current.catch404>;
declare function use_old_VariableDeclaration_catch404(
    use: TypeOnly<typeof old.catch404>): void;
use_old_VariableDeclaration_catch404(
    get_current_VariableDeclaration_catch404());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_createDocumentRouter": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_createDocumentRouter():
    TypeOnly<typeof old.createDocumentRouter>;
declare function use_current_FunctionDeclaration_createDocumentRouter(
    use: TypeOnly<typeof current.createDocumentRouter>): void;
use_current_FunctionDeclaration_createDocumentRouter(
    get_old_FunctionDeclaration_createDocumentRouter());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_createDocumentRouter": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_createDocumentRouter():
    TypeOnly<typeof current.createDocumentRouter>;
declare function use_old_FunctionDeclaration_createDocumentRouter(
    use: TypeOnly<typeof old.createDocumentRouter>): void;
use_old_FunctionDeclaration_createDocumentRouter(
    get_current_FunctionDeclaration_createDocumentRouter());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_getIdFromRequest": {"forwardCompat": false}
 */
declare function get_old_VariableDeclaration_getIdFromRequest():
    TypeOnly<typeof old.getIdFromRequest>;
declare function use_current_VariableDeclaration_getIdFromRequest(
    use: TypeOnly<typeof current.getIdFromRequest>): void;
use_current_VariableDeclaration_getIdFromRequest(
    get_old_VariableDeclaration_getIdFromRequest());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_getIdFromRequest": {"backCompat": false}
 */
declare function get_current_VariableDeclaration_getIdFromRequest():
    TypeOnly<typeof current.getIdFromRequest>;
declare function use_old_VariableDeclaration_getIdFromRequest(
    use: TypeOnly<typeof old.getIdFromRequest>): void;
use_old_VariableDeclaration_getIdFromRequest(
    get_current_VariableDeclaration_getIdFromRequest());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_getSession": {"forwardCompat": false}
 */
declare function get_old_FunctionDeclaration_getSession():
    TypeOnly<typeof old.getSession>;
declare function use_current_FunctionDeclaration_getSession(
    use: TypeOnly<typeof current.getSession>): void;
use_current_FunctionDeclaration_getSession(
    get_old_FunctionDeclaration_getSession());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "FunctionDeclaration_getSession": {"backCompat": false}
 */
declare function get_current_FunctionDeclaration_getSession():
    TypeOnly<typeof current.getSession>;
declare function use_old_FunctionDeclaration_getSession(
    use: TypeOnly<typeof old.getSession>): void;
use_old_FunctionDeclaration_getSession(
    get_current_FunctionDeclaration_getSession());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_getTenantIdFromRequest": {"forwardCompat": false}
 */
declare function get_old_VariableDeclaration_getTenantIdFromRequest():
    TypeOnly<typeof old.getTenantIdFromRequest>;
declare function use_current_VariableDeclaration_getTenantIdFromRequest(
    use: TypeOnly<typeof current.getTenantIdFromRequest>): void;
use_current_VariableDeclaration_getTenantIdFromRequest(
    get_old_VariableDeclaration_getTenantIdFromRequest());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_getTenantIdFromRequest": {"backCompat": false}
 */
declare function get_current_VariableDeclaration_getTenantIdFromRequest():
    TypeOnly<typeof current.getTenantIdFromRequest>;
declare function use_old_VariableDeclaration_getTenantIdFromRequest(
    use: TypeOnly<typeof old.getTenantIdFromRequest>): void;
use_old_VariableDeclaration_getTenantIdFromRequest(
    get_current_VariableDeclaration_getTenantIdFromRequest());

/*
 * Validate forward compatibility by using the old type in place of the current type.
 * If this test starts failing, it indicates a change that is not forward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_handleError": {"forwardCompat": false}
 */
declare function get_old_VariableDeclaration_handleError():
    TypeOnly<typeof old.handleError>;
declare function use_current_VariableDeclaration_handleError(
    use: TypeOnly<typeof current.handleError>): void;
use_current_VariableDeclaration_handleError(
    get_old_VariableDeclaration_handleError());

/*
 * Validate backward compatibility by using the current type in place of the old type.
 * If this test starts failing, it indicates a change that is not backward compatible.
 * To acknowledge the breaking change, add the following to package.json under
 * typeValidation.broken:
 * "VariableDeclaration_handleError": {"backCompat": false}
 */
declare function get_current_VariableDeclaration_handleError():
    TypeOnly<typeof current.handleError>;
declare function use_old_VariableDeclaration_handleError(
    use: TypeOnly<typeof old.handleError>): void;
use_old_VariableDeclaration_handleError(
    get_current_VariableDeclaration_handleError());
