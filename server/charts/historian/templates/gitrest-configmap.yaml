apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "gitrest.fullname" . }}
  labels:
    app: {{ template "historian.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    component: "{{ .Values.gitrest.name }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
  config.json: |
    {
        "logger": {
            "colorize": false,
            "morganFormat": "short",
            "json": false,
            "level": "verbose",
            "timestamp": false
        },
        "lumberjack": {
            "options": {
                "enableGlobalTelemetryContext": {{ .Values.lumberjack.options.enableGlobalTelemetryContext }},
                "enableSanitization": {{ .Values.lumberjack.options.enableSanitization }}
            }
        },
        "config": {
            "configDumpEnabled": {{ .Values.gitrest.config.configDumpEnabled }},
            "secretNamesToRedactInConfigDump": [
                {{- $lastIndex := sub (len .Values.gitrest.config.secretNamesToRedactInConfigDump) 1}}
                {{- range $i, $secret := .Values.gitrest.config.secretNamesToRedactInConfigDump }}
                {{ toJson . }}{{- if ne $i $lastIndex -}}, {{ end }}
                {{- end }}
            ]
        },
        "requestSizeLimit": "1gb",
        "enableResponseCloseLatencyMetric": {{ .Values.gitrest.enableResponseCloseLatencyMetric }},
        "storageDir": {
            "baseDir": "/home/node/documents",
            "useRepoOwner": true
        },
        "externalStorage": {
            "enabled": false,
            "endpoint": "http://externalStorage:3005"
        },
        "git": {
            "lib": {
                "name": "{{ .Values.gitrest.git.lib.name }}"
            },
            "filesystem": {
                "name": "{{ .Values.gitrest.git.filesystem.name }}",
                "maxFileSizeBytes": {{ .Values.gitrest.git.filesystem.maxFileSizeBytes }}
            },
            "ephemeralfilesystem": {
                "name": "{{ .Values.gitrest.git.ephemeralfilesystem.name }}",
                "maxFileSizeBytes": {{ .Values.gitrest.git.ephemeralfilesystem.maxFileSizeBytes }}
            },
            "persistLatestFullSummary": {{ .Values.gitrest.git.persistLatestFullSummary }},
            "persistLatestFullEphemeralSummary": {{ .Values.gitrest.git.persistLatestFullEphemeralSummary }},
            "repoPerDocEnabled": {{ .Values.gitrest.git.repoPerDocEnabled }},
            "enableRepositoryManagerMetrics": {{ .Values.gitrest.git.enableRepositoryManagerMetrics }},
            "apiMetricsSamplingPeriod": {{ .Values.gitrest.git.apiMetricsSamplingPeriod }},
            {{- if eq (toString .Values.gitrest.git.enableLowIoWrite) "initial" }}
            "enableLowIoWrite": "{{ .Values.gitrest.git.enableLowIoWrite }}",
            {{- else }}
            "enableLowIoWrite": {{ .Values.gitrest.git.enableLowIoWrite }},
            {{- end }}
            "enableOptimizedInitialSummary": {{ .Values.gitrest.git.enableOptimizedInitialSummary }},
            "enableSlimGitInit": {{ .Values.gitrest.git.enableSlimGitInit }},
            "enableRedisFsMetrics": {{ .Values.gitrest.git.enableRedisFsMetrics }},
            "enableHashmapRedisFs": {{ .Values.gitrest.git.enableHashmapRedisFs }},
            "redisApiMetricsSamplingPeriod": {{ .Values.gitrest.git.redisApiMetricsSamplingPeriod }},
            "enforceStrictPersistedFullSummaryReads": {{ .Values.gitrest.git.enforceStrictPersistedFullSummaryReads }},
            "enableRedisFsOptimizedStat": {{ .Values.gitrest.git.enableRedisFsOptimizedStat }},
            "redisApiMetricsSamplingPeriod": {{ .Values.gitrest.git.redisApiMetricsSamplingPeriod }}
        },
        "redis": {
            "host": "{{ .Values.gitrest.redis.url }}",
            "port": "{{ .Values.gitrest.redis.port }}",
            "connectTimeout": {{ .Values.gitrest.redis.connectTimeout }},
            "maxRetriesPerRequest": "{{ .Values.gitrest.redis.maxRetriesPerRequest }}",
            "enableAutoPipelining": "{{ .Values.gitrest.redis.enableAutoPipelining }}",
            "enableOfflineQueue": "{{ .Values.gitrest.redis.enableOfflineQueue }}"
        },
        "system": {
            "httpServer": {
                "connectionTimeoutMs": {{ .Values.gitrest.system.httpServer.connectionTimeoutMs }}
            }
        }
    }
