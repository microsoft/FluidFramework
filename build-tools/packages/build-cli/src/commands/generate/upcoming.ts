/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
import { Flags } from "@oclif/core";
import { writeFile } from "node:fs/promises";
import path from "node:path";

import { BaseCommand } from "../../base";
import { releaseGroupFlag } from "../../flags";
import { getDisplayDate, loadChangesets } from "../../lib";

const DEFAULT_FILE = "UPCOMING.md";
const DEFAULT_CHANGESET_PATH = ".changeset";

export default class GenerateUpcomingCommand extends BaseCommand<typeof GenerateUpcomingCommand> {
	static summary = `Generates a summary of all changesets.`;

	// Enables the global JSON flag in oclif.
	static enableJsonFlag = true;

	static flags = {
		releaseGroup: releaseGroupFlag({
			required: true,
		}),
		out: Flags.file({
			description: `Output the results to this file.`,
			default: DEFAULT_FILE,
		}),
		...BaseCommand.flags,
	};

	static examples = [
		// {
		// 	description: `By default example and private packages are excluded, but they can be included with --all.`,
		// 	command: "<%= config.bin %> <%= command.id %> --all",
		// },
	];

	public async run(): Promise<string> {
		const context = await this.getContext();
		const { flags, logger } = this;

		const changesetDir = path.join(context.repo.resolvedRoot, DEFAULT_CHANGESET_PATH);
		const { ordered: changes } = await loadChangesets(changesetDir, logger);

		const version = context.getVersion(flags.releaseGroup);
		const header = `<!-- THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. -->`;
		const intro = `# Upcoming changes in Fluid Framework v${version}`;

		let body: string = "";
		for (const change of changes) {
			body += `## ${change.summary}\n\n${change.content}\n\n`;
		}

		const contents = `${header}\n\n${intro}\n\n${body}`;
		const outputPath = path.join(context.repo.resolvedRoot, flags.out);
		this.info(`Writing output file: ${outputPath}`);
		await writeFile(outputPath, contents);
		return contents;
	}
}
