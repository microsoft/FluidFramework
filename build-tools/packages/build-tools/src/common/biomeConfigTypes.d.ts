/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type PlainIndentStyle = "tab" | "space";
export type IndentWidth = number;
export type LineEnding = "lf" | "crlf" | "cr";
/**
 * Validated value for the `line_width` formatter options
 *
 * The allowed range of values is 1..=320
 */
export type LineWidth = number;
export type QuoteStyle = "double" | "single";
export type StringSet = string[];
export type AttributePosition = "auto" | "multiline";
export type ArrowParentheses = "always" | "asNeeded";
export type QuoteProperties = "asNeeded" | "preserve";
export type Semicolons = "always" | "asNeeded";
/**
 * Print trailing commas wherever possible in multi-line comma-separated syntactic structures.
 */
export type TrailingCommas = "all" | "es5" | "none";
/**
 * Indicates the type of runtime or transformation used for interpreting JSX.
 */
export type JsxRuntime = "transparent" | "reactClassic";
export type TrailingCommas2 = "none" | "all";
export type RuleFixConfiguration = RulePlainConfiguration | RuleWithFixNoOptions;
export type RulePlainConfiguration = "warn" | "error" | "info" | "off";
/**
 * Used to identify the kind of code action emitted by a rule
 */
export type FixKind = "none" | "safe" | "unsafe";
export type RuleConfiguration = RulePlainConfiguration | RuleWithNoOptions;
export type ValidAriaRoleConfiguration = RulePlainConfiguration | RuleWithValidAriaRoleOptions;
export type ComplexityConfiguration = RulePlainConfiguration | RuleWithComplexityOptions;
export type HooksConfiguration = RulePlainConfiguration | RuleWithHooksOptions;
export type StableHookResult = boolean | [number, ...number[]];
export type DeprecatedHooksConfiguration =
	| RulePlainConfiguration
	| RuleWithDeprecatedHooksOptions;
export type NoLabelWithoutControlConfiguration =
	| RulePlainConfiguration
	| RuleWithNoLabelWithoutControlOptions;
export type RestrictedImportsConfiguration =
	| RulePlainConfiguration
	| RuleWithRestrictedImportsOptions;
export type UtilityClassSortingConfiguration =
	| RulePlainConfiguration
	| RuleWithUtilityClassSortingOptions;
export type UseValidAutocompleteConfiguration =
	| RulePlainConfiguration
	| RuleWithUseValidAutocompleteOptions;
export type RestrictedGlobalsConfiguration =
	| RulePlainConfiguration
	| RuleWithRestrictedGlobalsOptions;
export type ConsistentArrayTypeConfiguration =
	| RulePlainConfiguration
	| RuleWithConsistentArrayTypeOptions;
export type ConsistentArrayType = "shorthand" | "generic";
export type FilenamingConventionConfiguration =
	| RulePlainConfiguration
	| RuleWithFilenamingConventionOptions;
/**
 * Supported cases for file names.
 */
export type FilenameCase = "camelCase" | "export" | "kebab-case" | "PascalCase" | "snake_case";
export type FilenameCases = FilenameCase[];
export type NamingConventionConfiguration =
	| RulePlainConfiguration
	| RuleWithNamingConventionOptions;
/**
 * Supported cases.
 */
export type Format = "camelCase" | "CONSTANT_CASE" | "PascalCase" | "snake_case";
export type Formats = Format[];
export type Regex = string;
export type Kind =
	| (
			| "class"
			| "enum"
			| "interface"
			| "enumMember"
			| "importNamespace"
			| "exportNamespace"
			| "variable"
			| "const"
			| "let"
			| "using"
			| "var"
			| "catchParameter"
			| "indexParameter"
			| "exportAlias"
			| "importAlias"
			| "classGetter"
			| "classSetter"
			| "classMethod"
			| "objectLiteralProperty"
			| "objectLiteralGetter"
			| "objectLiteralSetter"
			| "objectLiteralMethod"
			| "typeAlias"
	  )
	| "any"
	| "typeLike"
	| "function"
	| "namespaceLike"
	| "namespace"
	| "functionParameter"
	| "typeParameter"
	| "classMember"
	| "classProperty"
	| "objectLiteralMember"
	| "typeMember"
	| "typeGetter"
	| "typeProperty"
	| "typeSetter"
	| "typeMethod";
export type RestrictedModifier = "abstract" | "private" | "protected" | "readonly" | "static";
export type Modifiers = RestrictedModifier[];
export type Scope = "any" | "global";
export type Overrides = OverridePattern[];
export type VcsClientKind = "git";

/**
 * The configuration that is contained inside the file `biome.json`
 */
export interface Configuration {
	/**
	 * A field for the [JSON schema](https://json-schema.org/) specification
	 */
	$schema?: string | null;
	/**
	 * Specific configuration for the Css language
	 */
	css?: CssConfiguration | null;
	/**
	 * A list of paths to other JSON files, used to extends the current configuration.
	 */
	extends?: StringSet | null;
	/**
	 * The configuration of the filesystem
	 */
	files?: FilesConfiguration | null;
	/**
	 * The configuration of the formatter
	 */
	formatter?: FormatterConfiguration | null;
	/**
	 * Specific configuration for the JavaScript language
	 */
	javascript?: JavascriptConfiguration | null;
	/**
	 * Specific configuration for the Json language
	 */
	json?: JsonConfiguration | null;
	/**
	 * The configuration for the linter
	 */
	linter?: LinterConfiguration | null;
	/**
	 * The configuration of the import sorting
	 */
	organizeImports?: OrganizeImports | null;
	/**
	 * A list of granular patterns that should be applied only to a sub set of files
	 */
	overrides?: Overrides | null;
	/**
	 * The configuration of the VCS integration
	 */
	vcs?: VcsConfiguration | null;
}
/**
 * Options applied to CSS files
 */
export interface CssConfiguration {
	/**
	 * CSS formatter options
	 */
	formatter?: CssFormatter | null;
	/**
	 * CSS linter options
	 */
	linter?: CssLinter | null;
	/**
	 * CSS parsing options
	 */
	parser?: CssParser | null;
}
/**
 * Options that changes how the CSS formatter behaves
 */
export interface CssFormatter {
	/**
	 * Control the formatter for CSS (and its super languages) files.
	 */
	enabled?: boolean | null;
	/**
	 * The indent style applied to CSS (and its super languages) files.
	 */
	indentStyle?: PlainIndentStyle | null;
	/**
	 * The size of the indentation applied to CSS (and its super languages) files. Default to 2.
	 */
	indentWidth?: IndentWidth | null;
	/**
	 * The type of line ending applied to CSS (and its super languages) files.
	 */
	lineEnding?: LineEnding | null;
	/**
	 * What's the max width of a line applied to CSS (and its super languages) files. Defaults to 80.
	 */
	lineWidth?: LineWidth | null;
	/**
	 * The type of quotes used in CSS code. Defaults to double.
	 */
	quoteStyle?: QuoteStyle | null;
}
/**
 * Options that changes how the CSS linter behaves
 */
export interface CssLinter {
	/**
	 * Control the linter for CSS (and its super languages) files.
	 */
	enabled?: boolean | null;
}
/**
 * Options that changes how the CSS parser behaves
 */
export interface CssParser {
	/**
	 * Allow comments to appear on incorrect lines in `.css` files
	 */
	allowWrongLineComments?: boolean | null;
	/**
	 * Enables parsing of CSS Modules specific features.
	 */
	cssModules?: boolean | null;
}
/**
 * The configuration of the filesystem
 */
export interface FilesConfiguration {
	/**
	 * A list of Unix shell style patterns. Biome will ignore files/folders that will match these patterns.
	 */
	ignore?: StringSet | null;
	/**
	 * Tells Biome to not emit diagnostics when handling files that doesn't know
	 */
	ignoreUnknown?: boolean | null;
	/**
	 * A list of Unix shell style patterns. Biome will handle only those files/folders that will match these patterns.
	 */
	include?: StringSet | null;
	/**
	 * The maximum allowed size for source code files in bytes. Files above this limit will be ignored for performance reasons. Defaults to 1 MiB
	 */
	maxSize?: number | null;
}
/**
 * Generic options applied to all files
 */
export interface FormatterConfiguration {
	/**
	 * The attribute position style in HTMLish languages. By default auto.
	 */
	attributePosition?: AttributePosition | null;
	enabled?: boolean | null;
	/**
	 * Stores whether formatting should be allowed to proceed if a given file has syntax errors
	 */
	formatWithErrors?: boolean | null;
	/**
	 * A list of Unix shell style patterns. The formatter will ignore files/folders that will match these patterns.
	 */
	ignore?: StringSet | null;
	/**
	 * A list of Unix shell style patterns. The formatter will include files/folders that will match these patterns.
	 */
	include?: StringSet | null;
	/**
	 * The size of the indentation, 2 by default (deprecated, use `indent-width`)
	 */
	indentSize?: IndentWidth | null;
	/**
	 * The indent style.
	 */
	indentStyle?: PlainIndentStyle | null;
	/**
	 * The size of the indentation, 2 by default
	 */
	indentWidth?: IndentWidth | null;
	/**
	 * The type of line ending.
	 */
	lineEnding?: LineEnding | null;
	/**
	 * What's the max width of a line. Defaults to 80.
	 */
	lineWidth?: LineWidth | null;
}
/**
 * A set of options applied to the JavaScript files
 */
export interface JavascriptConfiguration {
	/**
	 * Formatting options
	 */
	formatter?: JavascriptFormatter | null;
	/**
	 * A list of global bindings that should be ignored by the analyzers
	 *
	 * If defined here, they should not emit diagnostics.
	 */
	globals?: StringSet | null;
	/**
	 * Indicates the type of runtime or transformation used for interpreting JSX.
	 */
	jsxRuntime?: JsxRuntime | null;
	/**
	 * Linter options
	 */
	linter?: JavascriptLinter | null;
	organizeImports?: JavascriptOrganizeImports | null;
	/**
	 * Parsing options
	 */
	parser?: JavascriptParser | null;
}
/**
 * Formatting options specific to the JavaScript files
 */
export interface JavascriptFormatter {
	/**
	 * Whether to add non-necessary parentheses to arrow functions. Defaults to "always".
	 */
	arrowParentheses?: ArrowParentheses | null;
	/**
	 * The attribute position style in jsx elements. Defaults to auto.
	 */
	attributePosition?: AttributePosition | null;
	/**
	 * Whether to hug the closing bracket of multiline HTML/JSX tags to the end of the last line, rather than being alone on the following line. Defaults to false.
	 */
	bracketSameLine?: boolean | null;
	/**
	 * Whether to insert spaces around brackets in object literals. Defaults to true.
	 */
	bracketSpacing?: boolean | null;
	/**
	 * Control the formatter for JavaScript (and its super languages) files.
	 */
	enabled?: boolean | null;
	/**
	 * The size of the indentation applied to JavaScript (and its super languages) files. Default to 2.
	 */
	indentSize?: IndentWidth | null;
	/**
	 * The indent style applied to JavaScript (and its super languages) files.
	 */
	indentStyle?: PlainIndentStyle | null;
	/**
	 * The size of the indentation applied to JavaScript (and its super languages) files. Default to 2.
	 */
	indentWidth?: IndentWidth | null;
	/**
	 * The type of quotes used in JSX. Defaults to double.
	 */
	jsxQuoteStyle?: QuoteStyle | null;
	/**
	 * The type of line ending applied to JavaScript (and its super languages) files.
	 */
	lineEnding?: LineEnding | null;
	/**
	 * What's the max width of a line applied to JavaScript (and its super languages) files. Defaults to 80.
	 */
	lineWidth?: LineWidth | null;
	/**
	 * When properties in objects are quoted. Defaults to asNeeded.
	 */
	quoteProperties?: QuoteProperties | null;
	/**
	 * The type of quotes used in JavaScript code. Defaults to double.
	 */
	quoteStyle?: QuoteStyle | null;
	/**
	 * Whether the formatter prints semicolons for all statements or only in for statements where it is necessary because of ASI.
	 */
	semicolons?: Semicolons | null;
	/**
	 * Print trailing commas wherever possible in multi-line comma-separated syntactic structures. Defaults to "all".
	 */
	trailingComma?: TrailingCommas | null;
	/**
	 * Print trailing commas wherever possible in multi-line comma-separated syntactic structures. Defaults to "all".
	 */
	trailingCommas?: TrailingCommas | null;
}
/**
 * Linter options specific to the JavaScript linter
 */
export interface JavascriptLinter {
	/**
	 * Control the linter for JavaScript (and its super languages) files.
	 */
	enabled?: boolean | null;
}
export interface JavascriptOrganizeImports {}
/**
 * Options that changes how the JavaScript parser behaves
 */
export interface JavascriptParser {
	/**
	 * It enables the experimental and unsafe parsing of parameter decorators
	 *
	 * These decorators belong to an old proposal, and they are subject to change.
	 */
	unsafeParameterDecoratorsEnabled?: boolean | null;
}
/**
 * Options applied to JSON files
 */
export interface JsonConfiguration {
	/**
	 * Formatting options
	 */
	formatter?: JsonFormatter | null;
	/**
	 * Linting options
	 */
	linter?: JsonLinter | null;
	/**
	 * Parsing options
	 */
	parser?: JsonParser | null;
}
export interface JsonFormatter {
	/**
	 * Control the formatter for JSON (and its super languages) files.
	 */
	enabled?: boolean | null;
	/**
	 * The size of the indentation applied to JSON (and its super languages) files. Default to 2.
	 */
	indentSize?: IndentWidth | null;
	/**
	 * The indent style applied to JSON (and its super languages) files.
	 */
	indentStyle?: PlainIndentStyle | null;
	/**
	 * The size of the indentation applied to JSON (and its super languages) files. Default to 2.
	 */
	indentWidth?: IndentWidth | null;
	/**
	 * The type of line ending applied to JSON (and its super languages) files.
	 */
	lineEnding?: LineEnding | null;
	/**
	 * What's the max width of a line applied to JSON (and its super languages) files. Defaults to 80.
	 */
	lineWidth?: LineWidth | null;
	/**
	 * Print trailing commas wherever possible in multi-line comma-separated syntactic structures. Defaults to "none".
	 */
	trailingCommas?: TrailingCommas2 | null;
}
/**
 * Linter options specific to the JSON linter
 */
export interface JsonLinter {
	/**
	 * Control the linter for JSON (and its super languages) files.
	 */
	enabled?: boolean | null;
}
/**
 * Options that changes how the JSON parser behaves
 */
export interface JsonParser {
	/**
	 * Allow parsing comments in `.json` files
	 */
	allowComments?: boolean | null;
	/**
	 * Allow parsing trailing commas in `.json` files
	 */
	allowTrailingCommas?: boolean | null;
}
export interface LinterConfiguration {
	/**
	 * if `false`, it disables the feature and the linter won't be executed. `true` by default
	 */
	enabled?: boolean | null;
	/**
	 * A list of Unix shell style patterns. The formatter will ignore files/folders that will match these patterns.
	 */
	ignore?: StringSet | null;
	/**
	 * A list of Unix shell style patterns. The formatter will include files/folders that will match these patterns.
	 */
	include?: StringSet | null;
	/**
	 * List of rules
	 */
	rules?: Rules | null;
}
export interface Rules {
	a11y?: A11Y | null;
	/**
	 * It enables ALL rules. The rules that belong to `nursery` won't be enabled.
	 */
	all?: boolean | null;
	complexity?: Complexity | null;
	correctness?: Correctness | null;
	nursery?: Nursery | null;
	performance?: Performance | null;
	/**
	 * It enables the lint rules recommended by Biome. `true` by default.
	 */
	recommended?: boolean | null;
	security?: Security | null;
	style?: Style | null;
	suspicious?: Suspicious | null;
}
/**
 * A list of rules that belong to this group
 */
export interface A11Y {
	/**
	 * It enables ALL rules for this group.
	 */
	all?: boolean | null;
	/**
	 * Enforce that the accessKey attribute is not used on any HTML element.
	 */
	noAccessKey?: RuleFixConfiguration | null;
	/**
	 * Enforce that aria-hidden="true" is not set on focusable elements.
	 */
	noAriaHiddenOnFocusable?: RuleFixConfiguration | null;
	/**
	 * Enforce that elements that do not support ARIA roles, states, and properties do not have those attributes.
	 */
	noAriaUnsupportedElements?: RuleFixConfiguration | null;
	/**
	 * Enforce that autoFocus prop is not used on elements.
	 */
	noAutofocus?: RuleFixConfiguration | null;
	/**
	 * Disallow target="_blank" attribute without rel="noreferrer"
	 */
	noBlankTarget?: RuleFixConfiguration | null;
	/**
	 * Enforces that no distracting elements are used.
	 */
	noDistractingElements?: RuleFixConfiguration | null;
	/**
	 * The scope prop should be used only on \<th> elements.
	 */
	noHeaderScope?: RuleFixConfiguration | null;
	/**
	 * Enforce that non-interactive ARIA roles are not assigned to interactive HTML elements.
	 */
	noInteractiveElementToNoninteractiveRole?: RuleFixConfiguration | null;
	/**
	 * Enforce that interactive ARIA roles are not assigned to non-interactive HTML elements.
	 */
	noNoninteractiveElementToInteractiveRole?: RuleFixConfiguration | null;
	/**
	 * Enforce that tabIndex is not assigned to non-interactive HTML elements.
	 */
	noNoninteractiveTabindex?: RuleFixConfiguration | null;
	/**
	 * Prevent the usage of positive integers on tabIndex property
	 */
	noPositiveTabindex?: RuleFixConfiguration | null;
	/**
	 * Enforce img alt prop does not contain the word "image", "picture", or "photo".
	 */
	noRedundantAlt?: RuleConfiguration | null;
	/**
	 * Enforce explicit role property is not the same as implicit/default role property on an element.
	 */
	noRedundantRoles?: RuleFixConfiguration | null;
	/**
	 * Enforces the usage of the title element for the svg element.
	 */
	noSvgWithoutTitle?: RuleConfiguration | null;
	/**
	 * It enables the recommended rules for this group
	 */
	recommended?: boolean | null;
	/**
	 * Enforce that all elements that require alternative text have meaningful information to relay back to the end user.
	 */
	useAltText?: RuleConfiguration | null;
	/**
	 * Enforce that anchors have content and that the content is accessible to screen readers.
	 */
	useAnchorContent?: RuleFixConfiguration | null;
	/**
	 * Enforce that tabIndex is assigned to non-interactive HTML elements with aria-activedescendant.
	 */
	useAriaActivedescendantWithTabindex?: RuleFixConfiguration | null;
	/**
	 * Enforce that elements with ARIA roles must have all required ARIA attributes for that role.
	 */
	useAriaPropsForRole?: RuleConfiguration | null;
	/**
	 * Enforces the usage of the attribute type for the element button
	 */
	useButtonType?: RuleConfiguration | null;
	/**
	 * Enforce that heading elements (h1, h2, etc.) have content and that the content is accessible to screen readers. Accessible means that it is not hidden using the aria-hidden prop.
	 */
	useHeadingContent?: RuleConfiguration | null;
	/**
	 * Enforce that html element has lang attribute.
	 */
	useHtmlLang?: RuleConfiguration | null;
	/**
	 * Enforces the usage of the attribute title for the element iframe.
	 */
	useIframeTitle?: RuleConfiguration | null;
	/**
	 * Enforce onClick is accompanied by at least one of the following: onKeyUp, onKeyDown, onKeyPress.
	 */
	useKeyWithClickEvents?: RuleConfiguration | null;
	/**
	 * Enforce onMouseOver / onMouseOut are accompanied by onFocus / onBlur.
	 */
	useKeyWithMouseEvents?: RuleConfiguration | null;
	/**
	 * Enforces that audio and video elements must have a track for captions.
	 */
	useMediaCaption?: RuleConfiguration | null;
	/**
	 * Enforce that all anchors are valid, and they are navigable elements.
	 */
	useValidAnchor?: RuleConfiguration | null;
	/**
	 * Ensures that ARIA properties aria-* are all valid.
	 */
	useValidAriaProps?: RuleFixConfiguration | null;
	/**
	 * Elements with ARIA roles must use a valid, non-abstract ARIA role.
	 */
	useValidAriaRole?: ValidAriaRoleConfiguration | null;
	/**
	 * Enforce that ARIA state and property values are valid.
	 */
	useValidAriaValues?: RuleConfiguration | null;
	/**
	 * Ensure that the attribute passed to the lang attribute is a correct ISO language and/or country.
	 */
	useValidLang?: RuleConfiguration | null;
}
export interface RuleWithFixNoOptions {
	/**
	 * The kind of the code actions emitted by the rule
	 */
	fix?: FixKind | null;
	/**
	 * The severity of the emitted diagnostics by the rule
	 */
	level: RulePlainConfiguration;
}
export interface RuleWithNoOptions {
	/**
	 * The severity of the emitted diagnostics by the rule
	 */
	level: RulePlainConfiguration;
}
export interface RuleWithValidAriaRoleOptions {
	/**
	 * The kind of the code actions emitted by the rule
	 */
	fix?: FixKind | null;
	/**
	 * The severity of the emitted diagnostics by the rule
	 */
	level: RulePlainConfiguration;
	/**
	 * Rule's options
	 */
	options: ValidAriaRoleOptions;
}
export interface ValidAriaRoleOptions {
	allowInvalidRoles: string[];
	ignoreNonDom: boolean;
}
/**
 * A list of rules that belong to this group
 */
export interface Complexity {
	/**
	 * It enables ALL rules for this group.
	 */
	all?: boolean | null;
	/**
	 * Disallow primitive type aliases and misleading types.
	 */
	noBannedTypes?: RuleFixConfiguration | null;
	/**
	 * Disallow empty type parameters in type aliases and interfaces.
	 */
	noEmptyTypeParameters?: RuleConfiguration | null;
	/**
	 * Disallow functions that exceed a given Cognitive Complexity score.
	 */
	noExcessiveCognitiveComplexity?: ComplexityConfiguration | null;
	/**
	 * This rule enforces a maximum depth to nested describe() in test files.
	 */
	noExcessiveNestedTestSuites?: RuleConfiguration | null;
	/**
	 * Disallow unnecessary boolean casts
	 */
	noExtraBooleanCast?: RuleFixConfiguration | null;
	/**
	 * Prefer for...of statement instead of Array.forEach.
	 */
	noForEach?: RuleConfiguration | null;
	/**
	 * Disallow unclear usage of consecutive space characters in regular expression literals
	 */
	noMultipleSpacesInRegularExpressionLiterals?: RuleFixConfiguration | null;
	/**
	 * This rule reports when a class has no non-static members, such as for a class used exclusively as a static namespace.
	 */
	noStaticOnlyClass?: RuleConfiguration | null;
	/**
	 * Disallow this and super in static contexts.
	 */
	noThisInStatic?: RuleFixConfiguration | null;
	/**
	 * Disallow unnecessary catch clauses.
	 */
	noUselessCatch?: RuleConfiguration | null;
	/**
	 * Disallow unnecessary constructors.
	 */
	noUselessConstructor?: RuleFixConfiguration | null;
	/**
	 * Disallow empty exports that don't change anything in a module file.
	 */
	noUselessEmptyExport?: RuleFixConfiguration | null;
	/**
	 * Disallow unnecessary fragments
	 */
	noUselessFragments?: RuleFixConfiguration | null;
	/**
	 * Disallow unnecessary labels.
	 */
	noUselessLabel?: RuleFixConfiguration | null;
	/**
	 * Disallow unnecessary nested block statements.
	 */
	noUselessLoneBlockStatements?: RuleFixConfiguration | null;
	/**
	 * Disallow renaming import, export, and destructured assignments to the same name.
	 */
	noUselessRename?: RuleFixConfiguration | null;
	/**
	 * Disallow useless case in switch statements.
	 */
	noUselessSwitchCase?: RuleFixConfiguration | null;
	/**
	 * Disallow ternary operators when simpler alternatives exist.
	 */
	noUselessTernary?: RuleFixConfiguration | null;
	/**
	 * Disallow useless this aliasing.
	 */
	noUselessThisAlias?: RuleFixConfiguration | null;
	/**
	 * Disallow using any or unknown as type constraint.
	 */
	noUselessTypeConstraint?: RuleFixConfiguration | null;
	/**
	 * Disallow the use of void operators, which is not a familiar operator.
	 */
	noVoid?: RuleConfiguration | null;
	/**
	 * Disallow with statements in non-strict contexts.
	 */
	noWith?: RuleConfiguration | null;
	/**
	 * It enables the recommended rules for this group
	 */
	recommended?: boolean | null;
	/**
	 * Use arrow functions over function expressions.
	 */
	useArrowFunction?: RuleFixConfiguration | null;
	/**
	 * Promotes the use of .flatMap() when map().flat() are used together.
	 */
	useFlatMap?: RuleFixConfiguration | null;
	/**
	 * Enforce the usage of a literal access to properties over computed property access.
	 */
	useLiteralKeys?: RuleFixConfiguration | null;
	/**
	 * Enforce using concise optional chain instead of chained logical expressions.
	 */
	useOptionalChain?: RuleFixConfiguration | null;
	/**
	 * Enforce the use of the regular expression literals instead of the RegExp constructor if possible.
	 */
	useRegexLiterals?: RuleFixConfiguration | null;
	/**
	 * Disallow number literal object member names which are not base10 or uses underscore as separator
	 */
	useSimpleNumberKeys?: RuleFixConfiguration | null;
	/**
	 * Discard redundant terms from logical expressions.
	 */
	useSimplifiedLogicExpression?: RuleFixConfiguration | null;
}
export interface RuleWithComplexityOptions {
	/**
	 * The severity of the emitted diagnostics by the rule
	 */
	level: RulePlainConfiguration;
	/**
	 * Rule's options
	 */
	options: ComplexityOptions;
}
/**
 * Options for the rule `noExcessiveCognitiveComplexity`.
 */
export interface ComplexityOptions {
	/**
	 * The maximum complexity score that we allow. Anything higher is considered excessive.
	 */
	maxAllowedComplexity: number;
}
/**
 * A list of rules that belong to this group
 */
export interface Correctness {
	/**
	 * It enables ALL rules for this group.
	 */
	all?: boolean | null;
	/**
	 * Prevent passing of children as props.
	 */
	noChildrenProp?: RuleConfiguration | null;
	/**
	 * Prevents from having const variables being re-assigned.
	 */
	noConstAssign?: RuleFixConfiguration | null;
	/**
	 * Disallow constant expressions in conditions
	 */
	noConstantCondition?: RuleConfiguration | null;
	/**
	 * Disallow the use of Math.min and Math.max to clamp a value where the result itself is constant.
	 */
	noConstantMathMinMaxClamp?: RuleFixConfiguration | null;
	/**
	 * Disallow returning a value from a constructor.
	 */
	noConstructorReturn?: RuleConfiguration | null;
	/**
	 * Disallow empty character classes in regular expression literals.
	 */
	noEmptyCharacterClassInRegex?: RuleConfiguration | null;
	/**
	 * Disallows empty destructuring patterns.
	 */
	noEmptyPattern?: RuleConfiguration | null;
	/**
	 * Disallow to use unnecessary callback on flatMap.
	 */
	noFlatMapIdentity?: RuleFixConfiguration | null;
	/**
	 * Disallow calling global object properties as functions
	 */
	noGlobalObjectCalls?: RuleConfiguration | null;
	/**
	 * Disallow function and var declarations that are accessible outside their block.
	 */
	noInnerDeclarations?: RuleConfiguration | null;
	/**
	 * Prevents the incorrect use of super() inside classes. It also checks whether a call super() is missing from classes that extends other constructors.
	 */
	noInvalidConstructorSuper?: RuleConfiguration | null;
	/**
	 * Disallow new operators with global non-constructor functions.
	 */
	noInvalidNewBuiltin?: RuleFixConfiguration | null;
	/**
	 * Disallow the use of variables and function parameters before their declaration
	 */
	noInvalidUseBeforeDeclaration?: RuleConfiguration | null;
	/**
	 * Disallow new operators with the Symbol object.
	 */
	noNewSymbol?: RuleFixConfiguration | null;
	/**
	 * Forbid the use of Node.js builtin modules.
	 */
	noNodejsModules?: RuleConfiguration | null;
	/**
	 * Disallow \8 and \9 escape sequences in string literals.
	 */
	noNonoctalDecimalEscape?: RuleFixConfiguration | null;
	/**
	 * Disallow literal numbers that lose precision
	 */
	noPrecisionLoss?: RuleConfiguration | null;
	/**
	 * Prevent the usage of the return value of React.render.
	 */
	noRenderReturnValue?: RuleConfiguration | null;
	/**
	 * Disallow assignments where both sides are exactly the same.
	 */
	noSelfAssign?: RuleConfiguration | null;
	/**
	 * Disallow returning a value from a setter
	 */
	noSetterReturn?: RuleConfiguration | null;
	/**
	 * Disallow comparison of expressions modifying the string case with non-compliant value.
	 */
	noStringCaseMismatch?: RuleFixConfiguration | null;
	/**
	 * Disallow lexical declarations in switch clauses.
	 */
	noSwitchDeclarations?: RuleFixConfiguration | null;
	/**
	 * Prevents the usage of variables that haven't been declared inside the document.
	 */
	noUndeclaredVariables?: RuleConfiguration | null;
	/**
	 * Avoid using unnecessary continue.
	 */
	noUnnecessaryContinue?: RuleFixConfiguration | null;
	/**
	 * Disallow unreachable code
	 */
	noUnreachable?: RuleConfiguration | null;
	/**
	 * Ensures the super() constructor is called exactly once on every code  path in a class constructor before this is accessed if the class has a superclass
	 */
	noUnreachableSuper?: RuleConfiguration | null;
	/**
	 * Disallow control flow statements in finally blocks.
	 */
	noUnsafeFinally?: RuleConfiguration | null;
	/**
	 * Disallow the use of optional chaining in contexts where the undefined value is not allowed.
	 */
	noUnsafeOptionalChaining?: RuleConfiguration | null;
	/**
	 * Disallow unused imports.
	 */
	noUnusedImports?: RuleFixConfiguration | null;
	/**
	 * Disallow unused labels.
	 */
	noUnusedLabels?: RuleFixConfiguration | null;
	/**
	 * Disallow unused private class members
	 */
	noUnusedPrivateClassMembers?: RuleFixConfiguration | null;
	/**
	 * Disallow unused variables.
	 */
	noUnusedVariables?: RuleFixConfiguration | null;
	/**
	 * This rules prevents void elements (AKA self-closing elements) from having children.
	 */
	noVoidElementsWithChildren?: RuleFixConfiguration | null;
	/**
	 * Disallow returning a value from a function with the return type 'void'
	 */
	noVoidTypeReturn?: RuleConfiguration | null;
	/**
	 * It enables the recommended rules for this group
	 */
	recommended?: boolean | null;
	/**
	 * Disallow Array constructors.
	 */
	useArrayLiterals?: RuleFixConfiguration | null;
	/**
	 * Enforce all dependencies are correctly specified in a React hook.
	 */
	useExhaustiveDependencies?: HooksConfiguration | null;
	/**
	 * Enforce that all React hooks are being called from the Top Level component functions.
	 */
	useHookAtTopLevel?: DeprecatedHooksConfiguration | null;
	/**
	 * Require calls to isNaN() when checking for NaN.
	 */
	useIsNan?: RuleFixConfiguration | null;
	/**
	 * Disallow missing key props in iterators/collection literals.
	 */
	useJsxKeyInIterable?: RuleConfiguration | null;
	/**
	 * Enforce "for" loop update clause moving the counter in the right direction.
	 */
	useValidForDirection?: RuleConfiguration | null;
	/**
	 * Require generator functions to contain yield.
	 */
	useYield?: RuleConfiguration | null;
}
export interface RuleWithHooksOptions {
	/**
	 * The severity of the emitted diagnostics by the rule
	 */
	level: RulePlainConfiguration;
	/**
	 * Rule's options
	 */
	options: HooksOptions;
}
/**
 * Options for the rule `useExhaustiveDependencies`
 */
export interface HooksOptions {
	/**
	 * List of hooks of which the dependencies should be validated.
	 */
	hooks: Hook[];
}
export interface Hook {
	/**
	 * The "position" of the closure function, starting from zero.
	 *
	 * For example, for React's `useEffect()` hook, the closure index is 0.
	 */
	closureIndex?: number | null;
	/**
	 * The "position" of the array of dependencies, starting from zero.
	 *
	 * For example, for React's `useEffect()` hook, the dependencies index is 1.
	 */
	dependenciesIndex?: number | null;
	/**
	 * The name of the hook.
	 */
	name: string;
	/**
	 * Whether the result of the hook is stable.
	 *
	 * Set to `true` to mark the identity of the hook's return value as stable, or use a number/an array of numbers to mark the "positions" in the return array as stable.
	 *
	 * For example, for React's `useRef()` hook the value would be `true`, while for `useState()` it would be `[1]`.
	 */
	stableResult: StableHookResult;
}
export interface RuleWithDeprecatedHooksOptions {
	/**
	 * The severity of the emitted diagnostics by the rule
	 */
	level: RulePlainConfiguration;
	/**
	 * Rule's options
	 */
	options: DeprecatedHooksOptions;
}
/**
 * Options for the `useHookAtTopLevel` rule have been deprecated, since we now use the React hook naming convention to determine whether a function is a hook.
 */
export interface DeprecatedHooksOptions {}
/**
 * A list of rules that belong to this group
 */
export interface Nursery {
	/**
	 * It enables ALL rules for this group.
	 */
	all?: boolean | null;
	/**
	 * Disallow the use of console.
	 */
	noConsole?: RuleFixConfiguration | null;
	/**
	 * Disallow using a callback in asynchronous tests and hooks.
	 */
	noDoneCallback?: RuleConfiguration | null;
	/**
	 * Disallow duplicate @import rules.
	 */
	noDuplicateAtImportRules?: RuleConfiguration | null;
	/**
	 * Disallow duplicate conditions in if-else-if chains
	 */
	noDuplicateElseIf?: RuleConfiguration | null;
	/**
	 * Disallow duplicate names within font families.
	 */
	noDuplicateFontNames?: RuleConfiguration | null;
	/**
	 * Disallow two keys with the same name inside a JSON object.
	 */
	noDuplicateJsonKeys?: RuleConfiguration | null;
	/**
	 * Disallow duplicate selectors within keyframe blocks.
	 */
	noDuplicateSelectorsKeyframeBlock?: RuleConfiguration | null;
	/**
	 * Disallow CSS empty blocks.
	 */
	noEmptyBlock?: RuleConfiguration | null;
	/**
	 * Disallow variables from evolving into any type through reassignments.
	 */
	noEvolvingTypes?: RuleConfiguration | null;
	/**
	 * Disallow exporting an imported variable.
	 */
	noExportedImports?: RuleConfiguration | null;
	/**
	 * Disallow invalid !important within keyframe declarations
	 */
	noImportantInKeyframe?: RuleConfiguration | null;
	/**
	 * Disallow non-standard direction values for linear gradient functions.
	 */
	noInvalidDirectionInLinearGradient?: RuleConfiguration | null;
	/**
	 * Disallow the use of @import at-rules in invalid positions.
	 */
	noInvalidPositionAtImportRule?: RuleConfiguration | null;
	/**
	 * Enforce that a label element or component has a text label and an associated input.
	 */
	noLabelWithoutControl?: NoLabelWithoutControlConfiguration | null;
	/**
	 * Checks that the assertion function, for example expect, is placed inside an it() function call.
	 */
	noMisplacedAssertion?: RuleConfiguration | null;
	/**
	 * Prevents React-specific JSX properties from being used.
	 */
	noReactSpecificProps?: RuleFixConfiguration | null;
	/**
	 * Disallow specified modules when loaded by import or require.
	 */
	noRestrictedImports?: RestrictedImportsConfiguration | null;
	/**
	 * Disallow shorthand properties that override related longhand properties.
	 */
	noShorthandPropertyOverrides?: RuleConfiguration | null;
	/**
	 * Enforce the use of String.slice() over String.substr() and String.substring().
	 */
	noSubstr?: RuleFixConfiguration | null;
	/**
	 * Disallow the use of dependencies that aren't specified in the package.json.
	 */
	noUndeclaredDependencies?: RuleConfiguration | null;
	/**
	 * Disallow unknown CSS value functions.
	 */
	noUnknownFunction?: RuleConfiguration | null;
	/**
	 * Disallow unknown media feature names.
	 */
	noUnknownMediaFeatureName?: RuleConfiguration | null;
	/**
	 * Disallow unknown properties.
	 */
	noUnknownProperty?: RuleConfiguration | null;
	/**
	 * Disallow unknown pseudo-class selectors.
	 */
	noUnknownPseudoClassSelector?: RuleConfiguration | null;
	/**
	 * Disallow unknown pseudo-element selectors.
	 */
	noUnknownSelectorPseudoElement?: RuleConfiguration | null;
	/**
	 * Disallow unknown CSS units.
	 */
	noUnknownUnit?: RuleConfiguration | null;
	/**
	 * Disallow unmatchable An+B selectors.
	 */
	noUnmatchableAnbSelector?: RuleConfiguration | null;
	/**
	 * Disallow unused function parameters.
	 */
	noUnusedFunctionParameters?: RuleFixConfiguration | null;
	/**
	 * Disallow unnecessary concatenation of string or template literals.
	 */
	noUselessStringConcat?: RuleFixConfiguration | null;
	/**
	 * Disallow initializing variables to undefined.
	 */
	noUselessUndefinedInitialization?: RuleFixConfiguration | null;
	/**
	 * Disallow the use of yoda expressions.
	 */
	noYodaExpression?: RuleFixConfiguration | null;
	/**
	 * It enables the recommended rules for this group
	 */
	recommended?: boolean | null;
	/**
	 * Disallow the use of overload signatures that are not next to each other.
	 */
	useAdjacentOverloadSignatures?: RuleConfiguration | null;
	/**
	 * Enforce the use of new for all builtins, except String, Number, Boolean, Symbol and BigInt.
	 */
	useConsistentBuiltinInstantiation?: RuleFixConfiguration | null;
	/**
	 * Disallows invalid named grid areas in CSS Grid Layouts.
	 */
	useConsistentGridAreas?: RuleConfiguration | null;
	/**
	 * Use Date.now() to get the number of milliseconds since the Unix Epoch.
	 */
	useDateNow?: RuleFixConfiguration | null;
	/**
	 * Require the default clause in switch statements.
	 */
	useDefaultSwitchClause?: RuleConfiguration | null;
	/**
	 * Require specifying the reason argument when using @deprecated directive
	 */
	useDeprecatedReason?: RuleConfiguration | null;
	/**
	 * Enforce passing a message value when creating a built-in error.
	 */
	useErrorMessage?: RuleConfiguration | null;
	/**
	 * Enforce explicitly comparing the length, size, byteLength or byteOffset property of a value.
	 */
	useExplicitLengthCheck?: RuleFixConfiguration | null;
	/**
	 * Elements with an interactive role and interaction handlers must be focusable.
	 */
	useFocusableInteractive?: RuleConfiguration | null;
	/**
	 * Disallow a missing generic family keyword within font families.
	 */
	useGenericFontNames?: RuleConfiguration | null;
	/**
	 * Enforce file extensions for relative imports.
	 */
	useImportExtensions?: RuleFixConfiguration | null;
	/**
	 * Disallows package private imports.
	 */
	useImportRestrictions?: RuleConfiguration | null;
	/**
	 * Enforce using the digits argument with Number#toFixed().
	 */
	useNumberToFixedDigitsArgument?: RuleFixConfiguration | null;
	/**
	 * It detects the use of role attributes in JSX elements and suggests using semantic elements instead.
	 */
	useSemanticElements?: RuleConfiguration | null;
	/**
	 * Enforce the sorting of CSS utility classes.
	 */
	useSortedClasses?: UtilityClassSortingConfiguration | null;
	/**
	 * Require new when throwing an error.
	 */
	useThrowNewError?: RuleFixConfiguration | null;
	/**
	 * Disallow throwing non-Error values.
	 */
	useThrowOnlyError?: RuleConfiguration | null;
	/**
	 * Require regex literals to be declared at the top level.
	 */
	useTopLevelRegex?: RuleConfiguration | null;
	/**
	 * Use valid values for the autocomplete attribute on input elements.
	 */
	useValidAutocomplete?: UseValidAutocompleteConfiguration | null;
}
export interface RuleWithNoLabelWithoutControlOptions {
	/**
	 * The severity of the emitted diagnostics by the rule
	 */
	level: RulePlainConfiguration;
	/**
	 * Rule's options
	 */
	options: NoLabelWithoutControlOptions;
}
export interface NoLabelWithoutControlOptions {
	/**
	 * Array of component names that should be considered the same as an `input` element.
	 */
	inputComponents: string[];
	/**
	 * Array of attributes that should be treated as the `label` accessible text content.
	 */
	labelAttributes: string[];
	/**
	 * Array of component names that should be considered the same as a `label` element.
	 */
	labelComponents: string[];
}
export interface RuleWithRestrictedImportsOptions {
	/**
	 * The severity of the emitted diagnostics by the rule
	 */
	level: RulePlainConfiguration;
	/**
	 * Rule's options
	 */
	options: RestrictedImportsOptions;
}
/**
 * Options for the rule `noRestrictedImports`.
 */
export interface RestrictedImportsOptions {
	/**
	 * A list of names that should trigger the rule
	 */
	paths: {
		[k: string]: string;
	};
}
export interface RuleWithUtilityClassSortingOptions {
	/**
	 * The kind of the code actions emitted by the rule
	 */
	fix?: FixKind | null;
	/**
	 * The severity of the emitted diagnostics by the rule
	 */
	level: RulePlainConfiguration;
	/**
	 * Rule's options
	 */
	options: UtilityClassSortingOptions;
}
export interface UtilityClassSortingOptions {
	/**
	 * Additional attributes that will be sorted.
	 */
	attributes?: string[] | null;
	/**
	 * Names of the functions or tagged templates that will be sorted.
	 */
	functions?: string[] | null;
}
export interface RuleWithUseValidAutocompleteOptions {
	/**
	 * The severity of the emitted diagnostics by the rule
	 */
	level: RulePlainConfiguration;
	/**
	 * Rule's options
	 */
	options: UseValidAutocompleteOptions;
}
export interface UseValidAutocompleteOptions {
	/**
	 * `input` like custom components that should be checked.
	 */
	inputComponents: string[];
}
/**
 * A list of rules that belong to this group
 */
export interface Performance {
	/**
	 * It enables ALL rules for this group.
	 */
	all?: boolean | null;
	/**
	 * Disallow the use of spread (...) syntax on accumulators.
	 */
	noAccumulatingSpread?: RuleConfiguration | null;
	/**
	 * Disallow the use of barrel file.
	 */
	noBarrelFile?: RuleConfiguration | null;
	/**
	 * Disallow the use of the delete operator.
	 */
	noDelete?: RuleFixConfiguration | null;
	/**
	 * Avoid re-export all.
	 */
	noReExportAll?: RuleConfiguration | null;
	/**
	 * It enables the recommended rules for this group
	 */
	recommended?: boolean | null;
}
/**
 * A list of rules that belong to this group
 */
export interface Security {
	/**
	 * It enables ALL rules for this group.
	 */
	all?: boolean | null;
	/**
	 * Prevent the usage of dangerous JSX props
	 */
	noDangerouslySetInnerHtml?: RuleConfiguration | null;
	/**
	 * Report when a DOM element or a component uses both children and dangerouslySetInnerHTML prop.
	 */
	noDangerouslySetInnerHtmlWithChildren?: RuleConfiguration | null;
	/**
	 * Disallow the use of global eval().
	 */
	noGlobalEval?: RuleConfiguration | null;
	/**
	 * It enables the recommended rules for this group
	 */
	recommended?: boolean | null;
}
/**
 * A list of rules that belong to this group
 */
export interface Style {
	/**
	 * It enables ALL rules for this group.
	 */
	all?: boolean | null;
	/**
	 * Disallow the use of arguments.
	 */
	noArguments?: RuleConfiguration | null;
	/**
	 * Disallow comma operator.
	 */
	noCommaOperator?: RuleConfiguration | null;
	/**
	 * Disallow default exports.
	 */
	noDefaultExport?: RuleConfiguration | null;
	/**
	 * Disallow implicit true values on JSX boolean attributes
	 */
	noImplicitBoolean?: RuleFixConfiguration | null;
	/**
	 * Disallow type annotations for variables, parameters, and class properties initialized with a literal expression.
	 */
	noInferrableTypes?: RuleFixConfiguration | null;
	/**
	 * Disallow the use of TypeScript's namespaces.
	 */
	noNamespace?: RuleConfiguration | null;
	/**
	 * Disallow the use of namespace imports.
	 */
	noNamespaceImport?: RuleConfiguration | null;
	/**
	 * Disallow negation in the condition of an if statement if it has an else clause.
	 */
	noNegationElse?: RuleFixConfiguration | null;
	/**
	 * Disallow non-null assertions using the ! postfix operator.
	 */
	noNonNullAssertion?: RuleFixConfiguration | null;
	/**
	 * Disallow reassigning function parameters.
	 */
	noParameterAssign?: RuleConfiguration | null;
	/**
	 * Disallow the use of parameter properties in class constructors.
	 */
	noParameterProperties?: RuleConfiguration | null;
	/**
	 * This rule allows you to specify global variable names that you don’t want to use in your application.
	 */
	noRestrictedGlobals?: RestrictedGlobalsConfiguration | null;
	/**
	 * Disallow the use of constants which its value is the upper-case version of its name.
	 */
	noShoutyConstants?: RuleFixConfiguration | null;
	/**
	 * Disallow template literals if interpolation and special-character handling are not needed
	 */
	noUnusedTemplateLiteral?: RuleFixConfiguration | null;
	/**
	 * Disallow else block when the if block breaks early.
	 */
	noUselessElse?: RuleFixConfiguration | null;
	/**
	 * Disallow the use of var
	 */
	noVar?: RuleFixConfiguration | null;
	/**
	 * It enables the recommended rules for this group
	 */
	recommended?: boolean | null;
	/**
	 * Enforce the use of as const over literal type and type annotation.
	 */
	useAsConstAssertion?: RuleFixConfiguration | null;
	/**
	 * Requires following curly brace conventions.
	 */
	useBlockStatements?: RuleFixConfiguration | null;
	/**
	 * Enforce using else if instead of nested if in else clauses.
	 */
	useCollapsedElseIf?: RuleFixConfiguration | null;
	/**
	 * Require consistently using either T\[] or Array\<T>
	 */
	useConsistentArrayType?: ConsistentArrayTypeConfiguration | null;
	/**
	 * Require const declarations for variables that are only assigned once.
	 */
	useConst?: RuleFixConfiguration | null;
	/**
	 * Enforce default function parameters and optional function parameters to be last.
	 */
	useDefaultParameterLast?: RuleFixConfiguration | null;
	/**
	 * Require that each enum member value be explicitly initialized.
	 */
	useEnumInitializers?: RuleFixConfiguration | null;
	/**
	 * Disallow the use of Math.pow in favor of the ** operator.
	 */
	useExponentiationOperator?: RuleFixConfiguration | null;
	/**
	 * Promotes the use of export type for types.
	 */
	useExportType?: RuleFixConfiguration | null;
	/**
	 * Enforce naming conventions for JavaScript and TypeScript filenames.
	 */
	useFilenamingConvention?: FilenamingConventionConfiguration | null;
	/**
	 * This rule recommends a for-of loop when in a for loop, the index used to extract an item from the iterated array.
	 */
	useForOf?: RuleConfiguration | null;
	/**
	 * This rule enforces the use of \<>...\</> over \<Fragment>...\</Fragment>.
	 */
	useFragmentSyntax?: RuleFixConfiguration | null;
	/**
	 * Promotes the use of import type for types.
	 */
	useImportType?: RuleFixConfiguration | null;
	/**
	 * Require all enum members to be literal values.
	 */
	useLiteralEnumMembers?: RuleConfiguration | null;
	/**
	 * Enforce naming conventions for everything across a codebase.
	 */
	useNamingConvention?: NamingConventionConfiguration | null;
	/**
	 * Promotes the usage of node:assert/strict over node:assert.
	 */
	useNodeAssertStrict?: RuleFixConfiguration | null;
	/**
	 * Enforces using the node: protocol for Node.js builtin modules.
	 */
	useNodejsImportProtocol?: RuleFixConfiguration | null;
	/**
	 * Use the Number properties instead of global ones.
	 */
	useNumberNamespace?: RuleFixConfiguration | null;
	/**
	 * Disallow parseInt() and Number.parseInt() in favor of binary, octal, and hexadecimal literals
	 */
	useNumericLiterals?: RuleFixConfiguration | null;
	/**
	 * Prevent extra closing tags for components without children
	 */
	useSelfClosingElements?: RuleFixConfiguration | null;
	/**
	 * When expressing array types, this rule promotes the usage of T\[] shorthand instead of Array\<T>.
	 */
	useShorthandArrayType?: RuleFixConfiguration | null;
	/**
	 * Require assignment operator shorthand where possible.
	 */
	useShorthandAssign?: RuleFixConfiguration | null;
	/**
	 * Enforce using function types instead of object type with call signatures.
	 */
	useShorthandFunctionType?: RuleFixConfiguration | null;
	/**
	 * Enforces switch clauses have a single statement, emits a quick fix wrapping the statements in a block.
	 */
	useSingleCaseStatement?: RuleFixConfiguration | null;
	/**
	 * Disallow multiple variable declarations in the same variable statement
	 */
	useSingleVarDeclarator?: RuleFixConfiguration | null;
	/**
	 * Prefer template literals over string concatenation.
	 */
	useTemplate?: RuleFixConfiguration | null;
	/**
	 * Enforce the use of while loops instead of for loops when the initializer and update expressions are not needed.
	 */
	useWhile?: RuleFixConfiguration | null;
}
export interface RuleWithRestrictedGlobalsOptions {
	/**
	 * The severity of the emitted diagnostics by the rule
	 */
	level: RulePlainConfiguration;
	/**
	 * Rule's options
	 */
	options: RestrictedGlobalsOptions;
}
/**
 * Options for the rule `noRestrictedGlobals`.
 */
export interface RestrictedGlobalsOptions {
	/**
	 * A list of names that should trigger the rule
	 */
	deniedGlobals: string[];
}
export interface RuleWithConsistentArrayTypeOptions {
	/**
	 * The kind of the code actions emitted by the rule
	 */
	fix?: FixKind | null;
	/**
	 * The severity of the emitted diagnostics by the rule
	 */
	level: RulePlainConfiguration;
	/**
	 * Rule's options
	 */
	options: ConsistentArrayTypeOptions;
}
export interface ConsistentArrayTypeOptions {
	syntax: ConsistentArrayType;
}
export interface RuleWithFilenamingConventionOptions {
	/**
	 * The severity of the emitted diagnostics by the rule
	 */
	level: RulePlainConfiguration;
	/**
	 * Rule's options
	 */
	options: FilenamingConventionOptions;
}
/**
 * Rule's options.
 */
export interface FilenamingConventionOptions {
	/**
	 * Allowed cases for file names.
	 */
	filenameCases?: FilenameCases;
	/**
	 * If `false`, then non-ASCII characters are allowed.
	 */
	requireAscii?: boolean;
	/**
	 * If `false`, then consecutive uppercase are allowed in _camel_ and _pascal_ cases. This does not affect other [Case].
	 */
	strictCase?: boolean;
}
export interface RuleWithNamingConventionOptions {
	/**
	 * The kind of the code actions emitted by the rule
	 */
	fix?: FixKind | null;
	/**
	 * The severity of the emitted diagnostics by the rule
	 */
	level: RulePlainConfiguration;
	/**
	 * Rule's options
	 */
	options: NamingConventionOptions;
}
/**
 * Rule's options.
 */
export interface NamingConventionOptions {
	/**
	 * Custom conventions.
	 */
	conventions?: Convention[];
	/**
	 * Allowed cases for _TypeScript_ `enum` member names.
	 */
	enumMemberCase?: Format;
	/**
	 * If `false`, then non-ASCII characters are allowed.
	 */
	requireAscii?: boolean;
	/**
	 * If `false`, then consecutive uppercase are allowed in _camel_ and _pascal_ cases. This does not affect other [Case].
	 */
	strictCase?: boolean;
}
export interface Convention {
	/**
	 * String cases to enforce
	 */
	formats?: Formats;
	/**
	 * Regular expression to enforce
	 */
	match?: Regex | null;
	/**
	 * Declarations concerned by this convention
	 */
	selector?: Selector;
}
export interface Selector {
	/**
	 * Declaration kind
	 */
	kind?: Kind;
	/**
	 * Modifiers used on the declaration
	 */
	modifiers?: Modifiers;
	/**
	 * Scope of the declaration
	 */
	scope?: Scope;
}
/**
 * A list of rules that belong to this group
 */
export interface Suspicious {
	/**
	 * It enables ALL rules for this group.
	 */
	all?: boolean | null;
	/**
	 * Use standard constants instead of approximated literals.
	 */
	noApproximativeNumericConstant?: RuleFixConfiguration | null;
	/**
	 * Discourage the usage of Array index in keys.
	 */
	noArrayIndexKey?: RuleConfiguration | null;
	/**
	 * Disallow assignments in expressions.
	 */
	noAssignInExpressions?: RuleConfiguration | null;
	/**
	 * Disallows using an async function as a Promise executor.
	 */
	noAsyncPromiseExecutor?: RuleConfiguration | null;
	/**
	 * Disallow reassigning exceptions in catch clauses.
	 */
	noCatchAssign?: RuleConfiguration | null;
	/**
	 * Disallow reassigning class members.
	 */
	noClassAssign?: RuleConfiguration | null;
	/**
	 * Prevent comments from being inserted as text nodes
	 */
	noCommentText?: RuleFixConfiguration | null;
	/**
	 * Disallow comparing against -0
	 */
	noCompareNegZero?: RuleFixConfiguration | null;
	/**
	 * Disallow labeled statements that are not loops.
	 */
	noConfusingLabels?: RuleConfiguration | null;
	/**
	 * Disallow void type outside of generic or return types.
	 */
	noConfusingVoidType?: RuleFixConfiguration | null;
	/**
	 * Disallow the use of console.log
	 */
	noConsoleLog?: RuleFixConfiguration | null;
	/**
	 * Disallow TypeScript const enum
	 */
	noConstEnum?: RuleFixConfiguration | null;
	/**
	 * Prevents from having control characters and some escape sequences that match control characters in regular expressions.
	 */
	noControlCharactersInRegex?: RuleConfiguration | null;
	/**
	 * Disallow the use of debugger
	 */
	noDebugger?: RuleFixConfiguration | null;
	/**
	 * Require the use of === and !==
	 */
	noDoubleEquals?: RuleFixConfiguration | null;
	/**
	 * Disallow duplicate case labels.
	 */
	noDuplicateCase?: RuleConfiguration | null;
	/**
	 * Disallow duplicate class members.
	 */
	noDuplicateClassMembers?: RuleConfiguration | null;
	/**
	 * Prevents JSX properties to be assigned multiple times.
	 */
	noDuplicateJsxProps?: RuleConfiguration | null;
	/**
	 * Prevents object literals having more than one property declaration for the same name.
	 */
	noDuplicateObjectKeys?: RuleFixConfiguration | null;
	/**
	 * Disallow duplicate function parameter name.
	 */
	noDuplicateParameters?: RuleConfiguration | null;
	/**
	 * A describe block should not contain duplicate hooks.
	 */
	noDuplicateTestHooks?: RuleConfiguration | null;
	/**
	 * Disallow empty block statements and static blocks.
	 */
	noEmptyBlockStatements?: RuleConfiguration | null;
	/**
	 * Disallow the declaration of empty interfaces.
	 */
	noEmptyInterface?: RuleFixConfiguration | null;
	/**
	 * Disallow the any type usage.
	 */
	noExplicitAny?: RuleConfiguration | null;
	/**
	 * Disallow using export or module.exports in files containing tests
	 */
	noExportsInTest?: RuleConfiguration | null;
	/**
	 * Prevents the wrong usage of the non-null assertion operator (!) in TypeScript files.
	 */
	noExtraNonNullAssertion?: RuleFixConfiguration | null;
	/**
	 * Disallow fallthrough of switch clauses.
	 */
	noFallthroughSwitchClause?: RuleConfiguration | null;
	/**
	 * Disallow focused tests.
	 */
	noFocusedTests?: RuleFixConfiguration | null;
	/**
	 * Disallow reassigning function declarations.
	 */
	noFunctionAssign?: RuleConfiguration | null;
	/**
	 * Disallow assignments to native objects and read-only global variables.
	 */
	noGlobalAssign?: RuleConfiguration | null;
	/**
	 * Use Number.isFinite instead of global isFinite.
	 */
	noGlobalIsFinite?: RuleFixConfiguration | null;
	/**
	 * Use Number.isNaN instead of global isNaN.
	 */
	noGlobalIsNan?: RuleFixConfiguration | null;
	/**
	 * Disallow use of implicit any type on variable declarations.
	 */
	noImplicitAnyLet?: RuleConfiguration | null;
	/**
	 * Disallow assigning to imported bindings
	 */
	noImportAssign?: RuleConfiguration | null;
	/**
	 * Disallow labels that share a name with a variable
	 */
	noLabelVar?: RuleConfiguration | null;
	/**
	 * Disallow characters made with multiple code points in character class syntax.
	 */
	noMisleadingCharacterClass?: RuleFixConfiguration | null;
	/**
	 * Enforce proper usage of new and constructor.
	 */
	noMisleadingInstantiator?: RuleConfiguration | null;
	/**
	 * Disallow shorthand assign when variable appears on both sides.
	 */
	noMisrefactoredShorthandAssign?: RuleFixConfiguration | null;
	/**
	 * Disallow direct use of Object.prototype builtins.
	 */
	noPrototypeBuiltins?: RuleConfiguration | null;
	/**
	 * Disallow variable, function, class, and type redeclarations in the same scope.
	 */
	noRedeclare?: RuleConfiguration | null;
	/**
	 * Prevents from having redundant "use strict".
	 */
	noRedundantUseStrict?: RuleFixConfiguration | null;
	/**
	 * Disallow comparisons where both sides are exactly the same.
	 */
	noSelfCompare?: RuleConfiguration | null;
	/**
	 * Disallow identifiers from shadowing restricted names.
	 */
	noShadowRestrictedNames?: RuleConfiguration | null;
	/**
	 * Disallow disabled tests.
	 */
	noSkippedTests?: RuleFixConfiguration | null;
	/**
	 * Disallow sparse arrays
	 */
	noSparseArray?: RuleFixConfiguration | null;
	/**
	 * It detects possible "wrong" semicolons inside JSX elements.
	 */
	noSuspiciousSemicolonInJsx?: RuleConfiguration | null;
	/**
	 * Disallow then property.
	 */
	noThenProperty?: RuleConfiguration | null;
	/**
	 * Disallow unsafe declaration merging between interfaces and classes.
	 */
	noUnsafeDeclarationMerging?: RuleConfiguration | null;
	/**
	 * Disallow using unsafe negation.
	 */
	noUnsafeNegation?: RuleFixConfiguration | null;
	/**
	 * It enables the recommended rules for this group
	 */
	recommended?: boolean | null;
	/**
	 * Ensure async functions utilize await.
	 */
	useAwait?: RuleConfiguration | null;
	/**
	 * Enforce default clauses in switch statements to be last
	 */
	useDefaultSwitchClauseLast?: RuleConfiguration | null;
	/**
	 * Enforce get methods to always return a value.
	 */
	useGetterReturn?: RuleConfiguration | null;
	/**
	 * Use Array.isArray() instead of instanceof Array.
	 */
	useIsArray?: RuleFixConfiguration | null;
	/**
	 * Require using the namespace keyword over the module keyword to declare TypeScript namespaces.
	 */
	useNamespaceKeyword?: RuleFixConfiguration | null;
	/**
	 * This rule verifies the result of typeof $expr unary expressions is being compared to valid values, either string literals containing valid type names or other typeof expressions
	 */
	useValidTypeof?: RuleFixConfiguration | null;
}
export interface OrganizeImports {
	/**
	 * Enables the organization of imports
	 */
	enabled?: boolean | null;
	/**
	 * A list of Unix shell style patterns. The formatter will ignore files/folders that will match these patterns.
	 */
	ignore?: StringSet | null;
	/**
	 * A list of Unix shell style patterns. The formatter will include files/folders that will match these patterns.
	 */
	include?: StringSet | null;
}
export interface OverridePattern {
	/**
	 * Specific configuration for the Css language
	 */
	css?: CssConfiguration | null;
	/**
	 * Specific configuration for the Json language
	 */
	formatter?: OverrideFormatterConfiguration | null;
	/**
	 * A list of Unix shell style patterns. The formatter will ignore files/folders that will match these patterns.
	 */
	ignore?: StringSet | null;
	/**
	 * A list of Unix shell style patterns. The formatter will include files/folders that will match these patterns.
	 */
	include?: StringSet | null;
	/**
	 * Specific configuration for the JavaScript language
	 */
	javascript?: JavascriptConfiguration | null;
	/**
	 * Specific configuration for the Json language
	 */
	json?: JsonConfiguration | null;
	/**
	 * Specific configuration for the Json language
	 */
	linter?: OverrideLinterConfiguration | null;
	/**
	 * Specific configuration for the Json language
	 */
	organizeImports?: OverrideOrganizeImportsConfiguration | null;
}
export interface OverrideFormatterConfiguration {
	/**
	 * The attribute position style.
	 */
	attributePosition?: AttributePosition | null;
	enabled?: boolean | null;
	/**
	 * Stores whether formatting should be allowed to proceed if a given file has syntax errors
	 */
	formatWithErrors?: boolean | null;
	/**
	 * The size of the indentation, 2 by default (deprecated, use `indent-width`)
	 */
	indentSize?: IndentWidth | null;
	/**
	 * The indent style.
	 */
	indentStyle?: PlainIndentStyle | null;
	/**
	 * The size of the indentation, 2 by default
	 */
	indentWidth?: IndentWidth | null;
	/**
	 * The type of line ending.
	 */
	lineEnding?: LineEnding | null;
	/**
	 * What's the max width of a line. Defaults to 80.
	 */
	lineWidth?: LineWidth | null;
}
export interface OverrideLinterConfiguration {
	/**
	 * if `false`, it disables the feature and the linter won't be executed. `true` by default
	 */
	enabled?: boolean | null;
	/**
	 * List of rules
	 */
	rules?: Rules | null;
}
export interface OverrideOrganizeImportsConfiguration {
	/**
	 * if `false`, it disables the feature and the linter won't be executed. `true` by default
	 */
	enabled?: boolean | null;
}
/**
 * Set of properties to integrate Biome with a VCS software.
 */
export interface VcsConfiguration {
	/**
	 * The kind of client.
	 */
	clientKind?: VcsClientKind | null;
	/**
	 * The main branch of the project
	 */
	defaultBranch?: string | null;
	/**
	 * Whether Biome should integrate itself with the VCS client
	 */
	enabled?: boolean | null;
	/**
	 * The folder where Biome should check for VCS files. By default, Biome will use the same folder where `biome.json` was found.
	 *
	 * If Biome can't find the configuration, it will attempt to use the current working directory. If no current working directory can't be found, Biome won't use the VCS integration, and a diagnostic will be emitted
	 */
	root?: string | null;
	/**
	 * Whether Biome should use the VCS ignore file. When [true], Biome will ignore the files specified in the ignore file.
	 */
	useIgnoreFile?: boolean | null;
}
