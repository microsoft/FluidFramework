/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-validator in @fluidframework/build-tools.
 */
import * as old from "@fluidframework/container-definitions-0.46.0";
import * as current from "../../index";

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "EnumDeclaration_AttachState": {"forwardCompat": false}
*/
declare function get_old_EnumDeclaration_AttachState():
    old.AttachState;
declare function use_current_EnumDeclaration_AttachState(
    use: current.AttachState);
use_current_EnumDeclaration_AttachState(
    get_old_EnumDeclaration_AttachState());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "EnumDeclaration_AttachState": {"backCompat": false}
*/
declare function get_current_EnumDeclaration_AttachState():
    current.AttachState;
declare function use_old_EnumDeclaration_AttachState(
    use: old.AttachState);
use_old_EnumDeclaration_AttachState(
    get_current_EnumDeclaration_AttachState());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "EnumDeclaration_BindState": {"forwardCompat": false}
*/
declare function get_old_EnumDeclaration_BindState():
    old.BindState;
declare function use_current_EnumDeclaration_BindState(
    use: current.BindState);
use_current_EnumDeclaration_BindState(
    get_old_EnumDeclaration_BindState());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "EnumDeclaration_BindState": {"backCompat": false}
*/
declare function get_current_EnumDeclaration_BindState():
    current.BindState;
declare function use_old_EnumDeclaration_BindState(
    use: old.BindState);
use_old_EnumDeclaration_BindState(
    get_current_EnumDeclaration_BindState());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "TypeAliasDeclaration_ConnectionState": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_ConnectionState():
    old.ConnectionState;
declare function use_current_TypeAliasDeclaration_ConnectionState(
    use: current.ConnectionState);
use_current_TypeAliasDeclaration_ConnectionState(
    get_old_TypeAliasDeclaration_ConnectionState());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "TypeAliasDeclaration_ConnectionState": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_ConnectionState():
    current.ConnectionState;
declare function use_old_TypeAliasDeclaration_ConnectionState(
    use: old.ConnectionState);
use_old_TypeAliasDeclaration_ConnectionState(
    get_current_TypeAliasDeclaration_ConnectionState());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "TypeAliasDeclaration_ConnectionState.Connected": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_ConnectionState_Connected():
    old.ConnectionState.Connected;
declare function use_current_TypeAliasDeclaration_ConnectionState_Connected(
    use: current.ConnectionState.Connected);
use_current_TypeAliasDeclaration_ConnectionState_Connected(
    get_old_TypeAliasDeclaration_ConnectionState_Connected());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "TypeAliasDeclaration_ConnectionState.Connected": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_ConnectionState_Connected():
    current.ConnectionState.Connected;
declare function use_old_TypeAliasDeclaration_ConnectionState_Connected(
    use: old.ConnectionState.Connected);
use_old_TypeAliasDeclaration_ConnectionState_Connected(
    get_current_TypeAliasDeclaration_ConnectionState_Connected());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "TypeAliasDeclaration_ConnectionState.Connecting": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_ConnectionState_Connecting():
    old.ConnectionState.Connecting;
declare function use_current_TypeAliasDeclaration_ConnectionState_Connecting(
    use: current.ConnectionState.Connecting);
use_current_TypeAliasDeclaration_ConnectionState_Connecting(
    get_old_TypeAliasDeclaration_ConnectionState_Connecting());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "TypeAliasDeclaration_ConnectionState.Connecting": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_ConnectionState_Connecting():
    current.ConnectionState.Connecting;
declare function use_old_TypeAliasDeclaration_ConnectionState_Connecting(
    use: old.ConnectionState.Connecting);
use_old_TypeAliasDeclaration_ConnectionState_Connecting(
    get_current_TypeAliasDeclaration_ConnectionState_Connecting());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "TypeAliasDeclaration_ConnectionState.Disconnected": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_ConnectionState_Disconnected():
    old.ConnectionState.Disconnected;
declare function use_current_TypeAliasDeclaration_ConnectionState_Disconnected(
    use: current.ConnectionState.Disconnected);
use_current_TypeAliasDeclaration_ConnectionState_Disconnected(
    get_old_TypeAliasDeclaration_ConnectionState_Disconnected());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "TypeAliasDeclaration_ConnectionState.Disconnected": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_ConnectionState_Disconnected():
    current.ConnectionState.Disconnected;
declare function use_old_TypeAliasDeclaration_ConnectionState_Disconnected(
    use: old.ConnectionState.Disconnected);
use_old_TypeAliasDeclaration_ConnectionState_Disconnected(
    get_current_TypeAliasDeclaration_ConnectionState_Disconnected());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "EnumDeclaration_ContainerErrorType": {"forwardCompat": false}
*/
declare function get_old_EnumDeclaration_ContainerErrorType():
    old.ContainerErrorType;
declare function use_current_EnumDeclaration_ContainerErrorType(
    use: current.ContainerErrorType);
use_current_EnumDeclaration_ContainerErrorType(
    get_old_EnumDeclaration_ContainerErrorType());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "EnumDeclaration_ContainerErrorType": {"backCompat": false}
*/
declare function get_current_EnumDeclaration_ContainerErrorType():
    current.ContainerErrorType;
declare function use_old_EnumDeclaration_ContainerErrorType(
    use: old.ContainerErrorType);
use_old_EnumDeclaration_ContainerErrorType(
    get_current_EnumDeclaration_ContainerErrorType());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_ContainerWarning": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ContainerWarning():
    old.ContainerWarning;
declare function use_current_InterfaceDeclaration_ContainerWarning(
    use: current.ContainerWarning);
use_current_InterfaceDeclaration_ContainerWarning(
    get_old_InterfaceDeclaration_ContainerWarning());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_ContainerWarning": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ContainerWarning():
    current.ContainerWarning;
declare function use_old_InterfaceDeclaration_ContainerWarning(
    use: old.ContainerWarning);
use_old_InterfaceDeclaration_ContainerWarning(
    get_current_InterfaceDeclaration_ContainerWarning());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IAudience": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IAudience():
    old.IAudience;
declare function use_current_InterfaceDeclaration_IAudience(
    use: current.IAudience);
use_current_InterfaceDeclaration_IAudience(
    get_old_InterfaceDeclaration_IAudience());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IAudience": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IAudience():
    current.IAudience;
declare function use_old_InterfaceDeclaration_IAudience(
    use: old.IAudience);
use_old_InterfaceDeclaration_IAudience(
    get_current_InterfaceDeclaration_IAudience());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_ICodeAllowList": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ICodeAllowList():
    old.ICodeAllowList;
declare function use_current_InterfaceDeclaration_ICodeAllowList(
    use: current.ICodeAllowList);
use_current_InterfaceDeclaration_ICodeAllowList(
    get_old_InterfaceDeclaration_ICodeAllowList());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_ICodeAllowList": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ICodeAllowList():
    current.ICodeAllowList;
declare function use_old_InterfaceDeclaration_ICodeAllowList(
    use: old.ICodeAllowList);
use_old_InterfaceDeclaration_ICodeAllowList(
    get_current_InterfaceDeclaration_ICodeAllowList());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_ICodeDetailsLoader": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ICodeDetailsLoader():
    old.ICodeDetailsLoader;
declare function use_current_InterfaceDeclaration_ICodeDetailsLoader(
    use: current.ICodeDetailsLoader);
use_current_InterfaceDeclaration_ICodeDetailsLoader(
    get_old_InterfaceDeclaration_ICodeDetailsLoader());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_ICodeDetailsLoader": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ICodeDetailsLoader():
    current.ICodeDetailsLoader;
declare function use_old_InterfaceDeclaration_ICodeDetailsLoader(
    use: old.ICodeDetailsLoader);
use_old_InterfaceDeclaration_ICodeDetailsLoader(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_ICodeDetailsLoader());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_ICodeLoader": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ICodeLoader():
    old.ICodeLoader;
declare function use_current_InterfaceDeclaration_ICodeLoader(
    use: current.ICodeLoader);
use_current_InterfaceDeclaration_ICodeLoader(
    get_old_InterfaceDeclaration_ICodeLoader());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_ICodeLoader": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ICodeLoader():
    current.ICodeLoader;
declare function use_old_InterfaceDeclaration_ICodeLoader(
    use: old.ICodeLoader);
use_old_InterfaceDeclaration_ICodeLoader(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_ICodeLoader());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IConnectionDetails": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IConnectionDetails():
    old.IConnectionDetails;
declare function use_current_InterfaceDeclaration_IConnectionDetails(
    use: current.IConnectionDetails);
use_current_InterfaceDeclaration_IConnectionDetails(
    get_old_InterfaceDeclaration_IConnectionDetails());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IConnectionDetails": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IConnectionDetails():
    current.IConnectionDetails;
declare function use_old_InterfaceDeclaration_IConnectionDetails(
    use: old.IConnectionDetails);
use_old_InterfaceDeclaration_IConnectionDetails(
    get_current_InterfaceDeclaration_IConnectionDetails());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IContainer": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IContainer():
    old.IContainer;
declare function use_current_InterfaceDeclaration_IContainer(
    use: current.IContainer);
use_current_InterfaceDeclaration_IContainer(
    get_old_InterfaceDeclaration_IContainer());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IContainer": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IContainer():
    current.IContainer;
declare function use_old_InterfaceDeclaration_IContainer(
    use: old.IContainer);
use_old_InterfaceDeclaration_IContainer(
    get_current_InterfaceDeclaration_IContainer());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IContainerContext": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IContainerContext():
    old.IContainerContext;
declare function use_current_InterfaceDeclaration_IContainerContext(
    use: current.IContainerContext);
use_current_InterfaceDeclaration_IContainerContext(
    // @ts-expect-error compatibility expected to be broken
    get_old_InterfaceDeclaration_IContainerContext());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IContainerContext": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IContainerContext():
    current.IContainerContext;
declare function use_old_InterfaceDeclaration_IContainerContext(
    use: old.IContainerContext);
use_old_InterfaceDeclaration_IContainerContext(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IContainerContext());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IContainerEvents": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IContainerEvents():
    old.IContainerEvents;
declare function use_current_InterfaceDeclaration_IContainerEvents(
    use: current.IContainerEvents);
use_current_InterfaceDeclaration_IContainerEvents(
    get_old_InterfaceDeclaration_IContainerEvents());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IContainerEvents": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IContainerEvents():
    current.IContainerEvents;
declare function use_old_InterfaceDeclaration_IContainerEvents(
    use: old.IContainerEvents);
use_old_InterfaceDeclaration_IContainerEvents(
    get_current_InterfaceDeclaration_IContainerEvents());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IContainerLoadMode": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IContainerLoadMode():
    old.IContainerLoadMode;
declare function use_current_InterfaceDeclaration_IContainerLoadMode(
    use: current.IContainerLoadMode);
use_current_InterfaceDeclaration_IContainerLoadMode(
    get_old_InterfaceDeclaration_IContainerLoadMode());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IContainerLoadMode": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IContainerLoadMode():
    current.IContainerLoadMode;
declare function use_old_InterfaceDeclaration_IContainerLoadMode(
    use: old.IContainerLoadMode);
use_old_InterfaceDeclaration_IContainerLoadMode(
    get_current_InterfaceDeclaration_IContainerLoadMode());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "TypeAliasDeclaration_ICriticalContainerError": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_ICriticalContainerError():
    old.ICriticalContainerError;
declare function use_current_TypeAliasDeclaration_ICriticalContainerError(
    use: current.ICriticalContainerError);
use_current_TypeAliasDeclaration_ICriticalContainerError(
    get_old_TypeAliasDeclaration_ICriticalContainerError());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "TypeAliasDeclaration_ICriticalContainerError": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_ICriticalContainerError():
    current.ICriticalContainerError;
declare function use_old_TypeAliasDeclaration_ICriticalContainerError(
    use: old.ICriticalContainerError);
use_old_TypeAliasDeclaration_ICriticalContainerError(
    get_current_TypeAliasDeclaration_ICriticalContainerError());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IDeltaHandlerStrategy": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IDeltaHandlerStrategy():
    old.IDeltaHandlerStrategy;
declare function use_current_InterfaceDeclaration_IDeltaHandlerStrategy(
    use: current.IDeltaHandlerStrategy);
use_current_InterfaceDeclaration_IDeltaHandlerStrategy(
    get_old_InterfaceDeclaration_IDeltaHandlerStrategy());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IDeltaHandlerStrategy": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IDeltaHandlerStrategy():
    current.IDeltaHandlerStrategy;
declare function use_old_InterfaceDeclaration_IDeltaHandlerStrategy(
    use: old.IDeltaHandlerStrategy);
use_old_InterfaceDeclaration_IDeltaHandlerStrategy(
    get_current_InterfaceDeclaration_IDeltaHandlerStrategy());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IDeltaManager": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IDeltaManager():
    old.IDeltaManager<any,any>;
declare function use_current_InterfaceDeclaration_IDeltaManager(
    use: current.IDeltaManager<any,any>);
use_current_InterfaceDeclaration_IDeltaManager(
    get_old_InterfaceDeclaration_IDeltaManager());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IDeltaManager": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IDeltaManager():
    current.IDeltaManager<any,any>;
declare function use_old_InterfaceDeclaration_IDeltaManager(
    use: old.IDeltaManager<any,any>);
use_old_InterfaceDeclaration_IDeltaManager(
    get_current_InterfaceDeclaration_IDeltaManager());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IDeltaManagerEvents": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IDeltaManagerEvents():
    old.IDeltaManagerEvents;
declare function use_current_InterfaceDeclaration_IDeltaManagerEvents(
    use: current.IDeltaManagerEvents);
use_current_InterfaceDeclaration_IDeltaManagerEvents(
    get_old_InterfaceDeclaration_IDeltaManagerEvents());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IDeltaManagerEvents": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IDeltaManagerEvents():
    current.IDeltaManagerEvents;
declare function use_old_InterfaceDeclaration_IDeltaManagerEvents(
    use: old.IDeltaManagerEvents);
use_old_InterfaceDeclaration_IDeltaManagerEvents(
    get_current_InterfaceDeclaration_IDeltaManagerEvents());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IDeltaQueue": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IDeltaQueue():
    old.IDeltaQueue<any>;
declare function use_current_InterfaceDeclaration_IDeltaQueue(
    use: current.IDeltaQueue<any>);
use_current_InterfaceDeclaration_IDeltaQueue(
    get_old_InterfaceDeclaration_IDeltaQueue());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IDeltaQueue": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IDeltaQueue():
    current.IDeltaQueue<any>;
declare function use_old_InterfaceDeclaration_IDeltaQueue(
    use: old.IDeltaQueue<any>);
use_old_InterfaceDeclaration_IDeltaQueue(
    get_current_InterfaceDeclaration_IDeltaQueue());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IDeltaQueueEvents": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IDeltaQueueEvents():
    old.IDeltaQueueEvents<any>;
declare function use_current_InterfaceDeclaration_IDeltaQueueEvents(
    use: current.IDeltaQueueEvents<any>);
use_current_InterfaceDeclaration_IDeltaQueueEvents(
    get_old_InterfaceDeclaration_IDeltaQueueEvents());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IDeltaQueueEvents": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IDeltaQueueEvents():
    current.IDeltaQueueEvents<any>;
declare function use_old_InterfaceDeclaration_IDeltaQueueEvents(
    use: old.IDeltaQueueEvents<any>);
use_old_InterfaceDeclaration_IDeltaQueueEvents(
    get_current_InterfaceDeclaration_IDeltaQueueEvents());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "VariableDeclaration_IDeltaSender": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_IDeltaSender():
    typeof old.IDeltaSender;
declare function use_current_VariableDeclaration_IDeltaSender(
    use: typeof current.IDeltaSender);
use_current_VariableDeclaration_IDeltaSender(
    get_old_VariableDeclaration_IDeltaSender());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "VariableDeclaration_IDeltaSender": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_IDeltaSender():
    typeof current.IDeltaSender;
declare function use_old_VariableDeclaration_IDeltaSender(
    use: typeof old.IDeltaSender);
use_old_VariableDeclaration_IDeltaSender(
    get_current_VariableDeclaration_IDeltaSender());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IDeltaSender": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IDeltaSender():
    old.IDeltaSender;
declare function use_current_InterfaceDeclaration_IDeltaSender(
    use: current.IDeltaSender);
use_current_InterfaceDeclaration_IDeltaSender(
    get_old_InterfaceDeclaration_IDeltaSender());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IDeltaSender": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IDeltaSender():
    current.IDeltaSender;
declare function use_old_InterfaceDeclaration_IDeltaSender(
    use: old.IDeltaSender);
use_old_InterfaceDeclaration_IDeltaSender(
    get_current_InterfaceDeclaration_IDeltaSender());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IErrorBase": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IErrorBase():
    old.IErrorBase;
declare function use_current_InterfaceDeclaration_IErrorBase(
    use: current.IErrorBase);
use_current_InterfaceDeclaration_IErrorBase(
    get_old_InterfaceDeclaration_IErrorBase());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IErrorBase": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IErrorBase():
    current.IErrorBase;
declare function use_old_InterfaceDeclaration_IErrorBase(
    use: old.IErrorBase);
use_old_InterfaceDeclaration_IErrorBase(
    get_current_InterfaceDeclaration_IErrorBase());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IFluidBrowserPackage": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidBrowserPackage():
    old.IFluidBrowserPackage;
declare function use_current_InterfaceDeclaration_IFluidBrowserPackage(
    use: current.IFluidBrowserPackage);
use_current_InterfaceDeclaration_IFluidBrowserPackage(
    get_old_InterfaceDeclaration_IFluidBrowserPackage());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IFluidBrowserPackage": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidBrowserPackage():
    current.IFluidBrowserPackage;
declare function use_old_InterfaceDeclaration_IFluidBrowserPackage(
    use: old.IFluidBrowserPackage);
use_old_InterfaceDeclaration_IFluidBrowserPackage(
    get_current_InterfaceDeclaration_IFluidBrowserPackage());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IFluidBrowserPackageEnvironment": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidBrowserPackageEnvironment():
    old.IFluidBrowserPackageEnvironment;
declare function use_current_InterfaceDeclaration_IFluidBrowserPackageEnvironment(
    use: current.IFluidBrowserPackageEnvironment);
use_current_InterfaceDeclaration_IFluidBrowserPackageEnvironment(
    get_old_InterfaceDeclaration_IFluidBrowserPackageEnvironment());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IFluidBrowserPackageEnvironment": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidBrowserPackageEnvironment():
    current.IFluidBrowserPackageEnvironment;
declare function use_old_InterfaceDeclaration_IFluidBrowserPackageEnvironment(
    use: old.IFluidBrowserPackageEnvironment);
use_old_InterfaceDeclaration_IFluidBrowserPackageEnvironment(
    get_current_InterfaceDeclaration_IFluidBrowserPackageEnvironment());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IFluidCodeDetails": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidCodeDetails():
    old.IFluidCodeDetails;
declare function use_current_InterfaceDeclaration_IFluidCodeDetails(
    use: current.IFluidCodeDetails);
use_current_InterfaceDeclaration_IFluidCodeDetails(
    get_old_InterfaceDeclaration_IFluidCodeDetails());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IFluidCodeDetails": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidCodeDetails():
    current.IFluidCodeDetails;
declare function use_old_InterfaceDeclaration_IFluidCodeDetails(
    use: old.IFluidCodeDetails);
use_old_InterfaceDeclaration_IFluidCodeDetails(
    get_current_InterfaceDeclaration_IFluidCodeDetails());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "VariableDeclaration_IFluidCodeDetailsComparer": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_IFluidCodeDetailsComparer():
    typeof old.IFluidCodeDetailsComparer;
declare function use_current_VariableDeclaration_IFluidCodeDetailsComparer(
    use: typeof current.IFluidCodeDetailsComparer);
use_current_VariableDeclaration_IFluidCodeDetailsComparer(
    get_old_VariableDeclaration_IFluidCodeDetailsComparer());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "VariableDeclaration_IFluidCodeDetailsComparer": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_IFluidCodeDetailsComparer():
    typeof current.IFluidCodeDetailsComparer;
declare function use_old_VariableDeclaration_IFluidCodeDetailsComparer(
    use: typeof old.IFluidCodeDetailsComparer);
use_old_VariableDeclaration_IFluidCodeDetailsComparer(
    get_current_VariableDeclaration_IFluidCodeDetailsComparer());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IFluidCodeDetailsComparer": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidCodeDetailsComparer():
    old.IFluidCodeDetailsComparer;
declare function use_current_InterfaceDeclaration_IFluidCodeDetailsComparer(
    use: current.IFluidCodeDetailsComparer);
use_current_InterfaceDeclaration_IFluidCodeDetailsComparer(
    get_old_InterfaceDeclaration_IFluidCodeDetailsComparer());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IFluidCodeDetailsComparer": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidCodeDetailsComparer():
    current.IFluidCodeDetailsComparer;
declare function use_old_InterfaceDeclaration_IFluidCodeDetailsComparer(
    use: old.IFluidCodeDetailsComparer);
use_old_InterfaceDeclaration_IFluidCodeDetailsComparer(
    get_current_InterfaceDeclaration_IFluidCodeDetailsComparer());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IFluidCodeDetailsConfig": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidCodeDetailsConfig():
    old.IFluidCodeDetailsConfig;
declare function use_current_InterfaceDeclaration_IFluidCodeDetailsConfig(
    use: current.IFluidCodeDetailsConfig);
use_current_InterfaceDeclaration_IFluidCodeDetailsConfig(
    get_old_InterfaceDeclaration_IFluidCodeDetailsConfig());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IFluidCodeDetailsConfig": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidCodeDetailsConfig():
    current.IFluidCodeDetailsConfig;
declare function use_old_InterfaceDeclaration_IFluidCodeDetailsConfig(
    use: old.IFluidCodeDetailsConfig);
use_old_InterfaceDeclaration_IFluidCodeDetailsConfig(
    get_current_InterfaceDeclaration_IFluidCodeDetailsConfig());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IFluidCodeResolver": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidCodeResolver():
    old.IFluidCodeResolver;
declare function use_current_InterfaceDeclaration_IFluidCodeResolver(
    use: current.IFluidCodeResolver);
use_current_InterfaceDeclaration_IFluidCodeResolver(
    get_old_InterfaceDeclaration_IFluidCodeResolver());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IFluidCodeResolver": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidCodeResolver():
    current.IFluidCodeResolver;
declare function use_old_InterfaceDeclaration_IFluidCodeResolver(
    use: old.IFluidCodeResolver);
use_old_InterfaceDeclaration_IFluidCodeResolver(
    get_current_InterfaceDeclaration_IFluidCodeResolver());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IFluidModule": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidModule():
    old.IFluidModule;
declare function use_current_InterfaceDeclaration_IFluidModule(
    use: current.IFluidModule);
use_current_InterfaceDeclaration_IFluidModule(
    get_old_InterfaceDeclaration_IFluidModule());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IFluidModule": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidModule():
    current.IFluidModule;
declare function use_old_InterfaceDeclaration_IFluidModule(
    use: old.IFluidModule);
use_old_InterfaceDeclaration_IFluidModule(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IFluidModule());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IFluidModuleWithDetails": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidModuleWithDetails():
    old.IFluidModuleWithDetails;
declare function use_current_InterfaceDeclaration_IFluidModuleWithDetails(
    use: current.IFluidModuleWithDetails);
use_current_InterfaceDeclaration_IFluidModuleWithDetails(
    get_old_InterfaceDeclaration_IFluidModuleWithDetails());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IFluidModuleWithDetails": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidModuleWithDetails():
    current.IFluidModuleWithDetails;
declare function use_old_InterfaceDeclaration_IFluidModuleWithDetails(
    use: old.IFluidModuleWithDetails);
use_old_InterfaceDeclaration_IFluidModuleWithDetails(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IFluidModuleWithDetails());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IFluidPackage": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidPackage():
    old.IFluidPackage;
declare function use_current_InterfaceDeclaration_IFluidPackage(
    use: current.IFluidPackage);
use_current_InterfaceDeclaration_IFluidPackage(
    get_old_InterfaceDeclaration_IFluidPackage());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IFluidPackage": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidPackage():
    current.IFluidPackage;
declare function use_old_InterfaceDeclaration_IFluidPackage(
    use: old.IFluidPackage);
use_old_InterfaceDeclaration_IFluidPackage(
    get_current_InterfaceDeclaration_IFluidPackage());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IFluidPackageEnvironment": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidPackageEnvironment():
    old.IFluidPackageEnvironment;
declare function use_current_InterfaceDeclaration_IFluidPackageEnvironment(
    use: current.IFluidPackageEnvironment);
use_current_InterfaceDeclaration_IFluidPackageEnvironment(
    get_old_InterfaceDeclaration_IFluidPackageEnvironment());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IFluidPackageEnvironment": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidPackageEnvironment():
    current.IFluidPackageEnvironment;
declare function use_old_InterfaceDeclaration_IFluidPackageEnvironment(
    use: old.IFluidPackageEnvironment);
use_old_InterfaceDeclaration_IFluidPackageEnvironment(
    get_current_InterfaceDeclaration_IFluidPackageEnvironment());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "VariableDeclaration_IFluidTokenProvider": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_IFluidTokenProvider():
    typeof old.IFluidTokenProvider;
declare function use_current_VariableDeclaration_IFluidTokenProvider(
    use: typeof current.IFluidTokenProvider);
use_current_VariableDeclaration_IFluidTokenProvider(
    get_old_VariableDeclaration_IFluidTokenProvider());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "VariableDeclaration_IFluidTokenProvider": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_IFluidTokenProvider():
    typeof current.IFluidTokenProvider;
declare function use_old_VariableDeclaration_IFluidTokenProvider(
    use: typeof old.IFluidTokenProvider);
use_old_VariableDeclaration_IFluidTokenProvider(
    get_current_VariableDeclaration_IFluidTokenProvider());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IFluidTokenProvider": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidTokenProvider():
    old.IFluidTokenProvider;
declare function use_current_InterfaceDeclaration_IFluidTokenProvider(
    use: current.IFluidTokenProvider);
use_current_InterfaceDeclaration_IFluidTokenProvider(
    get_old_InterfaceDeclaration_IFluidTokenProvider());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IFluidTokenProvider": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidTokenProvider():
    current.IFluidTokenProvider;
declare function use_old_InterfaceDeclaration_IFluidTokenProvider(
    use: old.IFluidTokenProvider);
use_old_InterfaceDeclaration_IFluidTokenProvider(
    get_current_InterfaceDeclaration_IFluidTokenProvider());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IGenericError": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IGenericError():
    old.IGenericError;
declare function use_current_InterfaceDeclaration_IGenericError(
    use: current.IGenericError);
use_current_InterfaceDeclaration_IGenericError(
    get_old_InterfaceDeclaration_IGenericError());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IGenericError": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IGenericError():
    current.IGenericError;
declare function use_old_InterfaceDeclaration_IGenericError(
    use: old.IGenericError);
use_old_InterfaceDeclaration_IGenericError(
    get_current_InterfaceDeclaration_IGenericError());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IHostLoader": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IHostLoader():
    old.IHostLoader;
declare function use_current_InterfaceDeclaration_IHostLoader(
    use: current.IHostLoader);
use_current_InterfaceDeclaration_IHostLoader(
    get_old_InterfaceDeclaration_IHostLoader());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IHostLoader": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IHostLoader():
    current.IHostLoader;
declare function use_old_InterfaceDeclaration_IHostLoader(
    use: old.IHostLoader);
use_old_InterfaceDeclaration_IHostLoader(
    get_current_InterfaceDeclaration_IHostLoader());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_ILoader": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ILoader():
    old.ILoader;
declare function use_current_InterfaceDeclaration_ILoader(
    use: current.ILoader);
use_current_InterfaceDeclaration_ILoader(
    get_old_InterfaceDeclaration_ILoader());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_ILoader": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ILoader():
    current.ILoader;
declare function use_old_InterfaceDeclaration_ILoader(
    use: old.ILoader);
use_old_InterfaceDeclaration_ILoader(
    get_current_InterfaceDeclaration_ILoader());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_ILoaderHeader": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ILoaderHeader():
    old.ILoaderHeader;
declare function use_current_InterfaceDeclaration_ILoaderHeader(
    use: current.ILoaderHeader);
use_current_InterfaceDeclaration_ILoaderHeader(
    get_old_InterfaceDeclaration_ILoaderHeader());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_ILoaderHeader": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ILoaderHeader():
    current.ILoaderHeader;
declare function use_old_InterfaceDeclaration_ILoaderHeader(
    use: old.ILoaderHeader);
use_old_InterfaceDeclaration_ILoaderHeader(
    get_current_InterfaceDeclaration_ILoaderHeader());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "TypeAliasDeclaration_ILoaderOptions": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_ILoaderOptions():
    old.ILoaderOptions;
declare function use_current_TypeAliasDeclaration_ILoaderOptions(
    use: current.ILoaderOptions);
use_current_TypeAliasDeclaration_ILoaderOptions(
    get_old_TypeAliasDeclaration_ILoaderOptions());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "TypeAliasDeclaration_ILoaderOptions": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_ILoaderOptions():
    current.ILoaderOptions;
declare function use_old_TypeAliasDeclaration_ILoaderOptions(
    use: old.ILoaderOptions);
use_old_TypeAliasDeclaration_ILoaderOptions(
    get_current_TypeAliasDeclaration_ILoaderOptions());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IPendingLocalState": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IPendingLocalState():
    old.IPendingLocalState;
declare function use_current_InterfaceDeclaration_IPendingLocalState(
    use: current.IPendingLocalState);
use_current_InterfaceDeclaration_IPendingLocalState(
    get_old_InterfaceDeclaration_IPendingLocalState());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IPendingLocalState": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IPendingLocalState():
    current.IPendingLocalState;
declare function use_old_InterfaceDeclaration_IPendingLocalState(
    use: old.IPendingLocalState);
use_old_InterfaceDeclaration_IPendingLocalState(
    get_current_InterfaceDeclaration_IPendingLocalState());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IProvideDeltaSender": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IProvideDeltaSender():
    old.IProvideDeltaSender;
declare function use_current_InterfaceDeclaration_IProvideDeltaSender(
    use: current.IProvideDeltaSender);
use_current_InterfaceDeclaration_IProvideDeltaSender(
    get_old_InterfaceDeclaration_IProvideDeltaSender());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IProvideDeltaSender": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IProvideDeltaSender():
    current.IProvideDeltaSender;
declare function use_old_InterfaceDeclaration_IProvideDeltaSender(
    use: old.IProvideDeltaSender);
use_old_InterfaceDeclaration_IProvideDeltaSender(
    get_current_InterfaceDeclaration_IProvideDeltaSender());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IProvideFluidCodeDetailsComparer": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IProvideFluidCodeDetailsComparer():
    old.IProvideFluidCodeDetailsComparer;
declare function use_current_InterfaceDeclaration_IProvideFluidCodeDetailsComparer(
    use: current.IProvideFluidCodeDetailsComparer);
use_current_InterfaceDeclaration_IProvideFluidCodeDetailsComparer(
    get_old_InterfaceDeclaration_IProvideFluidCodeDetailsComparer());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IProvideFluidCodeDetailsComparer": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IProvideFluidCodeDetailsComparer():
    current.IProvideFluidCodeDetailsComparer;
declare function use_old_InterfaceDeclaration_IProvideFluidCodeDetailsComparer(
    use: old.IProvideFluidCodeDetailsComparer);
use_old_InterfaceDeclaration_IProvideFluidCodeDetailsComparer(
    get_current_InterfaceDeclaration_IProvideFluidCodeDetailsComparer());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IProvideFluidTokenProvider": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IProvideFluidTokenProvider():
    old.IProvideFluidTokenProvider;
declare function use_current_InterfaceDeclaration_IProvideFluidTokenProvider(
    use: current.IProvideFluidTokenProvider);
use_current_InterfaceDeclaration_IProvideFluidTokenProvider(
    get_old_InterfaceDeclaration_IProvideFluidTokenProvider());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IProvideFluidTokenProvider": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IProvideFluidTokenProvider():
    current.IProvideFluidTokenProvider;
declare function use_old_InterfaceDeclaration_IProvideFluidTokenProvider(
    use: old.IProvideFluidTokenProvider);
use_old_InterfaceDeclaration_IProvideFluidTokenProvider(
    get_current_InterfaceDeclaration_IProvideFluidTokenProvider());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IProvideLoader": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IProvideLoader():
    old.IProvideLoader;
declare function use_current_InterfaceDeclaration_IProvideLoader(
    use: current.IProvideLoader);
use_current_InterfaceDeclaration_IProvideLoader(
    get_old_InterfaceDeclaration_IProvideLoader());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IProvideLoader": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IProvideLoader():
    current.IProvideLoader;
declare function use_old_InterfaceDeclaration_IProvideLoader(
    use: old.IProvideLoader);
use_old_InterfaceDeclaration_IProvideLoader(
    get_current_InterfaceDeclaration_IProvideLoader());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IProvideRuntimeFactory": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IProvideRuntimeFactory():
    old.IProvideRuntimeFactory;
declare function use_current_InterfaceDeclaration_IProvideRuntimeFactory(
    use: current.IProvideRuntimeFactory);
use_current_InterfaceDeclaration_IProvideRuntimeFactory(
    // @ts-expect-error compatibility expected to be broken
    get_old_InterfaceDeclaration_IProvideRuntimeFactory());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IProvideRuntimeFactory": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IProvideRuntimeFactory():
    current.IProvideRuntimeFactory;
declare function use_old_InterfaceDeclaration_IProvideRuntimeFactory(
    use: old.IProvideRuntimeFactory);
use_old_InterfaceDeclaration_IProvideRuntimeFactory(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IProvideRuntimeFactory());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IProxyLoaderFactory": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IProxyLoaderFactory():
    old.IProxyLoaderFactory;
declare function use_current_InterfaceDeclaration_IProxyLoaderFactory(
    use: current.IProxyLoaderFactory);
use_current_InterfaceDeclaration_IProxyLoaderFactory(
    get_old_InterfaceDeclaration_IProxyLoaderFactory());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IProxyLoaderFactory": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IProxyLoaderFactory():
    current.IProxyLoaderFactory;
declare function use_old_InterfaceDeclaration_IProxyLoaderFactory(
    use: old.IProxyLoaderFactory);
use_old_InterfaceDeclaration_IProxyLoaderFactory(
    get_current_InterfaceDeclaration_IProxyLoaderFactory());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IResolvedFluidCodeDetails": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IResolvedFluidCodeDetails():
    old.IResolvedFluidCodeDetails;
declare function use_current_InterfaceDeclaration_IResolvedFluidCodeDetails(
    use: current.IResolvedFluidCodeDetails);
use_current_InterfaceDeclaration_IResolvedFluidCodeDetails(
    get_old_InterfaceDeclaration_IResolvedFluidCodeDetails());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IResolvedFluidCodeDetails": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IResolvedFluidCodeDetails():
    current.IResolvedFluidCodeDetails;
declare function use_old_InterfaceDeclaration_IResolvedFluidCodeDetails(
    use: old.IResolvedFluidCodeDetails);
use_old_InterfaceDeclaration_IResolvedFluidCodeDetails(
    get_current_InterfaceDeclaration_IResolvedFluidCodeDetails());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IRuntime": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IRuntime():
    old.IRuntime;
declare function use_current_InterfaceDeclaration_IRuntime(
    use: current.IRuntime);
use_current_InterfaceDeclaration_IRuntime(
    get_old_InterfaceDeclaration_IRuntime());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IRuntime": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IRuntime():
    current.IRuntime;
declare function use_old_InterfaceDeclaration_IRuntime(
    use: old.IRuntime);
use_old_InterfaceDeclaration_IRuntime(
    get_current_InterfaceDeclaration_IRuntime());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "VariableDeclaration_IRuntimeFactory": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_IRuntimeFactory():
    typeof old.IRuntimeFactory;
declare function use_current_VariableDeclaration_IRuntimeFactory(
    use: typeof current.IRuntimeFactory);
use_current_VariableDeclaration_IRuntimeFactory(
    get_old_VariableDeclaration_IRuntimeFactory());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "VariableDeclaration_IRuntimeFactory": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_IRuntimeFactory():
    typeof current.IRuntimeFactory;
declare function use_old_VariableDeclaration_IRuntimeFactory(
    use: typeof old.IRuntimeFactory);
use_old_VariableDeclaration_IRuntimeFactory(
    get_current_VariableDeclaration_IRuntimeFactory());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IRuntimeFactory": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IRuntimeFactory():
    old.IRuntimeFactory;
declare function use_current_InterfaceDeclaration_IRuntimeFactory(
    use: current.IRuntimeFactory);
use_current_InterfaceDeclaration_IRuntimeFactory(
    // @ts-expect-error compatibility expected to be broken
    get_old_InterfaceDeclaration_IRuntimeFactory());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IRuntimeFactory": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IRuntimeFactory():
    current.IRuntimeFactory;
declare function use_old_InterfaceDeclaration_IRuntimeFactory(
    use: old.IRuntimeFactory);
use_old_InterfaceDeclaration_IRuntimeFactory(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IRuntimeFactory());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "VariableDeclaration_isFluidBrowserPackage": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_isFluidBrowserPackage():
    typeof old.isFluidBrowserPackage;
declare function use_current_VariableDeclaration_isFluidBrowserPackage(
    use: typeof current.isFluidBrowserPackage);
use_current_VariableDeclaration_isFluidBrowserPackage(
    get_old_VariableDeclaration_isFluidBrowserPackage());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "VariableDeclaration_isFluidBrowserPackage": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_isFluidBrowserPackage():
    typeof current.isFluidBrowserPackage;
declare function use_old_VariableDeclaration_isFluidBrowserPackage(
    use: typeof old.isFluidBrowserPackage);
use_old_VariableDeclaration_isFluidBrowserPackage(
    get_current_VariableDeclaration_isFluidBrowserPackage());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "VariableDeclaration_isFluidCodeDetails": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_isFluidCodeDetails():
    typeof old.isFluidCodeDetails;
declare function use_current_VariableDeclaration_isFluidCodeDetails(
    use: typeof current.isFluidCodeDetails);
use_current_VariableDeclaration_isFluidCodeDetails(
    get_old_VariableDeclaration_isFluidCodeDetails());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "VariableDeclaration_isFluidCodeDetails": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_isFluidCodeDetails():
    typeof current.isFluidCodeDetails;
declare function use_old_VariableDeclaration_isFluidCodeDetails(
    use: typeof old.isFluidCodeDetails);
use_old_VariableDeclaration_isFluidCodeDetails(
    get_current_VariableDeclaration_isFluidCodeDetails());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "VariableDeclaration_isFluidPackage": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_isFluidPackage():
    typeof old.isFluidPackage;
declare function use_current_VariableDeclaration_isFluidPackage(
    use: typeof current.isFluidPackage);
use_current_VariableDeclaration_isFluidPackage(
    get_old_VariableDeclaration_isFluidPackage());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "VariableDeclaration_isFluidPackage": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_isFluidPackage():
    typeof current.isFluidPackage;
declare function use_old_VariableDeclaration_isFluidPackage(
    use: typeof old.isFluidPackage);
use_old_VariableDeclaration_isFluidPackage(
    get_current_VariableDeclaration_isFluidPackage());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IThrottlingWarning": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IThrottlingWarning():
    old.IThrottlingWarning;
declare function use_current_InterfaceDeclaration_IThrottlingWarning(
    use: current.IThrottlingWarning);
use_current_InterfaceDeclaration_IThrottlingWarning(
    get_old_InterfaceDeclaration_IThrottlingWarning());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IThrottlingWarning": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IThrottlingWarning():
    current.IThrottlingWarning;
declare function use_old_InterfaceDeclaration_IThrottlingWarning(
    use: old.IThrottlingWarning);
use_old_InterfaceDeclaration_IThrottlingWarning(
    get_current_InterfaceDeclaration_IThrottlingWarning());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IUsageError": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IUsageError():
    old.IUsageError;
declare function use_current_InterfaceDeclaration_IUsageError(
    use: current.IUsageError);
use_current_InterfaceDeclaration_IUsageError(
    get_old_InterfaceDeclaration_IUsageError());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "InterfaceDeclaration_IUsageError": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IUsageError():
    current.IUsageError;
declare function use_old_InterfaceDeclaration_IUsageError(
    use: old.IUsageError);
use_old_InterfaceDeclaration_IUsageError(
    get_current_InterfaceDeclaration_IUsageError());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "EnumDeclaration_LoaderHeader": {"forwardCompat": false}
*/
declare function get_old_EnumDeclaration_LoaderHeader():
    old.LoaderHeader;
declare function use_current_EnumDeclaration_LoaderHeader(
    use: current.LoaderHeader);
use_current_EnumDeclaration_LoaderHeader(
    get_old_EnumDeclaration_LoaderHeader());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "EnumDeclaration_LoaderHeader": {"backCompat": false}
*/
declare function get_current_EnumDeclaration_LoaderHeader():
    current.LoaderHeader;
declare function use_old_EnumDeclaration_LoaderHeader(
    use: old.LoaderHeader);
use_old_EnumDeclaration_LoaderHeader(
    get_current_EnumDeclaration_LoaderHeader());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "TypeAliasDeclaration_ReadOnlyInfo": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_ReadOnlyInfo():
    old.ReadOnlyInfo;
declare function use_current_TypeAliasDeclaration_ReadOnlyInfo(
    use: current.ReadOnlyInfo);
use_current_TypeAliasDeclaration_ReadOnlyInfo(
    get_old_TypeAliasDeclaration_ReadOnlyInfo());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.46.0:
* "TypeAliasDeclaration_ReadOnlyInfo": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_ReadOnlyInfo():
    current.ReadOnlyInfo;
declare function use_old_TypeAliasDeclaration_ReadOnlyInfo(
    use: old.ReadOnlyInfo);
use_old_TypeAliasDeclaration_ReadOnlyInfo(
    get_current_TypeAliasDeclaration_ReadOnlyInfo());
