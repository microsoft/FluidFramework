/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

import { IUser } from "./users";

/**
 * {@link https://jwt.io/introduction/ | JSON Web Token (JWT)} Claims
 */
export interface ITokenClaims {
    /**
     * Identifies the document (a.k.a container) for which the token is being generated.
     * Generated by the service.
     */
    documentId: string;

    /**
     * Identifies the permissions required by the client on the document or summary.
     * For every scope, you can define the permissions you want to give to the client.
     */
    scopes: string[];

    /**
     * Unique tenant identifier.
     */
    tenantId: string;

    /**
     * User for whom the token was created.
     */
    user: IUser;

    /**
     * "Issued At"
     * Indicates when the authentication for this token occurred.
     */
    iat: number;

    /**
     * "Expiration Time"
     * Identifies the expiration time on or after which the token must not be accepted for processing.
     * The token lifetime can't be more than 1 hour. (TODO: is this an Azure-specific policy, or universal?)
     *
     * TODO: units?
     */
    exp: number;

    /**
     * "Version"
     * Version of the access token.
     */
    ver: string;

    /**
     * "JWT ID"
     * A unique identifier for the token.
     */
    jti?: string;
}

export interface ISummaryTokenClaims {
    sub: string;
    act: IActorClient;
    claims: ITokenClaims;
}

export interface IActorClient {
    sub: string;
}

/**
 * The ITokenService abstracts the discovery of claims contained within a token
 */
export interface ITokenService {
    extractClaims(token: string): ITokenClaims;
}

export interface ITokenProvider {
    isValid(): boolean;
}
