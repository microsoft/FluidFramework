/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-validator in @fluidframework/build-tools.
 */
import * as old from "@fluidframework/protocol-definitions-0.1026.0";
import * as current from "../../index";

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_ConnectionMode": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_ConnectionMode():
    old.ConnectionMode;
declare function use_current_TypeAliasDeclaration_ConnectionMode(
    use: current.ConnectionMode);
use_current_TypeAliasDeclaration_ConnectionMode(
    get_old_TypeAliasDeclaration_ConnectionMode());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_ConnectionMode": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_ConnectionMode():
    current.ConnectionMode;
declare function use_old_TypeAliasDeclaration_ConnectionMode(
    use: old.ConnectionMode);
use_old_TypeAliasDeclaration_ConnectionMode(
    get_current_TypeAliasDeclaration_ConnectionMode());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "EnumDeclaration_FileMode": {"forwardCompat": false}
*/
declare function get_old_EnumDeclaration_FileMode():
    old.FileMode;
declare function use_current_EnumDeclaration_FileMode(
    use: current.FileMode);
use_current_EnumDeclaration_FileMode(
    get_old_EnumDeclaration_FileMode());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "EnumDeclaration_FileMode": {"backCompat": false}
*/
declare function get_current_EnumDeclaration_FileMode():
    current.FileMode;
declare function use_old_EnumDeclaration_FileMode(
    use: old.FileMode);
use_old_EnumDeclaration_FileMode(
    get_current_EnumDeclaration_FileMode());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IActorClient": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IActorClient():
    old.IActorClient;
declare function use_current_InterfaceDeclaration_IActorClient(
    use: current.IActorClient);
use_current_InterfaceDeclaration_IActorClient(
    get_old_InterfaceDeclaration_IActorClient());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IActorClient": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IActorClient():
    current.IActorClient;
declare function use_old_InterfaceDeclaration_IActorClient(
    use: old.IActorClient);
use_old_InterfaceDeclaration_IActorClient(
    get_current_InterfaceDeclaration_IActorClient());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_IApprovedProposal": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_IApprovedProposal():
    old.IApprovedProposal;
declare function use_current_TypeAliasDeclaration_IApprovedProposal(
    use: current.IApprovedProposal);
use_current_TypeAliasDeclaration_IApprovedProposal(
    get_old_TypeAliasDeclaration_IApprovedProposal());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_IApprovedProposal": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_IApprovedProposal():
    current.IApprovedProposal;
declare function use_old_TypeAliasDeclaration_IApprovedProposal(
    use: old.IApprovedProposal);
use_old_TypeAliasDeclaration_IApprovedProposal(
    get_current_TypeAliasDeclaration_IApprovedProposal());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IAttachment": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IAttachment():
    old.IAttachment;
declare function use_current_InterfaceDeclaration_IAttachment(
    use: current.IAttachment);
use_current_InterfaceDeclaration_IAttachment(
    get_old_InterfaceDeclaration_IAttachment());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IAttachment": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IAttachment():
    current.IAttachment;
declare function use_old_InterfaceDeclaration_IAttachment(
    use: old.IAttachment);
use_old_InterfaceDeclaration_IAttachment(
    get_current_InterfaceDeclaration_IAttachment());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IBlob": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IBlob():
    old.IBlob;
declare function use_current_InterfaceDeclaration_IBlob(
    use: current.IBlob);
use_current_InterfaceDeclaration_IBlob(
    get_old_InterfaceDeclaration_IBlob());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IBlob": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IBlob():
    current.IBlob;
declare function use_old_InterfaceDeclaration_IBlob(
    use: old.IBlob);
use_old_InterfaceDeclaration_IBlob(
    get_current_InterfaceDeclaration_IBlob());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IBranchOrigin": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IBranchOrigin():
    old.IBranchOrigin;
declare function use_current_InterfaceDeclaration_IBranchOrigin(
    use: current.IBranchOrigin);
use_current_InterfaceDeclaration_IBranchOrigin(
    get_old_InterfaceDeclaration_IBranchOrigin());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IBranchOrigin": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IBranchOrigin():
    current.IBranchOrigin;
declare function use_old_InterfaceDeclaration_IBranchOrigin(
    use: old.IBranchOrigin);
use_old_InterfaceDeclaration_IBranchOrigin(
    get_current_InterfaceDeclaration_IBranchOrigin());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ICapabilities": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ICapabilities():
    old.ICapabilities;
declare function use_current_InterfaceDeclaration_ICapabilities(
    use: current.ICapabilities);
use_current_InterfaceDeclaration_ICapabilities(
    get_old_InterfaceDeclaration_ICapabilities());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ICapabilities": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ICapabilities():
    current.ICapabilities;
declare function use_old_InterfaceDeclaration_ICapabilities(
    use: old.ICapabilities);
use_old_InterfaceDeclaration_ICapabilities(
    get_current_InterfaceDeclaration_ICapabilities());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IClient": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IClient():
    old.IClient;
declare function use_current_InterfaceDeclaration_IClient(
    use: current.IClient);
use_current_InterfaceDeclaration_IClient(
    get_old_InterfaceDeclaration_IClient());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IClient": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IClient():
    current.IClient;
declare function use_old_InterfaceDeclaration_IClient(
    use: old.IClient);
use_old_InterfaceDeclaration_IClient(
    get_current_InterfaceDeclaration_IClient());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IClientConfiguration": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IClientConfiguration():
    old.IClientConfiguration;
declare function use_current_InterfaceDeclaration_IClientConfiguration(
    use: current.IClientConfiguration);
use_current_InterfaceDeclaration_IClientConfiguration(
    get_old_InterfaceDeclaration_IClientConfiguration());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IClientConfiguration": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IClientConfiguration():
    current.IClientConfiguration;
declare function use_old_InterfaceDeclaration_IClientConfiguration(
    use: old.IClientConfiguration);
use_old_InterfaceDeclaration_IClientConfiguration(
    get_current_InterfaceDeclaration_IClientConfiguration());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IClientDetails": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IClientDetails():
    old.IClientDetails;
declare function use_current_InterfaceDeclaration_IClientDetails(
    use: current.IClientDetails);
use_current_InterfaceDeclaration_IClientDetails(
    get_old_InterfaceDeclaration_IClientDetails());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IClientDetails": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IClientDetails():
    current.IClientDetails;
declare function use_old_InterfaceDeclaration_IClientDetails(
    use: old.IClientDetails);
use_old_InterfaceDeclaration_IClientDetails(
    get_current_InterfaceDeclaration_IClientDetails());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IClientJoin": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IClientJoin():
    old.IClientJoin;
declare function use_current_InterfaceDeclaration_IClientJoin(
    use: current.IClientJoin);
use_current_InterfaceDeclaration_IClientJoin(
    get_old_InterfaceDeclaration_IClientJoin());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IClientJoin": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IClientJoin():
    current.IClientJoin;
declare function use_old_InterfaceDeclaration_IClientJoin(
    use: old.IClientJoin);
use_old_InterfaceDeclaration_IClientJoin(
    get_current_InterfaceDeclaration_IClientJoin());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_ICommittedProposal": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_ICommittedProposal():
    old.ICommittedProposal;
declare function use_current_TypeAliasDeclaration_ICommittedProposal(
    use: current.ICommittedProposal);
use_current_TypeAliasDeclaration_ICommittedProposal(
    get_old_TypeAliasDeclaration_ICommittedProposal());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_ICommittedProposal": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_ICommittedProposal():
    current.ICommittedProposal;
declare function use_old_TypeAliasDeclaration_ICommittedProposal(
    use: old.ICommittedProposal);
use_old_TypeAliasDeclaration_ICommittedProposal(
    get_current_TypeAliasDeclaration_ICommittedProposal());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IConnect": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IConnect():
    old.IConnect;
declare function use_current_InterfaceDeclaration_IConnect(
    use: current.IConnect);
use_current_InterfaceDeclaration_IConnect(
    get_old_InterfaceDeclaration_IConnect());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IConnect": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IConnect():
    current.IConnect;
declare function use_old_InterfaceDeclaration_IConnect(
    use: old.IConnect);
use_old_InterfaceDeclaration_IConnect(
    get_current_InterfaceDeclaration_IConnect());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IConnected": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IConnected():
    old.IConnected;
declare function use_current_InterfaceDeclaration_IConnected(
    use: current.IConnected);
use_current_InterfaceDeclaration_IConnected(
    get_old_InterfaceDeclaration_IConnected());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IConnected": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IConnected():
    current.IConnected;
declare function use_old_InterfaceDeclaration_IConnected(
    use: old.IConnected);
use_old_InterfaceDeclaration_IConnected(
    get_current_InterfaceDeclaration_IConnected());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ICreateBlobResponse": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ICreateBlobResponse():
    old.ICreateBlobResponse;
declare function use_current_InterfaceDeclaration_ICreateBlobResponse(
    use: current.ICreateBlobResponse);
use_current_InterfaceDeclaration_ICreateBlobResponse(
    get_old_InterfaceDeclaration_ICreateBlobResponse());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ICreateBlobResponse": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ICreateBlobResponse():
    current.ICreateBlobResponse;
declare function use_old_InterfaceDeclaration_ICreateBlobResponse(
    use: old.ICreateBlobResponse);
use_old_InterfaceDeclaration_ICreateBlobResponse(
    get_current_InterfaceDeclaration_ICreateBlobResponse());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IDocumentAttributes": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IDocumentAttributes():
    old.IDocumentAttributes;
declare function use_current_InterfaceDeclaration_IDocumentAttributes(
    use: current.IDocumentAttributes);
use_current_InterfaceDeclaration_IDocumentAttributes(
    get_old_InterfaceDeclaration_IDocumentAttributes());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IDocumentAttributes": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IDocumentAttributes():
    current.IDocumentAttributes;
declare function use_old_InterfaceDeclaration_IDocumentAttributes(
    use: old.IDocumentAttributes);
use_old_InterfaceDeclaration_IDocumentAttributes(
    get_current_InterfaceDeclaration_IDocumentAttributes());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IDocumentMessage": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IDocumentMessage():
    old.IDocumentMessage;
declare function use_current_InterfaceDeclaration_IDocumentMessage(
    use: current.IDocumentMessage);
use_current_InterfaceDeclaration_IDocumentMessage(
    get_old_InterfaceDeclaration_IDocumentMessage());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IDocumentMessage": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IDocumentMessage():
    current.IDocumentMessage;
declare function use_old_InterfaceDeclaration_IDocumentMessage(
    use: old.IDocumentMessage);
use_old_InterfaceDeclaration_IDocumentMessage(
    get_current_InterfaceDeclaration_IDocumentMessage());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IDocumentSystemMessage": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IDocumentSystemMessage():
    old.IDocumentSystemMessage;
declare function use_current_InterfaceDeclaration_IDocumentSystemMessage(
    use: current.IDocumentSystemMessage);
use_current_InterfaceDeclaration_IDocumentSystemMessage(
    get_old_InterfaceDeclaration_IDocumentSystemMessage());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IDocumentSystemMessage": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IDocumentSystemMessage():
    current.IDocumentSystemMessage;
declare function use_old_InterfaceDeclaration_IDocumentSystemMessage(
    use: old.IDocumentSystemMessage);
use_old_InterfaceDeclaration_IDocumentSystemMessage(
    get_current_InterfaceDeclaration_IDocumentSystemMessage());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IHelpMessage": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IHelpMessage():
    old.IHelpMessage;
declare function use_current_InterfaceDeclaration_IHelpMessage(
    use: current.IHelpMessage);
use_current_InterfaceDeclaration_IHelpMessage(
    get_old_InterfaceDeclaration_IHelpMessage());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IHelpMessage": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IHelpMessage():
    current.IHelpMessage;
declare function use_old_InterfaceDeclaration_IHelpMessage(
    use: old.IHelpMessage);
use_old_InterfaceDeclaration_IHelpMessage(
    get_current_InterfaceDeclaration_IHelpMessage());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_INack": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_INack():
    old.INack;
declare function use_current_InterfaceDeclaration_INack(
    use: current.INack);
use_current_InterfaceDeclaration_INack(
    get_old_InterfaceDeclaration_INack());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_INack": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_INack():
    current.INack;
declare function use_old_InterfaceDeclaration_INack(
    use: old.INack);
use_old_InterfaceDeclaration_INack(
    get_current_InterfaceDeclaration_INack());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_INackContent": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_INackContent():
    old.INackContent;
declare function use_current_InterfaceDeclaration_INackContent(
    use: current.INackContent);
use_current_InterfaceDeclaration_INackContent(
    get_old_InterfaceDeclaration_INackContent());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_INackContent": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_INackContent():
    current.INackContent;
declare function use_old_InterfaceDeclaration_INackContent(
    use: old.INackContent);
use_old_InterfaceDeclaration_INackContent(
    get_current_InterfaceDeclaration_INackContent());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IPendingProposal": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IPendingProposal():
    old.IPendingProposal;
declare function use_current_InterfaceDeclaration_IPendingProposal(
    use: current.IPendingProposal);
use_current_InterfaceDeclaration_IPendingProposal(
    get_old_InterfaceDeclaration_IPendingProposal());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IPendingProposal": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IPendingProposal():
    current.IPendingProposal;
declare function use_old_InterfaceDeclaration_IPendingProposal(
    use: old.IPendingProposal);
use_old_InterfaceDeclaration_IPendingProposal(
    get_current_InterfaceDeclaration_IPendingProposal());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IProcessMessageResult": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IProcessMessageResult():
    old.IProcessMessageResult;
declare function use_current_InterfaceDeclaration_IProcessMessageResult(
    use: current.IProcessMessageResult);
use_current_InterfaceDeclaration_IProcessMessageResult(
    get_old_InterfaceDeclaration_IProcessMessageResult());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IProcessMessageResult": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IProcessMessageResult():
    current.IProcessMessageResult;
declare function use_old_InterfaceDeclaration_IProcessMessageResult(
    use: old.IProcessMessageResult);
use_old_InterfaceDeclaration_IProcessMessageResult(
    get_current_InterfaceDeclaration_IProcessMessageResult());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IProposal": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IProposal():
    old.IProposal;
declare function use_current_InterfaceDeclaration_IProposal(
    use: current.IProposal);
use_current_InterfaceDeclaration_IProposal(
    get_old_InterfaceDeclaration_IProposal());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IProposal": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IProposal():
    current.IProposal;
declare function use_old_InterfaceDeclaration_IProposal(
    use: old.IProposal);
use_old_InterfaceDeclaration_IProposal(
    get_current_InterfaceDeclaration_IProposal());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IProtocolState": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IProtocolState():
    old.IProtocolState;
declare function use_current_InterfaceDeclaration_IProtocolState(
    use: current.IProtocolState);
use_current_InterfaceDeclaration_IProtocolState(
    get_old_InterfaceDeclaration_IProtocolState());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IProtocolState": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IProtocolState():
    current.IProtocolState;
declare function use_old_InterfaceDeclaration_IProtocolState(
    use: old.IProtocolState);
use_old_InterfaceDeclaration_IProtocolState(
    get_current_InterfaceDeclaration_IProtocolState());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IQueueMessage": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IQueueMessage():
    old.IQueueMessage;
declare function use_current_InterfaceDeclaration_IQueueMessage(
    use: current.IQueueMessage);
use_current_InterfaceDeclaration_IQueueMessage(
    get_old_InterfaceDeclaration_IQueueMessage());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IQueueMessage": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IQueueMessage():
    current.IQueueMessage;
declare function use_old_InterfaceDeclaration_IQueueMessage(
    use: old.IQueueMessage);
use_old_InterfaceDeclaration_IQueueMessage(
    get_current_InterfaceDeclaration_IQueueMessage());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IQuorum": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IQuorum():
    old.IQuorum;
declare function use_current_InterfaceDeclaration_IQuorum(
    use: current.IQuorum);
use_current_InterfaceDeclaration_IQuorum(
    get_old_InterfaceDeclaration_IQuorum());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IQuorum": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IQuorum():
    current.IQuorum;
declare function use_old_InterfaceDeclaration_IQuorum(
    use: old.IQuorum);
use_old_InterfaceDeclaration_IQuorum(
    get_current_InterfaceDeclaration_IQuorum());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IQuorumClients": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IQuorumClients():
    old.IQuorumClients;
declare function use_current_InterfaceDeclaration_IQuorumClients(
    use: current.IQuorumClients);
use_current_InterfaceDeclaration_IQuorumClients(
    get_old_InterfaceDeclaration_IQuorumClients());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IQuorumClients": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IQuorumClients():
    current.IQuorumClients;
declare function use_old_InterfaceDeclaration_IQuorumClients(
    use: old.IQuorumClients);
use_old_InterfaceDeclaration_IQuorumClients(
    get_current_InterfaceDeclaration_IQuorumClients());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IQuorumClientsEvents": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IQuorumClientsEvents():
    old.IQuorumClientsEvents;
declare function use_current_InterfaceDeclaration_IQuorumClientsEvents(
    use: current.IQuorumClientsEvents);
use_current_InterfaceDeclaration_IQuorumClientsEvents(
    get_old_InterfaceDeclaration_IQuorumClientsEvents());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IQuorumClientsEvents": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IQuorumClientsEvents():
    current.IQuorumClientsEvents;
declare function use_old_InterfaceDeclaration_IQuorumClientsEvents(
    use: old.IQuorumClientsEvents);
use_old_InterfaceDeclaration_IQuorumClientsEvents(
    get_current_InterfaceDeclaration_IQuorumClientsEvents());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_IQuorumEvents": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_IQuorumEvents():
    old.IQuorumEvents;
declare function use_current_TypeAliasDeclaration_IQuorumEvents(
    use: current.IQuorumEvents);
use_current_TypeAliasDeclaration_IQuorumEvents(
    get_old_TypeAliasDeclaration_IQuorumEvents());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_IQuorumEvents": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_IQuorumEvents():
    current.IQuorumEvents;
declare function use_old_TypeAliasDeclaration_IQuorumEvents(
    use: old.IQuorumEvents);
use_old_TypeAliasDeclaration_IQuorumEvents(
    get_current_TypeAliasDeclaration_IQuorumEvents());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IQuorumProposals": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IQuorumProposals():
    old.IQuorumProposals;
declare function use_current_InterfaceDeclaration_IQuorumProposals(
    use: current.IQuorumProposals);
use_current_InterfaceDeclaration_IQuorumProposals(
    get_old_InterfaceDeclaration_IQuorumProposals());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IQuorumProposals": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IQuorumProposals():
    current.IQuorumProposals;
declare function use_old_InterfaceDeclaration_IQuorumProposals(
    use: old.IQuorumProposals);
use_old_InterfaceDeclaration_IQuorumProposals(
    get_current_InterfaceDeclaration_IQuorumProposals());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IQuorumProposalsEvents": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IQuorumProposalsEvents():
    old.IQuorumProposalsEvents;
declare function use_current_InterfaceDeclaration_IQuorumProposalsEvents(
    use: current.IQuorumProposalsEvents);
use_current_InterfaceDeclaration_IQuorumProposalsEvents(
    get_old_InterfaceDeclaration_IQuorumProposalsEvents());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IQuorumProposalsEvents": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IQuorumProposalsEvents():
    current.IQuorumProposalsEvents;
declare function use_old_InterfaceDeclaration_IQuorumProposalsEvents(
    use: old.IQuorumProposalsEvents);
use_old_InterfaceDeclaration_IQuorumProposalsEvents(
    get_current_InterfaceDeclaration_IQuorumProposalsEvents());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISequencedClient": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISequencedClient():
    old.ISequencedClient;
declare function use_current_InterfaceDeclaration_ISequencedClient(
    use: current.ISequencedClient);
use_current_InterfaceDeclaration_ISequencedClient(
    get_old_InterfaceDeclaration_ISequencedClient());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISequencedClient": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISequencedClient():
    current.ISequencedClient;
declare function use_old_InterfaceDeclaration_ISequencedClient(
    use: old.ISequencedClient);
use_old_InterfaceDeclaration_ISequencedClient(
    get_current_InterfaceDeclaration_ISequencedClient());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISequencedDocumentAugmentedMessage": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISequencedDocumentAugmentedMessage():
    old.ISequencedDocumentAugmentedMessage;
declare function use_current_InterfaceDeclaration_ISequencedDocumentAugmentedMessage(
    use: current.ISequencedDocumentAugmentedMessage);
use_current_InterfaceDeclaration_ISequencedDocumentAugmentedMessage(
    get_old_InterfaceDeclaration_ISequencedDocumentAugmentedMessage());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISequencedDocumentAugmentedMessage": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISequencedDocumentAugmentedMessage():
    current.ISequencedDocumentAugmentedMessage;
declare function use_old_InterfaceDeclaration_ISequencedDocumentAugmentedMessage(
    use: old.ISequencedDocumentAugmentedMessage);
use_old_InterfaceDeclaration_ISequencedDocumentAugmentedMessage(
    get_current_InterfaceDeclaration_ISequencedDocumentAugmentedMessage());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISequencedDocumentMessage": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISequencedDocumentMessage():
    old.ISequencedDocumentMessage;
declare function use_current_InterfaceDeclaration_ISequencedDocumentMessage(
    use: current.ISequencedDocumentMessage);
use_current_InterfaceDeclaration_ISequencedDocumentMessage(
    get_old_InterfaceDeclaration_ISequencedDocumentMessage());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISequencedDocumentMessage": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISequencedDocumentMessage():
    current.ISequencedDocumentMessage;
declare function use_old_InterfaceDeclaration_ISequencedDocumentMessage(
    use: old.ISequencedDocumentMessage);
use_old_InterfaceDeclaration_ISequencedDocumentMessage(
    get_current_InterfaceDeclaration_ISequencedDocumentMessage());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISequencedDocumentSystemMessage": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISequencedDocumentSystemMessage():
    old.ISequencedDocumentSystemMessage;
declare function use_current_InterfaceDeclaration_ISequencedDocumentSystemMessage(
    use: current.ISequencedDocumentSystemMessage);
use_current_InterfaceDeclaration_ISequencedDocumentSystemMessage(
    get_old_InterfaceDeclaration_ISequencedDocumentSystemMessage());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISequencedDocumentSystemMessage": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISequencedDocumentSystemMessage():
    current.ISequencedDocumentSystemMessage;
declare function use_old_InterfaceDeclaration_ISequencedDocumentSystemMessage(
    use: old.ISequencedDocumentSystemMessage);
use_old_InterfaceDeclaration_ISequencedDocumentSystemMessage(
    get_current_InterfaceDeclaration_ISequencedDocumentSystemMessage());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_ISequencedProposal": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_ISequencedProposal():
    old.ISequencedProposal;
declare function use_current_TypeAliasDeclaration_ISequencedProposal(
    use: current.ISequencedProposal);
use_current_TypeAliasDeclaration_ISequencedProposal(
    get_old_TypeAliasDeclaration_ISequencedProposal());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_ISequencedProposal": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_ISequencedProposal():
    current.ISequencedProposal;
declare function use_old_TypeAliasDeclaration_ISequencedProposal(
    use: old.ISequencedProposal);
use_old_TypeAliasDeclaration_ISequencedProposal(
    get_current_TypeAliasDeclaration_ISequencedProposal());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IServerError": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IServerError():
    old.IServerError;
declare function use_current_InterfaceDeclaration_IServerError(
    use: current.IServerError);
use_current_InterfaceDeclaration_IServerError(
    get_old_InterfaceDeclaration_IServerError());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IServerError": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IServerError():
    current.IServerError;
declare function use_old_InterfaceDeclaration_IServerError(
    use: old.IServerError);
use_old_InterfaceDeclaration_IServerError(
    get_current_InterfaceDeclaration_IServerError());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISignalClient": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISignalClient():
    old.ISignalClient;
declare function use_current_InterfaceDeclaration_ISignalClient(
    use: current.ISignalClient);
use_current_InterfaceDeclaration_ISignalClient(
    get_old_InterfaceDeclaration_ISignalClient());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISignalClient": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISignalClient():
    current.ISignalClient;
declare function use_old_InterfaceDeclaration_ISignalClient(
    use: old.ISignalClient);
use_old_InterfaceDeclaration_ISignalClient(
    get_current_InterfaceDeclaration_ISignalClient());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISignalMessage": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISignalMessage():
    old.ISignalMessage;
declare function use_current_InterfaceDeclaration_ISignalMessage(
    use: current.ISignalMessage);
use_current_InterfaceDeclaration_ISignalMessage(
    get_old_InterfaceDeclaration_ISignalMessage());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISignalMessage": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISignalMessage():
    current.ISignalMessage;
declare function use_old_InterfaceDeclaration_ISignalMessage(
    use: old.ISignalMessage);
use_old_InterfaceDeclaration_ISignalMessage(
    get_current_InterfaceDeclaration_ISignalMessage());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISnapshotTree": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISnapshotTree():
    old.ISnapshotTree;
declare function use_current_InterfaceDeclaration_ISnapshotTree(
    use: current.ISnapshotTree);
use_current_InterfaceDeclaration_ISnapshotTree(
    get_old_InterfaceDeclaration_ISnapshotTree());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISnapshotTree": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISnapshotTree():
    current.ISnapshotTree;
declare function use_old_InterfaceDeclaration_ISnapshotTree(
    use: old.ISnapshotTree);
use_old_InterfaceDeclaration_ISnapshotTree(
    get_current_InterfaceDeclaration_ISnapshotTree());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISnapshotTreeEx": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISnapshotTreeEx():
    old.ISnapshotTreeEx;
declare function use_current_InterfaceDeclaration_ISnapshotTreeEx(
    use: current.ISnapshotTreeEx);
use_current_InterfaceDeclaration_ISnapshotTreeEx(
    get_old_InterfaceDeclaration_ISnapshotTreeEx());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISnapshotTreeEx": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISnapshotTreeEx():
    current.ISnapshotTreeEx;
declare function use_old_InterfaceDeclaration_ISnapshotTreeEx(
    use: old.ISnapshotTreeEx);
use_old_InterfaceDeclaration_ISnapshotTreeEx(
    get_current_InterfaceDeclaration_ISnapshotTreeEx());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISummaryAck": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISummaryAck():
    old.ISummaryAck;
declare function use_current_InterfaceDeclaration_ISummaryAck(
    use: current.ISummaryAck);
use_current_InterfaceDeclaration_ISummaryAck(
    get_old_InterfaceDeclaration_ISummaryAck());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISummaryAck": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISummaryAck():
    current.ISummaryAck;
declare function use_old_InterfaceDeclaration_ISummaryAck(
    use: old.ISummaryAck);
use_old_InterfaceDeclaration_ISummaryAck(
    get_current_InterfaceDeclaration_ISummaryAck());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISummaryAttachment": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISummaryAttachment():
    old.ISummaryAttachment;
declare function use_current_InterfaceDeclaration_ISummaryAttachment(
    use: current.ISummaryAttachment);
use_current_InterfaceDeclaration_ISummaryAttachment(
    get_old_InterfaceDeclaration_ISummaryAttachment());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISummaryAttachment": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISummaryAttachment():
    current.ISummaryAttachment;
declare function use_old_InterfaceDeclaration_ISummaryAttachment(
    use: old.ISummaryAttachment);
use_old_InterfaceDeclaration_ISummaryAttachment(
    get_current_InterfaceDeclaration_ISummaryAttachment());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISummaryAuthor": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISummaryAuthor():
    old.ISummaryAuthor;
declare function use_current_InterfaceDeclaration_ISummaryAuthor(
    use: current.ISummaryAuthor);
use_current_InterfaceDeclaration_ISummaryAuthor(
    get_old_InterfaceDeclaration_ISummaryAuthor());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISummaryAuthor": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISummaryAuthor():
    current.ISummaryAuthor;
declare function use_old_InterfaceDeclaration_ISummaryAuthor(
    use: old.ISummaryAuthor);
use_old_InterfaceDeclaration_ISummaryAuthor(
    get_current_InterfaceDeclaration_ISummaryAuthor());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISummaryBlob": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISummaryBlob():
    old.ISummaryBlob;
declare function use_current_InterfaceDeclaration_ISummaryBlob(
    use: current.ISummaryBlob);
use_current_InterfaceDeclaration_ISummaryBlob(
    get_old_InterfaceDeclaration_ISummaryBlob());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISummaryBlob": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISummaryBlob():
    current.ISummaryBlob;
declare function use_old_InterfaceDeclaration_ISummaryBlob(
    use: old.ISummaryBlob);
use_old_InterfaceDeclaration_ISummaryBlob(
    get_current_InterfaceDeclaration_ISummaryBlob());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISummaryCommitter": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISummaryCommitter():
    old.ISummaryCommitter;
declare function use_current_InterfaceDeclaration_ISummaryCommitter(
    use: current.ISummaryCommitter);
use_current_InterfaceDeclaration_ISummaryCommitter(
    get_old_InterfaceDeclaration_ISummaryCommitter());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISummaryCommitter": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISummaryCommitter():
    current.ISummaryCommitter;
declare function use_old_InterfaceDeclaration_ISummaryCommitter(
    use: old.ISummaryCommitter);
use_old_InterfaceDeclaration_ISummaryCommitter(
    get_current_InterfaceDeclaration_ISummaryCommitter());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISummaryConfiguration": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISummaryConfiguration():
    old.ISummaryConfiguration;
declare function use_current_InterfaceDeclaration_ISummaryConfiguration(
    use: current.ISummaryConfiguration);
use_current_InterfaceDeclaration_ISummaryConfiguration(
    get_old_InterfaceDeclaration_ISummaryConfiguration());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISummaryConfiguration": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISummaryConfiguration():
    current.ISummaryConfiguration;
declare function use_old_InterfaceDeclaration_ISummaryConfiguration(
    use: old.ISummaryConfiguration);
use_old_InterfaceDeclaration_ISummaryConfiguration(
    get_current_InterfaceDeclaration_ISummaryConfiguration());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISummaryContent": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISummaryContent():
    old.ISummaryContent;
declare function use_current_InterfaceDeclaration_ISummaryContent(
    use: current.ISummaryContent);
use_current_InterfaceDeclaration_ISummaryContent(
    get_old_InterfaceDeclaration_ISummaryContent());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISummaryContent": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISummaryContent():
    current.ISummaryContent;
declare function use_old_InterfaceDeclaration_ISummaryContent(
    use: old.ISummaryContent);
use_old_InterfaceDeclaration_ISummaryContent(
    get_current_InterfaceDeclaration_ISummaryContent());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISummaryHandle": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISummaryHandle():
    old.ISummaryHandle;
declare function use_current_InterfaceDeclaration_ISummaryHandle(
    use: current.ISummaryHandle);
use_current_InterfaceDeclaration_ISummaryHandle(
    get_old_InterfaceDeclaration_ISummaryHandle());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISummaryHandle": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISummaryHandle():
    current.ISummaryHandle;
declare function use_old_InterfaceDeclaration_ISummaryHandle(
    use: old.ISummaryHandle);
use_old_InterfaceDeclaration_ISummaryHandle(
    get_current_InterfaceDeclaration_ISummaryHandle());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISummaryNack": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISummaryNack():
    old.ISummaryNack;
declare function use_current_InterfaceDeclaration_ISummaryNack(
    use: current.ISummaryNack);
use_current_InterfaceDeclaration_ISummaryNack(
    get_old_InterfaceDeclaration_ISummaryNack());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISummaryNack": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISummaryNack():
    current.ISummaryNack;
declare function use_old_InterfaceDeclaration_ISummaryNack(
    use: old.ISummaryNack);
use_old_InterfaceDeclaration_ISummaryNack(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_ISummaryNack());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISummaryProposal": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISummaryProposal():
    old.ISummaryProposal;
declare function use_current_InterfaceDeclaration_ISummaryProposal(
    use: current.ISummaryProposal);
use_current_InterfaceDeclaration_ISummaryProposal(
    get_old_InterfaceDeclaration_ISummaryProposal());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISummaryProposal": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISummaryProposal():
    current.ISummaryProposal;
declare function use_old_InterfaceDeclaration_ISummaryProposal(
    use: old.ISummaryProposal);
use_old_InterfaceDeclaration_ISummaryProposal(
    get_current_InterfaceDeclaration_ISummaryProposal());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISummaryTokenClaims": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISummaryTokenClaims():
    old.ISummaryTokenClaims;
declare function use_current_InterfaceDeclaration_ISummaryTokenClaims(
    use: current.ISummaryTokenClaims);
use_current_InterfaceDeclaration_ISummaryTokenClaims(
    get_old_InterfaceDeclaration_ISummaryTokenClaims());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISummaryTokenClaims": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISummaryTokenClaims():
    current.ISummaryTokenClaims;
declare function use_old_InterfaceDeclaration_ISummaryTokenClaims(
    use: old.ISummaryTokenClaims);
use_old_InterfaceDeclaration_ISummaryTokenClaims(
    get_current_InterfaceDeclaration_ISummaryTokenClaims());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISummaryTree": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISummaryTree():
    old.ISummaryTree;
declare function use_current_InterfaceDeclaration_ISummaryTree(
    use: current.ISummaryTree);
use_current_InterfaceDeclaration_ISummaryTree(
    get_old_InterfaceDeclaration_ISummaryTree());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ISummaryTree": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISummaryTree():
    current.ISummaryTree;
declare function use_old_InterfaceDeclaration_ISummaryTree(
    use: old.ISummaryTree);
use_old_InterfaceDeclaration_ISummaryTree(
    get_current_InterfaceDeclaration_ISummaryTree());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ITokenClaims": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ITokenClaims():
    old.ITokenClaims;
declare function use_current_InterfaceDeclaration_ITokenClaims(
    use: current.ITokenClaims);
use_current_InterfaceDeclaration_ITokenClaims(
    get_old_InterfaceDeclaration_ITokenClaims());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ITokenClaims": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ITokenClaims():
    current.ITokenClaims;
declare function use_old_InterfaceDeclaration_ITokenClaims(
    use: old.ITokenClaims);
use_old_InterfaceDeclaration_ITokenClaims(
    get_current_InterfaceDeclaration_ITokenClaims());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ITokenProvider": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ITokenProvider():
    old.ITokenProvider;
declare function use_current_InterfaceDeclaration_ITokenProvider(
    use: current.ITokenProvider);
use_current_InterfaceDeclaration_ITokenProvider(
    get_old_InterfaceDeclaration_ITokenProvider());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ITokenProvider": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ITokenProvider():
    current.ITokenProvider;
declare function use_old_InterfaceDeclaration_ITokenProvider(
    use: old.ITokenProvider);
use_old_InterfaceDeclaration_ITokenProvider(
    get_current_InterfaceDeclaration_ITokenProvider());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ITokenService": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ITokenService():
    old.ITokenService;
declare function use_current_InterfaceDeclaration_ITokenService(
    use: current.ITokenService);
use_current_InterfaceDeclaration_ITokenService(
    get_old_InterfaceDeclaration_ITokenService());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ITokenService": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ITokenService():
    current.ITokenService;
declare function use_old_InterfaceDeclaration_ITokenService(
    use: old.ITokenService);
use_old_InterfaceDeclaration_ITokenService(
    get_current_InterfaceDeclaration_ITokenService());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ITrace": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ITrace():
    old.ITrace;
declare function use_current_InterfaceDeclaration_ITrace(
    use: current.ITrace);
use_current_InterfaceDeclaration_ITrace(
    get_old_InterfaceDeclaration_ITrace());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ITrace": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ITrace():
    current.ITrace;
declare function use_old_InterfaceDeclaration_ITrace(
    use: old.ITrace);
use_old_InterfaceDeclaration_ITrace(
    get_current_InterfaceDeclaration_ITrace());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ITree": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ITree():
    old.ITree;
declare function use_current_InterfaceDeclaration_ITree(
    use: current.ITree);
use_current_InterfaceDeclaration_ITree(
    get_old_InterfaceDeclaration_ITree());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_ITree": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ITree():
    current.ITree;
declare function use_old_InterfaceDeclaration_ITree(
    use: old.ITree);
use_old_InterfaceDeclaration_ITree(
    get_current_InterfaceDeclaration_ITree());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_ITreeEntry": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_ITreeEntry():
    old.ITreeEntry;
declare function use_current_TypeAliasDeclaration_ITreeEntry(
    use: current.ITreeEntry);
use_current_TypeAliasDeclaration_ITreeEntry(
    get_old_TypeAliasDeclaration_ITreeEntry());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_ITreeEntry": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_ITreeEntry():
    current.ITreeEntry;
declare function use_old_TypeAliasDeclaration_ITreeEntry(
    use: old.ITreeEntry);
use_old_TypeAliasDeclaration_ITreeEntry(
    get_current_TypeAliasDeclaration_ITreeEntry());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IUploadedSummaryDetails": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IUploadedSummaryDetails():
    old.IUploadedSummaryDetails;
declare function use_current_InterfaceDeclaration_IUploadedSummaryDetails(
    use: current.IUploadedSummaryDetails);
use_current_InterfaceDeclaration_IUploadedSummaryDetails(
    get_old_InterfaceDeclaration_IUploadedSummaryDetails());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IUploadedSummaryDetails": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IUploadedSummaryDetails():
    current.IUploadedSummaryDetails;
declare function use_old_InterfaceDeclaration_IUploadedSummaryDetails(
    use: old.IUploadedSummaryDetails);
use_old_InterfaceDeclaration_IUploadedSummaryDetails(
    get_current_InterfaceDeclaration_IUploadedSummaryDetails());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IUser": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IUser():
    old.IUser;
declare function use_current_InterfaceDeclaration_IUser(
    use: current.IUser);
use_current_InterfaceDeclaration_IUser(
    get_old_InterfaceDeclaration_IUser());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IUser": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IUser():
    current.IUser;
declare function use_old_InterfaceDeclaration_IUser(
    use: old.IUser);
use_old_InterfaceDeclaration_IUser(
    get_current_InterfaceDeclaration_IUser());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IVersion": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IVersion():
    old.IVersion;
declare function use_current_InterfaceDeclaration_IVersion(
    use: current.IVersion);
use_current_InterfaceDeclaration_IVersion(
    get_old_InterfaceDeclaration_IVersion());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "InterfaceDeclaration_IVersion": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IVersion():
    current.IVersion;
declare function use_old_InterfaceDeclaration_IVersion(
    use: old.IVersion);
use_old_InterfaceDeclaration_IVersion(
    get_current_InterfaceDeclaration_IVersion());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "EnumDeclaration_MessageType": {"forwardCompat": false}
*/
declare function get_old_EnumDeclaration_MessageType():
    old.MessageType;
declare function use_current_EnumDeclaration_MessageType(
    use: current.MessageType);
use_current_EnumDeclaration_MessageType(
    get_old_EnumDeclaration_MessageType());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "EnumDeclaration_MessageType": {"backCompat": false}
*/
declare function get_current_EnumDeclaration_MessageType():
    current.MessageType;
declare function use_old_EnumDeclaration_MessageType(
    use: old.MessageType);
use_old_EnumDeclaration_MessageType(
    get_current_EnumDeclaration_MessageType());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "EnumDeclaration_NackErrorType": {"forwardCompat": false}
*/
declare function get_old_EnumDeclaration_NackErrorType():
    old.NackErrorType;
declare function use_current_EnumDeclaration_NackErrorType(
    use: current.NackErrorType);
use_current_EnumDeclaration_NackErrorType(
    get_old_EnumDeclaration_NackErrorType());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "EnumDeclaration_NackErrorType": {"backCompat": false}
*/
declare function get_current_EnumDeclaration_NackErrorType():
    current.NackErrorType;
declare function use_old_EnumDeclaration_NackErrorType(
    use: old.NackErrorType);
use_old_EnumDeclaration_NackErrorType(
    get_current_EnumDeclaration_NackErrorType());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "EnumDeclaration_ScopeType": {"forwardCompat": false}
*/
declare function get_old_EnumDeclaration_ScopeType():
    old.ScopeType;
declare function use_current_EnumDeclaration_ScopeType(
    use: current.ScopeType);
use_current_EnumDeclaration_ScopeType(
    get_old_EnumDeclaration_ScopeType());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "EnumDeclaration_ScopeType": {"backCompat": false}
*/
declare function get_current_EnumDeclaration_ScopeType():
    current.ScopeType;
declare function use_old_EnumDeclaration_ScopeType(
    use: old.ScopeType);
use_old_EnumDeclaration_ScopeType(
    get_current_EnumDeclaration_ScopeType());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_SummaryObject": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_SummaryObject():
    old.SummaryObject;
declare function use_current_TypeAliasDeclaration_SummaryObject(
    use: current.SummaryObject);
use_current_TypeAliasDeclaration_SummaryObject(
    get_old_TypeAliasDeclaration_SummaryObject());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_SummaryObject": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_SummaryObject():
    current.SummaryObject;
declare function use_old_TypeAliasDeclaration_SummaryObject(
    use: old.SummaryObject);
use_old_TypeAliasDeclaration_SummaryObject(
    get_current_TypeAliasDeclaration_SummaryObject());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_SummaryTree": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_SummaryTree():
    old.SummaryTree;
declare function use_current_TypeAliasDeclaration_SummaryTree(
    use: current.SummaryTree);
use_current_TypeAliasDeclaration_SummaryTree(
    get_old_TypeAliasDeclaration_SummaryTree());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_SummaryTree": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_SummaryTree():
    current.SummaryTree;
declare function use_old_TypeAliasDeclaration_SummaryTree(
    use: old.SummaryTree);
use_old_TypeAliasDeclaration_SummaryTree(
    get_current_TypeAliasDeclaration_SummaryTree());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_SummaryType": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_SummaryType():
    old.SummaryType;
declare function use_current_TypeAliasDeclaration_SummaryType(
    use: current.SummaryType);
use_current_TypeAliasDeclaration_SummaryType(
    get_old_TypeAliasDeclaration_SummaryType());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_SummaryType": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_SummaryType():
    current.SummaryType;
declare function use_old_TypeAliasDeclaration_SummaryType(
    use: old.SummaryType);
use_old_TypeAliasDeclaration_SummaryType(
    get_current_TypeAliasDeclaration_SummaryType());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_SummaryType.Attachment": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_SummaryType_Attachment():
    old.SummaryType.Attachment;
declare function use_current_TypeAliasDeclaration_SummaryType_Attachment(
    use: current.SummaryType.Attachment);
use_current_TypeAliasDeclaration_SummaryType_Attachment(
    get_old_TypeAliasDeclaration_SummaryType_Attachment());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_SummaryType.Attachment": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_SummaryType_Attachment():
    current.SummaryType.Attachment;
declare function use_old_TypeAliasDeclaration_SummaryType_Attachment(
    use: old.SummaryType.Attachment);
use_old_TypeAliasDeclaration_SummaryType_Attachment(
    get_current_TypeAliasDeclaration_SummaryType_Attachment());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "VariableDeclaration_SummaryType.Attachment": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_SummaryType_Attachment():
    typeof old.SummaryType.Attachment;
declare function use_current_VariableDeclaration_SummaryType_Attachment(
    use: typeof current.SummaryType.Attachment);
use_current_VariableDeclaration_SummaryType_Attachment(
    get_old_VariableDeclaration_SummaryType_Attachment());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "VariableDeclaration_SummaryType.Attachment": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_SummaryType_Attachment():
    typeof current.SummaryType.Attachment;
declare function use_old_VariableDeclaration_SummaryType_Attachment(
    use: typeof old.SummaryType.Attachment);
use_old_VariableDeclaration_SummaryType_Attachment(
    get_current_VariableDeclaration_SummaryType_Attachment());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_SummaryType.Blob": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_SummaryType_Blob():
    old.SummaryType.Blob;
declare function use_current_TypeAliasDeclaration_SummaryType_Blob(
    use: current.SummaryType.Blob);
use_current_TypeAliasDeclaration_SummaryType_Blob(
    get_old_TypeAliasDeclaration_SummaryType_Blob());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_SummaryType.Blob": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_SummaryType_Blob():
    current.SummaryType.Blob;
declare function use_old_TypeAliasDeclaration_SummaryType_Blob(
    use: old.SummaryType.Blob);
use_old_TypeAliasDeclaration_SummaryType_Blob(
    get_current_TypeAliasDeclaration_SummaryType_Blob());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "VariableDeclaration_SummaryType.Blob": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_SummaryType_Blob():
    typeof old.SummaryType.Blob;
declare function use_current_VariableDeclaration_SummaryType_Blob(
    use: typeof current.SummaryType.Blob);
use_current_VariableDeclaration_SummaryType_Blob(
    get_old_VariableDeclaration_SummaryType_Blob());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "VariableDeclaration_SummaryType.Blob": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_SummaryType_Blob():
    typeof current.SummaryType.Blob;
declare function use_old_VariableDeclaration_SummaryType_Blob(
    use: typeof old.SummaryType.Blob);
use_old_VariableDeclaration_SummaryType_Blob(
    get_current_VariableDeclaration_SummaryType_Blob());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_SummaryType.Handle": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_SummaryType_Handle():
    old.SummaryType.Handle;
declare function use_current_TypeAliasDeclaration_SummaryType_Handle(
    use: current.SummaryType.Handle);
use_current_TypeAliasDeclaration_SummaryType_Handle(
    get_old_TypeAliasDeclaration_SummaryType_Handle());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_SummaryType.Handle": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_SummaryType_Handle():
    current.SummaryType.Handle;
declare function use_old_TypeAliasDeclaration_SummaryType_Handle(
    use: old.SummaryType.Handle);
use_old_TypeAliasDeclaration_SummaryType_Handle(
    get_current_TypeAliasDeclaration_SummaryType_Handle());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "VariableDeclaration_SummaryType.Handle": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_SummaryType_Handle():
    typeof old.SummaryType.Handle;
declare function use_current_VariableDeclaration_SummaryType_Handle(
    use: typeof current.SummaryType.Handle);
use_current_VariableDeclaration_SummaryType_Handle(
    get_old_VariableDeclaration_SummaryType_Handle());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "VariableDeclaration_SummaryType.Handle": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_SummaryType_Handle():
    typeof current.SummaryType.Handle;
declare function use_old_VariableDeclaration_SummaryType_Handle(
    use: typeof old.SummaryType.Handle);
use_old_VariableDeclaration_SummaryType_Handle(
    get_current_VariableDeclaration_SummaryType_Handle());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_SummaryType.Tree": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_SummaryType_Tree():
    old.SummaryType.Tree;
declare function use_current_TypeAliasDeclaration_SummaryType_Tree(
    use: current.SummaryType.Tree);
use_current_TypeAliasDeclaration_SummaryType_Tree(
    get_old_TypeAliasDeclaration_SummaryType_Tree());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_SummaryType.Tree": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_SummaryType_Tree():
    current.SummaryType.Tree;
declare function use_old_TypeAliasDeclaration_SummaryType_Tree(
    use: old.SummaryType.Tree);
use_old_TypeAliasDeclaration_SummaryType_Tree(
    get_current_TypeAliasDeclaration_SummaryType_Tree());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "VariableDeclaration_SummaryType.Tree": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_SummaryType_Tree():
    typeof old.SummaryType.Tree;
declare function use_current_VariableDeclaration_SummaryType_Tree(
    use: typeof current.SummaryType.Tree);
use_current_VariableDeclaration_SummaryType_Tree(
    get_old_VariableDeclaration_SummaryType_Tree());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "VariableDeclaration_SummaryType.Tree": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_SummaryType_Tree():
    typeof current.SummaryType.Tree;
declare function use_old_VariableDeclaration_SummaryType_Tree(
    use: typeof old.SummaryType.Tree);
use_old_VariableDeclaration_SummaryType_Tree(
    get_current_VariableDeclaration_SummaryType_Tree());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_SummaryTypeNoHandle": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_SummaryTypeNoHandle():
    old.SummaryTypeNoHandle;
declare function use_current_TypeAliasDeclaration_SummaryTypeNoHandle(
    use: current.SummaryTypeNoHandle);
use_current_TypeAliasDeclaration_SummaryTypeNoHandle(
    get_old_TypeAliasDeclaration_SummaryTypeNoHandle());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "TypeAliasDeclaration_SummaryTypeNoHandle": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_SummaryTypeNoHandle():
    current.SummaryTypeNoHandle;
declare function use_old_TypeAliasDeclaration_SummaryTypeNoHandle(
    use: old.SummaryTypeNoHandle);
use_old_TypeAliasDeclaration_SummaryTypeNoHandle(
    get_current_TypeAliasDeclaration_SummaryTypeNoHandle());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "EnumDeclaration_TreeEntry": {"forwardCompat": false}
*/
declare function get_old_EnumDeclaration_TreeEntry():
    old.TreeEntry;
declare function use_current_EnumDeclaration_TreeEntry(
    use: current.TreeEntry);
use_current_EnumDeclaration_TreeEntry(
    get_old_EnumDeclaration_TreeEntry());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.1026.0:
* "EnumDeclaration_TreeEntry": {"backCompat": false}
*/
declare function get_current_EnumDeclaration_TreeEntry():
    current.TreeEntry;
declare function use_old_EnumDeclaration_TreeEntry(
    use: old.TreeEntry);
use_old_EnumDeclaration_TreeEntry(
    get_current_EnumDeclaration_TreeEntry());
