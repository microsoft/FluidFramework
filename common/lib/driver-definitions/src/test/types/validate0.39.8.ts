/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-validator in @fluidframework/build-tools.
 */
import * as old from "@fluidframework/driver-definitions-0.39.8";
import * as current from "../../index";

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "TypeAliasDeclaration_DriverError": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_DriverError():
    old.DriverError;
declare function use_current_TypeAliasDeclaration_DriverError(
    use: current.DriverError);
use_current_TypeAliasDeclaration_DriverError(
    get_old_TypeAliasDeclaration_DriverError());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "TypeAliasDeclaration_DriverError": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_DriverError():
    current.DriverError;
declare function use_old_TypeAliasDeclaration_DriverError(
    use: old.DriverError);
use_old_TypeAliasDeclaration_DriverError(
    // @ts-expect-error compatibility expected to be broken
    get_current_TypeAliasDeclaration_DriverError());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "EnumDeclaration_DriverErrorType": {"forwardCompat": false}
*/
declare function get_old_EnumDeclaration_DriverErrorType():
    old.DriverErrorType;
declare function use_current_EnumDeclaration_DriverErrorType(
    use: current.DriverErrorType);
use_current_EnumDeclaration_DriverErrorType(
    get_old_EnumDeclaration_DriverErrorType());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "EnumDeclaration_DriverErrorType": {"backCompat": false}
*/
declare function get_current_EnumDeclaration_DriverErrorType():
    current.DriverErrorType;
declare function use_old_EnumDeclaration_DriverErrorType(
    use: old.DriverErrorType);
use_old_EnumDeclaration_DriverErrorType(
    // @ts-expect-error compatibility expected to be broken
    get_current_EnumDeclaration_DriverErrorType());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "EnumDeclaration_DriverHeader": {"forwardCompat": false}
*/
declare function get_old_EnumDeclaration_DriverHeader():
    old.DriverHeader;
declare function use_current_EnumDeclaration_DriverHeader(
    use: current.DriverHeader);
use_current_EnumDeclaration_DriverHeader(
    get_old_EnumDeclaration_DriverHeader());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "EnumDeclaration_DriverHeader": {"backCompat": false}
*/
declare function get_current_EnumDeclaration_DriverHeader():
    current.DriverHeader;
declare function use_old_EnumDeclaration_DriverHeader(
    use: old.DriverHeader);
use_old_EnumDeclaration_DriverHeader(
    get_current_EnumDeclaration_DriverHeader());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_DriverPreCheckInfo": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_DriverPreCheckInfo():
    old.DriverPreCheckInfo;
declare function use_current_InterfaceDeclaration_DriverPreCheckInfo(
    use: current.DriverPreCheckInfo);
use_current_InterfaceDeclaration_DriverPreCheckInfo(
    get_old_InterfaceDeclaration_DriverPreCheckInfo());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_DriverPreCheckInfo": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_DriverPreCheckInfo():
    current.DriverPreCheckInfo;
declare function use_old_InterfaceDeclaration_DriverPreCheckInfo(
    use: old.DriverPreCheckInfo);
use_old_InterfaceDeclaration_DriverPreCheckInfo(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_DriverPreCheckInfo());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IAuthorizationError": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IAuthorizationError():
    old.IAuthorizationError;
declare function use_current_InterfaceDeclaration_IAuthorizationError(
    use: current.IAuthorizationError);
use_current_InterfaceDeclaration_IAuthorizationError(
    get_old_InterfaceDeclaration_IAuthorizationError());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IAuthorizationError": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IAuthorizationError():
    current.IAuthorizationError;
declare function use_old_InterfaceDeclaration_IAuthorizationError(
    use: old.IAuthorizationError);
use_old_InterfaceDeclaration_IAuthorizationError(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IAuthorizationError());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IDeltasFetchResult": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IDeltasFetchResult():
    old.IDeltasFetchResult;
declare function use_current_InterfaceDeclaration_IDeltasFetchResult(
    use: current.IDeltasFetchResult);
use_current_InterfaceDeclaration_IDeltasFetchResult(
    get_old_InterfaceDeclaration_IDeltasFetchResult());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IDeltasFetchResult": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IDeltasFetchResult():
    current.IDeltasFetchResult;
declare function use_old_InterfaceDeclaration_IDeltasFetchResult(
    use: old.IDeltasFetchResult);
use_old_InterfaceDeclaration_IDeltasFetchResult(
    get_current_InterfaceDeclaration_IDeltasFetchResult());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IDeltaStorageService": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IDeltaStorageService():
    old.IDeltaStorageService;
declare function use_current_InterfaceDeclaration_IDeltaStorageService(
    use: current.IDeltaStorageService);
use_current_InterfaceDeclaration_IDeltaStorageService(
    get_old_InterfaceDeclaration_IDeltaStorageService());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IDeltaStorageService": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IDeltaStorageService():
    current.IDeltaStorageService;
declare function use_old_InterfaceDeclaration_IDeltaStorageService(
    use: old.IDeltaStorageService);
use_old_InterfaceDeclaration_IDeltaStorageService(
    get_current_InterfaceDeclaration_IDeltaStorageService());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IDocumentDeltaConnection": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IDocumentDeltaConnection():
    old.IDocumentDeltaConnection;
declare function use_current_InterfaceDeclaration_IDocumentDeltaConnection(
    use: current.IDocumentDeltaConnection);
use_current_InterfaceDeclaration_IDocumentDeltaConnection(
    // @ts-expect-error compatibility expected to be broken
    get_old_InterfaceDeclaration_IDocumentDeltaConnection());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IDocumentDeltaConnection": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IDocumentDeltaConnection():
    current.IDocumentDeltaConnection;
declare function use_old_InterfaceDeclaration_IDocumentDeltaConnection(
    use: old.IDocumentDeltaConnection);
use_old_InterfaceDeclaration_IDocumentDeltaConnection(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IDocumentDeltaConnection());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IDocumentDeltaConnectionEvents": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IDocumentDeltaConnectionEvents():
    old.IDocumentDeltaConnectionEvents;
declare function use_current_InterfaceDeclaration_IDocumentDeltaConnectionEvents(
    use: current.IDocumentDeltaConnectionEvents);
use_current_InterfaceDeclaration_IDocumentDeltaConnectionEvents(
    get_old_InterfaceDeclaration_IDocumentDeltaConnectionEvents());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IDocumentDeltaConnectionEvents": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IDocumentDeltaConnectionEvents():
    current.IDocumentDeltaConnectionEvents;
declare function use_old_InterfaceDeclaration_IDocumentDeltaConnectionEvents(
    use: old.IDocumentDeltaConnectionEvents);
use_old_InterfaceDeclaration_IDocumentDeltaConnectionEvents(
    get_current_InterfaceDeclaration_IDocumentDeltaConnectionEvents());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IDocumentDeltaStorageService": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IDocumentDeltaStorageService():
    old.IDocumentDeltaStorageService;
declare function use_current_InterfaceDeclaration_IDocumentDeltaStorageService(
    use: current.IDocumentDeltaStorageService);
use_current_InterfaceDeclaration_IDocumentDeltaStorageService(
    get_old_InterfaceDeclaration_IDocumentDeltaStorageService());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IDocumentDeltaStorageService": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IDocumentDeltaStorageService():
    current.IDocumentDeltaStorageService;
declare function use_old_InterfaceDeclaration_IDocumentDeltaStorageService(
    use: old.IDocumentDeltaStorageService);
use_old_InterfaceDeclaration_IDocumentDeltaStorageService(
    get_current_InterfaceDeclaration_IDocumentDeltaStorageService());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IDocumentService": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IDocumentService():
    old.IDocumentService;
declare function use_current_InterfaceDeclaration_IDocumentService(
    use: current.IDocumentService);
use_current_InterfaceDeclaration_IDocumentService(
    // @ts-expect-error compatibility expected to be broken
    get_old_InterfaceDeclaration_IDocumentService());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IDocumentService": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IDocumentService():
    current.IDocumentService;
declare function use_old_InterfaceDeclaration_IDocumentService(
    use: old.IDocumentService);
use_old_InterfaceDeclaration_IDocumentService(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IDocumentService());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IDocumentServiceFactory": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IDocumentServiceFactory():
    old.IDocumentServiceFactory;
declare function use_current_InterfaceDeclaration_IDocumentServiceFactory(
    use: current.IDocumentServiceFactory);
use_current_InterfaceDeclaration_IDocumentServiceFactory(
    // @ts-expect-error compatibility expected to be broken
    get_old_InterfaceDeclaration_IDocumentServiceFactory());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IDocumentServiceFactory": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IDocumentServiceFactory():
    current.IDocumentServiceFactory;
declare function use_old_InterfaceDeclaration_IDocumentServiceFactory(
    use: old.IDocumentServiceFactory);
use_old_InterfaceDeclaration_IDocumentServiceFactory(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IDocumentServiceFactory());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IDocumentServicePolicies": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IDocumentServicePolicies():
    old.IDocumentServicePolicies;
declare function use_current_InterfaceDeclaration_IDocumentServicePolicies(
    use: current.IDocumentServicePolicies);
use_current_InterfaceDeclaration_IDocumentServicePolicies(
    get_old_InterfaceDeclaration_IDocumentServicePolicies());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IDocumentServicePolicies": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IDocumentServicePolicies():
    current.IDocumentServicePolicies;
declare function use_old_InterfaceDeclaration_IDocumentServicePolicies(
    use: old.IDocumentServicePolicies);
use_old_InterfaceDeclaration_IDocumentServicePolicies(
    get_current_InterfaceDeclaration_IDocumentServicePolicies());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IDocumentStorageService": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IDocumentStorageService():
    old.IDocumentStorageService;
declare function use_current_InterfaceDeclaration_IDocumentStorageService(
    use: current.IDocumentStorageService);
use_current_InterfaceDeclaration_IDocumentStorageService(
    get_old_InterfaceDeclaration_IDocumentStorageService());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IDocumentStorageService": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IDocumentStorageService():
    current.IDocumentStorageService;
declare function use_old_InterfaceDeclaration_IDocumentStorageService(
    use: old.IDocumentStorageService);
use_old_InterfaceDeclaration_IDocumentStorageService(
    get_current_InterfaceDeclaration_IDocumentStorageService());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IDocumentStorageServicePolicies": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IDocumentStorageServicePolicies():
    old.IDocumentStorageServicePolicies;
declare function use_current_InterfaceDeclaration_IDocumentStorageServicePolicies(
    use: current.IDocumentStorageServicePolicies);
use_current_InterfaceDeclaration_IDocumentStorageServicePolicies(
    get_old_InterfaceDeclaration_IDocumentStorageServicePolicies());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IDocumentStorageServicePolicies": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IDocumentStorageServicePolicies():
    current.IDocumentStorageServicePolicies;
declare function use_old_InterfaceDeclaration_IDocumentStorageServicePolicies(
    use: old.IDocumentStorageServicePolicies);
use_old_InterfaceDeclaration_IDocumentStorageServicePolicies(
    get_current_InterfaceDeclaration_IDocumentStorageServicePolicies());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IDriverBasicError": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IDriverBasicError():
    old.IDriverBasicError;
declare function use_current_InterfaceDeclaration_IDriverBasicError(
    use: current.IDriverBasicError);
use_current_InterfaceDeclaration_IDriverBasicError(
    get_old_InterfaceDeclaration_IDriverBasicError());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IDriverBasicError": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IDriverBasicError():
    current.IDriverBasicError;
declare function use_old_InterfaceDeclaration_IDriverBasicError(
    use: old.IDriverBasicError);
use_old_InterfaceDeclaration_IDriverBasicError(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IDriverBasicError());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IDriverErrorBase": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IDriverErrorBase():
    old.IDriverErrorBase;
declare function use_current_InterfaceDeclaration_IDriverErrorBase(
    use: current.IDriverErrorBase);
use_current_InterfaceDeclaration_IDriverErrorBase(
    get_old_InterfaceDeclaration_IDriverErrorBase());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IDriverErrorBase": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IDriverErrorBase():
    current.IDriverErrorBase;
declare function use_old_InterfaceDeclaration_IDriverErrorBase(
    use: old.IDriverErrorBase);
use_old_InterfaceDeclaration_IDriverErrorBase(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IDriverErrorBase());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IDriverHeader": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IDriverHeader():
    old.IDriverHeader;
declare function use_current_InterfaceDeclaration_IDriverHeader(
    use: current.IDriverHeader);
use_current_InterfaceDeclaration_IDriverHeader(
    get_old_InterfaceDeclaration_IDriverHeader());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IDriverHeader": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IDriverHeader():
    current.IDriverHeader;
declare function use_old_InterfaceDeclaration_IDriverHeader(
    use: old.IDriverHeader);
use_old_InterfaceDeclaration_IDriverHeader(
    get_current_InterfaceDeclaration_IDriverHeader());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IFluidResolvedUrl": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidResolvedUrl():
    old.IFluidResolvedUrl;
declare function use_current_InterfaceDeclaration_IFluidResolvedUrl(
    use: current.IFluidResolvedUrl);
use_current_InterfaceDeclaration_IFluidResolvedUrl(
    get_old_InterfaceDeclaration_IFluidResolvedUrl());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IFluidResolvedUrl": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidResolvedUrl():
    current.IFluidResolvedUrl;
declare function use_old_InterfaceDeclaration_IFluidResolvedUrl(
    use: old.IFluidResolvedUrl);
use_old_InterfaceDeclaration_IFluidResolvedUrl(
    get_current_InterfaceDeclaration_IFluidResolvedUrl());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IGenericNetworkError": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IGenericNetworkError():
    old.IGenericNetworkError;
declare function use_current_InterfaceDeclaration_IGenericNetworkError(
    use: current.IGenericNetworkError);
use_current_InterfaceDeclaration_IGenericNetworkError(
    get_old_InterfaceDeclaration_IGenericNetworkError());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IGenericNetworkError": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IGenericNetworkError():
    current.IGenericNetworkError;
declare function use_old_InterfaceDeclaration_IGenericNetworkError(
    use: old.IGenericNetworkError);
use_old_InterfaceDeclaration_IGenericNetworkError(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IGenericNetworkError());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "TypeAliasDeclaration_IResolvedUrl": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_IResolvedUrl():
    old.IResolvedUrl;
declare function use_current_TypeAliasDeclaration_IResolvedUrl(
    use: current.IResolvedUrl);
use_current_TypeAliasDeclaration_IResolvedUrl(
    get_old_TypeAliasDeclaration_IResolvedUrl());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "TypeAliasDeclaration_IResolvedUrl": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_IResolvedUrl():
    current.IResolvedUrl;
declare function use_old_TypeAliasDeclaration_IResolvedUrl(
    use: old.IResolvedUrl);
use_old_TypeAliasDeclaration_IResolvedUrl(
    get_current_TypeAliasDeclaration_IResolvedUrl());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IResolvedUrlBase": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IResolvedUrlBase():
    old.IResolvedUrlBase;
declare function use_current_InterfaceDeclaration_IResolvedUrlBase(
    use: current.IResolvedUrlBase);
use_current_InterfaceDeclaration_IResolvedUrlBase(
    get_old_InterfaceDeclaration_IResolvedUrlBase());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IResolvedUrlBase": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IResolvedUrlBase():
    current.IResolvedUrlBase;
declare function use_old_InterfaceDeclaration_IResolvedUrlBase(
    use: old.IResolvedUrlBase);
use_old_InterfaceDeclaration_IResolvedUrlBase(
    get_current_InterfaceDeclaration_IResolvedUrlBase());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IStream": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IStream():
    old.IStream<any>;
declare function use_current_InterfaceDeclaration_IStream(
    use: current.IStream<any>);
use_current_InterfaceDeclaration_IStream(
    get_old_InterfaceDeclaration_IStream());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IStream": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IStream():
    current.IStream<any>;
declare function use_old_InterfaceDeclaration_IStream(
    use: old.IStream<any>);
use_old_InterfaceDeclaration_IStream(
    get_current_InterfaceDeclaration_IStream());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "TypeAliasDeclaration_IStreamResult": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_IStreamResult():
    old.IStreamResult<any>;
declare function use_current_TypeAliasDeclaration_IStreamResult(
    use: current.IStreamResult<any>);
use_current_TypeAliasDeclaration_IStreamResult(
    get_old_TypeAliasDeclaration_IStreamResult());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "TypeAliasDeclaration_IStreamResult": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_IStreamResult():
    current.IStreamResult<any>;
declare function use_old_TypeAliasDeclaration_IStreamResult(
    use: old.IStreamResult<any>);
use_old_TypeAliasDeclaration_IStreamResult(
    get_current_TypeAliasDeclaration_IStreamResult());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_ISummaryContext": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISummaryContext():
    old.ISummaryContext;
declare function use_current_InterfaceDeclaration_ISummaryContext(
    use: current.ISummaryContext);
use_current_InterfaceDeclaration_ISummaryContext(
    get_old_InterfaceDeclaration_ISummaryContext());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_ISummaryContext": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISummaryContext():
    current.ISummaryContext;
declare function use_old_InterfaceDeclaration_ISummaryContext(
    use: old.ISummaryContext);
use_old_InterfaceDeclaration_ISummaryContext(
    get_current_InterfaceDeclaration_ISummaryContext());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IThrottlingWarning": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IThrottlingWarning():
    old.IThrottlingWarning;
declare function use_current_InterfaceDeclaration_IThrottlingWarning(
    use: current.IThrottlingWarning);
use_current_InterfaceDeclaration_IThrottlingWarning(
    get_old_InterfaceDeclaration_IThrottlingWarning());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IThrottlingWarning": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IThrottlingWarning():
    current.IThrottlingWarning;
declare function use_old_InterfaceDeclaration_IThrottlingWarning(
    use: old.IThrottlingWarning);
use_old_InterfaceDeclaration_IThrottlingWarning(
    // @ts-expect-error compatibility expected to be broken
    get_current_InterfaceDeclaration_IThrottlingWarning());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IUrlResolver": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IUrlResolver():
    old.IUrlResolver;
declare function use_current_InterfaceDeclaration_IUrlResolver(
    use: current.IUrlResolver);
use_current_InterfaceDeclaration_IUrlResolver(
    get_old_InterfaceDeclaration_IUrlResolver());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IUrlResolver": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IUrlResolver():
    current.IUrlResolver;
declare function use_old_InterfaceDeclaration_IUrlResolver(
    use: old.IUrlResolver);
use_old_InterfaceDeclaration_IUrlResolver(
    get_current_InterfaceDeclaration_IUrlResolver());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IWebResolvedUrl": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IWebResolvedUrl():
    old.IWebResolvedUrl;
declare function use_current_InterfaceDeclaration_IWebResolvedUrl(
    use: current.IWebResolvedUrl);
use_current_InterfaceDeclaration_IWebResolvedUrl(
    get_old_InterfaceDeclaration_IWebResolvedUrl());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IWebResolvedUrl": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IWebResolvedUrl():
    current.IWebResolvedUrl;
declare function use_old_InterfaceDeclaration_IWebResolvedUrl(
    use: old.IWebResolvedUrl);
use_old_InterfaceDeclaration_IWebResolvedUrl(
    get_current_InterfaceDeclaration_IWebResolvedUrl());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "EnumDeclaration_LoaderCachingPolicy": {"forwardCompat": false}
*/
declare function get_old_EnumDeclaration_LoaderCachingPolicy():
    old.LoaderCachingPolicy;
declare function use_current_EnumDeclaration_LoaderCachingPolicy(
    use: current.LoaderCachingPolicy);
use_current_EnumDeclaration_LoaderCachingPolicy(
    get_old_EnumDeclaration_LoaderCachingPolicy());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "EnumDeclaration_LoaderCachingPolicy": {"backCompat": false}
*/
declare function get_current_EnumDeclaration_LoaderCachingPolicy():
    current.LoaderCachingPolicy;
declare function use_old_EnumDeclaration_LoaderCachingPolicy(
    use: old.LoaderCachingPolicy);
use_old_EnumDeclaration_LoaderCachingPolicy(
    get_current_EnumDeclaration_LoaderCachingPolicy());
