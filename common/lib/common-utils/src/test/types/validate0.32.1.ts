/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-validator in @fluidframework/build-tools.
 */
import * as old from "@fluidframework/common-utils-0.32.1";
import * as current from "../../index";

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "FunctionDeclaration_assert": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_assert():
    typeof old.assert;
declare function use_current_FunctionDeclaration_assert(
    use: typeof current.assert);
use_current_FunctionDeclaration_assert(
    get_old_FunctionDeclaration_assert());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "FunctionDeclaration_assert": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_assert():
    typeof current.assert;
declare function use_old_FunctionDeclaration_assert(
    use: typeof old.assert);
use_old_FunctionDeclaration_assert(
    get_current_FunctionDeclaration_assert());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_BaseTelemetryNullLogger": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_BaseTelemetryNullLogger():
    Omit<old.BaseTelemetryNullLogger,"">;
declare function use_current_ClassDeclaration_BaseTelemetryNullLogger(
    use: Omit<current.BaseTelemetryNullLogger,"">);
use_current_ClassDeclaration_BaseTelemetryNullLogger(
    get_old_ClassDeclaration_BaseTelemetryNullLogger());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_BaseTelemetryNullLogger": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_BaseTelemetryNullLogger():
    Omit<current.BaseTelemetryNullLogger,"">;
declare function use_old_ClassDeclaration_BaseTelemetryNullLogger(
    use: Omit<old.BaseTelemetryNullLogger,"">);
use_old_ClassDeclaration_BaseTelemetryNullLogger(
    get_current_ClassDeclaration_BaseTelemetryNullLogger());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_BatchManager": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_BatchManager():
    Omit<old.BatchManager<any>,"">;
declare function use_current_ClassDeclaration_BatchManager(
    use: Omit<current.BatchManager<any>,"">);
use_current_ClassDeclaration_BatchManager(
    get_old_ClassDeclaration_BatchManager());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_BatchManager": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_BatchManager():
    Omit<current.BatchManager<any>,"">;
declare function use_old_ClassDeclaration_BatchManager(
    use: Omit<old.BatchManager<any>,"">);
use_old_ClassDeclaration_BatchManager(
    get_current_ClassDeclaration_BatchManager());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_Buffer": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_Buffer():
    Omit<old.Buffer,"">;
declare function use_current_ClassDeclaration_Buffer(
    use: Omit<current.Buffer,"">);
use_current_ClassDeclaration_Buffer(
    get_old_ClassDeclaration_Buffer());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_Buffer": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_Buffer():
    Omit<current.Buffer,"">;
declare function use_old_ClassDeclaration_Buffer(
    use: Omit<old.Buffer,"">);
use_old_ClassDeclaration_Buffer(
    get_current_ClassDeclaration_Buffer());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "VariableDeclaration_bufferToString": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_bufferToString():
    typeof old.bufferToString;
declare function use_current_VariableDeclaration_bufferToString(
    use: typeof current.bufferToString);
use_current_VariableDeclaration_bufferToString(
    get_old_VariableDeclaration_bufferToString());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "VariableDeclaration_bufferToString": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_bufferToString():
    typeof current.bufferToString;
declare function use_old_VariableDeclaration_bufferToString(
    use: typeof old.bufferToString);
use_old_VariableDeclaration_bufferToString(
    get_current_VariableDeclaration_bufferToString());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_Deferred": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_Deferred():
    Omit<old.Deferred<any>,"">;
declare function use_current_ClassDeclaration_Deferred(
    use: Omit<current.Deferred<any>,"">);
use_current_ClassDeclaration_Deferred(
    get_old_ClassDeclaration_Deferred());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_Deferred": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_Deferred():
    Omit<current.Deferred<any>,"">;
declare function use_old_ClassDeclaration_Deferred(
    use: Omit<old.Deferred<any>,"">);
use_old_ClassDeclaration_Deferred(
    get_current_ClassDeclaration_Deferred());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "VariableDeclaration_delay": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_delay():
    typeof old.delay;
declare function use_current_VariableDeclaration_delay(
    use: typeof current.delay);
use_current_VariableDeclaration_delay(
    get_old_VariableDeclaration_delay());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "VariableDeclaration_delay": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_delay():
    typeof current.delay;
declare function use_old_VariableDeclaration_delay(
    use: typeof old.delay);
use_old_VariableDeclaration_delay(
    get_current_VariableDeclaration_delay());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "FunctionDeclaration_doIfNotDisposed": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_doIfNotDisposed():
    typeof old.doIfNotDisposed;
declare function use_current_FunctionDeclaration_doIfNotDisposed(
    use: typeof current.doIfNotDisposed);
use_current_FunctionDeclaration_doIfNotDisposed(
    get_old_FunctionDeclaration_doIfNotDisposed());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "FunctionDeclaration_doIfNotDisposed": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_doIfNotDisposed():
    typeof current.doIfNotDisposed;
declare function use_old_FunctionDeclaration_doIfNotDisposed(
    use: typeof old.doIfNotDisposed);
use_old_FunctionDeclaration_doIfNotDisposed(
    get_current_FunctionDeclaration_doIfNotDisposed());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "TypeAliasDeclaration_EventEmitterEventType": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_EventEmitterEventType():
    old.EventEmitterEventType;
declare function use_current_TypeAliasDeclaration_EventEmitterEventType(
    use: current.EventEmitterEventType);
use_current_TypeAliasDeclaration_EventEmitterEventType(
    get_old_TypeAliasDeclaration_EventEmitterEventType());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "TypeAliasDeclaration_EventEmitterEventType": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_EventEmitterEventType():
    current.EventEmitterEventType;
declare function use_old_TypeAliasDeclaration_EventEmitterEventType(
    use: old.EventEmitterEventType);
use_old_TypeAliasDeclaration_EventEmitterEventType(
    get_current_TypeAliasDeclaration_EventEmitterEventType());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_EventForwarder": {"forwardCompat": false}
declare function get_old_ClassDeclaration_EventForwarder():
    Omit<old.EventForwarder,"">;
declare function use_current_ClassDeclaration_EventForwarder(
    use: Omit<current.EventForwarder,"">);
use_current_ClassDeclaration_EventForwarder(
    get_old_ClassDeclaration_EventForwarder());
*/

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_EventForwarder": {"backCompat": false}
declare function get_current_ClassDeclaration_EventForwarder():
    Omit<current.EventForwarder,"">;
declare function use_old_ClassDeclaration_EventForwarder(
    use: Omit<old.EventForwarder,"">);
use_old_ClassDeclaration_EventForwarder(
    get_current_ClassDeclaration_EventForwarder());
*/

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "FunctionDeclaration_extractLogSafeErrorProperties": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_extractLogSafeErrorProperties():
    typeof old.extractLogSafeErrorProperties;
declare function use_current_FunctionDeclaration_extractLogSafeErrorProperties(
    use: typeof current.extractLogSafeErrorProperties);
use_current_FunctionDeclaration_extractLogSafeErrorProperties(
    get_old_FunctionDeclaration_extractLogSafeErrorProperties());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "FunctionDeclaration_extractLogSafeErrorProperties": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_extractLogSafeErrorProperties():
    typeof current.extractLogSafeErrorProperties;
declare function use_old_FunctionDeclaration_extractLogSafeErrorProperties(
    use: typeof old.extractLogSafeErrorProperties);
use_old_FunctionDeclaration_extractLogSafeErrorProperties(
    get_current_FunctionDeclaration_extractLogSafeErrorProperties());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "VariableDeclaration_fromBase64ToUtf8": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_fromBase64ToUtf8():
    typeof old.fromBase64ToUtf8;
declare function use_current_VariableDeclaration_fromBase64ToUtf8(
    use: typeof current.fromBase64ToUtf8);
use_current_VariableDeclaration_fromBase64ToUtf8(
    get_old_VariableDeclaration_fromBase64ToUtf8());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "VariableDeclaration_fromBase64ToUtf8": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_fromBase64ToUtf8():
    typeof current.fromBase64ToUtf8;
declare function use_old_VariableDeclaration_fromBase64ToUtf8(
    use: typeof old.fromBase64ToUtf8);
use_old_VariableDeclaration_fromBase64ToUtf8(
    get_current_VariableDeclaration_fromBase64ToUtf8());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "VariableDeclaration_fromUtf8ToBase64": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_fromUtf8ToBase64():
    typeof old.fromUtf8ToBase64;
declare function use_current_VariableDeclaration_fromUtf8ToBase64(
    use: typeof current.fromUtf8ToBase64);
use_current_VariableDeclaration_fromUtf8ToBase64(
    get_old_VariableDeclaration_fromUtf8ToBase64());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "VariableDeclaration_fromUtf8ToBase64": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_fromUtf8ToBase64():
    typeof current.fromUtf8ToBase64;
declare function use_old_VariableDeclaration_fromUtf8ToBase64(
    use: typeof old.fromUtf8ToBase64);
use_old_VariableDeclaration_fromUtf8ToBase64(
    get_current_VariableDeclaration_fromUtf8ToBase64());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "FunctionDeclaration_gitHashFile": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_gitHashFile():
    typeof old.gitHashFile;
declare function use_current_FunctionDeclaration_gitHashFile(
    use: typeof current.gitHashFile);
use_current_FunctionDeclaration_gitHashFile(
    get_old_FunctionDeclaration_gitHashFile());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "FunctionDeclaration_gitHashFile": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_gitHashFile():
    typeof current.gitHashFile;
declare function use_old_FunctionDeclaration_gitHashFile(
    use: typeof old.gitHashFile);
use_old_FunctionDeclaration_gitHashFile(
    get_current_FunctionDeclaration_gitHashFile());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "FunctionDeclaration_hashFile": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_hashFile():
    typeof old.hashFile;
declare function use_current_FunctionDeclaration_hashFile(
    use: typeof current.hashFile);
use_current_FunctionDeclaration_hashFile(
    get_old_FunctionDeclaration_hashFile());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "FunctionDeclaration_hashFile": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_hashFile():
    typeof current.hashFile;
declare function use_old_FunctionDeclaration_hashFile(
    use: typeof old.hashFile);
use_old_FunctionDeclaration_hashFile(
    get_current_FunctionDeclaration_hashFile());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_Heap": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_Heap():
    Omit<old.Heap<any>,"">;
declare function use_current_ClassDeclaration_Heap(
    use: Omit<current.Heap<any>,"">);
use_current_ClassDeclaration_Heap(
    get_old_ClassDeclaration_Heap());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_Heap": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_Heap():
    Omit<current.Heap<any>,"">;
declare function use_old_ClassDeclaration_Heap(
    use: Omit<old.Heap<any>,"">);
use_old_ClassDeclaration_Heap(
    get_current_ClassDeclaration_Heap());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "InterfaceDeclaration_IComparer": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IComparer():
    old.IComparer<any>;
declare function use_current_InterfaceDeclaration_IComparer(
    use: current.IComparer<any>);
use_current_InterfaceDeclaration_IComparer(
    get_old_InterfaceDeclaration_IComparer());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "InterfaceDeclaration_IComparer": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IComparer():
    current.IComparer<any>;
declare function use_old_InterfaceDeclaration_IComparer(
    use: old.IComparer<any>);
use_old_InterfaceDeclaration_IComparer(
    get_current_InterfaceDeclaration_IComparer());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "InterfaceDeclaration_IHeapNode": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IHeapNode():
    old.IHeapNode<any>;
declare function use_current_InterfaceDeclaration_IHeapNode(
    use: current.IHeapNode<any>);
use_current_InterfaceDeclaration_IHeapNode(
    get_old_InterfaceDeclaration_IHeapNode());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "InterfaceDeclaration_IHeapNode": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IHeapNode():
    current.IHeapNode<any>;
declare function use_old_InterfaceDeclaration_IHeapNode(
    use: old.IHeapNode<any>);
use_old_InterfaceDeclaration_IHeapNode(
    get_current_InterfaceDeclaration_IHeapNode());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "InterfaceDeclaration_IPromiseTimer": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IPromiseTimer():
    old.IPromiseTimer;
declare function use_current_InterfaceDeclaration_IPromiseTimer(
    use: current.IPromiseTimer);
use_current_InterfaceDeclaration_IPromiseTimer(
    get_old_InterfaceDeclaration_IPromiseTimer());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "InterfaceDeclaration_IPromiseTimer": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IPromiseTimer():
    current.IPromiseTimer;
declare function use_old_InterfaceDeclaration_IPromiseTimer(
    use: old.IPromiseTimer);
use_old_InterfaceDeclaration_IPromiseTimer(
    get_current_InterfaceDeclaration_IPromiseTimer());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "InterfaceDeclaration_IPromiseTimerResult": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IPromiseTimerResult():
    old.IPromiseTimerResult;
declare function use_current_InterfaceDeclaration_IPromiseTimerResult(
    use: current.IPromiseTimerResult);
use_current_InterfaceDeclaration_IPromiseTimerResult(
    get_old_InterfaceDeclaration_IPromiseTimerResult());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "InterfaceDeclaration_IPromiseTimerResult": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IPromiseTimerResult():
    current.IPromiseTimerResult;
declare function use_old_InterfaceDeclaration_IPromiseTimerResult(
    use: old.IPromiseTimerResult);
use_old_InterfaceDeclaration_IPromiseTimerResult(
    get_current_InterfaceDeclaration_IPromiseTimerResult());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "InterfaceDeclaration_IRange": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IRange():
    old.IRange;
declare function use_current_InterfaceDeclaration_IRange(
    use: current.IRange);
use_current_InterfaceDeclaration_IRange(
    get_old_InterfaceDeclaration_IRange());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "InterfaceDeclaration_IRange": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IRange():
    current.IRange;
declare function use_old_InterfaceDeclaration_IRange(
    use: old.IRange);
use_old_InterfaceDeclaration_IRange(
    get_current_InterfaceDeclaration_IRange());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "InterfaceDeclaration_IRangeTrackerSnapshot": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IRangeTrackerSnapshot():
    old.IRangeTrackerSnapshot;
declare function use_current_InterfaceDeclaration_IRangeTrackerSnapshot(
    use: current.IRangeTrackerSnapshot);
use_current_InterfaceDeclaration_IRangeTrackerSnapshot(
    get_old_InterfaceDeclaration_IRangeTrackerSnapshot());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "InterfaceDeclaration_IRangeTrackerSnapshot": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IRangeTrackerSnapshot():
    current.IRangeTrackerSnapshot;
declare function use_old_InterfaceDeclaration_IRangeTrackerSnapshot(
    use: old.IRangeTrackerSnapshot);
use_old_InterfaceDeclaration_IRangeTrackerSnapshot(
    get_current_InterfaceDeclaration_IRangeTrackerSnapshot());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "VariableDeclaration_IsoBuffer": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_IsoBuffer():
    typeof old.IsoBuffer;
declare function use_current_VariableDeclaration_IsoBuffer(
    use: typeof current.IsoBuffer);
use_current_VariableDeclaration_IsoBuffer(
    get_old_VariableDeclaration_IsoBuffer());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "VariableDeclaration_IsoBuffer": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_IsoBuffer():
    typeof current.IsoBuffer;
declare function use_old_VariableDeclaration_IsoBuffer(
    use: typeof old.IsoBuffer);
use_old_VariableDeclaration_IsoBuffer(
    get_current_VariableDeclaration_IsoBuffer());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "TypeAliasDeclaration_IsoBuffer": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_IsoBuffer():
    old.IsoBuffer;
declare function use_current_TypeAliasDeclaration_IsoBuffer(
    use: current.IsoBuffer);
use_current_TypeAliasDeclaration_IsoBuffer(
    get_old_TypeAliasDeclaration_IsoBuffer());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "TypeAliasDeclaration_IsoBuffer": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_IsoBuffer():
    current.IsoBuffer;
declare function use_old_TypeAliasDeclaration_IsoBuffer(
    use: old.IsoBuffer);
use_old_TypeAliasDeclaration_IsoBuffer(
    get_current_TypeAliasDeclaration_IsoBuffer());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "TypeAliasDeclaration_IsomorphicPerformance": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_IsomorphicPerformance():
    old.IsomorphicPerformance;
declare function use_current_TypeAliasDeclaration_IsomorphicPerformance(
    use: current.IsomorphicPerformance);
use_current_TypeAliasDeclaration_IsomorphicPerformance(
    get_old_TypeAliasDeclaration_IsomorphicPerformance());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "TypeAliasDeclaration_IsomorphicPerformance": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_IsomorphicPerformance():
    current.IsomorphicPerformance;
declare function use_old_TypeAliasDeclaration_IsomorphicPerformance(
    use: old.IsomorphicPerformance);
use_old_TypeAliasDeclaration_IsomorphicPerformance(
    get_current_TypeAliasDeclaration_IsomorphicPerformance());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "InterfaceDeclaration_ITimer": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ITimer():
    old.ITimer;
declare function use_current_InterfaceDeclaration_ITimer(
    use: current.ITimer);
use_current_InterfaceDeclaration_ITimer(
    get_old_InterfaceDeclaration_ITimer());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "InterfaceDeclaration_ITimer": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ITimer():
    current.ITimer;
declare function use_old_InterfaceDeclaration_ITimer(
    use: old.ITimer);
use_old_InterfaceDeclaration_ITimer(
    get_current_InterfaceDeclaration_ITimer());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "InterfaceDeclaration_ITraceEvent": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ITraceEvent():
    old.ITraceEvent;
declare function use_current_InterfaceDeclaration_ITraceEvent(
    use: current.ITraceEvent);
use_current_InterfaceDeclaration_ITraceEvent(
    get_old_InterfaceDeclaration_ITraceEvent());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "InterfaceDeclaration_ITraceEvent": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ITraceEvent():
    current.ITraceEvent;
declare function use_old_InterfaceDeclaration_ITraceEvent(
    use: old.ITraceEvent);
use_old_InterfaceDeclaration_ITraceEvent(
    get_current_InterfaceDeclaration_ITraceEvent());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_Lazy": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_Lazy():
    Omit<old.Lazy<any>,"">;
declare function use_current_ClassDeclaration_Lazy(
    use: Omit<current.Lazy<any>,"">);
use_current_ClassDeclaration_Lazy(
    get_old_ClassDeclaration_Lazy());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_Lazy": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_Lazy():
    Omit<current.Lazy<any>,"">;
declare function use_old_ClassDeclaration_Lazy(
    use: Omit<old.Lazy<any>,"">);
use_old_ClassDeclaration_Lazy(
    get_current_ClassDeclaration_Lazy());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_LazyPromise": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_LazyPromise():
    Omit<old.LazyPromise<any>,"">;
declare function use_current_ClassDeclaration_LazyPromise(
    use: Omit<current.LazyPromise<any>,"">);
use_current_ClassDeclaration_LazyPromise(
    get_old_ClassDeclaration_LazyPromise());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_LazyPromise": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_LazyPromise():
    Omit<current.LazyPromise<any>,"">;
declare function use_old_ClassDeclaration_LazyPromise(
    use: Omit<old.LazyPromise<any>,"">);
use_old_ClassDeclaration_LazyPromise(
    get_current_ClassDeclaration_LazyPromise());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "VariableDeclaration_NumberComparer": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_NumberComparer():
    typeof old.NumberComparer;
declare function use_current_VariableDeclaration_NumberComparer(
    use: typeof current.NumberComparer);
use_current_VariableDeclaration_NumberComparer(
    get_old_VariableDeclaration_NumberComparer());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "VariableDeclaration_NumberComparer": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_NumberComparer():
    typeof current.NumberComparer;
declare function use_old_VariableDeclaration_NumberComparer(
    use: typeof old.NumberComparer);
use_old_VariableDeclaration_NumberComparer(
    get_current_VariableDeclaration_NumberComparer());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "VariableDeclaration_performance": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_performance():
    typeof old.performance;
declare function use_current_VariableDeclaration_performance(
    use: typeof current.performance);
use_current_VariableDeclaration_performance(
    get_old_VariableDeclaration_performance());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "VariableDeclaration_performance": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_performance():
    typeof current.performance;
declare function use_old_VariableDeclaration_performance(
    use: typeof old.performance);
use_old_VariableDeclaration_performance(
    get_current_VariableDeclaration_performance());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_PromiseCache": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_PromiseCache():
    Omit<old.PromiseCache<any,any>,"">;
declare function use_current_ClassDeclaration_PromiseCache(
    use: Omit<current.PromiseCache<any,any>,"">);
use_current_ClassDeclaration_PromiseCache(
    get_old_ClassDeclaration_PromiseCache());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_PromiseCache": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_PromiseCache():
    Omit<current.PromiseCache<any,any>,"">;
declare function use_old_ClassDeclaration_PromiseCache(
    use: Omit<old.PromiseCache<any,any>,"">);
use_old_ClassDeclaration_PromiseCache(
    get_current_ClassDeclaration_PromiseCache());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "TypeAliasDeclaration_PromiseCacheExpiry": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_PromiseCacheExpiry():
    old.PromiseCacheExpiry;
declare function use_current_TypeAliasDeclaration_PromiseCacheExpiry(
    use: current.PromiseCacheExpiry);
use_current_TypeAliasDeclaration_PromiseCacheExpiry(
    get_old_TypeAliasDeclaration_PromiseCacheExpiry());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "TypeAliasDeclaration_PromiseCacheExpiry": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_PromiseCacheExpiry():
    current.PromiseCacheExpiry;
declare function use_old_TypeAliasDeclaration_PromiseCacheExpiry(
    use: old.PromiseCacheExpiry);
use_old_TypeAliasDeclaration_PromiseCacheExpiry(
    get_current_TypeAliasDeclaration_PromiseCacheExpiry());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "InterfaceDeclaration_PromiseCacheOptions": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_PromiseCacheOptions():
    old.PromiseCacheOptions;
declare function use_current_InterfaceDeclaration_PromiseCacheOptions(
    use: current.PromiseCacheOptions);
use_current_InterfaceDeclaration_PromiseCacheOptions(
    get_old_InterfaceDeclaration_PromiseCacheOptions());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "InterfaceDeclaration_PromiseCacheOptions": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_PromiseCacheOptions():
    current.PromiseCacheOptions;
declare function use_old_InterfaceDeclaration_PromiseCacheOptions(
    use: old.PromiseCacheOptions);
use_old_InterfaceDeclaration_PromiseCacheOptions(
    get_current_InterfaceDeclaration_PromiseCacheOptions());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_PromiseTimer": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_PromiseTimer():
    Omit<old.PromiseTimer,"">;
declare function use_current_ClassDeclaration_PromiseTimer(
    use: Omit<current.PromiseTimer,"">);
use_current_ClassDeclaration_PromiseTimer(
    get_old_ClassDeclaration_PromiseTimer());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_PromiseTimer": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_PromiseTimer():
    Omit<current.PromiseTimer,"">;
declare function use_old_ClassDeclaration_PromiseTimer(
    use: Omit<old.PromiseTimer,"">);
use_old_ClassDeclaration_PromiseTimer(
    get_current_ClassDeclaration_PromiseTimer());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_RangeTracker": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_RangeTracker():
    Omit<old.RangeTracker,"">;
declare function use_current_ClassDeclaration_RangeTracker(
    use: Omit<current.RangeTracker,"">);
use_current_ClassDeclaration_RangeTracker(
    get_old_ClassDeclaration_RangeTracker());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_RangeTracker": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_RangeTracker():
    Omit<current.RangeTracker,"">;
declare function use_old_ClassDeclaration_RangeTracker(
    use: Omit<old.RangeTracker,"">);
use_old_ClassDeclaration_RangeTracker(
    get_current_ClassDeclaration_RangeTracker());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_RateLimiter": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_RateLimiter():
    Omit<old.RateLimiter,"">;
declare function use_current_ClassDeclaration_RateLimiter(
    use: Omit<current.RateLimiter,"">);
use_current_ClassDeclaration_RateLimiter(
    get_old_ClassDeclaration_RateLimiter());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_RateLimiter": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_RateLimiter():
    Omit<current.RateLimiter,"">;
declare function use_old_ClassDeclaration_RateLimiter(
    use: Omit<old.RateLimiter,"">);
use_old_ClassDeclaration_RateLimiter(
    get_current_ClassDeclaration_RateLimiter());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "FunctionDeclaration_safelyParseJSON": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_safelyParseJSON():
    typeof old.safelyParseJSON;
declare function use_current_FunctionDeclaration_safelyParseJSON(
    use: typeof current.safelyParseJSON);
use_current_FunctionDeclaration_safelyParseJSON(
    get_old_FunctionDeclaration_safelyParseJSON());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "FunctionDeclaration_safelyParseJSON": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_safelyParseJSON():
    typeof current.safelyParseJSON;
declare function use_old_FunctionDeclaration_safelyParseJSON(
    use: typeof old.safelyParseJSON);
use_old_FunctionDeclaration_safelyParseJSON(
    get_current_FunctionDeclaration_safelyParseJSON());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "FunctionDeclaration_stringToBuffer": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_stringToBuffer():
    typeof old.stringToBuffer;
declare function use_current_FunctionDeclaration_stringToBuffer(
    use: typeof current.stringToBuffer);
use_current_FunctionDeclaration_stringToBuffer(
    get_old_FunctionDeclaration_stringToBuffer());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "FunctionDeclaration_stringToBuffer": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_stringToBuffer():
    typeof current.stringToBuffer;
declare function use_old_FunctionDeclaration_stringToBuffer(
    use: typeof old.stringToBuffer);
use_old_FunctionDeclaration_stringToBuffer(
    get_current_FunctionDeclaration_stringToBuffer());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_TelemetryNullLogger": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_TelemetryNullLogger():
    Omit<old.TelemetryNullLogger,"">;
declare function use_current_ClassDeclaration_TelemetryNullLogger(
    use: Omit<current.TelemetryNullLogger,"">);
use_current_ClassDeclaration_TelemetryNullLogger(
    get_old_ClassDeclaration_TelemetryNullLogger());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_TelemetryNullLogger": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_TelemetryNullLogger():
    Omit<current.TelemetryNullLogger,"">;
declare function use_old_ClassDeclaration_TelemetryNullLogger(
    use: Omit<old.TelemetryNullLogger,"">);
use_old_ClassDeclaration_TelemetryNullLogger(
    get_current_ClassDeclaration_TelemetryNullLogger());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_Timer": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_Timer():
    Omit<old.Timer,"">;
declare function use_current_ClassDeclaration_Timer(
    use: Omit<current.Timer,"">);
use_current_ClassDeclaration_Timer(
    get_old_ClassDeclaration_Timer());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_Timer": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_Timer():
    Omit<current.Timer,"">;
declare function use_old_ClassDeclaration_Timer(
    use: Omit<old.Timer,"">);
use_old_ClassDeclaration_Timer(
    get_current_ClassDeclaration_Timer());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "VariableDeclaration_toUtf8": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_toUtf8():
    typeof old.toUtf8;
declare function use_current_VariableDeclaration_toUtf8(
    use: typeof current.toUtf8);
use_current_VariableDeclaration_toUtf8(
    get_old_VariableDeclaration_toUtf8());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "VariableDeclaration_toUtf8": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_toUtf8():
    typeof current.toUtf8;
declare function use_old_VariableDeclaration_toUtf8(
    use: typeof old.toUtf8);
use_old_VariableDeclaration_toUtf8(
    get_current_VariableDeclaration_toUtf8());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_Trace": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_Trace():
    Omit<old.Trace,"">;
declare function use_current_ClassDeclaration_Trace(
    use: Omit<current.Trace,"">);
use_current_ClassDeclaration_Trace(
    get_old_ClassDeclaration_Trace());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_Trace": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_Trace():
    Omit<current.Trace,"">;
declare function use_old_ClassDeclaration_Trace(
    use: Omit<old.Trace,"">);
use_old_ClassDeclaration_Trace(
    get_current_ClassDeclaration_Trace());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_TypedEventEmitter": {"forwardCompat": false}
*/
declare function get_old_ClassDeclaration_TypedEventEmitter():
    Omit<old.TypedEventEmitter<any>,"">;
declare function use_current_ClassDeclaration_TypedEventEmitter(
    use: Omit<current.TypedEventEmitter<any>,"">);
use_current_ClassDeclaration_TypedEventEmitter(
    get_old_ClassDeclaration_TypedEventEmitter());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "ClassDeclaration_TypedEventEmitter": {"backCompat": false}
*/
declare function get_current_ClassDeclaration_TypedEventEmitter():
    Omit<current.TypedEventEmitter<any>,"">;
declare function use_old_ClassDeclaration_TypedEventEmitter(
    use: Omit<old.TypedEventEmitter<any>,"">);
use_old_ClassDeclaration_TypedEventEmitter(
    get_current_ClassDeclaration_TypedEventEmitter());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "TypeAliasDeclaration_TypedEventTransform": {"forwardCompat": false}
*/
declare function get_old_TypeAliasDeclaration_TypedEventTransform():
    old.TypedEventTransform<any,any>;
declare function use_current_TypeAliasDeclaration_TypedEventTransform(
    use: current.TypedEventTransform<any,any>);
use_current_TypeAliasDeclaration_TypedEventTransform(
    get_old_TypeAliasDeclaration_TypedEventTransform());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "TypeAliasDeclaration_TypedEventTransform": {"backCompat": false}
*/
declare function get_current_TypeAliasDeclaration_TypedEventTransform():
    current.TypedEventTransform<any,any>;
declare function use_old_TypeAliasDeclaration_TypedEventTransform(
    use: old.TypedEventTransform<any,any>);
use_old_TypeAliasDeclaration_TypedEventTransform(
    get_current_TypeAliasDeclaration_TypedEventTransform());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "FunctionDeclaration_Uint8ArrayToArrayBuffer": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_Uint8ArrayToArrayBuffer():
    typeof old.Uint8ArrayToArrayBuffer;
declare function use_current_FunctionDeclaration_Uint8ArrayToArrayBuffer(
    use: typeof current.Uint8ArrayToArrayBuffer);
use_current_FunctionDeclaration_Uint8ArrayToArrayBuffer(
    get_old_FunctionDeclaration_Uint8ArrayToArrayBuffer());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "FunctionDeclaration_Uint8ArrayToArrayBuffer": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_Uint8ArrayToArrayBuffer():
    typeof current.Uint8ArrayToArrayBuffer;
declare function use_old_FunctionDeclaration_Uint8ArrayToArrayBuffer(
    use: typeof old.Uint8ArrayToArrayBuffer);
use_old_FunctionDeclaration_Uint8ArrayToArrayBuffer(
    get_current_FunctionDeclaration_Uint8ArrayToArrayBuffer());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "FunctionDeclaration_Uint8ArrayToString": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_Uint8ArrayToString():
    typeof old.Uint8ArrayToString;
declare function use_current_FunctionDeclaration_Uint8ArrayToString(
    use: typeof current.Uint8ArrayToString);
use_current_FunctionDeclaration_Uint8ArrayToString(
    get_old_FunctionDeclaration_Uint8ArrayToString());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "FunctionDeclaration_Uint8ArrayToString": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_Uint8ArrayToString():
    typeof current.Uint8ArrayToString;
declare function use_old_FunctionDeclaration_Uint8ArrayToString(
    use: typeof old.Uint8ArrayToString);
use_old_FunctionDeclaration_Uint8ArrayToString(
    get_current_FunctionDeclaration_Uint8ArrayToString());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "FunctionDeclaration_unreachableCase": {"forwardCompat": false}
*/
declare function get_old_FunctionDeclaration_unreachableCase():
    typeof old.unreachableCase;
declare function use_current_FunctionDeclaration_unreachableCase(
    use: typeof current.unreachableCase);
use_current_FunctionDeclaration_unreachableCase(
    get_old_FunctionDeclaration_unreachableCase());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken.0.32.1:
* "FunctionDeclaration_unreachableCase": {"backCompat": false}
*/
declare function get_current_FunctionDeclaration_unreachableCase():
    typeof current.unreachableCase;
declare function use_old_FunctionDeclaration_unreachableCase(
    use: typeof old.unreachableCase);
use_old_FunctionDeclaration_unreachableCase(
    get_current_FunctionDeclaration_unreachableCase());
