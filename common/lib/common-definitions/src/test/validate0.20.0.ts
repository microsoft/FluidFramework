/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-validator in @fluidframework/build-tools.
 */
import * as old from "@fluidframework/common-definitions-0.20.0";
import * as current from "../index";

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken:
* "ExtendEventProvider": {"forwardCompat": false}
*/
declare function get_old_ExtendEventProvider(): old.ExtendEventProvider<any,any,any>;
declare function use_current_ExtendEventProvider(use: current.ExtendEventProvider<any,any,any>);
use_current_ExtendEventProvider(get_old_ExtendEventProvider());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken:
* "ExtendEventProvider": {"backCompat": false}
*/
declare function get_current_ExtendEventProvider(): current.ExtendEventProvider<any,any,any>;
declare function use_old_ExtendEventProvider(use: old.ExtendEventProvider<any,any,any>);
use_old_ExtendEventProvider(get_current_ExtendEventProvider());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken:
* "IDisposable": {"forwardCompat": false}
*/
declare function get_old_IDisposable(): old.IDisposable;
declare function use_current_IDisposable(use: current.IDisposable);
use_current_IDisposable(get_old_IDisposable());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken:
* "IDisposable": {"backCompat": false}
*/
declare function get_current_IDisposable(): current.IDisposable;
declare function use_old_IDisposable(use: old.IDisposable);
use_old_IDisposable(get_current_IDisposable());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken:
* "IErrorEvent": {"forwardCompat": false}
*/
declare function get_old_IErrorEvent(): old.IErrorEvent;
declare function use_current_IErrorEvent(use: current.IErrorEvent);
use_current_IErrorEvent(get_old_IErrorEvent());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken:
* "IErrorEvent": {"backCompat": false}
*/
declare function get_current_IErrorEvent(): current.IErrorEvent;
declare function use_old_IErrorEvent(use: old.IErrorEvent);
use_old_IErrorEvent(get_current_IErrorEvent());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken:
* "IEvent": {"forwardCompat": false}
*/
declare function get_old_IEvent(): old.IEvent;
declare function use_current_IEvent(use: current.IEvent);
use_current_IEvent(get_old_IEvent());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken:
* "IEvent": {"backCompat": false}
*/
declare function get_current_IEvent(): current.IEvent;
declare function use_old_IEvent(use: old.IEvent);
use_old_IEvent(get_current_IEvent());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken:
* "IEventProvider": {"forwardCompat": false}
*/
declare function get_old_IEventProvider(): old.IEventProvider<any>;
declare function use_current_IEventProvider(use: current.IEventProvider<any>);
use_current_IEventProvider(get_old_IEventProvider());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken:
* "IEventProvider": {"backCompat": false}
*/
declare function get_current_IEventProvider(): current.IEventProvider<any>;
declare function use_old_IEventProvider(use: old.IEventProvider<any>);
use_old_IEventProvider(get_current_IEventProvider());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken:
* "IEventThisPlaceHolder": {"forwardCompat": false}
*/
declare function get_old_IEventThisPlaceHolder(): old.IEventThisPlaceHolder;
declare function use_current_IEventThisPlaceHolder(use: current.IEventThisPlaceHolder);
use_current_IEventThisPlaceHolder(get_old_IEventThisPlaceHolder());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken:
* "IEventThisPlaceHolder": {"backCompat": false}
*/
declare function get_current_IEventThisPlaceHolder(): current.IEventThisPlaceHolder;
declare function use_old_IEventThisPlaceHolder(use: old.IEventThisPlaceHolder);
use_old_IEventThisPlaceHolder(get_current_IEventThisPlaceHolder());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken:
* "IEventTransformer": {"forwardCompat": false}
*/
declare function get_old_IEventTransformer(): old.IEventTransformer<any,any>;
declare function use_current_IEventTransformer(use: current.IEventTransformer<any,any>);
use_current_IEventTransformer(get_old_IEventTransformer());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken:
* "IEventTransformer": {"backCompat": false}
*/
declare function get_current_IEventTransformer(): current.IEventTransformer<any,any>;
declare function use_old_IEventTransformer(use: old.IEventTransformer<any,any>);
use_old_IEventTransformer(get_current_IEventTransformer());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken:
* "ITelemetryBaseEvent": {"forwardCompat": false}
*/
declare function get_old_ITelemetryBaseEvent(): old.ITelemetryBaseEvent;
declare function use_current_ITelemetryBaseEvent(use: current.ITelemetryBaseEvent);
use_current_ITelemetryBaseEvent(get_old_ITelemetryBaseEvent());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken:
* "ITelemetryBaseEvent": {"backCompat": false}
declare function get_current_ITelemetryBaseEvent(): current.ITelemetryBaseEvent;
declare function use_old_ITelemetryBaseEvent(use: old.ITelemetryBaseEvent);
use_old_ITelemetryBaseEvent(get_current_ITelemetryBaseEvent());
*/

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken:
* "ITelemetryBaseLogger": {"forwardCompat": false}
*/
declare function get_old_ITelemetryBaseLogger(): old.ITelemetryBaseLogger;
declare function use_current_ITelemetryBaseLogger(use: current.ITelemetryBaseLogger);
use_current_ITelemetryBaseLogger(get_old_ITelemetryBaseLogger());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken:
* "ITelemetryBaseLogger": {"backCompat": false}
*/
declare function get_current_ITelemetryBaseLogger(): current.ITelemetryBaseLogger;
declare function use_old_ITelemetryBaseLogger(use: old.ITelemetryBaseLogger);
use_old_ITelemetryBaseLogger(get_current_ITelemetryBaseLogger());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken:
* "ITelemetryErrorEvent": {"forwardCompat": false}
*/
declare function get_old_ITelemetryErrorEvent(): old.ITelemetryErrorEvent;
declare function use_current_ITelemetryErrorEvent(use: current.ITelemetryErrorEvent);
use_current_ITelemetryErrorEvent(get_old_ITelemetryErrorEvent());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken:
* "ITelemetryErrorEvent": {"backCompat": false}
declare function get_current_ITelemetryErrorEvent(): current.ITelemetryErrorEvent;
declare function use_old_ITelemetryErrorEvent(use: old.ITelemetryErrorEvent);
use_old_ITelemetryErrorEvent(get_current_ITelemetryErrorEvent());
*/

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken:
* "ITelemetryGenericEvent": {"forwardCompat": false}
*/
declare function get_old_ITelemetryGenericEvent(): old.ITelemetryGenericEvent;
declare function use_current_ITelemetryGenericEvent(use: current.ITelemetryGenericEvent);
use_current_ITelemetryGenericEvent(get_old_ITelemetryGenericEvent());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken:
* "ITelemetryGenericEvent": {"backCompat": false}
declare function get_current_ITelemetryGenericEvent(): current.ITelemetryGenericEvent;
declare function use_old_ITelemetryGenericEvent(use: old.ITelemetryGenericEvent);
use_old_ITelemetryGenericEvent(get_current_ITelemetryGenericEvent());
*/

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken:
* "ITelemetryLogger": {"forwardCompat": false}
*/
declare function get_old_ITelemetryLogger(): old.ITelemetryLogger;
declare function use_current_ITelemetryLogger(use: current.ITelemetryLogger);
use_current_ITelemetryLogger(get_old_ITelemetryLogger());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken:
* "ITelemetryLogger": {"backCompat": false}
*/
declare function get_current_ITelemetryLogger(): current.ITelemetryLogger;
declare function use_old_ITelemetryLogger(use: old.ITelemetryLogger);
use_old_ITelemetryLogger(get_current_ITelemetryLogger());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken:
* "ITelemetryPerformanceEvent": {"forwardCompat": false}
*/
declare function get_old_ITelemetryPerformanceEvent(): old.ITelemetryPerformanceEvent;
declare function use_current_ITelemetryPerformanceEvent(use: current.ITelemetryPerformanceEvent);
use_current_ITelemetryPerformanceEvent(get_old_ITelemetryPerformanceEvent());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken:
* "ITelemetryPerformanceEvent": {"backCompat": false}
declare function get_current_ITelemetryPerformanceEvent(): current.ITelemetryPerformanceEvent;
declare function use_old_ITelemetryPerformanceEvent(use: old.ITelemetryPerformanceEvent);
use_old_ITelemetryPerformanceEvent(get_current_ITelemetryPerformanceEvent());
*/

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken:
* "ITelemetryProperties": {"forwardCompat": false}
*/
declare function get_old_ITelemetryProperties(): old.ITelemetryProperties;
declare function use_current_ITelemetryProperties(use: current.ITelemetryProperties);
use_current_ITelemetryProperties(get_old_ITelemetryProperties());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken:
* "ITelemetryProperties": {"backCompat": false}
declare function get_current_ITelemetryProperties(): current.ITelemetryProperties;
declare function use_old_ITelemetryProperties(use: old.ITelemetryProperties);
use_old_ITelemetryProperties(get_current_ITelemetryProperties());
*/

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken:
* "ReplaceIEventThisPlaceHolder": {"forwardCompat": false}
*/
declare function get_old_ReplaceIEventThisPlaceHolder(): old.ReplaceIEventThisPlaceHolder<any,any>;
declare function use_current_ReplaceIEventThisPlaceHolder(use: current.ReplaceIEventThisPlaceHolder<any,any>);
use_current_ReplaceIEventThisPlaceHolder(get_old_ReplaceIEventThisPlaceHolder());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken:
* "ReplaceIEventThisPlaceHolder": {"backCompat": false}
*/
declare function get_current_ReplaceIEventThisPlaceHolder(): current.ReplaceIEventThisPlaceHolder<any,any>;
declare function use_old_ReplaceIEventThisPlaceHolder(use: old.ReplaceIEventThisPlaceHolder<any,any>);
use_old_ReplaceIEventThisPlaceHolder(get_current_ReplaceIEventThisPlaceHolder());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken:
* "TelemetryEventCategory": {"forwardCompat": false}
*/
declare function get_old_TelemetryEventCategory(): old.TelemetryEventCategory;
declare function use_current_TelemetryEventCategory(use: current.TelemetryEventCategory);
use_current_TelemetryEventCategory(get_old_TelemetryEventCategory());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken:
* "TelemetryEventCategory": {"backCompat": false}
*/
declare function get_current_TelemetryEventCategory(): current.TelemetryEventCategory;
declare function use_old_TelemetryEventCategory(use: old.TelemetryEventCategory);
use_old_TelemetryEventCategory(get_current_TelemetryEventCategory());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken:
* "TelemetryEventPropertyType": {"forwardCompat": false}
*/
declare function get_old_TelemetryEventPropertyType(): old.TelemetryEventPropertyType;
declare function use_current_TelemetryEventPropertyType(use: current.TelemetryEventPropertyType);
use_current_TelemetryEventPropertyType(get_old_TelemetryEventPropertyType());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken:
* "TelemetryEventPropertyType": {"backCompat": false}
*/
declare function get_current_TelemetryEventPropertyType(): current.TelemetryEventPropertyType;
declare function use_old_TelemetryEventPropertyType(use: old.TelemetryEventPropertyType);
use_old_TelemetryEventPropertyType(get_current_TelemetryEventPropertyType());

/*
* validate forward compat by using old type in place of current type
* to disable, add in package.json under typeValidation.broken:
* "TransformedEvent": {"forwardCompat": false}
*/
declare function get_old_TransformedEvent(): old.TransformedEvent<any,any,any>;
declare function use_current_TransformedEvent(use: current.TransformedEvent<any,any,any>);
use_current_TransformedEvent(get_old_TransformedEvent());

/*
* validate back compat by using current type in place of old type
* to disable, add in package.json under typeValidation.broken:
* "TransformedEvent": {"backCompat": false}
*/
declare function get_current_TransformedEvent(): current.TransformedEvent<any,any,any>;
declare function use_old_TransformedEvent(use: old.TransformedEvent<any,any,any>);
use_old_TransformedEvent(get_current_TransformedEvent());
