/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 * Generated by fluid-type-validator in @fluidframework/build-tools.
 */
import * as old from "@fluidframework/core-interfaces-0.39.8";
import * as current from "../../index";

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IFluidCodeDetails": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidCodeDetails():
    old.IFluidCodeDetails;
declare function use_current_InterfaceDeclaration_IFluidCodeDetails(
    use: current.IFluidCodeDetails);
use_current_InterfaceDeclaration_IFluidCodeDetails(
    get_old_InterfaceDeclaration_IFluidCodeDetails());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IFluidCodeDetails": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidCodeDetails():
    current.IFluidCodeDetails;
declare function use_old_InterfaceDeclaration_IFluidCodeDetails(
    use: old.IFluidCodeDetails);
use_old_InterfaceDeclaration_IFluidCodeDetails(
    get_current_InterfaceDeclaration_IFluidCodeDetails());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "VariableDeclaration_IFluidCodeDetailsComparer": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_IFluidCodeDetailsComparer():
    typeof old.IFluidCodeDetailsComparer;
declare function use_current_VariableDeclaration_IFluidCodeDetailsComparer(
    use: typeof current.IFluidCodeDetailsComparer);
use_current_VariableDeclaration_IFluidCodeDetailsComparer(
    get_old_VariableDeclaration_IFluidCodeDetailsComparer());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "VariableDeclaration_IFluidCodeDetailsComparer": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_IFluidCodeDetailsComparer():
    typeof current.IFluidCodeDetailsComparer;
declare function use_old_VariableDeclaration_IFluidCodeDetailsComparer(
    use: typeof old.IFluidCodeDetailsComparer);
use_old_VariableDeclaration_IFluidCodeDetailsComparer(
    get_current_VariableDeclaration_IFluidCodeDetailsComparer());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IFluidCodeDetailsComparer": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidCodeDetailsComparer():
    old.IFluidCodeDetailsComparer;
declare function use_current_InterfaceDeclaration_IFluidCodeDetailsComparer(
    use: current.IFluidCodeDetailsComparer);
use_current_InterfaceDeclaration_IFluidCodeDetailsComparer(
    get_old_InterfaceDeclaration_IFluidCodeDetailsComparer());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IFluidCodeDetailsComparer": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidCodeDetailsComparer():
    current.IFluidCodeDetailsComparer;
declare function use_old_InterfaceDeclaration_IFluidCodeDetailsComparer(
    use: old.IFluidCodeDetailsComparer);
use_old_InterfaceDeclaration_IFluidCodeDetailsComparer(
    get_current_InterfaceDeclaration_IFluidCodeDetailsComparer());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IFluidCodeDetailsConfig": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidCodeDetailsConfig():
    old.IFluidCodeDetailsConfig;
declare function use_current_InterfaceDeclaration_IFluidCodeDetailsConfig(
    use: current.IFluidCodeDetailsConfig);
use_current_InterfaceDeclaration_IFluidCodeDetailsConfig(
    get_old_InterfaceDeclaration_IFluidCodeDetailsConfig());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IFluidCodeDetailsConfig": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidCodeDetailsConfig():
    current.IFluidCodeDetailsConfig;
declare function use_old_InterfaceDeclaration_IFluidCodeDetailsConfig(
    use: old.IFluidCodeDetailsConfig);
use_old_InterfaceDeclaration_IFluidCodeDetailsConfig(
    get_current_InterfaceDeclaration_IFluidCodeDetailsConfig());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "RemovedVariableDeclaration_IFluidConfiguration": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_IFluidConfiguration():
    typeof old.IFluidConfiguration;
declare function use_current_RemovedVariableDeclaration_IFluidConfiguration(
    // @ts-expect-error compatibility expected to be broken
    use: typeof current.IFluidConfiguration);
use_current_RemovedVariableDeclaration_IFluidConfiguration(
    get_old_VariableDeclaration_IFluidConfiguration());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "RemovedVariableDeclaration_IFluidConfiguration": {"backCompat": false}
*/
declare function get_current_RemovedVariableDeclaration_IFluidConfiguration():
    // @ts-expect-error compatibility expected to be broken
    typeof current.IFluidConfiguration;
declare function use_old_VariableDeclaration_IFluidConfiguration(
    use: typeof old.IFluidConfiguration);
use_old_VariableDeclaration_IFluidConfiguration(
    get_current_RemovedVariableDeclaration_IFluidConfiguration());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "RemovedInterfaceDeclaration_IFluidConfiguration": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidConfiguration():
    old.IFluidConfiguration;
declare function use_current_RemovedInterfaceDeclaration_IFluidConfiguration(
    // @ts-expect-error compatibility expected to be broken
    use: current.IFluidConfiguration);
use_current_RemovedInterfaceDeclaration_IFluidConfiguration(
    get_old_InterfaceDeclaration_IFluidConfiguration());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "RemovedInterfaceDeclaration_IFluidConfiguration": {"backCompat": false}
*/
declare function get_current_RemovedInterfaceDeclaration_IFluidConfiguration():
    // @ts-expect-error compatibility expected to be broken
    current.IFluidConfiguration;
declare function use_old_InterfaceDeclaration_IFluidConfiguration(
    use: old.IFluidConfiguration);
use_old_InterfaceDeclaration_IFluidConfiguration(
    get_current_RemovedInterfaceDeclaration_IFluidConfiguration());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "VariableDeclaration_IFluidHandle": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_IFluidHandle():
    typeof old.IFluidHandle;
declare function use_current_VariableDeclaration_IFluidHandle(
    use: typeof current.IFluidHandle);
use_current_VariableDeclaration_IFluidHandle(
    get_old_VariableDeclaration_IFluidHandle());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "VariableDeclaration_IFluidHandle": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_IFluidHandle():
    typeof current.IFluidHandle;
declare function use_old_VariableDeclaration_IFluidHandle(
    use: typeof old.IFluidHandle);
use_old_VariableDeclaration_IFluidHandle(
    get_current_VariableDeclaration_IFluidHandle());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IFluidHandle": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidHandle():
    old.IFluidHandle;
declare function use_current_InterfaceDeclaration_IFluidHandle(
    use: current.IFluidHandle);
use_current_InterfaceDeclaration_IFluidHandle(
    get_old_InterfaceDeclaration_IFluidHandle());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IFluidHandle": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidHandle():
    current.IFluidHandle;
declare function use_old_InterfaceDeclaration_IFluidHandle(
    use: old.IFluidHandle);
use_old_InterfaceDeclaration_IFluidHandle(
    get_current_InterfaceDeclaration_IFluidHandle());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "VariableDeclaration_IFluidHandleContext": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_IFluidHandleContext():
    typeof old.IFluidHandleContext;
declare function use_current_VariableDeclaration_IFluidHandleContext(
    use: typeof current.IFluidHandleContext);
use_current_VariableDeclaration_IFluidHandleContext(
    get_old_VariableDeclaration_IFluidHandleContext());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "VariableDeclaration_IFluidHandleContext": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_IFluidHandleContext():
    typeof current.IFluidHandleContext;
declare function use_old_VariableDeclaration_IFluidHandleContext(
    use: typeof old.IFluidHandleContext);
use_old_VariableDeclaration_IFluidHandleContext(
    get_current_VariableDeclaration_IFluidHandleContext());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IFluidHandleContext": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidHandleContext():
    old.IFluidHandleContext;
declare function use_current_InterfaceDeclaration_IFluidHandleContext(
    use: current.IFluidHandleContext);
use_current_InterfaceDeclaration_IFluidHandleContext(
    get_old_InterfaceDeclaration_IFluidHandleContext());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IFluidHandleContext": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidHandleContext():
    current.IFluidHandleContext;
declare function use_old_InterfaceDeclaration_IFluidHandleContext(
    use: old.IFluidHandleContext);
use_old_InterfaceDeclaration_IFluidHandleContext(
    get_current_InterfaceDeclaration_IFluidHandleContext());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "VariableDeclaration_IFluidLoadable": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_IFluidLoadable():
    typeof old.IFluidLoadable;
declare function use_current_VariableDeclaration_IFluidLoadable(
    use: typeof current.IFluidLoadable);
use_current_VariableDeclaration_IFluidLoadable(
    get_old_VariableDeclaration_IFluidLoadable());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "VariableDeclaration_IFluidLoadable": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_IFluidLoadable():
    typeof current.IFluidLoadable;
declare function use_old_VariableDeclaration_IFluidLoadable(
    use: typeof old.IFluidLoadable);
use_old_VariableDeclaration_IFluidLoadable(
    get_current_VariableDeclaration_IFluidLoadable());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IFluidLoadable": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidLoadable():
    old.IFluidLoadable;
declare function use_current_InterfaceDeclaration_IFluidLoadable(
    use: current.IFluidLoadable);
use_current_InterfaceDeclaration_IFluidLoadable(
    get_old_InterfaceDeclaration_IFluidLoadable());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IFluidLoadable": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidLoadable():
    current.IFluidLoadable;
declare function use_old_InterfaceDeclaration_IFluidLoadable(
    use: old.IFluidLoadable);
use_old_InterfaceDeclaration_IFluidLoadable(
    get_current_InterfaceDeclaration_IFluidLoadable());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IFluidObject": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidObject():
    old.IFluidObject;
declare function use_current_InterfaceDeclaration_IFluidObject(
    use: current.IFluidObject);
use_current_InterfaceDeclaration_IFluidObject(
    get_old_InterfaceDeclaration_IFluidObject());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IFluidObject": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidObject():
    current.IFluidObject;
declare function use_old_InterfaceDeclaration_IFluidObject(
    use: old.IFluidObject);
use_old_InterfaceDeclaration_IFluidObject(
    get_current_InterfaceDeclaration_IFluidObject());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IFluidPackage": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidPackage():
    old.IFluidPackage;
declare function use_current_InterfaceDeclaration_IFluidPackage(
    use: current.IFluidPackage);
use_current_InterfaceDeclaration_IFluidPackage(
    get_old_InterfaceDeclaration_IFluidPackage());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IFluidPackage": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidPackage():
    current.IFluidPackage;
declare function use_old_InterfaceDeclaration_IFluidPackage(
    use: old.IFluidPackage);
use_old_InterfaceDeclaration_IFluidPackage(
    get_current_InterfaceDeclaration_IFluidPackage());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IFluidPackageEnvironment": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidPackageEnvironment():
    old.IFluidPackageEnvironment;
declare function use_current_InterfaceDeclaration_IFluidPackageEnvironment(
    use: current.IFluidPackageEnvironment);
use_current_InterfaceDeclaration_IFluidPackageEnvironment(
    get_old_InterfaceDeclaration_IFluidPackageEnvironment());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IFluidPackageEnvironment": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidPackageEnvironment():
    current.IFluidPackageEnvironment;
declare function use_old_InterfaceDeclaration_IFluidPackageEnvironment(
    use: old.IFluidPackageEnvironment);
use_old_InterfaceDeclaration_IFluidPackageEnvironment(
    get_current_InterfaceDeclaration_IFluidPackageEnvironment());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "VariableDeclaration_IFluidRouter": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_IFluidRouter():
    typeof old.IFluidRouter;
declare function use_current_VariableDeclaration_IFluidRouter(
    use: typeof current.IFluidRouter);
use_current_VariableDeclaration_IFluidRouter(
    get_old_VariableDeclaration_IFluidRouter());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "VariableDeclaration_IFluidRouter": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_IFluidRouter():
    typeof current.IFluidRouter;
declare function use_old_VariableDeclaration_IFluidRouter(
    use: typeof old.IFluidRouter);
use_old_VariableDeclaration_IFluidRouter(
    get_current_VariableDeclaration_IFluidRouter());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IFluidRouter": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidRouter():
    old.IFluidRouter;
declare function use_current_InterfaceDeclaration_IFluidRouter(
    use: current.IFluidRouter);
use_current_InterfaceDeclaration_IFluidRouter(
    get_old_InterfaceDeclaration_IFluidRouter());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IFluidRouter": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidRouter():
    current.IFluidRouter;
declare function use_old_InterfaceDeclaration_IFluidRouter(
    use: old.IFluidRouter);
use_old_InterfaceDeclaration_IFluidRouter(
    get_current_InterfaceDeclaration_IFluidRouter());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "VariableDeclaration_IFluidRunnable": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_IFluidRunnable():
    typeof old.IFluidRunnable;
declare function use_current_VariableDeclaration_IFluidRunnable(
    use: typeof current.IFluidRunnable);
use_current_VariableDeclaration_IFluidRunnable(
    get_old_VariableDeclaration_IFluidRunnable());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "VariableDeclaration_IFluidRunnable": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_IFluidRunnable():
    typeof current.IFluidRunnable;
declare function use_old_VariableDeclaration_IFluidRunnable(
    use: typeof old.IFluidRunnable);
use_old_VariableDeclaration_IFluidRunnable(
    get_current_VariableDeclaration_IFluidRunnable());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IFluidRunnable": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidRunnable():
    old.IFluidRunnable;
declare function use_current_InterfaceDeclaration_IFluidRunnable(
    use: current.IFluidRunnable);
use_current_InterfaceDeclaration_IFluidRunnable(
    get_old_InterfaceDeclaration_IFluidRunnable());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IFluidRunnable": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidRunnable():
    current.IFluidRunnable;
declare function use_old_InterfaceDeclaration_IFluidRunnable(
    use: old.IFluidRunnable);
use_old_InterfaceDeclaration_IFluidRunnable(
    get_current_InterfaceDeclaration_IFluidRunnable());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "VariableDeclaration_IFluidSerializer": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_IFluidSerializer():
    typeof old.IFluidSerializer;
declare function use_current_VariableDeclaration_IFluidSerializer(
    use: typeof current.IFluidSerializer);
use_current_VariableDeclaration_IFluidSerializer(
    get_old_VariableDeclaration_IFluidSerializer());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "VariableDeclaration_IFluidSerializer": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_IFluidSerializer():
    typeof current.IFluidSerializer;
declare function use_old_VariableDeclaration_IFluidSerializer(
    use: typeof old.IFluidSerializer);
use_old_VariableDeclaration_IFluidSerializer(
    get_current_VariableDeclaration_IFluidSerializer());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IFluidSerializer": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IFluidSerializer():
    old.IFluidSerializer;
declare function use_current_InterfaceDeclaration_IFluidSerializer(
    use: current.IFluidSerializer);
use_current_InterfaceDeclaration_IFluidSerializer(
    get_old_InterfaceDeclaration_IFluidSerializer());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IFluidSerializer": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IFluidSerializer():
    current.IFluidSerializer;
declare function use_old_InterfaceDeclaration_IFluidSerializer(
    use: old.IFluidSerializer);
use_old_InterfaceDeclaration_IFluidSerializer(
    get_current_InterfaceDeclaration_IFluidSerializer());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IProvideFluidCodeDetailsComparer": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IProvideFluidCodeDetailsComparer():
    old.IProvideFluidCodeDetailsComparer;
declare function use_current_InterfaceDeclaration_IProvideFluidCodeDetailsComparer(
    use: current.IProvideFluidCodeDetailsComparer);
use_current_InterfaceDeclaration_IProvideFluidCodeDetailsComparer(
    get_old_InterfaceDeclaration_IProvideFluidCodeDetailsComparer());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IProvideFluidCodeDetailsComparer": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IProvideFluidCodeDetailsComparer():
    current.IProvideFluidCodeDetailsComparer;
declare function use_old_InterfaceDeclaration_IProvideFluidCodeDetailsComparer(
    use: old.IProvideFluidCodeDetailsComparer);
use_old_InterfaceDeclaration_IProvideFluidCodeDetailsComparer(
    get_current_InterfaceDeclaration_IProvideFluidCodeDetailsComparer());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "RemovedInterfaceDeclaration_IProvideFluidConfiguration": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IProvideFluidConfiguration():
    old.IProvideFluidConfiguration;
declare function use_current_RemovedInterfaceDeclaration_IProvideFluidConfiguration(
    // @ts-expect-error compatibility expected to be broken
    use: current.IProvideFluidConfiguration);
use_current_RemovedInterfaceDeclaration_IProvideFluidConfiguration(
    get_old_InterfaceDeclaration_IProvideFluidConfiguration());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "RemovedInterfaceDeclaration_IProvideFluidConfiguration": {"backCompat": false}
*/
declare function get_current_RemovedInterfaceDeclaration_IProvideFluidConfiguration():
    // @ts-expect-error compatibility expected to be broken
    current.IProvideFluidConfiguration;
declare function use_old_InterfaceDeclaration_IProvideFluidConfiguration(
    use: old.IProvideFluidConfiguration);
use_old_InterfaceDeclaration_IProvideFluidConfiguration(
    get_current_RemovedInterfaceDeclaration_IProvideFluidConfiguration());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IProvideFluidHandle": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IProvideFluidHandle():
    old.IProvideFluidHandle;
declare function use_current_InterfaceDeclaration_IProvideFluidHandle(
    use: current.IProvideFluidHandle);
use_current_InterfaceDeclaration_IProvideFluidHandle(
    get_old_InterfaceDeclaration_IProvideFluidHandle());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IProvideFluidHandle": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IProvideFluidHandle():
    current.IProvideFluidHandle;
declare function use_old_InterfaceDeclaration_IProvideFluidHandle(
    use: old.IProvideFluidHandle);
use_old_InterfaceDeclaration_IProvideFluidHandle(
    get_current_InterfaceDeclaration_IProvideFluidHandle());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IProvideFluidHandleContext": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IProvideFluidHandleContext():
    old.IProvideFluidHandleContext;
declare function use_current_InterfaceDeclaration_IProvideFluidHandleContext(
    use: current.IProvideFluidHandleContext);
use_current_InterfaceDeclaration_IProvideFluidHandleContext(
    get_old_InterfaceDeclaration_IProvideFluidHandleContext());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IProvideFluidHandleContext": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IProvideFluidHandleContext():
    current.IProvideFluidHandleContext;
declare function use_old_InterfaceDeclaration_IProvideFluidHandleContext(
    use: old.IProvideFluidHandleContext);
use_old_InterfaceDeclaration_IProvideFluidHandleContext(
    get_current_InterfaceDeclaration_IProvideFluidHandleContext());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IProvideFluidLoadable": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IProvideFluidLoadable():
    old.IProvideFluidLoadable;
declare function use_current_InterfaceDeclaration_IProvideFluidLoadable(
    use: current.IProvideFluidLoadable);
use_current_InterfaceDeclaration_IProvideFluidLoadable(
    get_old_InterfaceDeclaration_IProvideFluidLoadable());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IProvideFluidLoadable": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IProvideFluidLoadable():
    current.IProvideFluidLoadable;
declare function use_old_InterfaceDeclaration_IProvideFluidLoadable(
    use: old.IProvideFluidLoadable);
use_old_InterfaceDeclaration_IProvideFluidLoadable(
    get_current_InterfaceDeclaration_IProvideFluidLoadable());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IProvideFluidRouter": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IProvideFluidRouter():
    old.IProvideFluidRouter;
declare function use_current_InterfaceDeclaration_IProvideFluidRouter(
    use: current.IProvideFluidRouter);
use_current_InterfaceDeclaration_IProvideFluidRouter(
    get_old_InterfaceDeclaration_IProvideFluidRouter());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IProvideFluidRouter": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IProvideFluidRouter():
    current.IProvideFluidRouter;
declare function use_old_InterfaceDeclaration_IProvideFluidRouter(
    use: old.IProvideFluidRouter);
use_old_InterfaceDeclaration_IProvideFluidRouter(
    get_current_InterfaceDeclaration_IProvideFluidRouter());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IProvideFluidRunnable": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IProvideFluidRunnable():
    old.IProvideFluidRunnable;
declare function use_current_InterfaceDeclaration_IProvideFluidRunnable(
    use: current.IProvideFluidRunnable);
use_current_InterfaceDeclaration_IProvideFluidRunnable(
    get_old_InterfaceDeclaration_IProvideFluidRunnable());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IProvideFluidRunnable": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IProvideFluidRunnable():
    current.IProvideFluidRunnable;
declare function use_old_InterfaceDeclaration_IProvideFluidRunnable(
    use: old.IProvideFluidRunnable);
use_old_InterfaceDeclaration_IProvideFluidRunnable(
    get_current_InterfaceDeclaration_IProvideFluidRunnable());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IProvideFluidSerializer": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IProvideFluidSerializer():
    old.IProvideFluidSerializer;
declare function use_current_InterfaceDeclaration_IProvideFluidSerializer(
    use: current.IProvideFluidSerializer);
use_current_InterfaceDeclaration_IProvideFluidSerializer(
    get_old_InterfaceDeclaration_IProvideFluidSerializer());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IProvideFluidSerializer": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IProvideFluidSerializer():
    current.IProvideFluidSerializer;
declare function use_old_InterfaceDeclaration_IProvideFluidSerializer(
    use: old.IProvideFluidSerializer);
use_old_InterfaceDeclaration_IProvideFluidSerializer(
    get_current_InterfaceDeclaration_IProvideFluidSerializer());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IRequest": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IRequest():
    old.IRequest;
declare function use_current_InterfaceDeclaration_IRequest(
    use: current.IRequest);
use_current_InterfaceDeclaration_IRequest(
    get_old_InterfaceDeclaration_IRequest());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IRequest": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IRequest():
    current.IRequest;
declare function use_old_InterfaceDeclaration_IRequest(
    use: old.IRequest);
use_old_InterfaceDeclaration_IRequest(
    get_current_InterfaceDeclaration_IRequest());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IRequestHeader": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IRequestHeader():
    old.IRequestHeader;
declare function use_current_InterfaceDeclaration_IRequestHeader(
    use: current.IRequestHeader);
use_current_InterfaceDeclaration_IRequestHeader(
    get_old_InterfaceDeclaration_IRequestHeader());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IRequestHeader": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IRequestHeader():
    current.IRequestHeader;
declare function use_old_InterfaceDeclaration_IRequestHeader(
    use: old.IRequestHeader);
use_old_InterfaceDeclaration_IRequestHeader(
    get_current_InterfaceDeclaration_IRequestHeader());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IResponse": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_IResponse():
    old.IResponse;
declare function use_current_InterfaceDeclaration_IResponse(
    use: current.IResponse);
use_current_InterfaceDeclaration_IResponse(
    get_old_InterfaceDeclaration_IResponse());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_IResponse": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_IResponse():
    current.IResponse;
declare function use_old_InterfaceDeclaration_IResponse(
    use: old.IResponse);
use_old_InterfaceDeclaration_IResponse(
    get_current_InterfaceDeclaration_IResponse());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_ISerializedHandle": {"forwardCompat": false}
*/
declare function get_old_InterfaceDeclaration_ISerializedHandle():
    old.ISerializedHandle;
declare function use_current_InterfaceDeclaration_ISerializedHandle(
    use: current.ISerializedHandle);
use_current_InterfaceDeclaration_ISerializedHandle(
    get_old_InterfaceDeclaration_ISerializedHandle());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "InterfaceDeclaration_ISerializedHandle": {"backCompat": false}
*/
declare function get_current_InterfaceDeclaration_ISerializedHandle():
    current.ISerializedHandle;
declare function use_old_InterfaceDeclaration_ISerializedHandle(
    use: old.ISerializedHandle);
use_old_InterfaceDeclaration_ISerializedHandle(
    get_current_InterfaceDeclaration_ISerializedHandle());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "VariableDeclaration_isFluidCodeDetails": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_isFluidCodeDetails():
    typeof old.isFluidCodeDetails;
declare function use_current_VariableDeclaration_isFluidCodeDetails(
    use: typeof current.isFluidCodeDetails);
use_current_VariableDeclaration_isFluidCodeDetails(
    get_old_VariableDeclaration_isFluidCodeDetails());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "VariableDeclaration_isFluidCodeDetails": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_isFluidCodeDetails():
    typeof current.isFluidCodeDetails;
declare function use_old_VariableDeclaration_isFluidCodeDetails(
    use: typeof old.isFluidCodeDetails);
use_old_VariableDeclaration_isFluidCodeDetails(
    get_current_VariableDeclaration_isFluidCodeDetails());

/*
* Validate forward compat by using old type in place of current type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "VariableDeclaration_isFluidPackage": {"forwardCompat": false}
*/
declare function get_old_VariableDeclaration_isFluidPackage():
    typeof old.isFluidPackage;
declare function use_current_VariableDeclaration_isFluidPackage(
    use: typeof current.isFluidPackage);
use_current_VariableDeclaration_isFluidPackage(
    get_old_VariableDeclaration_isFluidPackage());

/*
* Validate back compat by using current type in place of old type
* If breaking change required, add in package.json under typeValidation.broken.0.39.8:
* "VariableDeclaration_isFluidPackage": {"backCompat": false}
*/
declare function get_current_VariableDeclaration_isFluidPackage():
    typeof current.isFluidPackage;
declare function use_old_VariableDeclaration_isFluidPackage(
    use: typeof old.isFluidPackage);
use_old_VariableDeclaration_isFluidPackage(
    get_current_VariableDeclaration_isFluidPackage());
