{
  "$schema": "https://developer.microsoft.com/json-schemas/api-extractor/v7/api-extractor.schema.json",

  /**
   * (REQUIRED) Specifies the .d.ts file to be used as the starting point for analysis.  API Extractor
   * analyzes the symbols exported by this module.
   *
   * The file extension must be ".d.ts" and not ".ts".
   * The path is resolved relative to the "rootFolder" location described below.
   */
  "mainEntryPointFilePath": "<projectFolder>/dist/index.d.ts",

  /**
   * Determines how the TypeScript compiler engine will be invoked by API Extractor.
   */

  "compiler": {},

  /**
   * Configures how the API report file (*.api.md) will be generated.
   */
  "apiReport": {
    "enabled": false,
    "reportFileName": "<unscopedPackageName>.api.md",
    "reportFolder": "<projectFolder>/_api-review/",
    "reportTempFolder": "<projectFolder>/_api-extractor-temp/"
  },

  /**
   * Configures how the doc model file (*.api.json) will be generated.
   */
  "docModel": {
    "enabled": true,
    "apiJsonFilePath": "<projectFolder>/_api-extractor-temp/doc-models/<unscopedPackageName>.api.json"
  },

  /**
   * Configures how the .d.ts rollup file will be generated.
   */
  "dtsRollup": {
    "enabled": false,
    "untrimmedFilePath": "<projectFolder>/dist/<unscopedPackageName>.d.ts",
    "betaTrimmedFilePath": "<projectFolder>/dist/<unscopedPackageName>-beta.d.ts",
    "publicTrimmedFilePath": "<projectFolder>/dist/<unscopedPackageName>-public.d.ts"
  },

  /**
   * Configures how the tsdoc-metadata.json file will be generated.
   */
  "tsdocMetadata": {
    "enabled": true
  },

  /**
   * Configures how API Extractor reports error and warning messages produced during analysis.
   *
   * There are three sources of messages:  compiler messages, API Extractor messages, and TSDoc messages.
   */
  "messages": {
    /**
     * Configures handling of diagnostic messages reported by the TypeScript compiler engine while analyzing
     * the input .d.ts files.
     *
     * TypeScript message identifiers start with "TS" followed by an integer.  For example: "TS2551"
     *
     * DEFAULT VALUE:  A single "default" entry with logLevel=warning.
     */
    "compilerMessageReporting": {
      /**
       * Configures the default routing for messages that don't match an explicit rule in this table.
       */
      "default": {
        /**
         * Specifies whether the message should be written to the the tool's output log.  Note that
         * the "addToApiReviewFile" property may supersede this option.
         *
         * Possible values: "error", "warning", "none"
         *
         * Errors cause the build to fail and return a nonzero exit code.  Warnings cause a production build fail
         * and return a nonzero exit code.  For a non-production build (e.g. when "api-extractor run" includes
         * the "--local" option), the warning is displayed but the build will not fail.
         *
         * DEFAULT VALUE: "warning"
         */
        "logLevel": "error"
        /**
         * When addToApiReviewFile is true:  If API Extractor is configured to write an API report file (.api.md),
         * then the message will be written inside that file; otherwise, the message is instead logged according to
         * the "logLevel" option.
         *
         * DEFAULT VALUE: false
         */
        // "addToApiReviewFile": false
      }
    },

    /**
     * Configures handling of messages reported by API Extractor during its analysis.
     *
     * API Extractor message identifiers start with "ae-".  For example: "ae-extra-release-tag"
     *
     * DEFAULT VALUE: See api-extractor-defaults.json for the complete table of extractorMessageReporting mappings
     */
    "extractorMessageReporting": {
      "default": {
        "logLevel": "error"
      },
      // A documentation comment should contain at most one release tag.
      "ae-extra-release-tag": {
        "logLevel": "warning"
      },
      // Reported when an exported API refers to another declaration that is not exported.
      "ae-forgotten-export": {
        "logLevel": "error"
      },
      // Disabled. We don't require that internal members be prefixed with an underscore.
      "ae-internal-missing-underscore": {
        "logLevel": "none",
        "addToApiReportFile": false
      },
      // A type signature should not reference another types whose release tag is less visible.
      "ae-missing-release-tag": {
        "logLevel": "none",
        "addToApiReportFile": false
      },
      // The @inheritDoc tag needs a TSDoc declaration reference.
      "ae-unresolved-inheritdoc-reference": {
        "logLevel": "error"
      }
    },

    /**
     * Configures handling of messages reported by the TSDoc parser when analyzing code comments.
     *
     * TSDoc message identifiers start with "tsdoc-".  For example: "tsdoc-link-tag-unescaped-text"
     *
     * DEFAULT VALUE:  A single "default" entry with logLevel=warning.
     */
    "tsdocMessageReporting": {
      "default": {
        "logLevel": "error"
      }
    }
  }
}
