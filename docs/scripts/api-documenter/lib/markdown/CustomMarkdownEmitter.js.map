{"version":3,"file":"CustomMarkdownEmitter.js","sourceRoot":"","sources":["../../src/markdown/CustomMarkdownEmitter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as colors from 'colors';\n\nimport { DocNode, DocLinkTag, StringBuilder } from '@microsoft/tsdoc';\nimport { ApiModel, IResolveDeclarationReferenceResult, ApiItem } from '@microsoft/api-extractor-model';\n\nimport { CustomDocNodeKind } from '../nodes/CustomDocNodeKind';\nimport { DocHeading } from '../nodes/DocHeading';\nimport { DocNoteBox } from '../nodes/DocNoteBox';\nimport { DocTable } from '../nodes/DocTable';\nimport { DocTableCell } from '../nodes/DocTableCell';\nimport { DocEmphasisSpan } from '../nodes/DocEmphasisSpan';\nimport { MarkdownEmitter, IMarkdownEmitterContext, IMarkdownEmitterOptions } from './MarkdownEmitter';\nimport { IndentedWriter } from '../utils/IndentedWriter';\n\nexport interface ICustomMarkdownEmitterOptions extends IMarkdownEmitterOptions {\n    contextApiItem: ApiItem | undefined;\n\n    onGetFilenameForApiItem: (apiItem: ApiItem) => string | undefined;\n}\n\nexport class CustomMarkdownEmitter extends MarkdownEmitter {\n    private _apiModel: ApiModel;\n\n    public constructor(apiModel: ApiModel) {\n        super();\n\n        this._apiModel = apiModel;\n    }\n\n    public emit(\n        stringBuilder: StringBuilder,\n        docNode: DocNode,\n        options: ICustomMarkdownEmitterOptions\n    ): string {\n        return super.emit(stringBuilder, docNode, options);\n    }\n\n    /** @override */\n    protected writeNode(docNode: DocNode, context: IMarkdownEmitterContext, docNodeSiblings: boolean): void {\n        const writer: IndentedWriter = context.writer;\n\n        switch (docNode.kind) {\n            case CustomDocNodeKind.Heading: {\n                const docHeading: DocHeading = docNode as DocHeading;\n                writer.ensureSkippedLine();\n\n                let prefix: string;\n                switch (docHeading.level) {\n                    case 1:\n                        prefix = '##';\n                        break;\n                    case 2:\n                        prefix = '###';\n                        break;\n                    case 3:\n                        prefix = '###';\n                        break;\n                    default:\n                        prefix = '####';\n                }\n                let suffix: string = '';\n                if (docHeading.id !== '') {\n                    suffix = ` {#${docHeading.id}}`;\n                }\n\n                writer.writeLine(prefix + ' ' + this.getEscapedText(docHeading.title) + suffix);\n                writer.writeLine();\n                break;\n            }\n            case CustomDocNodeKind.NoteBox: {\n                const docNoteBox: DocNoteBox = docNode as DocNoteBox;\n                writer.ensureNewLine();\n\n                writer.increaseIndent('> ');\n\n                this.writeNode(docNoteBox.content, context, false);\n                writer.ensureNewLine();\n\n                writer.decreaseIndent();\n\n                writer.writeLine();\n                break;\n            }\n            case CustomDocNodeKind.Table: {\n                const docTable: DocTable = docNode as DocTable;\n                // GitHub's markdown renderer chokes on tables that don't have a blank line above them,\n                // whereas VS Code's renderer is totally fine with it.\n                writer.ensureSkippedLine();\n\n                context.insideTable = true;\n                if (docTable.cssClass) {\n                    this._writeHTMLTable(writer, context, docTable);\n                } else {\n                    this._writeMarkdownTable(writer, context, docTable);\n                }\n                break;\n            }\n            case CustomDocNodeKind.EmphasisSpan: {\n                const docEmphasisSpan: DocEmphasisSpan = docNode as DocEmphasisSpan;\n                const oldBold: boolean = context.boldRequested;\n                const oldItalic: boolean = context.italicRequested;\n                context.boldRequested = docEmphasisSpan.bold;\n                context.italicRequested = docEmphasisSpan.italic;\n                this.writeNodes(docEmphasisSpan.nodes, context);\n                context.boldRequested = oldBold;\n                context.italicRequested = oldItalic;\n                break;\n            }\n            default:\n                super.writeNode(docNode, context, false);\n        }\n    }\n\n    /** @override */\n    protected writeLinkTagWithCodeDestination(\n        docLinkTag: DocLinkTag,\n        context: IMarkdownEmitterContext<ICustomMarkdownEmitterOptions>\n    ): void {\n        const options: ICustomMarkdownEmitterOptions = context.options;\n\n        const result: IResolveDeclarationReferenceResult = this._apiModel.resolveDeclarationReference(\n            docLinkTag.codeDestination!,\n            options.contextApiItem\n        );\n\n        if (result.resolvedApiItem) {\n            const filename: string | undefined = options.onGetFilenameForApiItem(result.resolvedApiItem);\n\n            if (filename) {\n                let linkText: string = docLinkTag.linkText || '';\n                if (linkText.length === 0) {\n                    // Generate a name such as Namespace1.Namespace2.MyClass.myMethod()\n                    linkText = result.resolvedApiItem.getScopedNameWithinPackage();\n                }\n                if (linkText.length > 0) {\n\n                    if (context.insideHTML) {\n                        context.writer.write(`<a href='${filename!.replace(/\\.md$/, '/')}'>${linkText.replace(/\\s+/g, ' ')}</a>`);\n                    } else {\n                        const encodedLinkText: string = this.getEscapedText(linkText.replace(/\\s+/g, ' '));\n                        context.writer.write('[');\n                        context.writer.write(encodedLinkText);\n                        context.writer.write(`](${filename!})`);\n                    }\n                } else {\n                    console.log(colors.yellow('WARNING: Unable to determine link text'));\n                }\n            }\n        } else if (result.errorMessage) {\n            console.log(\n                colors.yellow(\n                    `WARNING: Unable to resolve reference \"${docLinkTag.codeDestination!.emitAsTsdoc()}\": ` +\n                    result.errorMessage\n                )\n            );\n\n        }\n    }\n\n    private _writeMarkdownTable(writer: IndentedWriter, context: IMarkdownEmitterContext, docTable: DocTable): void {\n        // Markdown table rows can have inconsistent cell counts.  Size the table based on the longest row.\n        let columnCount: number = 0;\n        if (docTable.header) {\n            columnCount = docTable.header.cells.length;\n        }\n        for (const row of docTable.rows) {\n            if (row.cells.length > columnCount) {\n                columnCount = row.cells.length;\n            }\n        }\n\n        // write the table header (which is required by Markdown)\n        writer.write('| ');\n        for (let i: number = 0; i < columnCount; ++i) {\n            writer.write(' ');\n            if (docTable.header) {\n                const cell: DocTableCell | undefined = docTable.header.cells[i];\n                if (cell) {\n                    this.writeNode(cell.content, context, false);\n                }\n            }\n            writer.write(' |');\n        }\n        writer.writeLine();\n\n        // write the divider\n        writer.write('| ');\n        for (let i: number = 0; i < columnCount; ++i) {\n            writer.write(' --- |');\n        }\n        writer.writeLine();\n\n        for (const row of docTable.rows) {\n            writer.write('| ');\n            for (const cell of row.cells) {\n                writer.write(' ');\n                this.writeNode(cell.content, context, false);\n                writer.write(' |');\n            }\n            writer.writeLine();\n        }\n        writer.writeLine();\n\n        context.insideTable = false;\n    }\n\n    private _writeHTMLTable(writer: IndentedWriter, context: IMarkdownEmitterContext, docTable: DocTable): void {\n        context.insideHTML = true;\n        let columnCount: number = 0;\n        if (docTable.header) {\n            columnCount = docTable.header.cells.length;\n        }\n        for (const row of docTable.rows) {\n            if (row.cells.length > columnCount) {\n                columnCount = row.cells.length;\n            }\n        }\n\n        // write the table header\n        writer.writeLine(`<table class=\"table table-striped table-hover ${docTable.cssClass}\">`);\n        if (docTable.caption) {\n            writer.writeLine(`<caption>${docTable.caption}</caption>`);\n        }\n        writer.writeLine('  <thead>');\n        writer.writeLine('    <tr>');\n        writer.write('    ');\n        for (let i: number = 0; i < columnCount; ++i) {\n            writer.write(' ');\n            if (docTable.header) {\n                const cell: DocTableCell | undefined = docTable.header.cells[i];\n                if (cell) {\n                    writer.write('<th scope=\"col\">');\n                    this.writeNode(cell.content, context, false);\n                    writer.write('</th>');\n                    writer.writeLine();\n                }\n            }\n        }\n        writer.writeLine('    </tr>');\n        writer.writeLine('  </thead>');\n\n        writer.writeLine('  <tbody>');\n        for (const row of docTable.rows) {\n            writer.writeLine('    <tr>');\n            for (const cell of row.cells) {\n                writer.write('      ');\n                writer.write('<td>');\n                this.writeNode(cell.content, context, false);\n                writer.writeLine('</td>');\n            }\n            writer.writeLine('    </tr>');\n        }\n\n        writer.writeLine('  </tbody>');\n        writer.writeLine('</table>')\n        writer.writeLine();\n\n        context.insideTable = false;\n        context.insideHTML = false;\n    }\n}\n"]}