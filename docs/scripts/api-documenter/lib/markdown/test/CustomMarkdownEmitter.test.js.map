{"version":3,"file":"CustomMarkdownEmitter.test.js","sourceRoot":"","sources":["../../../src/markdown/test/CustomMarkdownEmitter.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport {\r\n  DocSection,\r\n  TSDocConfiguration,\r\n  DocPlainText,\r\n  StringBuilder,\r\n  DocParagraph,\r\n  DocSoftBreak,\r\n  DocLinkTag,\r\n  DocHtmlStartTag,\r\n  DocHtmlEndTag,\r\n  DocBlockTag\r\n} from '@microsoft/tsdoc';\r\n\r\nimport { CustomDocNodes } from '../../nodes/CustomDocNodeKind';\r\nimport { DocHeading } from '../../nodes/DocHeading';\r\nimport { DocEmphasisSpan } from '../../nodes/DocEmphasisSpan';\r\nimport { DocTable } from '../../nodes/DocTable';\r\nimport { DocTableRow } from '../../nodes/DocTableRow';\r\nimport { DocTableCell } from '../../nodes/DocTableCell';\r\nimport { CustomMarkdownEmitter } from '../CustomMarkdownEmitter';\r\nimport { ApiModel, ApiItem } from '@microsoft/api-extractor-model';\r\n\r\ntest('render Markdown from TSDoc', () => {\r\n  const configuration: TSDocConfiguration = CustomDocNodes.configuration;\r\n\r\n  const output: DocSection = new DocSection({ configuration });\r\n\r\n  output.appendNodes([\r\n    new DocHeading({ configuration, title: 'Simple bold test' }),\r\n    new DocParagraph({ configuration }, [\r\n      new DocPlainText({ configuration, text: 'This is a ' }),\r\n      new DocEmphasisSpan({ configuration, bold: true }, [new DocPlainText({ configuration, text: 'bold' })]),\r\n      new DocPlainText({ configuration, text: ' word.' })\r\n    ])\r\n  ]);\r\n\r\n  output.appendNodes([\r\n    new DocHeading({ configuration, title: 'All whitespace bold' }),\r\n    new DocParagraph({ configuration }, [\r\n      new DocEmphasisSpan({ configuration, bold: true }, [new DocPlainText({ configuration, text: '  ' })])\r\n    ])\r\n  ]);\r\n\r\n  output.appendNodes([\r\n    new DocHeading({ configuration, title: 'Newline bold' }),\r\n    new DocParagraph({ configuration }, [\r\n      new DocEmphasisSpan({ configuration, bold: true }, [\r\n        new DocPlainText({ configuration, text: 'line 1' }),\r\n        new DocSoftBreak({ configuration }),\r\n        new DocPlainText({ configuration, text: 'line 2' })\r\n      ])\r\n    ])\r\n  ]);\r\n\r\n  output.appendNodes([\r\n    new DocHeading({ configuration, title: 'Newline bold with spaces' }),\r\n    new DocParagraph({ configuration }, [\r\n      new DocEmphasisSpan({ configuration, bold: true }, [\r\n        new DocPlainText({ configuration, text: '  line 1  ' }),\r\n        new DocSoftBreak({ configuration }),\r\n        new DocPlainText({ configuration, text: '  line 2  ' }),\r\n        new DocSoftBreak({ configuration }),\r\n        new DocPlainText({ configuration, text: '  line 3  ' })\r\n      ])\r\n    ])\r\n  ]);\r\n\r\n  output.appendNodes([\r\n    new DocHeading({ configuration, title: 'Adjacent bold regions' }),\r\n    new DocParagraph({ configuration }, [\r\n      new DocEmphasisSpan({ configuration, bold: true }, [new DocPlainText({ configuration, text: 'one' })]),\r\n      new DocEmphasisSpan({ configuration, bold: true }, [new DocPlainText({ configuration, text: 'two' })]),\r\n      new DocEmphasisSpan({ configuration, bold: true }, [\r\n        new DocPlainText({ configuration, text: ' three ' })\r\n      ]),\r\n      new DocPlainText({ configuration, text: '' }),\r\n      new DocEmphasisSpan({ configuration, bold: true }, [new DocPlainText({ configuration, text: 'four' })]),\r\n      new DocPlainText({ configuration, text: 'non-bold' }),\r\n      new DocEmphasisSpan({ configuration, bold: true }, [new DocPlainText({ configuration, text: 'five' })])\r\n    ])\r\n  ]);\r\n\r\n  output.appendNodes([\r\n    new DocHeading({ configuration, title: 'Adjacent to other characters' }),\r\n    new DocParagraph({ configuration }, [\r\n      new DocLinkTag({\r\n        configuration,\r\n        tagName: '@link',\r\n        linkText: 'a link',\r\n        urlDestination: './index.md'\r\n      }),\r\n      new DocEmphasisSpan({ configuration, bold: true }, [new DocPlainText({ configuration, text: 'bold' })]),\r\n      new DocPlainText({ configuration, text: 'non-bold' }),\r\n      new DocPlainText({ configuration, text: 'more-non-bold' })\r\n    ])\r\n  ]);\r\n\r\n  output.appendNodes([\r\n    new DocHeading({ configuration, title: 'Unknown block tag' }),\r\n    new DocParagraph({ configuration }, [\r\n      new DocBlockTag({\r\n        configuration,\r\n        tagName: '@unknown'\r\n      }),\r\n      new DocEmphasisSpan({ configuration, bold: true }, [new DocPlainText({ configuration, text: 'bold' })]),\r\n      new DocPlainText({ configuration, text: 'non-bold' }),\r\n      new DocPlainText({ configuration, text: 'more-non-bold' })\r\n    ])\r\n  ]);\r\n\r\n  output.appendNodes([\r\n    new DocHeading({ configuration, title: 'Bad characters' }),\r\n    new DocParagraph({ configuration }, [\r\n      new DocEmphasisSpan({ configuration, bold: true }, [\r\n        new DocPlainText({ configuration, text: '*one*two*' })\r\n      ]),\r\n      new DocEmphasisSpan({ configuration, bold: true }, [\r\n        new DocPlainText({ configuration, text: 'three*four' })\r\n      ])\r\n    ])\r\n  ]);\r\n\r\n  output.appendNodes([\r\n    new DocHeading({ configuration, title: 'Characters that should be escaped' }),\r\n    new DocParagraph({ configuration }, [\r\n      new DocPlainText({ configuration, text: 'Double-encoded JSON: \"{ \\\\\"A\\\\\": 123}\"' })\r\n    ]),\r\n    new DocParagraph({ configuration }, [\r\n      new DocPlainText({ configuration, text: 'HTML chars: <script>alert(\"[You] are #1!\");</script>' })\r\n    ]),\r\n    new DocParagraph({ configuration }, [new DocPlainText({ configuration, text: 'HTML escape: &quot;' })]),\r\n    new DocParagraph({ configuration }, [\r\n      new DocPlainText({ configuration, text: '3 or more hyphens: - -- --- ---- ----- ------' })\r\n    ])\r\n  ]);\r\n\r\n  output.appendNodes([\r\n    new DocHeading({ configuration, title: 'HTML tag' }),\r\n    new DocParagraph({ configuration }, [\r\n      new DocHtmlStartTag({ configuration, name: 'b' }),\r\n      new DocPlainText({ configuration, text: 'bold' }),\r\n      new DocHtmlEndTag({ configuration, name: 'b' })\r\n    ])\r\n  ]);\r\n\r\n  output.appendNodes([\r\n    new DocHeading({ configuration, title: 'Table' }),\r\n    new DocTable(\r\n      {\r\n        configuration,\r\n        headerTitles: ['Header 1', 'Header 2']\r\n      },\r\n      [\r\n        new DocTableRow({ configuration }, [\r\n          new DocTableCell({ configuration }, [\r\n            new DocParagraph({ configuration }, [new DocPlainText({ configuration, text: 'Cell 1' })])\r\n          ]),\r\n          new DocTableCell({ configuration }, [\r\n            new DocParagraph({ configuration }, [new DocPlainText({ configuration, text: 'Cell 2' })])\r\n          ])\r\n        ])\r\n      ]\r\n    )\r\n  ]);\r\n\r\n  const stringBuilder: StringBuilder = new StringBuilder();\r\n  const apiModel: ApiModel = new ApiModel();\r\n  const markdownEmitter: CustomMarkdownEmitter = new CustomMarkdownEmitter(apiModel);\r\n  markdownEmitter.emit(stringBuilder, output, {\r\n    contextApiItem: undefined,\r\n    onGetFilenameForApiItem: (apiItem: ApiItem) => {\r\n      return '#';\r\n    }\r\n  });\r\n\r\n  expect(stringBuilder).toMatchSnapshot();\r\n});\r\n"]}