{"version":3,"file":"MarkdownEmitter.js","sourceRoot":"","sources":["../../src/markdown/MarkdownEmitter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport {\r\n  DocNode,\r\n  DocNodeKind,\r\n  StringBuilder,\r\n  DocPlainText,\r\n  DocHtmlStartTag,\r\n  DocHtmlEndTag,\r\n  DocCodeSpan,\r\n  DocLinkTag,\r\n  DocParagraph,\r\n  DocFencedCode,\r\n  DocSection,\r\n  DocNodeTransforms,\r\n  DocEscapedText,\r\n  DocErrorText,\r\n  DocBlockTag\r\n} from '@microsoft/tsdoc';\r\nimport { InternalError } from '@rushstack/node-core-library';\r\n\r\nimport { IndentedWriter } from '../utils/IndentedWriter';\r\n\r\nexport interface IMarkdownEmitterOptions {}\r\n\r\nexport interface IMarkdownEmitterContext<TOptions = IMarkdownEmitterOptions> {\r\n  writer: IndentedWriter;\r\n  insideTable: boolean;\r\n\r\n  boldRequested: boolean;\r\n  italicRequested: boolean;\r\n\r\n  writingBold: boolean;\r\n  writingItalic: boolean;\r\n\r\n  options: TOptions;\r\n}\r\n\r\n/**\r\n * Renders MarkupElement content in the Markdown file format.\r\n * For more info:  https://en.wikipedia.org/wiki/Markdown\r\n */\r\nexport class MarkdownEmitter {\r\n  public emit(stringBuilder: StringBuilder, docNode: DocNode, options: IMarkdownEmitterOptions): string {\r\n    const writer: IndentedWriter = new IndentedWriter(stringBuilder);\r\n\r\n    const context: IMarkdownEmitterContext = {\r\n      writer,\r\n      insideTable: false,\r\n\r\n      boldRequested: false,\r\n      italicRequested: false,\r\n\r\n      writingBold: false,\r\n      writingItalic: false,\r\n\r\n      options\r\n    };\r\n\r\n    this.writeNode(docNode, context, false);\r\n\r\n    writer.ensureNewLine(); // finish the last line\r\n\r\n    return writer.toString();\r\n  }\r\n\r\n  protected getEscapedText(text: string): string {\r\n    const textWithBackslashes: string = text\r\n      .replace(/\\\\/g, '\\\\\\\\') // first replace the escape character\r\n      .replace(/[*#[\\]_|`~]/g, (x) => '\\\\' + x) // then escape any special characters\r\n      .replace(/---/g, '\\\\-\\\\-\\\\-') // hyphens only if it's 3 or more\r\n      .replace(/&/g, '&amp;')\r\n      .replace(/</g, '&lt;')\r\n      .replace(/>/g, '&gt;');\r\n    return textWithBackslashes;\r\n  }\r\n\r\n  protected getTableEscapedText(text: string): string {\r\n    return text\r\n      .replace(/&/g, '&amp;')\r\n      .replace(/\"/g, '&quot;')\r\n      .replace(/</g, '&lt;')\r\n      .replace(/>/g, '&gt;')\r\n      .replace(/\\|/g, '&#124;');\r\n  }\r\n\r\n  /**\r\n   * @virtual\r\n   */\r\n  protected writeNode(docNode: DocNode, context: IMarkdownEmitterContext, docNodeSiblings: boolean): void {\r\n    const writer: IndentedWriter = context.writer;\r\n\r\n    switch (docNode.kind) {\r\n      case DocNodeKind.PlainText: {\r\n        const docPlainText: DocPlainText = docNode as DocPlainText;\r\n        this.writePlainText(docPlainText.text, context);\r\n        break;\r\n      }\r\n      case DocNodeKind.HtmlStartTag:\r\n      case DocNodeKind.HtmlEndTag: {\r\n        const docHtmlTag: DocHtmlStartTag | DocHtmlEndTag = docNode as DocHtmlStartTag | DocHtmlEndTag;\r\n        // write the HTML element verbatim into the output\r\n        writer.write(docHtmlTag.emitAsHtml());\r\n        break;\r\n      }\r\n      case DocNodeKind.CodeSpan: {\r\n        const docCodeSpan: DocCodeSpan = docNode as DocCodeSpan;\r\n        if (context.insideTable) {\r\n          writer.write('<code>');\r\n        } else {\r\n          writer.write('`');\r\n        }\r\n        if (context.insideTable) {\r\n          const code: string = this.getTableEscapedText(docCodeSpan.code);\r\n          const parts: string[] = code.split(/\\r?\\n/g);\r\n          writer.write(parts.join('</code><br/><code>'));\r\n        } else {\r\n          writer.write(docCodeSpan.code);\r\n        }\r\n        if (context.insideTable) {\r\n          writer.write('</code>');\r\n        } else {\r\n          writer.write('`');\r\n        }\r\n        break;\r\n      }\r\n      case DocNodeKind.LinkTag: {\r\n        const docLinkTag: DocLinkTag = docNode as DocLinkTag;\r\n        if (docLinkTag.codeDestination) {\r\n          this.writeLinkTagWithCodeDestination(docLinkTag, context);\r\n        } else if (docLinkTag.urlDestination) {\r\n          this.writeLinkTagWithUrlDestination(docLinkTag, context);\r\n        } else if (docLinkTag.linkText) {\r\n          this.writePlainText(docLinkTag.linkText, context);\r\n        }\r\n        break;\r\n      }\r\n      case DocNodeKind.Paragraph: {\r\n        const docParagraph: DocParagraph = docNode as DocParagraph;\r\n        const trimmedParagraph: DocParagraph = DocNodeTransforms.trimSpacesInParagraph(docParagraph);\r\n        if (context.insideTable) {\r\n          if (docNodeSiblings) {\r\n            writer.write('<p>');\r\n            this.writeNodes(trimmedParagraph.nodes, context);\r\n            writer.write('</p>');\r\n          } else {\r\n            // Special case:  If we are the only element inside this table cell, then we can omit the <p></p> container.\r\n            this.writeNodes(trimmedParagraph.nodes, context);\r\n          }\r\n        } else {\r\n          this.writeNodes(trimmedParagraph.nodes, context);\r\n          writer.ensureNewLine();\r\n          writer.writeLine();\r\n        }\r\n        break;\r\n      }\r\n      case DocNodeKind.FencedCode: {\r\n        const docFencedCode: DocFencedCode = docNode as DocFencedCode;\r\n        writer.ensureNewLine();\r\n        writer.write('```');\r\n        writer.write(docFencedCode.language);\r\n        writer.writeLine();\r\n        writer.write(docFencedCode.code);\r\n        writer.writeLine();\r\n        writer.writeLine('```');\r\n        break;\r\n      }\r\n      case DocNodeKind.Section: {\r\n        const docSection: DocSection = docNode as DocSection;\r\n        this.writeNodes(docSection.nodes, context);\r\n        break;\r\n      }\r\n      case DocNodeKind.SoftBreak: {\r\n        if (!/^\\s?$/.test(writer.peekLastCharacter())) {\r\n          writer.write(' ');\r\n        }\r\n        break;\r\n      }\r\n      case DocNodeKind.EscapedText: {\r\n        const docEscapedText: DocEscapedText = docNode as DocEscapedText;\r\n        this.writePlainText(docEscapedText.decodedText, context);\r\n        break;\r\n      }\r\n      case DocNodeKind.ErrorText: {\r\n        const docErrorText: DocErrorText = docNode as DocErrorText;\r\n        this.writePlainText(docErrorText.text, context);\r\n        break;\r\n      }\r\n      case DocNodeKind.InlineTag: {\r\n        break;\r\n      }\r\n      case DocNodeKind.BlockTag: {\r\n        const tagNode: DocBlockTag = docNode as DocBlockTag;\r\n        console.warn('Unsupported block tag: ' + tagNode.tagName);\r\n        break;\r\n      }\r\n      default:\r\n        throw new InternalError('Unsupported DocNodeKind kind: ' + docNode.kind);\r\n    }\r\n  }\r\n\r\n  /** @virtual */\r\n  protected writeLinkTagWithCodeDestination(docLinkTag: DocLinkTag, context: IMarkdownEmitterContext): void {\r\n    // The subclass needs to implement this to support code destinations\r\n    throw new InternalError('writeLinkTagWithCodeDestination()');\r\n  }\r\n\r\n  /** @virtual */\r\n  protected writeLinkTagWithUrlDestination(docLinkTag: DocLinkTag, context: IMarkdownEmitterContext): void {\r\n    const linkText: string =\r\n      docLinkTag.linkText !== undefined ? docLinkTag.linkText : docLinkTag.urlDestination!;\r\n\r\n    const encodedLinkText: string = this.getEscapedText(linkText.replace(/\\s+/g, ' '));\r\n\r\n    context.writer.write('[');\r\n    context.writer.write(encodedLinkText);\r\n    context.writer.write(`](${docLinkTag.urlDestination!})`);\r\n  }\r\n\r\n  protected writePlainText(text: string, context: IMarkdownEmitterContext): void {\r\n    const writer: IndentedWriter = context.writer;\r\n\r\n    // split out the [ leading whitespace, content, trailing whitespace ]\r\n    const parts: string[] = text.match(/^(\\s*)(.*?)(\\s*)$/) || [];\r\n\r\n    writer.write(parts[1]); // write leading whitespace\r\n\r\n    const middle: string = parts[2];\r\n\r\n    if (middle !== '') {\r\n      switch (writer.peekLastCharacter()) {\r\n        case '':\r\n        case '\\n':\r\n        case ' ':\r\n        case '[':\r\n        case '>':\r\n          // okay to put a symbol\r\n          break;\r\n        default:\r\n          // This is no problem:        \"**one** *two* **three**\"\r\n          // But this is trouble:       \"**one***two***three**\"\r\n          // The most general solution: \"**one**<!-- -->*two*<!-- -->**three**\"\r\n          writer.write('<!-- -->');\r\n          break;\r\n      }\r\n\r\n      if (context.boldRequested) {\r\n        writer.write('<b>');\r\n      }\r\n      if (context.italicRequested) {\r\n        writer.write('<i>');\r\n      }\r\n\r\n      writer.write(this.getEscapedText(middle));\r\n\r\n      if (context.italicRequested) {\r\n        writer.write('</i>');\r\n      }\r\n      if (context.boldRequested) {\r\n        writer.write('</b>');\r\n      }\r\n    }\r\n\r\n    writer.write(parts[3]); // write trailing whitespace\r\n  }\r\n\r\n  protected writeNodes(docNodes: ReadonlyArray<DocNode>, context: IMarkdownEmitterContext): void {\r\n    for (const docNode of docNodes) {\r\n      this.writeNode(docNode, context, docNodes.length > 1);\r\n    }\r\n  }\r\n}\r\n"]}