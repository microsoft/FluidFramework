{"version":3,"file":"DocTableCell.js","sourceRoot":"","sources":["../../src/nodes/DocTableCell.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,4CAA2E;AAQ3E;;GAEG;AACH,MAAa,YAAa,SAAQ,eAAO;IAGvC,YAAmB,UAAmC,EAAE,iBAA0C;QAChG,KAAK,CAAC,UAAU,CAAC,CAAC;QAElB,IAAI,CAAC,OAAO,GAAG,IAAI,kBAAU,CAAC,EAAE,aAAa,EAAE,IAAI,CAAC,aAAa,EAAE,EAAE,iBAAiB,CAAC,CAAC;IAC1F,CAAC;IAED,gBAAgB;IAChB,IAAW,IAAI;QACb,mCAAmC;IACrC,CAAC;CACF;AAbD,oCAaC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { IDocNodeParameters, DocNode, DocSection } from '@microsoft/tsdoc';\r\nimport { CustomDocNodeKind } from './CustomDocNodeKind';\r\n\r\n/**\r\n * Constructor parameters for {@link DocTableCell}.\r\n */\r\nexport interface IDocTableCellParameters extends IDocNodeParameters {}\r\n\r\n/**\r\n * Represents table cell, similar to an HTML `<td>` element.\r\n */\r\nexport class DocTableCell extends DocNode {\r\n  public readonly content: DocSection;\r\n\r\n  public constructor(parameters: IDocTableCellParameters, sectionChildNodes?: ReadonlyArray<DocNode>) {\r\n    super(parameters);\r\n\r\n    this.content = new DocSection({ configuration: this.configuration }, sectionChildNodes);\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): string {\r\n    return CustomDocNodeKind.TableCell;\r\n  }\r\n}\r\n"]}