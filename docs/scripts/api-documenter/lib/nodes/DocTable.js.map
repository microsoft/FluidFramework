{"version":3,"file":"DocTable.js","sourceRoot":"","sources":["../../src/nodes/DocTable.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,4CAA+D;AAE/D,+CAA4C;AAa5C;;GAEG;AACH,MAAa,QAAS,SAAQ,eAAO;IAOjC,YAAmB,UAA+B,EAAE,IAAiC;QACjF,KAAK,CAAC,UAAU,CAAC,CAAC;QAElB,IAAI,CAAC,MAAM,GAAG,IAAI,yBAAW,CAAC,EAAE,aAAa,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;QACrE,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAEhB,IAAI,UAAU,EAAE;YACZ,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;YACpC,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC;YAClC,IAAI,UAAU,CAAC,YAAY,EAAE;gBACzB,IAAI,UAAU,CAAC,WAAW,EAAE;oBACxB,MAAM,IAAI,KAAK,CACX,sEAAsE;wBACtE,2BAA2B,CAC9B,CAAC;iBACL;gBACD,KAAK,MAAM,QAAQ,IAAI,UAAU,CAAC,YAAY,EAAE;oBAC5C,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;iBAC1C;aACJ;iBAAM,IAAI,UAAU,CAAC,WAAW,EAAE;gBAC/B,KAAK,MAAM,IAAI,IAAI,UAAU,CAAC,WAAW,EAAE;oBACvC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;iBAC7B;aACJ;SACJ;QAED,IAAI,IAAI,EAAE;YACN,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;gBACpB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACpB;SACJ;IACL,CAAC;IAED,gBAAgB;IAChB,IAAW,IAAI;QACX,2BAA+B;IACnC,CAAC;IAED,IAAW,IAAI;QACX,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAEM,MAAM,CAAC,GAAgB;QAC1B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC;IAEM,eAAe;QAClB,MAAM,GAAG,GAAgB,IAAI,yBAAW,CAAC,EAAE,aAAa,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;QAChF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACjB,OAAO,GAAG,CAAC;IACf,CAAC;IAED,gBAAgB;IACN,eAAe;QACrB,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;IACxC,CAAC;CACJ;AA/DD,4BA+DC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { IDocNodeParameters, DocNode } from '@microsoft/tsdoc';\nimport { CustomDocNodeKind } from './CustomDocNodeKind';\nimport { DocTableRow } from './DocTableRow';\nimport { DocTableCell } from './DocTableCell';\n\n/**\n * Constructor parameters for {@link DocTable}.\n */\nexport interface IDocTableParameters extends IDocNodeParameters {\n    headerCells?: ReadonlyArray<DocTableCell>;\n    headerTitles?: string[];\n    cssClass?: string;\n    caption?: string;\n}\n\n/**\n * Represents table, similar to an HTML `<table>` element.\n */\nexport class DocTable extends DocNode {\n    public readonly header: DocTableRow;\n    public cssClass?: string;\n    public caption?: string;\n\n    private _rows: DocTableRow[];\n\n    public constructor(parameters: IDocTableParameters, rows?: ReadonlyArray<DocTableRow>) {\n        super(parameters);\n\n        this.header = new DocTableRow({ configuration: this.configuration });\n        this._rows = [];\n\n        if (parameters) {\n            this.cssClass = parameters.cssClass;\n            this.caption = parameters.caption;\n            if (parameters.headerTitles) {\n                if (parameters.headerCells) {\n                    throw new Error(\n                        'IDocTableParameters.headerCells and IDocTableParameters.headerTitles' +\n                        ' cannot both be specified'\n                    );\n                }\n                for (const cellText of parameters.headerTitles) {\n                    this.header.addPlainTextCell(cellText);\n                }\n            } else if (parameters.headerCells) {\n                for (const cell of parameters.headerCells) {\n                    this.header.addCell(cell);\n                }\n            }\n        }\n\n        if (rows) {\n            for (const row of rows) {\n                this.addRow(row);\n            }\n        }\n    }\n\n    /** @override */\n    public get kind(): string {\n        return CustomDocNodeKind.Table;\n    }\n\n    public get rows(): ReadonlyArray<DocTableRow> {\n        return this._rows;\n    }\n\n    public addRow(row: DocTableRow): void {\n        this._rows.push(row);\n    }\n\n    public createAndAddRow(): DocTableRow {\n        const row: DocTableRow = new DocTableRow({ configuration: this.configuration });\n        this.addRow(row);\n        return row;\n    }\n\n    /** @override */\n    protected onGetChildNodes(): ReadonlyArray<DocNode | undefined> {\n        return [this.header, ...this._rows];\n    }\n}\n"]}