{"version":3,"file":"DocTable.js","sourceRoot":"","sources":["../../src/nodes/DocTable.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,4CAA+D;AAE/D,+CAA4C;AAW5C;;GAEG;AACH,MAAa,QAAS,SAAQ,eAAO;IAKnC,YAAmB,UAA+B,EAAE,IAAiC;QACnF,KAAK,CAAC,UAAU,CAAC,CAAC;QAElB,IAAI,CAAC,MAAM,GAAG,IAAI,yBAAW,CAAC,EAAE,aAAa,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;QACrE,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAEhB,IAAI,UAAU,EAAE;YACd,IAAI,UAAU,CAAC,YAAY,EAAE;gBAC3B,IAAI,UAAU,CAAC,WAAW,EAAE;oBAC1B,MAAM,IAAI,KAAK,CACb,sEAAsE;wBACpE,2BAA2B,CAC9B,CAAC;iBACH;gBACD,KAAK,MAAM,QAAQ,IAAI,UAAU,CAAC,YAAY,EAAE;oBAC9C,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;iBACxC;aACF;iBAAM,IAAI,UAAU,CAAC,WAAW,EAAE;gBACjC,KAAK,MAAM,IAAI,IAAI,UAAU,CAAC,WAAW,EAAE;oBACzC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;iBAC3B;aACF;SACF;QAED,IAAI,IAAI,EAAE;YACR,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;gBACtB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aAClB;SACF;IACH,CAAC;IAED,gBAAgB;IAChB,IAAW,IAAI;QACb,2BAA+B;IACjC,CAAC;IAED,IAAW,IAAI;QACb,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAEM,MAAM,CAAC,GAAgB;QAC5B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC;IAEM,eAAe;QACpB,MAAM,GAAG,GAAgB,IAAI,yBAAW,CAAC,EAAE,aAAa,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;QAChF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACjB,OAAO,GAAG,CAAC;IACb,CAAC;IAED,gBAAgB;IACN,eAAe;QACvB,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;CACF;AA3DD,4BA2DC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { IDocNodeParameters, DocNode } from '@microsoft/tsdoc';\r\nimport { CustomDocNodeKind } from './CustomDocNodeKind';\r\nimport { DocTableRow } from './DocTableRow';\r\nimport { DocTableCell } from './DocTableCell';\r\n\r\n/**\r\n * Constructor parameters for {@link DocTable}.\r\n */\r\nexport interface IDocTableParameters extends IDocNodeParameters {\r\n  headerCells?: ReadonlyArray<DocTableCell>;\r\n  headerTitles?: string[];\r\n}\r\n\r\n/**\r\n * Represents table, similar to an HTML `<table>` element.\r\n */\r\nexport class DocTable extends DocNode {\r\n  public readonly header: DocTableRow;\r\n\r\n  private _rows: DocTableRow[];\r\n\r\n  public constructor(parameters: IDocTableParameters, rows?: ReadonlyArray<DocTableRow>) {\r\n    super(parameters);\r\n\r\n    this.header = new DocTableRow({ configuration: this.configuration });\r\n    this._rows = [];\r\n\r\n    if (parameters) {\r\n      if (parameters.headerTitles) {\r\n        if (parameters.headerCells) {\r\n          throw new Error(\r\n            'IDocTableParameters.headerCells and IDocTableParameters.headerTitles' +\r\n              ' cannot both be specified'\r\n          );\r\n        }\r\n        for (const cellText of parameters.headerTitles) {\r\n          this.header.addPlainTextCell(cellText);\r\n        }\r\n      } else if (parameters.headerCells) {\r\n        for (const cell of parameters.headerCells) {\r\n          this.header.addCell(cell);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (rows) {\r\n      for (const row of rows) {\r\n        this.addRow(row);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): string {\r\n    return CustomDocNodeKind.Table;\r\n  }\r\n\r\n  public get rows(): ReadonlyArray<DocTableRow> {\r\n    return this._rows;\r\n  }\r\n\r\n  public addRow(row: DocTableRow): void {\r\n    this._rows.push(row);\r\n  }\r\n\r\n  public createAndAddRow(): DocTableRow {\r\n    const row: DocTableRow = new DocTableRow({ configuration: this.configuration });\r\n    this.addRow(row);\r\n    return row;\r\n  }\r\n\r\n  /** @override */\r\n  protected onGetChildNodes(): ReadonlyArray<DocNode | undefined> {\r\n    return [this.header, ...this._rows];\r\n  }\r\n}\r\n"]}