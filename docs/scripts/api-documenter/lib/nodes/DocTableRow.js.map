{"version":3,"file":"DocTableRow.js","sourceRoot":"","sources":["../../src/nodes/DocTableRow.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,4CAA6E;AAE7E,iDAA8C;AAO9C;;GAEG;AACH,MAAa,WAAY,SAAQ,eAAO;IAGtC,YAAmB,UAAkC,EAAE,KAAmC;QACxF,KAAK,CAAC,UAAU,CAAC,CAAC;QAElB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,KAAK,EAAE;YACT,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;gBACxB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aACpB;SACF;IACH,CAAC;IAED,gBAAgB;IAChB,IAAW,IAAI;QACb,iCAAkC;IACpC,CAAC;IAED,IAAW,KAAK;QACd,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAEM,OAAO,CAAC,IAAkB;QAC/B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC;IAEM,gBAAgB;QACrB,MAAM,OAAO,GAAiB,IAAI,2BAAY,CAAC,EAAE,aAAa,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;QACtF,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACtB,OAAO,OAAO,CAAC;IACjB,CAAC;IAEM,gBAAgB,CAAC,WAAmB;QACzC,MAAM,IAAI,GAAiB,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACnD,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAChC,IAAI,oBAAY,CAAC;YACf,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,IAAI,EAAE,WAAW;SAClB,CAAC,CACH,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;IAED,gBAAgB;IACN,eAAe;QACvB,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;CACF;AAhDD,kCAgDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { IDocNodeParameters, DocNode, DocPlainText } from '@microsoft/tsdoc';\r\nimport { CustomDocNodeKind } from './CustomDocNodeKind';\r\nimport { DocTableCell } from './DocTableCell';\r\n\r\n/**\r\n * Constructor parameters for {@link DocTableRow}.\r\n */\r\nexport interface IDocTableRowParameters extends IDocNodeParameters {}\r\n\r\n/**\r\n * Represents table row, similar to an HTML `<tr>` element.\r\n */\r\nexport class DocTableRow extends DocNode {\r\n  private readonly _cells: DocTableCell[];\r\n\r\n  public constructor(parameters: IDocTableRowParameters, cells?: ReadonlyArray<DocTableCell>) {\r\n    super(parameters);\r\n\r\n    this._cells = [];\r\n    if (cells) {\r\n      for (const cell of cells) {\r\n        this.addCell(cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): string {\r\n    return CustomDocNodeKind.TableRow;\r\n  }\r\n\r\n  public get cells(): ReadonlyArray<DocTableCell> {\r\n    return this._cells;\r\n  }\r\n\r\n  public addCell(cell: DocTableCell): void {\r\n    this._cells.push(cell);\r\n  }\r\n\r\n  public createAndAddCell(): DocTableCell {\r\n    const newCell: DocTableCell = new DocTableCell({ configuration: this.configuration });\r\n    this.addCell(newCell);\r\n    return newCell;\r\n  }\r\n\r\n  public addPlainTextCell(cellContent: string): DocTableCell {\r\n    const cell: DocTableCell = this.createAndAddCell();\r\n    cell.content.appendNodeInParagraph(\r\n      new DocPlainText({\r\n        configuration: this.configuration,\r\n        text: cellContent\r\n      })\r\n    );\r\n    return cell;\r\n  }\r\n\r\n  /** @override */\r\n  protected onGetChildNodes(): ReadonlyArray<DocNode | undefined> {\r\n    return this._cells;\r\n  }\r\n}\r\n"]}