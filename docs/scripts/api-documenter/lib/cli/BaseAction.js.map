{"version":3,"file":"BaseAction.js","sourceRoot":"","sources":["../../src/cli/BaseAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport * as tsdoc from '@microsoft/tsdoc';\r\nimport * as colors from 'colors';\r\n\r\nimport { CommandLineAction, CommandLineStringParameter } from '@rushstack/ts-command-line';\r\nimport { FileSystem } from '@rushstack/node-core-library';\r\nimport {\r\n  ApiModel,\r\n  ApiItem,\r\n  ApiItemContainerMixin,\r\n  ApiDocumentedItem,\r\n  IResolveDeclarationReferenceResult\r\n} from '@microsoft/api-extractor-model';\r\n\r\nexport abstract class BaseAction extends CommandLineAction {\r\n  protected inputFolder: string;\r\n  protected outputFolder: string;\r\n\r\n  private _inputFolderParameter: CommandLineStringParameter;\r\n  private _outputFolderParameter: CommandLineStringParameter;\r\n\r\n  protected onDefineParameters(): void {\r\n    // override\r\n    this._inputFolderParameter = this.defineStringParameter({\r\n      parameterLongName: '--input-folder',\r\n      parameterShortName: '-i',\r\n      argumentName: 'FOLDER1',\r\n      description:\r\n        `Specifies the input folder containing the *.api.json files to be processed.` +\r\n        ` If omitted, the default is \"./input\"`\r\n    });\r\n\r\n    this._outputFolderParameter = this.defineStringParameter({\r\n      parameterLongName: '--output-folder',\r\n      parameterShortName: '-o',\r\n      argumentName: 'FOLDER2',\r\n      description:\r\n        `Specifies the output folder where the documentation will be written.` +\r\n        ` ANY EXISTING CONTENTS WILL BE DELETED!` +\r\n        ` If omitted, the default is \"./${this.actionName}\"`\r\n    });\r\n  }\r\n\r\n  protected buildApiModel(): ApiModel {\r\n    const apiModel: ApiModel = new ApiModel();\r\n\r\n    this.inputFolder = this._inputFolderParameter.value || './input';\r\n    if (!FileSystem.exists(this.inputFolder)) {\r\n      throw new Error('The input folder does not exist: ' + this.inputFolder);\r\n    }\r\n\r\n    this.outputFolder = this._outputFolderParameter.value || `./${this.actionName}`;\r\n    FileSystem.ensureFolder(this.outputFolder);\r\n\r\n    for (const filename of FileSystem.readFolder(this.inputFolder)) {\r\n      if (filename.match(/\\.api\\.json$/i)) {\r\n        console.log(`Reading ${filename}`);\r\n        const filenamePath: string = path.join(this.inputFolder, filename);\r\n        apiModel.loadPackage(filenamePath);\r\n      }\r\n    }\r\n\r\n    this._applyInheritDoc(apiModel, apiModel);\r\n\r\n    return apiModel;\r\n  }\r\n\r\n  // TODO: This is a temporary workaround.  The long term plan is for API Extractor's DocCommentEnhancer\r\n  // to apply all @inheritDoc tags before the .api.json file is written.\r\n  // See DocCommentEnhancer._applyInheritDoc() for more info.\r\n  private _applyInheritDoc(apiItem: ApiItem, apiModel: ApiModel): void {\r\n    if (apiItem instanceof ApiDocumentedItem) {\r\n      if (apiItem.tsdocComment) {\r\n        const inheritDocTag: tsdoc.DocInheritDocTag | undefined = apiItem.tsdocComment.inheritDocTag;\r\n\r\n        if (inheritDocTag && inheritDocTag.declarationReference) {\r\n          // Attempt to resolve the declaration reference\r\n          const result: IResolveDeclarationReferenceResult = apiModel.resolveDeclarationReference(\r\n            inheritDocTag.declarationReference,\r\n            apiItem\r\n          );\r\n\r\n          if (result.errorMessage) {\r\n            console.log(\r\n              colors.yellow(\r\n                `Warning: Unresolved @inheritDoc tag for ${apiItem.displayName}: ` + result.errorMessage\r\n              )\r\n            );\r\n          } else {\r\n            if (\r\n              result.resolvedApiItem instanceof ApiDocumentedItem &&\r\n              result.resolvedApiItem.tsdocComment &&\r\n              result.resolvedApiItem !== apiItem\r\n            ) {\r\n              this._copyInheritedDocs(apiItem.tsdocComment, result.resolvedApiItem.tsdocComment);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Recurse members\r\n    if (ApiItemContainerMixin.isBaseClassOf(apiItem)) {\r\n      for (const member of apiItem.members) {\r\n        this._applyInheritDoc(member, apiModel);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Copy the content from `sourceDocComment` to `targetDocComment`.\r\n   * This code is borrowed from DocCommentEnhancer as a temporary workaround.\r\n   */\r\n  private _copyInheritedDocs(targetDocComment: tsdoc.DocComment, sourceDocComment: tsdoc.DocComment): void {\r\n    targetDocComment.summarySection = sourceDocComment.summarySection;\r\n    targetDocComment.remarksBlock = sourceDocComment.remarksBlock;\r\n\r\n    targetDocComment.params.clear();\r\n    for (const param of sourceDocComment.params) {\r\n      targetDocComment.params.add(param);\r\n    }\r\n    for (const typeParam of sourceDocComment.typeParams) {\r\n      targetDocComment.typeParams.add(typeParam);\r\n    }\r\n    targetDocComment.returnsBlock = sourceDocComment.returnsBlock;\r\n\r\n    targetDocComment.inheritDocTag = undefined;\r\n  }\r\n}\r\n"]}