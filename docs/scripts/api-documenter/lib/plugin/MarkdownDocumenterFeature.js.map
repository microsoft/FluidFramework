{"version":3,"file":"MarkdownDocumenterFeature.js","sourceRoot":"","sources":["../../src/plugin/MarkdownDocumenterFeature.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,mDAAgD;AAIhD;;;;;GAKG;AACH,MAAa,gCAAgC;IAgB3C,gBAAgB;IAChB,YAAmB,OAAyC;QAC1D,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QACjC,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;QACzC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;IACvC,CAAC;CACF;AAtBD,4EAsBC;AA8BD;;;;;GAKG;AACH,MAAa,yBAA0B,SAAQ,6BAAa;IAI1D;;;;OAIG;IACI,iBAAiB,CAAC,SAA0D;QACjF,+BAA+B;IACjC,CAAC;IAED;;;OAGG;IACI,UAAU,CAAC,SAAmD;QACnE,+BAA+B;IACjC,CAAC;CACF;AApBD,8DAoBC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { PluginFeature } from './PluginFeature';\r\nimport { ApiItem, ApiModel } from '@microsoft/api-extractor-model';\r\nimport { MarkdownDocumenterAccessor } from './MarkdownDocumenterAccessor';\r\n\r\n/**\r\n * Context object for {@link MarkdownDocumenterFeature}.\r\n * Exposes various services that can be used by a plugin.\r\n *\r\n * @public\r\n */\r\nexport class MarkdownDocumenterFeatureContext {\r\n  /**\r\n   * Provides access to the `ApiModel` for the documentation being generated.\r\n   */\r\n  public readonly apiModel: ApiModel;\r\n\r\n  /**\r\n   * The full path to the output folder.\r\n   */\r\n  public readonly outputFolder: string;\r\n\r\n  /**\r\n   * Exposes functionality of the documenter.\r\n   */\r\n  public readonly documenter: MarkdownDocumenterAccessor;\r\n\r\n  /** @internal */\r\n  public constructor(options: MarkdownDocumenterFeatureContext) {\r\n    this.apiModel = options.apiModel;\r\n    this.outputFolder = options.outputFolder;\r\n    this.documenter = options.documenter;\r\n  }\r\n}\r\n\r\n/**\r\n * Event arguments for MarkdownDocumenterFeature.onBeforeWritePage()\r\n * @public\r\n */\r\nexport interface IMarkdownDocumenterFeatureOnBeforeWritePageArgs {\r\n  /**\r\n   * The API item corresponding to this page.\r\n   */\r\n  readonly apiItem: ApiItem;\r\n\r\n  /**\r\n   * The page content.  The {@link MarkdownDocumenterFeature.onBeforeWritePage} handler can reassign this\r\n   * string to customize the page appearance.\r\n   */\r\n  pageContent: string;\r\n\r\n  /**\r\n   * The filename where the output will be written.\r\n   */\r\n  readonly outputFilename: string;\r\n}\r\n\r\n/**\r\n * Event arguments for MarkdownDocumenterFeature.onFinished()\r\n * @public\r\n */\r\nexport interface IMarkdownDocumenterFeatureOnFinishedArgs {}\r\n\r\n/**\r\n * Inherit from this base class to implement an API Documenter plugin feature that customizes\r\n * the generation of markdown output.\r\n *\r\n * @public\r\n */\r\nexport class MarkdownDocumenterFeature extends PluginFeature {\r\n  /** {@inheritdoc PluginFeature.context} */\r\n  public context: MarkdownDocumenterFeatureContext;\r\n\r\n  /**\r\n   * This event occurs before each markdown file is written.  It provides an opportunity to customize the\r\n   * content of the file.\r\n   * @virtual\r\n   */\r\n  public onBeforeWritePage(eventArgs: IMarkdownDocumenterFeatureOnBeforeWritePageArgs): void {\r\n    // (implemented by child class)\r\n  }\r\n\r\n  /**\r\n   * This event occurs after all output files have been written.\r\n   * @virtual\r\n   */\r\n  public onFinished(eventArgs: IMarkdownDocumenterFeatureOnFinishedArgs): void {\r\n    // (implemented by child class)\r\n  }\r\n}\r\n"]}