{"version":3,"file":"MarkdownDocumenter.js","sourceRoot":"","sources":["../../src/documenters/MarkdownDocumenter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport { PackageName, FileSystem, NewlineKind } from '@rushstack/node-core-library';\nimport {\n    DocSection,\n    DocPlainText,\n    DocLinkTag,\n    TSDocConfiguration,\n    StringBuilder,\n    DocNodeKind,\n    DocParagraph,\n    DocCodeSpan,\n    DocFencedCode,\n    StandardTags,\n    DocBlock,\n    DocComment,\n    DocNodeContainer,\n    DocHtmlStartTag,\n    DocHtmlEndTag,\n    DocHtmlAttribute\n} from '@microsoft/tsdoc';\nimport {\n    ApiModel,\n    ApiItem,\n    ApiEnum,\n    ApiPackage,\n    ApiItemKind,\n    ApiReleaseTagMixin,\n    ApiDocumentedItem,\n    ApiClass,\n    ReleaseTag,\n    ApiStaticMixin,\n    ApiPropertyItem,\n    ApiInterface,\n    Excerpt,\n    ApiParameterListMixin,\n    ApiReturnTypeMixin,\n    ApiDeclaredItem,\n    ApiNamespace,\n    ExcerptTokenKind,\n    IResolveDeclarationReferenceResult\n} from '@microsoft/api-extractor-model';\n\nimport { CustomDocNodes } from '../nodes/CustomDocNodeKind';\nimport { DocHeading } from '../nodes/DocHeading';\nimport { DocTable } from '../nodes/DocTable';\nimport { DocEmphasisSpan } from '../nodes/DocEmphasisSpan';\nimport { DocTableRow } from '../nodes/DocTableRow';\nimport { DocTableCell } from '../nodes/DocTableCell';\nimport { DocNoteBox } from '../nodes/DocNoteBox';\nimport { Utilities } from '../utils/Utilities';\nimport { CustomMarkdownEmitter } from '../markdown/CustomMarkdownEmitter';\nimport { PluginLoader } from '../plugin/PluginLoader';\nimport {\n    IMarkdownDocumenterFeatureOnBeforeWritePageArgs,\n    MarkdownDocumenterFeatureContext\n} from '../plugin/MarkdownDocumenterFeature';\nimport { DocumenterConfig } from './DocumenterConfig';\nimport { MarkdownDocumenterAccessor } from '../plugin/MarkdownDocumenterAccessor';\nimport { FrontMatter } from './FrontMatter';\n//import { getHeapStatistics } from 'v8';\n\n/**\n * Renders API documentation in the Markdown file format.\n * For more info:  https://en.wikipedia.org/wiki/Markdown\n */\nexport class MarkdownDocumenter {\n    private readonly _apiModel: ApiModel;\n    private readonly _documenterConfig: DocumenterConfig | undefined;\n    private readonly _tsdocConfiguration: TSDocConfiguration;\n    private readonly _markdownEmitter: CustomMarkdownEmitter;\n    private _outputFolder: string;\n    private readonly _pluginLoader: PluginLoader;\n    private _frontMatter: FrontMatter;\n\n    public constructor(apiModel: ApiModel, documenterConfig: DocumenterConfig | undefined) {\n        this._apiModel = apiModel;\n        this._documenterConfig = documenterConfig;\n        this._tsdocConfiguration = CustomDocNodes.configuration;\n        this._markdownEmitter = new CustomMarkdownEmitter(this._apiModel);\n        this._frontMatter = new FrontMatter();\n\n        this._pluginLoader = new PluginLoader();\n    }\n\n    public generateFiles(outputFolder: string): void {\n        this._outputFolder = outputFolder;\n\n        if (this._documenterConfig) {\n            this._pluginLoader.load(this._documenterConfig, () => {\n                return new MarkdownDocumenterFeatureContext({\n                    apiModel: this._apiModel,\n                    outputFolder: outputFolder,\n                    documenter: new MarkdownDocumenterAccessor({\n                        getLinkForApiItem: (apiItem: ApiItem) => {\n                            return this._getLinkFilenameForApiItem(apiItem);\n                        }\n                    })\n                });\n            });\n        }\n\n        console.log();\n        this._deleteOldOutputFiles();\n\n        this._writeApiItemPage(this._apiModel);\n\n        if (this._pluginLoader.markdownDocumenterFeature) {\n            this._pluginLoader.markdownDocumenterFeature.onFinished({});\n        }\n        this._writeIndex(this._apiModel);\n    }\n\n    private _writeApiItemPage(apiItem: ApiItem, output?: DocSection | DocParagraph): void {\n        const configuration: TSDocConfiguration = this._tsdocConfiguration;\n        if (!output) {\n            output = new DocSection({ configuration: this._tsdocConfiguration });\n        }\n\n        if (output instanceof DocSection) {\n            this._writeBreadcrumb(output, apiItem);\n        }\n        const scopedName: string = apiItem.getScopedNameWithinPackage();\n\n        switch (apiItem.kind) {\n            case ApiItemKind.Class:\n                //output.appendNode(new DocHeading({ configuration, title: `${scopedName} class` }));\n                break;\n            case ApiItemKind.Enum:\n                output.appendNode(new DocHeading({ configuration, title: `${scopedName} enum`, id: this._htmlIDForItem(apiItem) }));\n                break;\n            case ApiItemKind.Interface:\n                //output.appendNode(new DocHeading({ configuration, title: `${scopedName} interface` }));\n                break;\n            case ApiItemKind.Constructor:\n            case ApiItemKind.ConstructSignature:\n                output.appendNode(new DocHeading({ configuration, title: scopedName, level: 2, id: this._htmlIDForItem(apiItem) }));\n                break;\n            case ApiItemKind.Method:\n            case ApiItemKind.MethodSignature:\n                output.appendNode(new DocHeading({ configuration, title: apiItem.displayName, level: 2, id: this._htmlIDForItem(apiItem) }));\n                break;\n            case ApiItemKind.Function:\n                output.appendNode(new DocHeading({ configuration, title: apiItem.displayName, level: 2, id: this._htmlIDForItem(apiItem) }));\n                break;\n            case ApiItemKind.Model:\n                output.appendNode(new DocHeading({ configuration, title: `API Reference` }));\n                break;\n            case ApiItemKind.Namespace:\n                output.appendNode(new DocHeading({ configuration, title: `${scopedName} namespace` }));\n                break;\n            case ApiItemKind.Package:\n                console.log(`Writing ${apiItem.displayName} package`);\n                // const unscopedPackageName: string = PackageName.getUnscopedName(apiItem.displayName);\n                // output.appendNode(new DocHeading({ configuration, title: `${unscopedPackageName} package` }));\n                break;\n            case ApiItemKind.Property:\n            case ApiItemKind.PropertySignature:\n                output.appendNode(new DocHeading({ configuration, title: apiItem.displayName, level: 2, id: this._htmlIDForItem(apiItem) }));\n                break;\n            case ApiItemKind.TypeAlias:\n                output.appendNode(new DocHeading({ configuration, title: apiItem.displayName, level: 2, id: this._htmlIDForItem(apiItem) }));\n                break;\n            case ApiItemKind.Variable:\n                output.appendNode(new DocHeading({ configuration, title: apiItem.displayName, level: 2, id: this._htmlIDForItem(apiItem) }));\n                break;\n            default:\n                throw new Error('Unsupported API item kind: ' + apiItem.kind);\n        }\n\n        if (ApiReleaseTagMixin.isBaseClassOf(apiItem)) {\n            if (apiItem.releaseTag === ReleaseTag.Beta) {\n                this._writeBetaWarning(output);\n            }\n        }\n\n        if (apiItem instanceof ApiDocumentedItem) {\n            const tsdocComment: DocComment | undefined = apiItem.tsdocComment;\n\n            if (tsdocComment) {\n                if (tsdocComment.deprecatedBlock) {\n                    output.appendNode(\n                        new DocNoteBox({ configuration: this._tsdocConfiguration }, [\n                            new DocParagraph({ configuration: this._tsdocConfiguration }, [\n                                new DocPlainText({\n                                    configuration: this._tsdocConfiguration,\n                                    text: 'Warning: This API is now obsolete. '\n                                })\n                            ]),\n                            ...tsdocComment.deprecatedBlock.content.nodes\n                        ])\n                    );\n                }\n\n                this._appendSection(output, tsdocComment.summarySection);\n            }\n        }\n\n        if (apiItem instanceof ApiDeclaredItem) {\n            if (apiItem.excerpt.text.length > 0) {\n                output.appendNode(\n                    new DocParagraph({ configuration }, [\n                        new DocEmphasisSpan({ configuration, bold: true }, [\n                            new DocPlainText({ configuration, text: 'Signature:' })\n                        ])\n                    ])\n                );\n                output.appendNode(\n                    new DocFencedCode({\n                        configuration,\n                        code: apiItem.getExcerptWithModifiers(),\n                        language: 'typescript'\n                    })\n                );\n            }\n\n            this._writeHeritageTypes(output, apiItem);\n        }\n\n        let appendRemarks: boolean = true;\n        switch (apiItem.kind) {\n            case ApiItemKind.Class:\n            case ApiItemKind.Interface:\n            case ApiItemKind.Namespace:\n            case ApiItemKind.Package:\n                this._writeRemarksSection(output, apiItem);\n                appendRemarks = false;\n                break;\n        }\n\n        switch (apiItem.kind) {\n            case ApiItemKind.Class:\n                this._writeClassTables(output, apiItem as ApiClass);\n                break;\n            case ApiItemKind.Enum:\n                this._writeEnumTables(output, apiItem as ApiEnum);\n                break;\n            case ApiItemKind.Interface:\n                this._writeInterfaceTables(output, apiItem as ApiInterface);\n                break;\n            case ApiItemKind.Constructor:\n            case ApiItemKind.ConstructSignature:\n            case ApiItemKind.Method:\n            case ApiItemKind.MethodSignature:\n            case ApiItemKind.Function:\n                this._writeParameterTables(output, apiItem as ApiParameterListMixin);\n                this._writeThrowsSection(output, apiItem);\n                break;\n            case ApiItemKind.Namespace:\n                this._writePackageOrNamespaceTables(output, apiItem as ApiNamespace);\n                break;\n            case ApiItemKind.Model:\n                this._writeModelTable(output, apiItem as ApiModel);\n                break;\n            case ApiItemKind.Package:\n                this._writePackageOrNamespaceTables(output, apiItem as ApiPackage);\n                break;\n            case ApiItemKind.Property:\n            case ApiItemKind.PropertySignature:\n                break;\n            case ApiItemKind.TypeAlias:\n                break;\n            case ApiItemKind.Variable:\n                break;\n            default:\n                throw new Error('Unsupported API item kind: ' + apiItem.kind);\n        }\n\n        if (appendRemarks) {\n            this._writeRemarksSection(output, apiItem);\n        }\n\n        // we only generate top level package pages (which will generate class and interface subpages)\n        const pkg: ApiPackage | undefined = apiItem.getAssociatedPackage();\n        if (!pkg || !this._isAllowedPackage(pkg)) {\n            console.log(`skipping ${apiItem.getScopedNameWithinPackage()}`);\n            if (pkg) {\n                console.log(`\\t${pkg.name} package isn't in the allowed list`);\n            }\n            return;\n        }\n\n        // temp hack to reduce the size of the generated content\n        if (!this._shouldHaveStandalonePage(apiItem)) {\n            return;\n        }\n\n        const filename: string = path.join(this._outputFolder, this._getFilenameForApiItem(apiItem));\n        const stringBuilder: StringBuilder = new StringBuilder();\n\n        this._writeFrontMatter(stringBuilder, apiItem);\n\n        this._markdownEmitter.emit(stringBuilder, output, {\n            contextApiItem: apiItem,\n            onGetFilenameForApiItem: (apiItemForFilename: ApiItem) => {\n                return this._getLinkFilenameForApiItem(apiItemForFilename);\n            }\n        });\n\n        let pageContent: string = stringBuilder.toString();\n\n        if (this._pluginLoader.markdownDocumenterFeature) {\n            // Allow the plugin to customize the pageContent\n            const eventArgs: IMarkdownDocumenterFeatureOnBeforeWritePageArgs = {\n                apiItem: apiItem,\n                outputFilename: filename,\n                pageContent: pageContent\n            };\n            this._pluginLoader.markdownDocumenterFeature.onBeforeWritePage(eventArgs);\n            pageContent = eventArgs.pageContent;\n        }\n\n        FileSystem.writeFile(filename, pageContent, {\n            convertLineEndings: this._documenterConfig ? this._documenterConfig.newlineKind : NewlineKind.CrLf,\n            ensureFolderExists: true\n        });\n        console.log(filename, \"saved to disk\")\n    }\n\n    private _writeHeritageTypes(output: DocSection | DocParagraph, apiItem: ApiDeclaredItem): void {\n        const configuration: TSDocConfiguration = this._tsdocConfiguration;\n\n        if (apiItem instanceof ApiClass) {\n            if (apiItem.extendsType) {\n                const extendsParagraph: DocParagraph = new DocParagraph({ configuration }, [\n                    new DocEmphasisSpan({ configuration, bold: true }, [\n                        new DocPlainText({ configuration, text: 'Extends: ' })\n                    ])\n                ]);\n                this._appendExcerptWithHyperlinks(extendsParagraph, apiItem.extendsType.excerpt);\n                output.appendNode(extendsParagraph);\n            }\n            if (apiItem.implementsTypes.length > 0) {\n                const extendsParagraph: DocParagraph = new DocParagraph({ configuration }, [\n                    new DocEmphasisSpan({ configuration, bold: true }, [\n                        new DocPlainText({ configuration, text: 'Implements: ' })\n                    ])\n                ]);\n                let needsComma: boolean = false;\n                for (const implementsType of apiItem.implementsTypes) {\n                    if (needsComma) {\n                        extendsParagraph.appendNode(new DocPlainText({ configuration, text: ', ' }));\n                    }\n                    this._appendExcerptWithHyperlinks(extendsParagraph, implementsType.excerpt);\n                    needsComma = true;\n                }\n                output.appendNode(extendsParagraph);\n            }\n        }\n\n        if (apiItem instanceof ApiInterface) {\n            if (apiItem.extendsTypes.length > 0) {\n                const extendsParagraph: DocParagraph = new DocParagraph({ configuration }, [\n                    new DocEmphasisSpan({ configuration, bold: true }, [\n                        new DocPlainText({ configuration, text: 'Extends: ' })\n                    ])\n                ]);\n                let needsComma: boolean = false;\n                for (const extendsType of apiItem.extendsTypes) {\n                    if (needsComma) {\n                        extendsParagraph.appendNode(new DocPlainText({ configuration, text: ', ' }));\n                    }\n                    this._appendExcerptWithHyperlinks(extendsParagraph, extendsType.excerpt);\n                    needsComma = true;\n                }\n                output.appendNode(extendsParagraph);\n            }\n        }\n    }\n\n    private _writeRemarksSection(output: DocSection | DocParagraph, apiItem: ApiItem): void {\n        if (apiItem instanceof ApiDocumentedItem) {\n            const tsdocComment: DocComment | undefined = apiItem.tsdocComment;\n\n            if (tsdocComment) {\n                // Write the @remarks block\n                if (tsdocComment.remarksBlock) {\n                    output.appendNode(new DocHeading({ configuration: this._tsdocConfiguration, title: 'Remarks' }));\n                    this._appendSection(output, tsdocComment.remarksBlock.content);\n                }\n\n                // Write the @example blocks\n                const exampleBlocks: DocBlock[] = tsdocComment.customBlocks.filter(\n                    (x) => x.blockTag.tagNameWithUpperCase === StandardTags.example.tagNameWithUpperCase\n                );\n\n                let exampleNumber: number = 1;\n                for (const exampleBlock of exampleBlocks) {\n                    const heading: string = exampleBlocks.length > 1 ? `Example ${exampleNumber}` : 'Example';\n\n                    output.appendNode(new DocHeading({ configuration: this._tsdocConfiguration, title: heading }));\n\n                    this._appendSection(output, exampleBlock.content);\n\n                    ++exampleNumber;\n                }\n            }\n        }\n    }\n\n    private _writeThrowsSection(output: DocSection | DocParagraph, apiItem: ApiItem): void {\n        if (apiItem instanceof ApiDocumentedItem) {\n            const tsdocComment: DocComment | undefined = apiItem.tsdocComment;\n\n            if (tsdocComment) {\n                // Write the @throws blocks\n                const throwsBlocks: DocBlock[] = tsdocComment.customBlocks.filter(\n                    (x) => x.blockTag.tagNameWithUpperCase === StandardTags.throws.tagNameWithUpperCase\n                );\n\n                if (throwsBlocks.length > 0) {\n                    const heading: string = 'Exceptions';\n                    output.appendNode(new DocHeading({ configuration: this._tsdocConfiguration, title: heading }));\n\n                    for (const throwsBlock of throwsBlocks) {\n                        this._appendSection(output, throwsBlock.content);\n                    }\n                }\n            }\n        }\n    }\n\n    private _writeIndex(apiItem: ApiItem): void {\n        // const indexPath: string = path.join(this._outputFolder, '_index.md');\n        // const output: StringBuilder = new StringBuilder();\n        // output.append(`---\\nTitle: API Reference\\n---\\n\\n`);\n        // // TODO:\n        // FileSystem.writeFile(indexPath, output.toString());\n    }\n\n    /**\n     * GENERATE PAGE: MODEL\n     */\n    private _writeModelTable(output: DocSection | DocParagraph, apiModel: ApiModel): void {\n        const configuration: TSDocConfiguration = this._tsdocConfiguration;\n\n        const packagesTable: DocTable = new DocTable({\n            configuration,\n            headerTitles: ['Package', 'Description'],\n            cssClass: 'package-list',\n            caption: 'List of packages in this model'\n        });\n\n        for (const apiMember of apiModel.members) {\n            const row: DocTableRow = new DocTableRow({ configuration }, [\n                this._createTitleCell(apiMember),\n                this._createDescriptionCell(apiMember)\n            ]);\n\n            switch (apiMember.kind) {\n                case ApiItemKind.Package:\n                    packagesTable.addRow(row);\n                    this._writeApiItemPage(apiMember);\n                    break;\n            }\n        }\n\n        if (packagesTable.rows.length > 0) {\n            output.appendNode(new DocHeading({ configuration: this._tsdocConfiguration, title: 'Packages' }));\n            output.appendNode(packagesTable);\n        }\n    }\n\n    /**\n     * GENERATE PAGE: PACKAGE or NAMESPACE\n     */\n    private _writePackageOrNamespaceTables(output: DocSection | DocParagraph, apiContainer: ApiPackage | ApiNamespace): void {\n        const configuration: TSDocConfiguration = this._tsdocConfiguration;\n\n        const classesTable: DocTable = new DocTable({\n            configuration,\n            headerTitles: ['Class', 'Description'],\n            cssClass: 'class-list',\n            caption: 'List of classes contained in this package or namespace'\n        });\n\n        const enumerationsTable: DocTable = new DocTable({\n            configuration,\n            headerTitles: ['Enumeration', 'Description'],\n            cssClass: 'enum-list'\n            ,\n            caption: 'List of enums contained in this package or namespace'\n        });\n\n        const functionsTable: DocTable = new DocTable({\n            configuration,\n            headerTitles: ['Function', 'Description'],\n            cssClass: 'function-list',\n            caption: 'List of functions contained in this package or namespace'\n        });\n\n        const interfacesTable: DocTable = new DocTable({\n            configuration,\n            headerTitles: ['Interface', 'Description'],\n            cssClass: 'interface-list',\n            caption: 'List of interfaces contained in this package or namespace'\n        });\n\n        const namespacesTable: DocTable = new DocTable({\n            configuration,\n            headerTitles: ['Namespace', 'Description'],\n            cssClass: 'namespace-list',\n            caption: 'List of namespaces contained in this package or namespace'\n        });\n\n        const variablesTable: DocTable = new DocTable({\n            configuration,\n            headerTitles: ['Variable', 'Description'],\n            cssClass: 'variable-list',\n            caption: 'List of variables contained in this package or namespace'\n        });\n\n        const typeAliasesTable: DocTable = new DocTable({\n            configuration,\n            headerTitles: ['Type Alias', 'Description'],\n            cssClass: 'alias-list',\n            caption: 'List of type aliases contained in this package or namespace'\n        });\n\n        const enumsParagraph: DocParagraph = new DocParagraph({ configuration });\n        const varsParagraph: DocParagraph = new DocParagraph({ configuration });\n        const functionsParagraph: DocParagraph = new DocParagraph({ configuration });\n        const aliasesParagraph: DocParagraph = new DocParagraph({ configuration });\n\n        const apiMembers: ReadonlyArray<ApiItem> =\n            apiContainer.kind === ApiItemKind.Package\n                ? (apiContainer as ApiPackage).entryPoints[0].members\n                : (apiContainer as ApiNamespace).members;\n\n        // loop through the members of the package/namespace.\n        for (const apiMember of apiMembers) {\n            const row: DocTableRow = new DocTableRow({ configuration }, [\n                this._createTitleCell(apiMember),\n                this._createDescriptionCell(apiMember)\n            ]);\n\n            switch (apiMember.kind) {\n                case ApiItemKind.Class:\n                    classesTable.addRow(row);\n                    this._writeApiItemPage(apiMember);\n                    break;\n\n                case ApiItemKind.Enum:\n                    enumerationsTable.addRow(row);\n                    this._writeApiItemPage(apiMember, enumsParagraph);\n                    break;\n\n                case ApiItemKind.Interface:\n                    interfacesTable.addRow(row);\n                    this._writeApiItemPage(apiMember);\n                    break;\n\n                case ApiItemKind.Namespace:\n                    namespacesTable.addRow(row);\n                    this._writeApiItemPage(apiMember, output);\n                    break;\n\n                case ApiItemKind.Function:\n                    functionsTable.addRow(row);\n                    this._writeApiItemPage(apiMember, functionsParagraph);\n                    break;\n\n                case ApiItemKind.TypeAlias:\n                    typeAliasesTable.addRow(row);\n                    this._writeApiItemPage(apiMember, aliasesParagraph);\n                    break;\n\n                case ApiItemKind.Variable:\n                    variablesTable.addRow(row);\n                    this._writeApiItemPage(apiMember, varsParagraph);\n                    break;\n            }\n        }\n\n        if (classesTable.rows.length > 0) {\n            output.appendNode(new DocHeading({ configuration: this._tsdocConfiguration, title: 'Classes' }));\n            output.appendNode(classesTable);\n        }\n\n        if (enumerationsTable.rows.length > 0) {\n            output.appendNode(new DocHeading({ configuration: this._tsdocConfiguration, title: 'Enumerations' }));\n            output.appendNode(enumerationsTable);\n        }\n        if (functionsTable.rows.length > 0) {\n            output.appendNode(new DocHeading({ configuration: this._tsdocConfiguration, title: 'Functions' }));\n            output.appendNode(functionsTable);\n        }\n\n        if (interfacesTable.rows.length > 0) {\n            output.appendNode(new DocHeading({ configuration: this._tsdocConfiguration, title: 'Interfaces' }));\n            output.appendNode(interfacesTable);\n        }\n\n        if (namespacesTable.rows.length > 0) {\n            output.appendNode(new DocHeading({ configuration: this._tsdocConfiguration, title: 'Namespaces' }));\n            output.appendNode(namespacesTable);\n        }\n\n        if (variablesTable.rows.length > 0) {\n            output.appendNode(new DocHeading({ configuration: this._tsdocConfiguration, title: 'Variables' }));\n            output.appendNode(variablesTable);\n        }\n\n        if (typeAliasesTable.rows.length > 0) {\n            output.appendNode(new DocHeading({ configuration: this._tsdocConfiguration, title: 'Type Aliases' }));\n            output.appendNode(typeAliasesTable);\n        }\n\n        const details: DocSection = new DocSection({ configuration }, [\n            new DocHtmlStartTag({ configuration: this._tsdocConfiguration, name: \"hr\" }),\n            new DocHtmlStartTag({\n                configuration: this._tsdocConfiguration, name: \"div\", htmlAttributes: [\n                    new DocHtmlAttribute({ configuration: this._tsdocConfiguration, name: \"id\", value: \"package-details\" })]\n            })\n        ]);\n\n\n        if (enumsParagraph.nodes.length > 0) {\n            details.appendNode(new DocHeading({ configuration, title: 'Enumerations' }));\n            details.appendNode(enumsParagraph);\n        }\n\n        if (functionsParagraph.nodes.length > 0) {\n            details.appendNode(new DocHeading({ configuration, title: 'Functions' }));\n            details.appendNode(functionsParagraph);\n        }\n\n        if (varsParagraph.nodes.length > 0) {\n            details.appendNode(new DocHeading({ configuration, title: 'Variables' }));\n            details.appendNode(varsParagraph);\n        }\n\n        if (aliasesParagraph.nodes.length > 0) {\n            details.appendNode(new DocHeading({ configuration, title: 'Type Aliases' }));\n            details.appendNode(aliasesParagraph);\n        }\n\n        details.appendNode(new DocHtmlEndTag({\n            configuration, name: \"div\"\n        }));\n\n        output.appendNode(details)\n\n    }\n\n    /**\n     * GENERATE PAGE: CLASS\n     */\n    private _writeClassTables(output: DocSection | DocParagraph, apiClass: ApiClass): void {\n        const configuration: TSDocConfiguration = this._tsdocConfiguration;\n\n        const eventsTable: DocTable = new DocTable({\n            configuration,\n            headerTitles: ['Property', 'Modifiers', 'Type', 'Description'],\n            cssClass: 'event-list',\n            caption: 'List of events in use in this class'\n        });\n\n        const constructorsTable: DocTable = new DocTable({\n            configuration,\n            headerTitles: ['Constructor', 'Modifiers', 'Description'],\n            cssClass: 'constructor-list',\n            caption: 'List of constructors for this class'\n        });\n\n        const propertiesTable: DocTable = new DocTable({\n            configuration,\n            headerTitles: ['Property', 'Modifiers', 'Type', 'Description'],\n            cssClass: 'property-list',\n            caption: 'List of properties for this class'\n        });\n\n        const methodsTable: DocTable = new DocTable({\n            configuration,\n            headerTitles: ['Method', 'Modifiers', 'Description'],\n            cssClass: 'method-list',\n            caption: 'List of methods on this class'\n        });\n\n\n        const constructorsParagraph: DocParagraph = new DocParagraph({ configuration });\n        const methodsParagraph: DocParagraph = new DocParagraph({ configuration });\n        const propertiesParagraph: DocParagraph = new DocParagraph({ configuration });\n        const eventsParagraph: DocParagraph = new DocParagraph({ configuration });\n\n        for (const apiMember of apiClass.members) {\n            switch (apiMember.kind) {\n                case ApiItemKind.Constructor: {\n                    constructorsTable.addRow(\n                        new DocTableRow({ configuration }, [\n                            this._createTitleCell(apiMember),\n                            this._createModifiersCell(apiMember),\n                            this._createDescriptionCell(apiMember)\n                        ])\n                    );\n\n                    this._writeApiItemPage(apiMember, constructorsParagraph);\n                    break;\n                }\n                case ApiItemKind.Method: {\n                    methodsTable.addRow(\n                        new DocTableRow({ configuration }, [\n                            this._createTitleCell(apiMember),\n                            this._createModifiersCell(apiMember),\n                            this._createDescriptionCell(apiMember)\n                        ])\n                    );\n\n                    this._writeApiItemPage(apiMember, methodsParagraph);\n                    break;\n                }\n                case ApiItemKind.Property: {\n                    if ((apiMember as ApiPropertyItem).isEventProperty) {\n                        eventsTable.addRow(\n                            new DocTableRow({ configuration }, [\n                                this._createTitleCell(apiMember),\n                                this._createModifiersCell(apiMember),\n                                this._createPropertyTypeCell(apiMember),\n                                this._createDescriptionCell(apiMember)\n                            ])\n                        );\n                        this._writeApiItemPage(apiMember, eventsParagraph);\n                    } else {\n                        propertiesTable.addRow(\n                            new DocTableRow({ configuration }, [\n                                this._createTitleCell(apiMember),\n                                this._createModifiersCell(apiMember),\n                                this._createPropertyTypeCell(apiMember),\n                                this._createDescriptionCell(apiMember)\n                            ])\n                        );\n                        this._writeApiItemPage(apiMember, propertiesParagraph);\n                    }\n\n\n                    break;\n                }\n            }\n        }\n\n        if (eventsTable.rows.length > 0) {\n            output.appendNode(new DocHeading({ configuration: this._tsdocConfiguration, title: 'Events' }));\n            output.appendNode(eventsTable);\n        }\n\n        if (constructorsTable.rows.length > 0) {\n            output.appendNode(new DocHeading({ configuration: this._tsdocConfiguration, title: 'Constructors' }));\n            output.appendNode(constructorsTable);\n        }\n\n        if (propertiesTable.rows.length > 0) {\n            output.appendNode(new DocHeading({ configuration: this._tsdocConfiguration, title: 'Properties' }));\n            output.appendNode(propertiesTable);\n        }\n\n        if (methodsTable.rows.length > 0) {\n            output.appendNode(new DocHeading({ configuration: this._tsdocConfiguration, title: 'Methods' }));\n            output.appendNode(methodsTable);\n        }\n\n        const details: DocSection = new DocSection({ configuration: this._tsdocConfiguration }, [\n            new DocHtmlStartTag({ configuration: this._tsdocConfiguration, name: \"hr\" }),\n            new DocHtmlStartTag({\n                configuration: this._tsdocConfiguration, name: \"div\", htmlAttributes: [\n                    new DocHtmlAttribute({ configuration: this._tsdocConfiguration, name: \"id\", value: \"class-details\" })]\n            })\n        ]);\n\n        if (eventsParagraph.nodes.length > 0) {\n            details.appendNode(new DocHeading({ configuration: this._tsdocConfiguration, title: 'Events' }));\n            details.appendNode(eventsParagraph);\n        }\n\n        if (constructorsParagraph.nodes.length > 0) {\n            details.appendNode(new DocHeading({ configuration: this._tsdocConfiguration, title: 'Constructors' }));\n            details.appendNode(constructorsParagraph);\n        }\n\n        if (propertiesParagraph.nodes.length > 0) {\n            details.appendNode(new DocHeading({ configuration: this._tsdocConfiguration, title: 'Properties' }));\n            details.appendNode(propertiesParagraph);\n        }\n\n        if (methodsParagraph.nodes.length > 0) {\n            details.appendNode(new DocHeading({ configuration: this._tsdocConfiguration, title: 'Methods' }));\n            details.appendNode(methodsParagraph);\n        }\n\n        details.appendNode(new DocHtmlEndTag({\n            configuration: this._tsdocConfiguration, name: \"div\"\n        }));\n\n        output.appendNode(details);\n\n    }\n\n    /**\n     * GENERATE PAGE: ENUM\n     */\n    private _writeEnumTables(output: DocSection | DocParagraph, apiEnum: ApiEnum): void {\n        const configuration: TSDocConfiguration = this._tsdocConfiguration;\n\n        const enumMembersTable: DocTable = new DocTable({\n            configuration,\n            headerTitles: ['Member', 'Value', 'Description'],\n            cssClass: 'enum-list',\n            caption: 'List of members in use in this enum'\n        });\n\n        for (const apiEnumMember of apiEnum.members) {\n            enumMembersTable.addRow(\n                new DocTableRow({ configuration }, [\n                    new DocTableCell({ configuration }, [\n                        new DocParagraph({ configuration }, [\n                            new DocPlainText({ configuration, text: Utilities.getConciseSignature(apiEnumMember) })\n                        ])\n                    ]),\n\n                    new DocTableCell({ configuration }, [\n                        new DocParagraph({ configuration }, [\n                            new DocCodeSpan({ configuration, code: apiEnumMember.initializerExcerpt.text })\n                        ])\n                    ]),\n\n                    this._createDescriptionCell(apiEnumMember)\n                ])\n            );\n        }\n\n        if (enumMembersTable.rows.length > 0) {\n            output.appendNode(\n                new DocHeading({ configuration: this._tsdocConfiguration, title: 'Enumeration Members' })\n            );\n            output.appendNode(enumMembersTable);\n        }\n    }\n\n    /**\n     * GENERATE PAGE: INTERFACE\n     */\n    private _writeInterfaceTables(output: DocSection | DocParagraph, apiClass: ApiInterface): void {\n        const configuration: TSDocConfiguration = this._tsdocConfiguration;\n\n        const eventsTable: DocTable = new DocTable({\n            configuration,\n            headerTitles: ['Property', 'Type', 'Description'],\n            cssClass: 'event-list',\n            caption: 'List of events in use in this interface'\n        });\n\n        const propertiesTable: DocTable = new DocTable({\n            configuration,\n            headerTitles: ['Property', 'Type', 'Description'],\n            cssClass: 'property-list',\n            caption: 'List of properties of this interface'\n        });\n\n        const methodsTable: DocTable = new DocTable({\n            configuration,\n            headerTitles: ['Method', 'Description'],\n            cssClass: 'method-list',\n            caption: 'List of methods of this class'\n        });\n\n        const eventsParagraph: DocParagraph = new DocParagraph({ configuration });\n        const propertiesParagraph: DocParagraph = new DocParagraph({ configuration });\n        const methodsParagraph: DocParagraph = new DocParagraph({ configuration });\n\n        for (const apiMember of apiClass.members) {\n            switch (apiMember.kind) {\n                case ApiItemKind.ConstructSignature:\n                case ApiItemKind.MethodSignature: {\n                    methodsTable.addRow(\n                        new DocTableRow({ configuration }, [\n                            this._createTitleCell(apiMember),\n                            this._createDescriptionCell(apiMember)\n                        ])\n                    );\n\n                    this._writeApiItemPage(apiMember, methodsParagraph);\n                    break;\n                }\n                case ApiItemKind.PropertySignature: {\n                    if ((apiMember as ApiPropertyItem).isEventProperty) {\n                        eventsTable.addRow(\n                            new DocTableRow({ configuration }, [\n                                this._createTitleCell(apiMember),\n                                this._createPropertyTypeCell(apiMember),\n                                this._createDescriptionCell(apiMember)\n                            ])\n                        );\n                        this._writeApiItemPage(apiMember, propertiesParagraph);\n                    } else {\n                        propertiesTable.addRow(\n                            new DocTableRow({ configuration }, [\n                                this._createTitleCell(apiMember),\n                                this._createPropertyTypeCell(apiMember),\n                                this._createDescriptionCell(apiMember)\n                            ])\n                        );\n                        this._writeApiItemPage(apiMember, eventsParagraph);\n                    }\n\n\n                    break;\n                }\n            }\n        }\n\n        if (eventsTable.rows.length > 0) {\n            output.appendNode(new DocHeading({ configuration: this._tsdocConfiguration, title: 'Events' }));\n            output.appendNode(eventsTable);\n        }\n\n        if (propertiesTable.rows.length > 0) {\n            output.appendNode(new DocHeading({ configuration: this._tsdocConfiguration, title: 'Properties' }));\n            output.appendNode(propertiesTable);\n        }\n\n        if (methodsTable.rows.length > 0) {\n            output.appendNode(new DocHeading({ configuration: this._tsdocConfiguration, title: 'Methods' }));\n            output.appendNode(methodsTable);\n        }\n\n        const details: DocSection = new DocSection({ configuration: this._tsdocConfiguration }, [\n            new DocHtmlStartTag({ configuration: this._tsdocConfiguration, name: \"hr\" }),\n            new DocHtmlStartTag({\n                configuration: this._tsdocConfiguration, name: \"div\", htmlAttributes: [\n                    new DocHtmlAttribute({ configuration: this._tsdocConfiguration, name: \"id\", value: \"interface-details\" })]\n            })\n        ]);\n\n        if (eventsParagraph.nodes.length > 0) {\n            details.appendNode(new DocHeading({ configuration: this._tsdocConfiguration, title: 'Events' }));\n            details.appendNode(eventsParagraph);\n        }\n\n        if (propertiesParagraph.nodes.length > 0) {\n            details.appendNode(new DocHeading({ configuration: this._tsdocConfiguration, title: 'Properties' }));\n            details.appendNode(propertiesParagraph);\n        }\n\n        if (methodsParagraph.nodes.length > 0) {\n            details.appendNode(new DocHeading({ configuration: this._tsdocConfiguration, title: 'Methods' }));\n            details.appendNode(methodsParagraph);\n        }\n\n        details.appendNode(new DocHtmlEndTag({\n            configuration: this._tsdocConfiguration, name: \"div\"\n        }));\n\n        output.appendNode(details);\n    }\n\n    /**\n     * GENERATE PAGE: FUNCTION-LIKE\n     */\n    private _writeParameterTables(output: DocSection | DocParagraph, apiParameterListMixin: ApiParameterListMixin): void {\n        const configuration: TSDocConfiguration = this._tsdocConfiguration;\n\n        const parametersTable: DocTable = new DocTable({\n            configuration,\n            headerTitles: ['Parameter', 'Type', 'Description'],\n            cssClass: 'param-list'\n            ,\n            caption: 'List of parameters'\n        });\n        for (const apiParameter of apiParameterListMixin.parameters) {\n            const parameterDescription: DocSection = new DocSection({ configuration });\n            if (apiParameter.tsdocParamBlock) {\n                this._appendSection(parameterDescription, apiParameter.tsdocParamBlock.content);\n            }\n\n            parametersTable.addRow(\n                new DocTableRow({ configuration }, [\n                    new DocTableCell({ configuration }, [\n                        new DocParagraph({ configuration }, [\n                            new DocPlainText({ configuration, text: apiParameter.name })\n                        ])\n                    ]),\n                    new DocTableCell({ configuration }, [\n                        this._createParagraphForTypeExcerpt(apiParameter.parameterTypeExcerpt)\n                    ]),\n                    new DocTableCell({ configuration }, parameterDescription.nodes)\n                ])\n            );\n        }\n\n        if (parametersTable.rows.length > 0) {\n            output.appendNode(new DocHeading({ configuration: this._tsdocConfiguration, title: 'Parameters', level: 4 }));\n            output.appendNode(parametersTable);\n        }\n\n        if (ApiReturnTypeMixin.isBaseClassOf(apiParameterListMixin)) {\n            const returnTypeExcerpt: Excerpt = apiParameterListMixin.returnTypeExcerpt;\n            output.appendNode(\n                new DocParagraph({ configuration }, [\n                    new DocEmphasisSpan({ configuration, bold: true }, [\n                        new DocPlainText({ configuration, text: 'Returns:' })\n                    ])\n                ])\n            );\n\n            output.appendNode(this._createParagraphForTypeExcerpt(returnTypeExcerpt));\n\n            if (apiParameterListMixin instanceof ApiDocumentedItem) {\n                if (apiParameterListMixin.tsdocComment && apiParameterListMixin.tsdocComment.returnsBlock) {\n                    this._appendSection(output, apiParameterListMixin.tsdocComment.returnsBlock.content);\n                }\n            }\n        }\n    }\n\n    private _createParagraphForTypeExcerpt(excerpt: Excerpt): DocParagraph {\n        const configuration: TSDocConfiguration = this._tsdocConfiguration;\n\n        const paragraph: DocParagraph = new DocParagraph({ configuration });\n\n        if (!excerpt.text.trim()) {\n            paragraph.appendNode(new DocPlainText({ configuration, text: '(not declared)' }));\n        } else {\n            this._appendExcerptWithHyperlinks(paragraph, excerpt);\n        }\n\n        return paragraph;\n    }\n\n    private _appendExcerptWithHyperlinks(docNodeContainer: DocNodeContainer, excerpt: Excerpt): void {\n        const configuration: TSDocConfiguration = this._tsdocConfiguration;\n\n        for (const token of excerpt.spannedTokens) {\n            // Markdown doesn't provide a standardized syntax for hyperlinks inside code spans, so we will render\n            // the type expression as DocPlainText.  Instead of creating multiple DocParagraphs, we can simply\n            // discard any newlines and let the renderer do normal word-wrapping.\n            const unwrappedTokenText: string = token.text.replace(/[\\r\\n]+/g, ' ');\n\n            // If it's hyperlinkable, then append a DocLinkTag\n            if (token.kind === ExcerptTokenKind.Reference && token.canonicalReference) {\n                const apiItemResult: IResolveDeclarationReferenceResult = this._apiModel.resolveDeclarationReference(\n                    token.canonicalReference,\n                    undefined\n                );\n\n                if (apiItemResult.resolvedApiItem) {\n                    docNodeContainer.appendNode(\n                        new DocLinkTag({\n                            configuration,\n                            tagName: '@link',\n                            linkText: unwrappedTokenText,\n                            urlDestination: this._getLinkFilenameForApiItem(apiItemResult.resolvedApiItem)\n                        })\n                    );\n                    continue;\n                }\n            }\n\n            // Otherwise append non-hyperlinked text\n            docNodeContainer.appendNode(new DocPlainText({ configuration, text: unwrappedTokenText }));\n        }\n    }\n\n    private _createTitleCell(apiItem: ApiItem): DocTableCell {\n        const configuration: TSDocConfiguration = this._tsdocConfiguration;\n\n        return new DocTableCell({ configuration }, [\n            new DocParagraph({ configuration }, [\n                new DocLinkTag({\n                    configuration,\n                    tagName: '@link',\n                    linkText: Utilities.getConciseSignature(apiItem),\n                    urlDestination: this._getLinkFilenameForApiItem(apiItem)\n                })\n            ])\n        ]);\n    }\n\n    /**\n     * This generates a DocTableCell for an ApiItem including the summary section and \"(BETA)\" annotation.\n     *\n     * @remarks\n     * We mostly assume that the input is an ApiDocumentedItem, but it's easier to perform this as a runtime\n     * check than to have each caller perform a type cast.\n     */\n    private _createDescriptionCell(apiItem: ApiItem): DocTableCell {\n        const configuration: TSDocConfiguration = this._tsdocConfiguration;\n\n        const section: DocSection = new DocSection({ configuration });\n\n        if (ApiReleaseTagMixin.isBaseClassOf(apiItem)) {\n            if (apiItem.releaseTag === ReleaseTag.Beta) {\n                section.appendNodesInParagraph([\n                    new DocEmphasisSpan({ configuration, bold: true, italic: true }, [\n                        new DocPlainText({ configuration, text: '(BETA)' })\n                    ]),\n                    new DocPlainText({ configuration, text: ' ' })\n                ]);\n            }\n        }\n\n        if (apiItem instanceof ApiDocumentedItem) {\n            if (apiItem.tsdocComment !== undefined) {\n                this._appendAndMergeSection(section, apiItem.tsdocComment.summarySection);\n            }\n        }\n\n        return new DocTableCell({ configuration }, section.nodes);\n    }\n\n    private _createModifiersCell(apiItem: ApiItem): DocTableCell {\n        const configuration: TSDocConfiguration = this._tsdocConfiguration;\n\n        const section: DocSection = new DocSection({ configuration });\n\n        if (ApiStaticMixin.isBaseClassOf(apiItem)) {\n            if (apiItem.isStatic) {\n                section.appendNodeInParagraph(new DocCodeSpan({ configuration, code: 'static' }));\n            }\n        }\n\n        return new DocTableCell({ configuration }, section.nodes);\n    }\n\n    private _createPropertyTypeCell(apiItem: ApiItem): DocTableCell {\n        const configuration: TSDocConfiguration = this._tsdocConfiguration;\n\n        const section: DocSection = new DocSection({ configuration });\n\n        if (apiItem instanceof ApiPropertyItem) {\n            section.appendNode(this._createParagraphForTypeExcerpt(apiItem.propertyTypeExcerpt));\n        }\n\n        return new DocTableCell({ configuration }, section.nodes);\n    }\n\n    // prepare the markdown frontmatter by providing the metadata needed to nicely render the page.\n    private _writeFrontMatter(stringBuilder: StringBuilder, item: ApiItem): void {\n\n        this._frontMatter.kind = item.kind;\n        this._frontMatter.title = item.displayName.replace(/\"/g, '').replace(/!/g, '');\n        let apiMembers: ReadonlyArray<ApiItem> = item.members;\n        switch (item.kind) {\n            case ApiItemKind.Class:\n                const classItem: ApiClass = item as ApiClass;\n                if (classItem.tsdocComment) {\n                    const tmpStrBuilder: StringBuilder = new StringBuilder();\n                    const summary: DocSection = classItem.tsdocComment!.summarySection;\n                    this._markdownEmitter.emit(tmpStrBuilder, summary, {\n                        contextApiItem: item,\n                        onGetFilenameForApiItem: (apiItemForFilename: ApiItem) => {\n                            return this._getLinkFilenameForApiItem(apiItemForFilename);\n                        }\n                    });\n                    this._frontMatter.summary = tmpStrBuilder.toString().replace(/\"/g, \"'\").trim();\n                }\n                this._frontMatter.title += \" Class\"\n                break;\n            case ApiItemKind.Interface:\n                this._frontMatter.title += \" Interface\"\n                break\n            case ApiItemKind.Package:\n                this._frontMatter.title += \" Package\"\n                apiMembers =\n                    item.kind === ApiItemKind.Package\n                        ? (item as ApiPackage).entryPoints[0].members\n                        : (item as ApiNamespace).members;\n                break\n            default:\n                break;\n        }\n\n        this._frontMatter.members = new Map<string, string[]>();\n\n        apiMembers.forEach(element => {\n            if (element.displayName === \"\") { return }\n            if (!this._frontMatter.members[element.kind]) { this._frontMatter.members[element.kind] = [] }\n            this._frontMatter.members[element.kind].push(element.displayName);\n        });\n\n        const pkg: ApiPackage | undefined = item.getAssociatedPackage();\n        if (pkg) {\n            this._frontMatter.package = pkg.name.replace(/\"/g, '').replace(/!/g, '');\n        } else {\n            this._frontMatter.package = \"undefined\";\n        }\n        // this._frontMatter.members = this._frontMatter.members;\n\n\n        stringBuilder.append(JSON.stringify(this._frontMatter));\n        stringBuilder.append(\n            '\\n\\n[//]: # (Do not edit this file. It is automatically generated by API Documenter.)\\n\\n'\n        );\n\n    }\n\n    private _writeBreadcrumb(output: DocSection, apiItem: ApiItem): void {\n        // no breadcrumbs for inner content\n        if ((apiItem.kind !== ApiItemKind.Package) && (apiItem.kind !== ApiItemKind.Class) && (apiItem.kind !== ApiItemKind.Interface)) {\n            return;\n        }\n\n        output.appendNodeInParagraph(\n            new DocLinkTag({\n                configuration: this._tsdocConfiguration,\n                tagName: '@link',\n                linkText: 'Packages',\n                urlDestination: this._getLinkFilenameForApiItem(this._apiModel)\n            })\n        );\n\n        for (const hierarchyItem of apiItem.getHierarchy()) {\n            switch (hierarchyItem.kind) {\n                case ApiItemKind.Model:\n                case ApiItemKind.EntryPoint:\n                    // We don't show the model as part of the breadcrumb because it is the root-level container.\n                    // We don't show the entry point because today API Extractor doesn't support multiple entry points;\n                    // this may change in the future.\n                    break;\n                default:\n                    output.appendNodesInParagraph([\n                        new DocPlainText({\n                            configuration: this._tsdocConfiguration,\n                            text: ' > '\n                        }),\n                        new DocLinkTag({\n                            configuration: this._tsdocConfiguration,\n                            tagName: '@link',\n                            linkText: hierarchyItem.displayName,\n                            urlDestination: this._getLinkFilenameForApiItem(hierarchyItem)\n                        })\n                    ]);\n            }\n        }\n    }\n\n    private _writeBetaWarning(output: DocSection | DocParagraph): void {\n        const configuration: TSDocConfiguration = this._tsdocConfiguration;\n        const betaWarning: string =\n            'This API is provided as a preview for developers and may change' +\n            ' based on feedback that we receive.  Do not use this API in a production environment.';\n        output.appendNode(\n            new DocNoteBox({ configuration }, [\n                new DocParagraph({ configuration }, [new DocPlainText({ configuration, text: betaWarning })])\n            ])\n        );\n    }\n\n    private _appendSection(output: DocSection | DocParagraph, docSection: DocSection): void {\n        for (const node of docSection.nodes) {\n            output.appendNode(node);\n        }\n    }\n\n    private _appendAndMergeSection(output: DocSection, docSection: DocSection): void {\n        let firstNode: boolean = true;\n        for (const node of docSection.nodes) {\n            if (firstNode) {\n                if (node.kind === DocNodeKind.Paragraph) {\n                    output.appendNodesInParagraph(node.getChildNodes());\n                    firstNode = false;\n                    continue;\n                }\n            }\n            firstNode = false;\n\n            output.appendNode(node);\n        }\n    }\n\n    private _getFilenameForApiItem(apiItem: ApiItem): string {\n        if (apiItem.kind === ApiItemKind.Model) {\n            return '/';\n        }\n\n        let baseName: string = '';\n        for (const hierarchyItem of apiItem.getHierarchy()) {\n            // For overloaded methods, add a suffix such as \"MyClass.myMethod_2\".\n            let qualifiedName: string = Utilities.getSafeFilenameForName(hierarchyItem.displayName);\n            if (ApiParameterListMixin.isBaseClassOf(hierarchyItem)) {\n                if (hierarchyItem.overloadIndex > 1) {\n                    // Subtract one for compatibility with earlier releases of API Documenter.\n                    // (This will get revamped when we fix GitHub issue #1308)\n                    qualifiedName += `_${hierarchyItem.overloadIndex - 1}`;\n                }\n            }\n\n            switch (hierarchyItem.kind) {\n                case ApiItemKind.Model:\n                case ApiItemKind.EntryPoint:\n                    break;\n                case ApiItemKind.Package:\n                    baseName = Utilities.getSafeFilenameForName(PackageName.getUnscopedName(hierarchyItem.displayName));\n                    break;\n                default:\n                    baseName += '/' + qualifiedName;\n            }\n        }\n\n        switch (apiItem.kind) {\n            case ApiItemKind.Method:\n            case ApiItemKind.Property:\n            case ApiItemKind.Function:\n            case ApiItemKind.Variable:\n                return '#' + baseName;\n                break;\n            default:\n                return baseName + '.md';\n        }\n\n    }\n\n    private _htmlIDForItem(apiItem: ApiItem): string {\n        if (apiItem.kind === ApiItemKind.Model) {\n            return '';\n        }\n\n        let baseName: string = '';\n        for (const hierarchyItem of apiItem.getHierarchy()) {\n            let qualifiedName: string = Utilities.getSafeFilenameForName(hierarchyItem.displayName);\n            if (ApiParameterListMixin.isBaseClassOf(hierarchyItem)) {\n                if (hierarchyItem.overloadIndex > 1) {\n                    qualifiedName += `_${hierarchyItem.overloadIndex - 1}`;\n                }\n            }\n\n            switch (hierarchyItem.kind) {\n                case ApiItemKind.Model:\n                case ApiItemKind.EntryPoint:\n                    break;\n                case ApiItemKind.Package:\n                    baseName = Utilities.getSafeFilenameForName(PackageName.getUnscopedName(hierarchyItem.displayName));\n                    break;\n                default:\n                    baseName += '-' + qualifiedName;\n            }\n        }\n        return baseName + '-' + apiItem.kind;\n    }\n\n    private _getHrefForApiItem(apiItem: ApiItem): string {\n        return '#' + this._htmlIDForItem(apiItem);\n    }\n\n    private _getLinkFilenameForApiItem(apiItem: ApiItem): string {\n        let uriRoot: string = '/';\n        if (this._documenterConfig && this._documenterConfig.uriRoot !== undefined) {\n            uriRoot = this._documenterConfig.uriRoot! + '/';\n        }\n\n        if (apiItem.kind === ApiItemKind.Model) {\n            return uriRoot;\n        }\n        if (this._shouldHaveStandalonePage(apiItem)) {\n            return uriRoot + this._getFilenameForApiItem(apiItem);\n        } else {\n            return this._getHrefForApiItem(apiItem);\n        }\n    }\n\n    private _deleteOldOutputFiles(): void {\n        console.log('Deleting old output from ' + this._outputFolder);\n        FileSystem.ensureEmptyFolder(this._outputFolder);\n    }\n\n    private _shouldHaveStandalonePage(apiItem: ApiItem): boolean {\n        return (apiItem.kind === ApiItemKind.Package) || (apiItem.kind === ApiItemKind.Class) || (apiItem.kind === ApiItemKind.Interface)\n    }\n\n    private _isAllowedPackage(pkg: ApiPackage): boolean {\n        if (this._documenterConfig && this._documenterConfig!.onlyPackagesStartingWith) {\n            return pkg.name.startsWith(this._documenterConfig!.onlyPackagesStartingWith)\n        }\n        return true;\n    }\n}\n"]}