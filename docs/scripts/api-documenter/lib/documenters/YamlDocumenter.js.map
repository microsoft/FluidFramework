{"version":3,"file":"YamlDocumenter.js","sourceRoot":"","sources":["../../src/documenters/YamlDocumenter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\n\r\nimport yaml = require('js-yaml');\r\nimport {\r\n  JsonFile,\r\n  JsonSchema,\r\n  PackageName,\r\n  FileSystem,\r\n  NewlineKind,\r\n  InternalError\r\n} from '@rushstack/node-core-library';\r\nimport { StringBuilder, DocSection, DocComment } from '@microsoft/tsdoc';\r\nimport {\r\n  ApiModel,\r\n  ApiItem,\r\n  ApiItemKind,\r\n  ApiDocumentedItem,\r\n  ApiReleaseTagMixin,\r\n  ReleaseTag,\r\n  ApiPropertyItem,\r\n  ApiItemContainerMixin,\r\n  ApiPackage,\r\n  ApiEnumMember,\r\n  ApiClass,\r\n  ApiInterface,\r\n  ApiMethod,\r\n  ApiMethodSignature,\r\n  ApiConstructor,\r\n  ApiFunction,\r\n  ApiReturnTypeMixin,\r\n  ApiTypeParameterListMixin,\r\n  Excerpt,\r\n  ExcerptToken,\r\n  ExcerptTokenKind,\r\n  HeritageType,\r\n  ApiVariable,\r\n  ApiTypeAlias\r\n} from '@microsoft/api-extractor-model';\r\nimport { DeclarationReference, Navigation, Meaning } from '@microsoft/tsdoc/lib/beta/DeclarationReference';\r\nimport {\r\n  IYamlApiFile,\r\n  IYamlItem,\r\n  IYamlSyntax,\r\n  IYamlParameter,\r\n  IYamlReference,\r\n  IYamlReferenceSpec,\r\n  IYamlInheritanceTree\r\n} from '../yaml/IYamlApiFile';\r\nimport { IYamlTocFile, IYamlTocItem } from '../yaml/IYamlTocFile';\r\nimport { Utilities } from '../utils/Utilities';\r\nimport { CustomMarkdownEmitter } from '../markdown/CustomMarkdownEmitter';\r\n\r\nconst yamlApiSchema: JsonSchema = JsonSchema.fromFile(\r\n  path.join(__dirname, '..', 'yaml', 'typescript.schema.json')\r\n);\r\n\r\ninterface IYamlReferences {\r\n  references: IYamlReference[];\r\n  typeNameToUid: Map<string, string>;\r\n  uidTypeReferenceCounters: Map<string, number>;\r\n}\r\n\r\nconst enum FlattenMode {\r\n  /** Include entries for nested namespaces and non-namespace children. */\r\n  NestedNamespacesAndChildren,\r\n  /** Include entries for nested namespaces only. */\r\n  NestedNamespacesOnly,\r\n  /** Include entries for non-namespace immediate children. */\r\n  ImmediateChildren,\r\n  /** Include entries for nested non-namespace children. */\r\n  NestedChildren\r\n}\r\n\r\ninterface INameOptions {\r\n  includeSignature?: boolean;\r\n  includeNamespace?: boolean;\r\n}\r\n\r\n/**\r\n * Writes documentation in the Universal Reference YAML file format, as defined by typescript.schema.json.\r\n */\r\nexport class YamlDocumenter {\r\n  protected readonly newDocfxNamespaces: boolean;\r\n  private readonly _apiModel: ApiModel;\r\n  private readonly _markdownEmitter: CustomMarkdownEmitter;\r\n\r\n  private _apiItemsByCanonicalReference: Map<string, ApiItem>;\r\n  private _yamlReferences: IYamlReferences | undefined;\r\n  private _outputFolder: string;\r\n\r\n  public constructor(apiModel: ApiModel, newDocfxNamespaces: boolean = false) {\r\n    this._apiModel = apiModel;\r\n    this.newDocfxNamespaces = newDocfxNamespaces;\r\n    this._markdownEmitter = new CustomMarkdownEmitter(this._apiModel);\r\n    this._apiItemsByCanonicalReference = new Map<string, ApiItem>();\r\n\r\n    this._initApiItems();\r\n  }\r\n\r\n  /** @virtual */\r\n  public generateFiles(outputFolder: string): void {\r\n    this._outputFolder = outputFolder;\r\n\r\n    console.log();\r\n    this._deleteOldOutputFiles();\r\n\r\n    for (const apiPackage of this._apiModel.packages) {\r\n      console.log(`Writing ${apiPackage.name} package`);\r\n      this._visitApiItems(apiPackage, undefined);\r\n    }\r\n\r\n    this._writeTocFile(this._apiModel.packages);\r\n  }\r\n\r\n  /** @virtual */\r\n  protected onGetTocRoot(): IYamlTocItem {\r\n    return {\r\n      name: 'SharePoint Framework reference',\r\n      href: '~/overview/sharepoint.md',\r\n      items: []\r\n    };\r\n  }\r\n\r\n  /** @virtual */\r\n  protected onCustomizeYamlItem(yamlItem: IYamlItem): void {\r\n    // virtual\r\n    // (overridden by child class)\r\n  }\r\n\r\n  private _visitApiItems(apiItem: ApiDocumentedItem, parentYamlFile: IYamlApiFile | undefined): boolean {\r\n    let savedYamlReferences: IYamlReferences | undefined;\r\n    if (!this._shouldEmbed(apiItem.kind)) {\r\n      savedYamlReferences = this._yamlReferences;\r\n      this._yamlReferences = undefined;\r\n    }\r\n\r\n    const yamlItem: IYamlItem | undefined = this._generateYamlItem(apiItem);\r\n    if (!yamlItem) {\r\n      return false;\r\n    }\r\n\r\n    this.onCustomizeYamlItem(yamlItem);\r\n\r\n    if (this._shouldEmbed(apiItem.kind)) {\r\n      if (!parentYamlFile) {\r\n        throw new InternalError('Missing file context');\r\n      }\r\n      parentYamlFile.items.push(yamlItem);\r\n    } else {\r\n      const newYamlFile: IYamlApiFile = {\r\n        items: []\r\n      };\r\n      newYamlFile.items.push(yamlItem);\r\n\r\n      const children: ApiItem[] = this._getLogicalChildren(apiItem);\r\n      for (const child of children) {\r\n        if (child instanceof ApiDocumentedItem) {\r\n          if (this._visitApiItems(child, newYamlFile)) {\r\n            if (!yamlItem.children) {\r\n              yamlItem.children = [];\r\n            }\r\n            yamlItem.children.push(this._getUid(child));\r\n          }\r\n        }\r\n      }\r\n\r\n      if (this._yamlReferences && this._yamlReferences.references.length > 0) {\r\n        newYamlFile.references = this._yamlReferences.references;\r\n      }\r\n\r\n      this._yamlReferences = savedYamlReferences;\r\n\r\n      const yamlFilePath: string = this._getYamlFilePath(apiItem);\r\n\r\n      if (apiItem.kind === ApiItemKind.Package) {\r\n        console.log('Writing ' + yamlFilePath);\r\n      }\r\n\r\n      this._writeYamlFile(newYamlFile, yamlFilePath, 'UniversalReference', yamlApiSchema);\r\n\r\n      if (parentYamlFile) {\r\n        // References should be recorded in the parent YAML file with the local name of the embedded item.\r\n        // This avoids unnecessary repetition when listing items inside of a namespace.\r\n        this._recordYamlReference(\r\n          this._ensureYamlReferences(),\r\n          this._getUid(apiItem),\r\n          this._getYamlItemName(apiItem, {\r\n            includeNamespace: !this.newDocfxNamespaces,\r\n            includeSignature: true\r\n          }),\r\n          this._getYamlItemName(apiItem, { includeNamespace: true, includeSignature: true })\r\n        );\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected _getLogicalChildren(apiItem: ApiItem): ApiItem[] {\r\n    const children: ApiItem[] = [];\r\n    if (apiItem.kind === ApiItemKind.Package) {\r\n      // Skip over the entry point, since it's not part of the documentation hierarchy\r\n      this._flattenNamespaces(\r\n        apiItem.members[0].members,\r\n        children,\r\n        this.newDocfxNamespaces ? FlattenMode.NestedNamespacesAndChildren : FlattenMode.NestedChildren\r\n      );\r\n    } else {\r\n      this._flattenNamespaces(\r\n        apiItem.members,\r\n        children,\r\n        this.newDocfxNamespaces ? FlattenMode.ImmediateChildren : FlattenMode.NestedChildren\r\n      );\r\n    }\r\n    return children;\r\n  }\r\n\r\n  // Flattens nested namespaces into top level entries so that the following:\r\n  //   namespace X { export namespace Y { export namespace Z { } }\r\n  // Is represented as:\r\n  //   - X\r\n  //   - X.Y\r\n  //   - X.Y.Z\r\n  private _flattenNamespaces(\r\n    items: ReadonlyArray<ApiItem>,\r\n    childrenOut: ApiItem[],\r\n    mode: FlattenMode\r\n  ): boolean {\r\n    let hasNonNamespaceChildren: boolean = false;\r\n    for (const item of items) {\r\n      if (item.kind === ApiItemKind.Namespace) {\r\n        switch (mode) {\r\n          case FlattenMode.NestedChildren:\r\n            // Include children of namespaces, but not the namespaces themselves. This matches existing legacy behavior.\r\n            this._flattenNamespaces(item.members, childrenOut, FlattenMode.NestedChildren);\r\n            break;\r\n          case FlattenMode.NestedNamespacesOnly:\r\n          case FlattenMode.NestedNamespacesAndChildren:\r\n            // At any level, always include a nested namespace if it has non-namespace children, but do not include its\r\n            // non-namespace children in the result.\r\n\r\n            // Record the offset at which the namespace is added in case we need to remove it later.\r\n            const index: number = childrenOut.length;\r\n            childrenOut.push(item);\r\n\r\n            if (!this._flattenNamespaces(item.members, childrenOut, FlattenMode.NestedNamespacesOnly)) {\r\n              // This namespace had no non-namespace children, remove it.\r\n              childrenOut.splice(index, 1);\r\n            }\r\n            break;\r\n        }\r\n      } else if (this._shouldInclude(item.kind)) {\r\n        switch (mode) {\r\n          case FlattenMode.NestedChildren:\r\n          case FlattenMode.NestedNamespacesAndChildren:\r\n          case FlattenMode.ImmediateChildren:\r\n            // At the top level, include non-namespace children as well.\r\n            childrenOut.push(item);\r\n            break;\r\n        }\r\n        hasNonNamespaceChildren = true;\r\n      }\r\n    }\r\n    return hasNonNamespaceChildren;\r\n  }\r\n\r\n  /**\r\n   * Write the table of contents\r\n   */\r\n  private _writeTocFile(apiItems: ReadonlyArray<ApiItem>): void {\r\n    const tocFile: IYamlTocFile = this.buildYamlTocFile(apiItems);\r\n\r\n    const tocFilePath: string = path.join(this._outputFolder, 'toc.yml');\r\n    console.log('Writing ' + tocFilePath);\r\n    this._writeYamlFile(tocFile, tocFilePath, '', undefined);\r\n  }\r\n\r\n  /** @virtual */\r\n  protected buildYamlTocFile(apiItems: ReadonlyArray<ApiItem>): IYamlTocFile {\r\n    const tocFile: IYamlTocFile = {\r\n      items: []\r\n    };\r\n\r\n    const rootItem: IYamlTocItem = this.onGetTocRoot();\r\n    tocFile.items.push(rootItem);\r\n\r\n    rootItem.items!.push(...this._buildTocItems(apiItems));\r\n    return tocFile;\r\n  }\r\n\r\n  private _buildTocItems(apiItems: ReadonlyArray<ApiItem>): IYamlTocItem[] {\r\n    const tocItems: IYamlTocItem[] = [];\r\n    for (const apiItem of apiItems) {\r\n      let tocItem: IYamlTocItem;\r\n      if (apiItem.kind === ApiItemKind.Namespace && !this.newDocfxNamespaces) {\r\n        tocItem = {\r\n          name: this._getTocItemName(apiItem)\r\n        };\r\n      } else {\r\n        if (this._shouldEmbed(apiItem.kind)) {\r\n          // Don't generate table of contents items for embedded definitions\r\n          continue;\r\n        }\r\n\r\n        tocItem = {\r\n          name: this._getTocItemName(apiItem),\r\n          uid: this._getUid(apiItem)\r\n        };\r\n      }\r\n\r\n      tocItems.push(tocItem);\r\n\r\n      const children: ApiItem[] = this._getLogicalChildren(apiItem);\r\n      const childItems: IYamlTocItem[] = this._buildTocItems(children);\r\n      if (childItems.length > 0) {\r\n        tocItem.items = childItems;\r\n      }\r\n    }\r\n    return tocItems;\r\n  }\r\n\r\n  /** @virtual */\r\n  protected _getTocItemName(apiItem: ApiItem): string {\r\n    let name: string;\r\n    if (apiItem.kind === ApiItemKind.Package) {\r\n      name = PackageName.getUnscopedName(apiItem.displayName);\r\n    } else {\r\n      name = this._getYamlItemName(apiItem);\r\n    }\r\n\r\n    if (name === apiItem.displayName && apiItem.getMergedSiblings().length > 1) {\r\n      name += ` (${apiItem.kind})`;\r\n    }\r\n\r\n    return name;\r\n  }\r\n\r\n  protected _shouldEmbed(apiItemKind: ApiItemKind): boolean {\r\n    switch (apiItemKind) {\r\n      case ApiItemKind.Class:\r\n      case ApiItemKind.Package:\r\n      case ApiItemKind.Interface:\r\n      case ApiItemKind.Enum:\r\n        return false;\r\n      case ApiItemKind.Namespace:\r\n        return !this.newDocfxNamespaces;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  protected _shouldInclude(apiItemKind: ApiItemKind): boolean {\r\n    // Filter out known items that are not yet supported\r\n    switch (apiItemKind) {\r\n      case ApiItemKind.CallSignature:\r\n      case ApiItemKind.ConstructSignature:\r\n      case ApiItemKind.IndexSignature:\r\n        return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private _generateYamlItem(apiItem: ApiDocumentedItem): IYamlItem | undefined {\r\n    // Filter out known items that are not yet supported\r\n    if (!this._shouldInclude(apiItem.kind)) {\r\n      return undefined;\r\n    }\r\n\r\n    const uid: DeclarationReference = this._getUidObject(apiItem);\r\n    const yamlItem: Partial<IYamlItem> = {\r\n      uid: uid.toString()\r\n    };\r\n\r\n    if (apiItem.tsdocComment) {\r\n      const tsdocComment: DocComment = apiItem.tsdocComment;\r\n      if (tsdocComment.summarySection) {\r\n        const summary: string = this._renderMarkdown(tsdocComment.summarySection, apiItem);\r\n        if (summary) {\r\n          yamlItem.summary = summary;\r\n        }\r\n      }\r\n\r\n      if (tsdocComment.remarksBlock) {\r\n        const remarks: string = this._renderMarkdown(tsdocComment.remarksBlock.content, apiItem);\r\n        if (remarks) {\r\n          yamlItem.remarks = remarks;\r\n        }\r\n      }\r\n\r\n      if (tsdocComment.deprecatedBlock) {\r\n        const deprecatedMessage: string = this._renderMarkdown(tsdocComment.deprecatedBlock.content, apiItem);\r\n        if (deprecatedMessage.length > 0) {\r\n          yamlItem.deprecated = { content: deprecatedMessage };\r\n        }\r\n      }\r\n    }\r\n\r\n    if (ApiReleaseTagMixin.isBaseClassOf(apiItem)) {\r\n      if (apiItem.releaseTag === ReleaseTag.Beta) {\r\n        yamlItem.isPreview = true;\r\n      }\r\n    }\r\n\r\n    yamlItem.name = this._getYamlItemName(apiItem, {\r\n      includeSignature: true,\r\n      includeNamespace: !this.newDocfxNamespaces\r\n    });\r\n    yamlItem.fullName = this._getYamlItemName(apiItem, { includeSignature: true, includeNamespace: true });\r\n    yamlItem.langs = ['typeScript'];\r\n\r\n    // Add the namespace of the item if it is contained in one.\r\n    // Do not add the namespace parent of a namespace as they are flattened in the documentation.\r\n    if (\r\n      apiItem.kind !== ApiItemKind.Namespace &&\r\n      apiItem.parent &&\r\n      apiItem.parent.kind === ApiItemKind.Namespace &&\r\n      this.newDocfxNamespaces\r\n    ) {\r\n      yamlItem.namespace = apiItem.parent.canonicalReference.toString();\r\n    }\r\n\r\n    switch (apiItem.kind) {\r\n      case ApiItemKind.Enum:\r\n        yamlItem.type = 'enum';\r\n        break;\r\n      case ApiItemKind.EnumMember:\r\n        yamlItem.type = 'field';\r\n        const enumMember: ApiEnumMember = apiItem as ApiEnumMember;\r\n\r\n        if (enumMember.initializerExcerpt.text.length > 0) {\r\n          yamlItem.numericValue = enumMember.initializerExcerpt.text;\r\n        }\r\n\r\n        break;\r\n      case ApiItemKind.Class:\r\n        yamlItem.type = 'class';\r\n        this._populateYamlClassOrInterface(uid, yamlItem, apiItem as ApiClass);\r\n        break;\r\n      case ApiItemKind.Interface:\r\n        yamlItem.type = 'interface';\r\n        this._populateYamlClassOrInterface(uid, yamlItem, apiItem as ApiInterface);\r\n        break;\r\n      case ApiItemKind.Method:\r\n      case ApiItemKind.MethodSignature:\r\n        yamlItem.type = 'method';\r\n        this._populateYamlFunctionLike(uid, yamlItem, apiItem as ApiMethod | ApiMethodSignature);\r\n        break;\r\n\r\n      case ApiItemKind.Constructor:\r\n        yamlItem.type = 'constructor';\r\n        this._populateYamlFunctionLike(uid, yamlItem, apiItem as ApiConstructor);\r\n        break;\r\n\r\n      case ApiItemKind.Package:\r\n        yamlItem.type = 'package';\r\n        break;\r\n      case ApiItemKind.Namespace:\r\n        yamlItem.type = 'namespace';\r\n        break;\r\n      case ApiItemKind.Property:\r\n      case ApiItemKind.PropertySignature:\r\n        const apiProperty: ApiPropertyItem = apiItem as ApiPropertyItem;\r\n        if (apiProperty.isEventProperty) {\r\n          yamlItem.type = 'event';\r\n        } else {\r\n          yamlItem.type = 'property';\r\n        }\r\n        this._populateYamlProperty(uid, yamlItem, apiProperty);\r\n        break;\r\n\r\n      case ApiItemKind.Function:\r\n        yamlItem.type = 'function';\r\n        this._populateYamlFunctionLike(uid, yamlItem, apiItem as ApiFunction);\r\n        break;\r\n\r\n      case ApiItemKind.Variable:\r\n        yamlItem.type = 'variable';\r\n        this._populateYamlVariable(uid, yamlItem, apiItem as ApiVariable);\r\n        break;\r\n\r\n      case ApiItemKind.TypeAlias:\r\n        yamlItem.type = 'typealias';\r\n        this._populateYamlTypeAlias(uid, yamlItem, apiItem as ApiTypeAlias);\r\n        break;\r\n\r\n      default:\r\n        throw new Error('Unimplemented item kind: ' + apiItem.kind);\r\n    }\r\n\r\n    if (apiItem.kind !== ApiItemKind.Package && !this._shouldEmbed(apiItem.kind)) {\r\n      const associatedPackage: ApiPackage | undefined = apiItem.getAssociatedPackage();\r\n      if (!associatedPackage) {\r\n        throw new Error('Unable to determine associated package for ' + apiItem.displayName);\r\n      }\r\n      yamlItem.package = this._getUid(associatedPackage);\r\n    }\r\n\r\n    return yamlItem as IYamlItem;\r\n  }\r\n\r\n  private _populateYamlTypeParameters(\r\n    contextUid: DeclarationReference,\r\n    apiItem: ApiTypeParameterListMixin\r\n  ): IYamlParameter[] {\r\n    const typeParameters: IYamlParameter[] = [];\r\n    for (const apiTypeParameter of apiItem.typeParameters) {\r\n      const typeParameter: IYamlParameter = {\r\n        id: apiTypeParameter.name\r\n      };\r\n\r\n      if (apiTypeParameter.tsdocTypeParamBlock) {\r\n        typeParameter.description = this._renderMarkdown(\r\n          apiTypeParameter.tsdocTypeParamBlock.content,\r\n          apiItem\r\n        );\r\n      }\r\n\r\n      if (!apiTypeParameter.constraintExcerpt.isEmpty) {\r\n        typeParameter.type = [this._renderType(contextUid, apiTypeParameter.constraintExcerpt)];\r\n      }\r\n\r\n      typeParameters.push(typeParameter);\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  private _populateYamlClassOrInterface(\r\n    uid: DeclarationReference,\r\n    yamlItem: Partial<IYamlItem>,\r\n    apiItem: ApiClass | ApiInterface\r\n  ): void {\r\n    if (apiItem instanceof ApiClass) {\r\n      if (apiItem.extendsType) {\r\n        yamlItem.extends = [this._renderType(uid, apiItem.extendsType.excerpt)];\r\n        yamlItem.inheritance = this._renderInheritance(uid, [apiItem.extendsType]);\r\n      }\r\n      if (apiItem.implementsTypes.length > 0) {\r\n        yamlItem.implements = [];\r\n        for (const implementsType of apiItem.implementsTypes) {\r\n          yamlItem.implements.push(this._renderType(uid, implementsType.excerpt));\r\n        }\r\n      }\r\n    } else if (apiItem instanceof ApiInterface) {\r\n      if (apiItem.extendsTypes.length > 0) {\r\n        yamlItem.extends = [];\r\n        for (const extendsType of apiItem.extendsTypes) {\r\n          yamlItem.extends.push(this._renderType(uid, extendsType.excerpt));\r\n        }\r\n        yamlItem.inheritance = this._renderInheritance(uid, apiItem.extendsTypes);\r\n      }\r\n\r\n      const typeParameters: IYamlParameter[] = this._populateYamlTypeParameters(uid, apiItem);\r\n      if (typeParameters.length) {\r\n        yamlItem.syntax = { typeParameters };\r\n      }\r\n    }\r\n\r\n    if (apiItem.tsdocComment) {\r\n      if (apiItem.tsdocComment.modifierTagSet.isSealed()) {\r\n        let sealedMessage: string;\r\n        if (apiItem.kind === ApiItemKind.Class) {\r\n          sealedMessage = 'This class is marked as `@sealed`. Subclasses should not extend it.';\r\n        } else {\r\n          sealedMessage = 'This interface is marked as `@sealed`. Other interfaces should not extend it.';\r\n        }\r\n        if (!yamlItem.remarks) {\r\n          yamlItem.remarks = sealedMessage;\r\n        } else {\r\n          yamlItem.remarks = sealedMessage + '\\n\\n' + yamlItem.remarks;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private _populateYamlFunctionLike(\r\n    uid: DeclarationReference,\r\n    yamlItem: Partial<IYamlItem>,\r\n    apiItem: ApiMethod | ApiMethodSignature | ApiConstructor | ApiFunction\r\n  ): void {\r\n    const syntax: IYamlSyntax = {\r\n      content: apiItem.getExcerptWithModifiers()\r\n    };\r\n    yamlItem.syntax = syntax;\r\n\r\n    if (ApiReturnTypeMixin.isBaseClassOf(apiItem)) {\r\n      const returnType: string = this._renderType(uid, apiItem.returnTypeExcerpt);\r\n\r\n      let returnDescription: string = '';\r\n\r\n      if (apiItem.tsdocComment && apiItem.tsdocComment.returnsBlock) {\r\n        returnDescription = this._renderMarkdown(apiItem.tsdocComment.returnsBlock.content, apiItem);\r\n        // temporary workaround for people who mistakenly add a hyphen, e.g. \"@returns - blah\"\r\n        returnDescription = returnDescription.replace(/^\\s*-\\s+/, '');\r\n      }\r\n\r\n      if (returnType || returnDescription) {\r\n        syntax.return = {\r\n          type: [returnType],\r\n          description: returnDescription\r\n        };\r\n      }\r\n    }\r\n\r\n    const parameters: IYamlParameter[] = [];\r\n    for (const apiParameter of apiItem.parameters) {\r\n      let parameterDescription: string = '';\r\n      if (apiParameter.tsdocParamBlock) {\r\n        parameterDescription = this._renderMarkdown(apiParameter.tsdocParamBlock.content, apiItem);\r\n      }\r\n\r\n      parameters.push({\r\n        id: apiParameter.name,\r\n        description: parameterDescription,\r\n        type: [this._renderType(uid, apiParameter.parameterTypeExcerpt)]\r\n      } as IYamlParameter);\r\n    }\r\n\r\n    if (parameters.length) {\r\n      syntax.parameters = parameters;\r\n    }\r\n\r\n    if (ApiTypeParameterListMixin.isBaseClassOf(apiItem)) {\r\n      const typeParameters: IYamlParameter[] = this._populateYamlTypeParameters(uid, apiItem);\r\n      if (typeParameters.length) {\r\n        syntax.typeParameters = typeParameters;\r\n      }\r\n    }\r\n  }\r\n\r\n  private _populateYamlProperty(\r\n    uid: DeclarationReference,\r\n    yamlItem: Partial<IYamlItem>,\r\n    apiItem: ApiPropertyItem\r\n  ): void {\r\n    const syntax: IYamlSyntax = {\r\n      content: apiItem.getExcerptWithModifiers()\r\n    };\r\n    yamlItem.syntax = syntax;\r\n\r\n    if (apiItem.propertyTypeExcerpt.text) {\r\n      syntax.return = {\r\n        type: [this._renderType(uid, apiItem.propertyTypeExcerpt)]\r\n      };\r\n    }\r\n  }\r\n\r\n  private _populateYamlVariable(\r\n    uid: DeclarationReference,\r\n    yamlItem: Partial<IYamlItem>,\r\n    apiItem: ApiVariable\r\n  ): void {\r\n    const syntax: IYamlSyntax = {\r\n      content: apiItem.getExcerptWithModifiers()\r\n    };\r\n    yamlItem.syntax = syntax;\r\n\r\n    if (apiItem.variableTypeExcerpt.text) {\r\n      syntax.return = {\r\n        type: [this._renderType(uid, apiItem.variableTypeExcerpt)]\r\n      };\r\n    }\r\n  }\r\n\r\n  private _populateYamlTypeAlias(\r\n    uid: DeclarationReference,\r\n    yamlItem: Partial<IYamlItem>,\r\n    apiItem: ApiTypeAlias\r\n  ): void {\r\n    const syntax: IYamlSyntax = {\r\n      content: apiItem.getExcerptWithModifiers()\r\n    };\r\n    yamlItem.syntax = syntax;\r\n\r\n    const typeParameters: IYamlParameter[] = this._populateYamlTypeParameters(uid, apiItem);\r\n    if (typeParameters.length) {\r\n      syntax.typeParameters = typeParameters;\r\n    }\r\n\r\n    if (apiItem.typeExcerpt.text) {\r\n      syntax.return = {\r\n        type: [this._renderType(uid, apiItem.typeExcerpt)]\r\n      };\r\n    }\r\n  }\r\n\r\n  private _renderMarkdown(docSection: DocSection, contextApiItem: ApiItem): string {\r\n    const stringBuilder: StringBuilder = new StringBuilder();\r\n\r\n    this._markdownEmitter.emit(stringBuilder, docSection, {\r\n      contextApiItem,\r\n      onGetFilenameForApiItem: (apiItem: ApiItem) => {\r\n        // NOTE: GitHub's markdown renderer does not resolve relative hyperlinks correctly\r\n        // unless they start with \"./\" or \"../\".\r\n\r\n        // To ensure the xref is properly escaped, we first encode the entire xref\r\n        // to handle escaping of reserved characters. Then we must replace '#' and '?'\r\n        // characters so that they are not interpreted as a querystring or hash.\r\n        // We must also backslash-escape unbalanced `(` and `)` characters as the\r\n        // markdown spec insists that they are only valid when balanced. To reduce\r\n        // the overhead we only support balanced parenthesis with a depth of 1.\r\n        return encodeURI(`xref:${this._getUid(apiItem)}`)\r\n          .replace(/[#?]/g, (s) => encodeURIComponent(s))\r\n          .replace(/(\\([^(]*\\))|[()]/g, (s, balanced) => balanced || '\\\\' + s);\r\n      }\r\n    });\r\n\r\n    return stringBuilder.toString().trim();\r\n  }\r\n\r\n  private _writeYamlFile(\r\n    dataObject: {},\r\n    filePath: string,\r\n    yamlMimeType: string,\r\n    schema: JsonSchema | undefined\r\n  ): void {\r\n    JsonFile.validateNoUndefinedMembers(dataObject);\r\n\r\n    let stringified: string = yaml.safeDump(dataObject, {\r\n      lineWidth: 120\r\n    });\r\n\r\n    if (yamlMimeType) {\r\n      stringified = `### YamlMime:${yamlMimeType}\\n` + stringified;\r\n    }\r\n\r\n    FileSystem.writeFile(filePath, stringified, {\r\n      convertLineEndings: NewlineKind.CrLf,\r\n      ensureFolderExists: true\r\n    });\r\n\r\n    if (schema) {\r\n      schema.validateObject(dataObject, filePath);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the DocFX \"uid\" for the ApiItem\r\n   * Example:  `node-core-library!JsonFile#load`\r\n   */\r\n  protected _getUid(apiItem: ApiItem): string {\r\n    return this._getUidObject(apiItem).toString();\r\n  }\r\n\r\n  protected _getUidObject(apiItem: ApiItem): DeclarationReference {\r\n    return apiItem.canonicalReference;\r\n  }\r\n\r\n  /**\r\n   * Initialize the _apiItemsByCanonicalReference data structure.\r\n   */\r\n  private _initApiItems(): void {\r\n    this._initApiItemsRecursive(this._apiModel);\r\n  }\r\n\r\n  /**\r\n   * Helper for _initApiItems()\r\n   */\r\n  private _initApiItemsRecursive(apiItem: ApiItem): void {\r\n    if (apiItem.canonicalReference && !apiItem.canonicalReference.isEmpty) {\r\n      this._apiItemsByCanonicalReference.set(apiItem.canonicalReference.toString(), apiItem);\r\n    }\r\n\r\n    // Recurse container members\r\n    if (ApiItemContainerMixin.isBaseClassOf(apiItem)) {\r\n      for (const apiMember of apiItem.members) {\r\n        this._initApiItemsRecursive(apiMember);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _ensureYamlReferences(): IYamlReferences {\r\n    if (!this._yamlReferences) {\r\n      this._yamlReferences = {\r\n        references: [],\r\n        typeNameToUid: new Map(),\r\n        uidTypeReferenceCounters: new Map()\r\n      };\r\n    }\r\n    return this._yamlReferences;\r\n  }\r\n\r\n  private _renderInheritance(\r\n    contextUid: DeclarationReference,\r\n    heritageTypes: ReadonlyArray<HeritageType>\r\n  ): IYamlInheritanceTree[] {\r\n    const result: IYamlInheritanceTree[] = [];\r\n    for (const heritageType of heritageTypes) {\r\n      const type: string = this._renderType(contextUid, heritageType.excerpt);\r\n      const yamlInheritance: IYamlInheritanceTree = { type };\r\n      const apiItem: ApiItem | undefined = this._apiItemsByCanonicalReference.get(type);\r\n      if (apiItem) {\r\n        if (apiItem instanceof ApiClass) {\r\n          if (apiItem.extendsType) {\r\n            yamlInheritance.inheritance = this._renderInheritance(this._getUidObject(apiItem), [\r\n              apiItem.extendsType\r\n            ]);\r\n          }\r\n        } else if (apiItem instanceof ApiInterface) {\r\n          if (apiItem.extendsTypes.length > 0) {\r\n            yamlInheritance.inheritance = this._renderInheritance(\r\n              this._getUidObject(apiItem),\r\n              apiItem.extendsTypes\r\n            );\r\n          }\r\n        }\r\n      }\r\n      result.push(yamlInheritance);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private _renderType(contextUid: DeclarationReference, typeExcerpt: Excerpt): string {\r\n    const excerptTokens: ExcerptToken[] = [...typeExcerpt.spannedTokens]; // copy the read-only array\r\n\r\n    if (excerptTokens.length === 0) {\r\n      return '';\r\n    }\r\n\r\n    // Remove the last token if it consists only of whitespace\r\n    const lastToken: ExcerptToken = excerptTokens[excerptTokens.length - 1];\r\n    if (lastToken.kind === ExcerptTokenKind.Content && !lastToken.text.trim()) {\r\n      excerptTokens.pop();\r\n      if (excerptTokens.length === 0) {\r\n        return '';\r\n      }\r\n    }\r\n\r\n    const typeName: string = typeExcerpt.text.trim();\r\n\r\n    // If there are no references to be used for a complex type, return the type name.\r\n    if (!excerptTokens.some((tok) => tok.kind === ExcerptTokenKind.Reference && !!tok.canonicalReference)) {\r\n      return typeName;\r\n    }\r\n\r\n    const yamlReferences: IYamlReferences = this._ensureYamlReferences();\r\n    const existingUid: string | undefined = yamlReferences.typeNameToUid.get(typeName);\r\n\r\n    // If this type has already been referenced for the current file, return its uid.\r\n    if (existingUid) {\r\n      return existingUid;\r\n    }\r\n\r\n    // If the excerpt consists of a single reference token, record the reference.\r\n    if (\r\n      excerptTokens.length === 1 &&\r\n      excerptTokens[0].kind === ExcerptTokenKind.Reference &&\r\n      excerptTokens[0].canonicalReference\r\n    ) {\r\n      const excerptRef: string = excerptTokens[0].canonicalReference.toString();\r\n      const apiItem: ApiItem | undefined = this._apiItemsByCanonicalReference.get(excerptRef);\r\n      return this._recordYamlReference(\r\n        yamlReferences,\r\n        excerptTokens[0].canonicalReference.toString(),\r\n        apiItem ? this._getYamlItemName(apiItem) : typeName,\r\n        apiItem ? this._getYamlItemName(apiItem, { includeNamespace: true }) : typeName\r\n      );\r\n    }\r\n\r\n    // Otherwise, the type is complex and consists of one or more reference tokens. Record a reference\r\n    // and return its uid.\r\n    const baseUid: string = contextUid.withMeaning(undefined).withOverloadIndex(undefined).toString();\r\n\r\n    // Keep track of the count for the base uid (without meaning or overload index) to ensure\r\n    // that each complex type reference is unique.\r\n    const counter: number = yamlReferences.uidTypeReferenceCounters.get(baseUid) || 0;\r\n    yamlReferences.uidTypeReferenceCounters.set(baseUid, counter + 1);\r\n\r\n    const uid: string = contextUid\r\n      .addNavigationStep(Navigation.Locals, `${counter}`)\r\n      .withMeaning(Meaning.ComplexType)\r\n      .withOverloadIndex(undefined)\r\n      .toString();\r\n\r\n    return this._recordYamlReference(yamlReferences, uid, typeName, typeName, excerptTokens);\r\n  }\r\n\r\n  private _recordYamlReference(\r\n    yamlReferences: IYamlReferences,\r\n    uid: string,\r\n    name: string,\r\n    fullName: string,\r\n    excerptTokens?: ExcerptToken[]\r\n  ): string {\r\n    if (yamlReferences.references.some((ref) => ref.uid === uid)) {\r\n      return uid;\r\n    }\r\n\r\n    // Fill in the reference spec from the excerpt.\r\n    const specs: IYamlReferenceSpec[] = [];\r\n    if (excerptTokens) {\r\n      for (const token of excerptTokens) {\r\n        if (token.kind === ExcerptTokenKind.Reference) {\r\n          const spec: IYamlReferenceSpec = {};\r\n          const specUid: string | undefined = token.canonicalReference && token.canonicalReference.toString();\r\n          const apiItem: ApiItem | undefined = specUid\r\n            ? this._apiItemsByCanonicalReference.get(specUid)\r\n            : undefined;\r\n          if (specUid) {\r\n            spec.uid = specUid;\r\n          }\r\n          spec.name = token.text;\r\n          spec.fullName = apiItem\r\n            ? apiItem.getScopedNameWithinPackage()\r\n            : token.canonicalReference\r\n            ? token.canonicalReference\r\n                .withSource(undefined)\r\n                .withMeaning(undefined)\r\n                .withOverloadIndex(undefined)\r\n                .toString()\r\n            : token.text;\r\n          specs.push(spec);\r\n        } else {\r\n          specs.push({\r\n            name: token.text,\r\n            fullName: token.text\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    const yamlReference: IYamlReference = { uid };\r\n    if (specs.length > 0) {\r\n      yamlReference.name = specs\r\n        .map((s) => s.name)\r\n        .join('')\r\n        .trim();\r\n      yamlReference.fullName = specs\r\n        .map((s) => s.fullName || s.name)\r\n        .join('')\r\n        .trim();\r\n      yamlReference['spec.typeScript'] = specs;\r\n    } else {\r\n      if (name !== uid) {\r\n        yamlReference.name = name;\r\n      }\r\n      if (fullName !== uid && fullName !== name) {\r\n        yamlReference.fullName = fullName;\r\n      }\r\n    }\r\n\r\n    yamlReferences.references.push(yamlReference);\r\n    return uid;\r\n  }\r\n\r\n  private _getYamlItemName(apiItem: ApiItem, options: INameOptions = {}): string {\r\n    const { includeSignature, includeNamespace } = options;\r\n    const baseName: string = includeSignature ? Utilities.getConciseSignature(apiItem) : apiItem.displayName;\r\n    if (\r\n      (includeNamespace || apiItem.kind === ApiItemKind.Namespace) &&\r\n      apiItem.parent &&\r\n      apiItem.parent.kind === ApiItemKind.Namespace\r\n    ) {\r\n      // If the immediate parent is a namespace, then add the namespaces to the name.  For example:\r\n      //\r\n      //   // Name: \"N1\"\r\n      //   export namespace N1 {\r\n      //     // Name: \"N1.N2\"\r\n      //     export namespace N2 {\r\n      //       // Name: \"N1.N2.f(x,y)\"\r\n      //       export function f(x: string, y: string): string {\r\n      //         return x + y;\r\n      //       }\r\n      //\r\n      //\r\n      //       // Name: \"N1.N2.C\"\r\n      //       export class C {\r\n      //         // Name: \"member(x,y)\"  <===========\r\n      //         public member(x: string, y: string): string {\r\n      //           return x + y;\r\n      //         }\r\n      //       }\r\n      //     }\r\n      //   }\r\n      //\r\n      // In the above example, \"member(x, y)\" does not appear as \"N1.N2.C.member(x,y)\" because YamlDocumenter\r\n      // embeds this entry in the web page for \"N1.N2.C\", so the container is obvious.  Whereas \"N1.N2.f(x,y)\"\r\n      // needs to be qualified because the DocFX template doesn't make pages for namespaces.  Instead, they get\r\n      // flattened into the package's page.\r\n      const nameParts: string[] = [baseName];\r\n\r\n      for (let current: ApiItem | undefined = apiItem.parent; current; current = current.parent) {\r\n        if (current.kind !== ApiItemKind.Namespace) {\r\n          break;\r\n        }\r\n\r\n        nameParts.unshift(current.displayName);\r\n      }\r\n\r\n      return nameParts.join('.');\r\n    } else {\r\n      return baseName;\r\n    }\r\n  }\r\n\r\n  private _getYamlFilePath(apiItem: ApiItem): string {\r\n    let result: string = '';\r\n\r\n    for (const current of apiItem.getHierarchy()) {\r\n      switch (current.kind) {\r\n        case ApiItemKind.Model:\r\n        case ApiItemKind.EntryPoint:\r\n          break;\r\n        case ApiItemKind.Package:\r\n          result += Utilities.getSafeFilenameForName(PackageName.getUnscopedName(current.displayName));\r\n          break;\r\n        default:\r\n          if (current.parent && current.parent.kind === ApiItemKind.EntryPoint) {\r\n            result += '/';\r\n          } else {\r\n            result += '.';\r\n          }\r\n          result += Utilities.getSafeFilenameForName(current.displayName);\r\n          break;\r\n      }\r\n    }\r\n\r\n    let disambiguator: string = '';\r\n    if (apiItem.getMergedSiblings().length > 1) {\r\n      disambiguator = `-${apiItem.kind.toLowerCase()}`;\r\n    }\r\n\r\n    return path.join(this._outputFolder, result + disambiguator + '.yml');\r\n  }\r\n\r\n  private _deleteOldOutputFiles(): void {\r\n    console.log('Deleting old output from ' + this._outputFolder);\r\n    FileSystem.ensureEmptyFolder(this._outputFolder);\r\n  }\r\n}\r\n"]}