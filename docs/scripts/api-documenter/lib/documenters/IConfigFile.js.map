{"version":3,"file":"IConfigFile.js","sourceRoot":"","sources":["../../src/documenters/IConfigFile.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { IYamlTocFile } from '../yaml/IYamlTocFile';\r\n\r\n/**\r\n * Typescript interface describing the config schema for toc.yml file format.\r\n */\r\nexport interface IConfigTableOfContents {\r\n  /**\r\n   * Represents the tree structure describing the toc.file format.\r\n   * Nodes that have an empty `items` array property or their name will be included in the\r\n   * {@link IConfigTableOfContents.nonEmptyCategoryNodeNames} will be filled with API items\r\n   * that are matched with the filters provided. Everything else will be placed under\r\n   * {@link IConfigTableOfContents.catchAllCategory} if provided, which is highly recommended.\r\n   */\r\n  tocConfig: IYamlTocFile;\r\n\r\n  /**\r\n   * Optional category name that is recommended to be included along with\r\n   * one of the configs: {@link IConfigTableOfContents.categorizeByName} or\r\n   * {@link IConfigTableOfContents.categoryInlineTag}.\r\n   * Any items that are not matched according to the mentioned configuration options will be placed under this\r\n   * catchAll category. If none provided the items will not be included in the final toc.yml file.\r\n   */\r\n  catchAllCategory?: string;\r\n\r\n  /**\r\n   * Toggle either categorization of the API items should be made based on category name presence\r\n   * in the API item's name. Useful when there are API items without an inline tag to categorize them,\r\n   * but still need to place the items under categories. Note: this type of categorization might place some items\r\n   * under wrong categories if the names are similar but belong to different categories.\r\n   * In case that {@link IConfigTableOfContents.categoryInlineTag} is provided it will try categorize by\r\n   * using it and only if it didn't, it will attempt to categorize by name.\r\n   */\r\n  categorizeByName?: boolean;\r\n\r\n  /**\r\n   * Inline tag that will be used to categorize the API items. Will take precedence over the\r\n   * {@link IConfigTableOfContents.categorizeByName} flag in trying to place the API item according to the\r\n   * custom inline tag present in documentation of the source code.\r\n   */\r\n  categoryInlineTag?: string;\r\n\r\n  /**\r\n   * Array of node names that might have already items injected at the time of creating the\r\n   * {@link IConfigTableOfContents.tocConfig} tree structure but are still needed to be included as category\r\n   * nodes where API items will be pushed during the categorization algorithm.\r\n   */\r\n  nonEmptyCategoryNodeNames?: string[];\r\n}\r\n\r\n/**\r\n * Describes plugin packages to be loaded, and which features to enable.\r\n */\r\nexport interface IConfigPlugin {\r\n  /**\r\n   * Specifies the name of an API Documenter plugin package to be loaded.  By convention, the NPM package name\r\n   * should have the prefix `doc-plugin-`.  Its main entry point should export an object named\r\n   * `apiDocumenterPluginManifest` which implements the {@link IApiDocumenterPluginManifest} interface.\r\n   */\r\n  packageName: string;\r\n\r\n  /**\r\n   * A list of features to be enabled.  The features are defined in {@link IApiDocumenterPluginManifest.features}.\r\n   * The `enabledFeatureNames` strings are matched with {@link IFeatureDefinition.featureName}.\r\n   */\r\n  enabledFeatureNames: string[];\r\n}\r\n\r\n/**\r\n * This interface represents the api-documenter.json file format.\r\n */\r\nexport interface IConfigFile {\r\n  /**\r\n   * Specifies the output target.\r\n   */\r\n  outputTarget: 'docfx' | 'markdown';\r\n\r\n  /**\r\n   * Specifies what type of newlines API Documenter should use when writing output files.\r\n   *\r\n   * @remarks\r\n   * By default, the output files will be written with Windows-style newlines.\r\n   * To use POSIX-style newlines, specify \"lf\" instead.\r\n   * To use the OS's default newline kind, specify \"os\".\r\n   */\r\n  newlineKind?: 'crlf' | 'lf' | 'os';\r\n\r\n  /**\r\n   * This enables an experimental feature that will be officially released with the next major version\r\n   * of API Documenter.  It requires DocFX 2.46 or newer.  It enables documentation for namespaces and\r\n   * adds them to the table of contents.  This will also affect file layout as namespaced items will be nested\r\n   * under a directory for the namespace instead of just within the package.\r\n   *\r\n   * This setting currently only affects the 'docfx' output target.  It is equivalent to the `--new-docfx-namespaces`\r\n   * command-line parameter.\r\n   */\r\n  newDocfxNamespaces?: boolean;\r\n\r\n  /** {@inheritDoc IConfigPlugin} */\r\n  plugins?: IConfigPlugin[];\r\n\r\n  /** {@inheritDoc IConfigTableOfContents} */\r\n  tableOfContents?: IConfigTableOfContents;\r\n}\r\n"]}