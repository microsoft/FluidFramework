{"version":3,"file":"DocumenterConfig.js","sourceRoot":"","sources":["../../src/documenters/DocumenterConfig.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,6BAA6B;AAC7B,oEAAiF;AAGjF;;;;GAIG;AACH,MAAa,gBAAgB;IAgCzB,YAAoB,QAAgB,EAAE,UAAuB;QACzD,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC;QAC/B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAE7B,QAAQ,UAAU,CAAC,WAAW,EAAE;YAC5B,KAAK,IAAI;gBACL,IAAI,CAAC,WAAW,gBAAiB,CAAC;gBAClC,MAAM;YACV,KAAK,IAAI;gBACL,IAAI,CAAC,WAAW,uBAAwB,CAAC;gBACzC,MAAM;YACV;gBACI,IAAI,CAAC,WAAW,oBAAmB,CAAC;gBACpC,MAAM;SACb;QAED,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC;QAClC,IAAI,CAAC,wBAAwB,GAAG,UAAU,CAAC,wBAAwB,CAAC;IACxE,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,QAAQ,CAAC,cAAsB;QACzC,MAAM,UAAU,GAAgB,4BAAQ,CAAC,eAAe,CAAC,cAAc,EAAE,gBAAgB,CAAC,UAAU,CAAC,CAAC;QAEtG,OAAO,IAAI,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,UAAU,CAAC,CAAC;IAC1E,CAAC;;AAvCD;;GAEG;AACoB,2BAAU,GAAe,8BAAU,CAAC,QAAQ,CAC/D,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,4BAA4B,CAAC,CACtE,CAAC;AAEF;;GAEG;AACoB,yBAAQ,GAAW,qBAAqB,CAAC;AA9BpE,4CA4DC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport { JsonSchema, JsonFile, NewlineKind } from '@rushstack/node-core-library';\nimport { IConfigFile } from './IConfigFile';\n\n/**\n * Helper for loading the api-documenter.json file format.  Later when the schema is more mature,\n * this class will be used to represent the validated and normalized configuration, whereas `IConfigFile`\n * represents the raw JSON file structure.\n */\nexport class DocumenterConfig {\n    public readonly configFilePath: string;\n    public readonly configFile: IConfigFile;\n\n    /**\n     * Specifies what type of newlines API Documenter should use when writing output files.  By default, the output files\n     * will be written with Windows-style newlines.\n     */\n    public readonly newlineKind: NewlineKind;\n\n    /**\n     * Specifies a custom URI root in case the documentation links should be customized.\n     */\n    public uriRoot?: string;\n\n    /**\n     * Specifies how packages must start to be included, so non matching package names are excluded.\n     */\n    public onlyPackagesStartingWith?: string;\n\n    /**\n     * The JSON Schema for API Extractor config file (api-extractor.schema.json).\n     */\n    public static readonly jsonSchema: JsonSchema = JsonSchema.fromFile(\n        path.join(__dirname, '..', 'schemas', 'api-documenter.schema.json')\n    );\n\n    /**\n     * The config file name \"api-extractor.json\".\n     */\n    public static readonly FILENAME: string = 'api-documenter.json';\n\n    private constructor(filePath: string, configFile: IConfigFile) {\n        this.configFilePath = filePath;\n        this.configFile = configFile;\n\n        switch (configFile.newlineKind) {\n            case 'lf':\n                this.newlineKind = NewlineKind.Lf;\n                break;\n            case 'os':\n                this.newlineKind = NewlineKind.OsDefault;\n                break;\n            default:\n                this.newlineKind = NewlineKind.CrLf;\n                break;\n        }\n\n        this.uriRoot = configFile.uriRoot;\n        this.onlyPackagesStartingWith = configFile.onlyPackagesStartingWith;\n    }\n\n    /**\n     * Load and validate an api-documenter.json file.\n     */\n    public static loadFile(configFilePath: string): DocumenterConfig {\n        const configFile: IConfigFile = JsonFile.loadAndValidate(configFilePath, DocumenterConfig.jsonSchema);\n\n        return new DocumenterConfig(path.resolve(configFilePath), configFile);\n    }\n}\n"]}