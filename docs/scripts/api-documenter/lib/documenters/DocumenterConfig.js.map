{"version":3,"file":"DocumenterConfig.js","sourceRoot":"","sources":["../../src/documenters/DocumenterConfig.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,6BAA6B;AAC7B,oEAAiF;AAGjF;;;;GAIG;AACH,MAAa,gBAAgB;IAsB3B,YAAoB,QAAgB,EAAE,UAAuB;QAC3D,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC;QAC/B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAE7B,QAAQ,UAAU,CAAC,WAAW,EAAE;YAC9B,KAAK,IAAI;gBACP,IAAI,CAAC,WAAW,gBAAiB,CAAC;gBAClC,MAAM;YACR,KAAK,IAAI;gBACP,IAAI,CAAC,WAAW,uBAAwB,CAAC;gBACzC,MAAM;YACR;gBACE,IAAI,CAAC,WAAW,oBAAmB,CAAC;gBACpC,MAAM;SACT;IACH,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,QAAQ,CAAC,cAAsB;QAC3C,MAAM,UAAU,GAAgB,4BAAQ,CAAC,eAAe,CAAC,cAAc,EAAE,gBAAgB,CAAC,UAAU,CAAC,CAAC;QAEtG,OAAO,IAAI,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,UAAU,CAAC,CAAC;IACxE,CAAC;;AApCD;;GAEG;AACoB,2BAAU,GAAe,8BAAU,CAAC,QAAQ,CACjE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,4BAA4B,CAAC,CACpE,CAAC;AAEF;;GAEG;AACoB,yBAAQ,GAAW,qBAAqB,CAAC;AApBlE,4CA+CC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { JsonSchema, JsonFile, NewlineKind } from '@rushstack/node-core-library';\r\nimport { IConfigFile } from './IConfigFile';\r\n\r\n/**\r\n * Helper for loading the api-documenter.json file format.  Later when the schema is more mature,\r\n * this class will be used to represent the validated and normalized configuration, whereas `IConfigFile`\r\n * represents the raw JSON file structure.\r\n */\r\nexport class DocumenterConfig {\r\n  public readonly configFilePath: string;\r\n  public readonly configFile: IConfigFile;\r\n\r\n  /**\r\n   * Specifies what type of newlines API Documenter should use when writing output files.  By default, the output files\r\n   * will be written with Windows-style newlines.\r\n   */\r\n  public readonly newlineKind: NewlineKind;\r\n\r\n  /**\r\n   * The JSON Schema for API Extractor config file (api-extractor.schema.json).\r\n   */\r\n  public static readonly jsonSchema: JsonSchema = JsonSchema.fromFile(\r\n    path.join(__dirname, '..', 'schemas', 'api-documenter.schema.json')\r\n  );\r\n\r\n  /**\r\n   * The config file name \"api-extractor.json\".\r\n   */\r\n  public static readonly FILENAME: string = 'api-documenter.json';\r\n\r\n  private constructor(filePath: string, configFile: IConfigFile) {\r\n    this.configFilePath = filePath;\r\n    this.configFile = configFile;\r\n\r\n    switch (configFile.newlineKind) {\r\n      case 'lf':\r\n        this.newlineKind = NewlineKind.Lf;\r\n        break;\r\n      case 'os':\r\n        this.newlineKind = NewlineKind.OsDefault;\r\n        break;\r\n      default:\r\n        this.newlineKind = NewlineKind.CrLf;\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load and validate an api-documenter.json file.\r\n   */\r\n  public static loadFile(configFilePath: string): DocumenterConfig {\r\n    const configFile: IConfigFile = JsonFile.loadAndValidate(configFilePath, DocumenterConfig.jsonSchema);\r\n\r\n    return new DocumenterConfig(path.resolve(configFilePath), configFile);\r\n  }\r\n}\r\n"]}