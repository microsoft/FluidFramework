{"version":3,"file":"OfficeYamlDocumenter.js","sourceRoot":"","sources":["../../src/documenters/OfficeYamlDocumenter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\nimport * as path from 'path';\r\nimport yaml = require('js-yaml');\r\n\r\nimport { ApiModel } from '@microsoft/api-extractor-model';\r\nimport { Text, FileSystem } from '@rushstack/node-core-library';\r\n\r\nimport { IYamlTocItem } from '../yaml/IYamlTocFile';\r\nimport { IYamlItem } from '../yaml/IYamlApiFile';\r\nimport { YamlDocumenter } from './YamlDocumenter';\r\n\r\ninterface ISnippetsFile {\r\n  /**\r\n   * The keys are API names like \"Excel.Range.clear\".\r\n   * The values are TypeScript source code excerpts.\r\n   */\r\n  [apiName: string]: string[];\r\n}\r\n\r\n/**\r\n * Extends YamlDocumenter with some custom logic that is specific to Office Add-ins.\r\n */\r\nexport class OfficeYamlDocumenter extends YamlDocumenter {\r\n  private _snippets: ISnippetsFile;\r\n  private _snippetsAll: ISnippetsFile;\r\n\r\n  // Default API Set URL when no product match is found.\r\n  private _apiSetUrlDefault: string = '/office/dev/add-ins/reference/javascript-api-for-office';\r\n\r\n  // Hash set of API Set URLs based on product.\r\n  private _apiSetUrls: Record<string, string> = {\r\n    Excel: '/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets',\r\n    OneNote: '/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets',\r\n    Visio: '/office/dev/add-ins/reference/overview/visio-javascript-reference-overview',\r\n    Outlook: '/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets',\r\n    Word: '/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets'\r\n  };\r\n\r\n  public constructor(apiModel: ApiModel, inputFolder: string, newDocfxNamespaces?: boolean) {\r\n    super(apiModel, newDocfxNamespaces);\r\n\r\n    const snippetsFilePath: string = path.join(inputFolder, 'snippets.yaml');\r\n\r\n    console.log('Loading snippets from ' + snippetsFilePath);\r\n\r\n    const snippetsContent: string = FileSystem.readFile(snippetsFilePath);\r\n    this._snippets = yaml.load(snippetsContent, { filename: snippetsFilePath });\r\n    this._snippetsAll = yaml.load(snippetsContent, { filename: snippetsFilePath });\r\n  }\r\n\r\n  /** @override */\r\n  public generateFiles(outputFolder: string): void {\r\n    super.generateFiles(outputFolder);\r\n\r\n    // After we generate everything, check for any unused snippets\r\n    console.log();\r\n    for (const apiName of Object.keys(this._snippets)) {\r\n      console.error(colors.yellow('Warning: Unused snippet ' + apiName));\r\n    }\r\n  }\r\n\r\n  /** @override */\r\n  protected onGetTocRoot(): IYamlTocItem {\r\n    // override\r\n    return {\r\n      name: 'API reference',\r\n      href: '~/docs-ref-autogen/overview/office.md',\r\n      items: []\r\n    };\r\n  }\r\n\r\n  /** @override */\r\n  protected onCustomizeYamlItem(yamlItem: IYamlItem): void {\r\n    const nameWithoutPackage: string = yamlItem.uid.replace(/^[^.]+\\!/, '');\r\n    if (yamlItem.summary) {\r\n      yamlItem.summary = this._fixupApiSet(yamlItem.summary, yamlItem.uid);\r\n      yamlItem.summary = this._fixBoldAndItalics(yamlItem.summary);\r\n    }\r\n    if (yamlItem.remarks) {\r\n      yamlItem.remarks = this._fixupApiSet(yamlItem.remarks, yamlItem.uid);\r\n      yamlItem.remarks = this._fixBoldAndItalics(yamlItem.remarks);\r\n    }\r\n    if (yamlItem.syntax && yamlItem.syntax.parameters) {\r\n      yamlItem.syntax.parameters.forEach((part) => {\r\n        if (part.description) {\r\n          part.description = this._fixBoldAndItalics(part.description);\r\n        }\r\n      });\r\n    }\r\n\r\n    const snippets: string[] | undefined = this._snippetsAll[nameWithoutPackage];\r\n    if (snippets) {\r\n      delete this._snippets[nameWithoutPackage];\r\n      const snippetText: string = this._generateExampleSnippetText(snippets);\r\n      if (yamlItem.remarks) {\r\n        yamlItem.remarks += snippetText;\r\n      } else if (yamlItem.syntax && yamlItem.syntax.return) {\r\n        if (!yamlItem.syntax.return.description) {\r\n          yamlItem.syntax.return.description = '';\r\n        }\r\n        yamlItem.syntax.return.description += snippetText;\r\n      } else {\r\n        yamlItem.remarks = snippetText;\r\n      }\r\n    }\r\n  }\r\n\r\n  private _fixupApiSet(markup: string, uid: string): string {\r\n    // Search for a pattern such as this:\r\n    // \\[Api set: ExcelApi 1.1\\]\r\n    //\r\n    // Hyperlink it like this:\r\n    // \\[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \\]\r\n    markup = markup.replace(/Api/, 'API');\r\n    return markup.replace(/\\\\\\[(API set:[^\\]]+)\\\\\\]/, '\\\\[ [$1](' + this._getApiSetUrl(uid) + ') \\\\]');\r\n  }\r\n\r\n  // Gets the link to the API set based on product context. Seeks a case-insensitve match in the hash set.\r\n  private _getApiSetUrl(uid: string): string {\r\n    for (const key of Object.keys(this._apiSetUrls)) {\r\n      const regexp: RegExp = new RegExp(key, 'i');\r\n      if (regexp.test(uid)) {\r\n        return this._apiSetUrls[key];\r\n      }\r\n    }\r\n    return this._apiSetUrlDefault; // match not found.\r\n  }\r\n\r\n  private _fixBoldAndItalics(text: string): string {\r\n    return Text.replaceAll(text, '\\\\*', '*');\r\n  }\r\n\r\n  private _generateExampleSnippetText(snippets: string[]): string {\r\n    const text: string[] = ['\\n\\n#### Examples\\n'];\r\n    for (const snippet of snippets) {\r\n      if (snippet.search(/await/) === -1) {\r\n        text.push('```javascript');\r\n      } else {\r\n        text.push('```typescript');\r\n      }\r\n\r\n      text.push(snippet);\r\n      text.push('```');\r\n    }\r\n    return text.join('\\n');\r\n  }\r\n}\r\n"]}